dns-address01:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Address-TP/address01.md>.

    # Objective

    In order for the domain and its resources to be accessible,
    authoritative name servers must have addresses in the routable public
    addressing space.

    IANA is responsible for global coordination of the IP addressing system.
    Aside its address allocation activities, it maintains reserved address
    ranges for special uses. These ranges can be categorized into three
    types : [Special purpose IPv4
    addresses](https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xml),
    [Special purpose IPv6
    addresses](https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xml)
    and [Multicast reserved
    addresses](https://www.iana.org/assignments/multicast-addresses/multicast-addresses.xml).

    # Pass/fail criteria

    If one name server has one of its addresses matches a forbidden address
    block, the test fails. If all the name server addresses are outside
    these forbidden blocks, the test case succeeds.
  Errors:
  - ZM_DNS_ADDRESS01_FAILED
  Maturity: BETA
  Summary: Name server address must be globally routable

dns-address02:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Address-TP/address02.md>.

    # Objective

    Some anti-spam techniques use reverse DNS lookup to allow incoming
    traffic. In order to prevent name servers to be blocked or blacklisted,
    DNS administrators should publish PTR records associated to name server
    addresses.

    \[technical reference to be found\]

    # Pass/fail criteria

    If the test case succeeds, its result is a list of addresses with
    corresponding hostnames which are the result of the PTR queries
    performed. The result could be represented as a hash table where the
    keys are the IP addresses and the values their corresponding hostnames.
  Errors:
  - ZM_DNS_ADDRESS02_FAILED
  Maturity: BETA
  Summary: Reverse DNS entry exists for name server IP address

dns-address03:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Address-TP/address03.md>.

    # Objective

    Some anti-spam techniques use reverse DNS lookup to allow incoming
    traffic. In order to prevent name servers to be blocked or blacklisted,
    DNS administrators should publish PTR records associated with the name
    server addresses.

    Moreover, as mentioned in paragraph 2.1 of [RFC
    1912](https://datatracker.ietf.org/doc/html/rfc1912) when a PTR record
    exists, it must match the host name.

    # Pass/fail criteria

    Multiple addresses and multiple PTR records are allowed. The test
    succeeds if every name server address has one or more PTR records and
    one of these records matches the server name. If one address doesn't
    match, the whole test case fails.
  Errors:
  - ZM_DNS_ADDRESS03_FAILED
  Maturity: BETA
  Summary: Reverse DNS entry matches name server name

dns-connectivity01:
  Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
    see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity01.md>.\n\n#
    Objective\n\nUDP is the fundamental protocol to reach a general purpose name server\nhosting
    a zone, \"DNS servers MUST be able to service UDP \\[...\\]\" ([RFC\n1123](https://www.rfc-editor.org/rfc/rfc1123),
    section 6.1.3.2, page\n75), also restated in [RFC\n7766](https://www.rfc-editor.org/rfc/rfc7766#section-5),
    section 5.\n\nThis Test Case will verify if the name servers of *Child Zone* are\nreachable
    over UDP. The name servers tested are both those in the\ndelegation of *Child
    Zone* and those in the NS records in the *Child\nZone* itself.\n\nMost Zonemaster
    Test Cases will query the name servers in the delegation\nor the name servers
    appointed by the NS records in the zone for the NS\nor SOA record, or both. It
    is crucial that problems are reported, but\ninstead of letting several Test Cases
    report the same problems found,\nmost Test Cases assume that this test case is
    run. Only this Test Case\nwill report problems found in the following areas over
    UDP:\n\n-   Name Server not responding to a query without EDNS.\n-   Name Server
    not including SOA record of *Child Zone* in the answer\n    section in the response
    on a SOA query for *Child Zone*.\n-   Name Server not including NS record of *Child
    Zone* in the answer\n    section in the response on an NS query for *Child Zone*.\n-
    \  Name Server not setting the AA flag in a response with SOA or NS in\n    answer
    section.\n-   Name Server responding with unexpected [RCODE\n    Name](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6)\n
    \   (any except \"NoError\") on query for SOA or NS for *Child Zone*.\n\nIn addition,
    this test case will output a message if transport over IPv4\nor IPv6 has been
    disabled.\n\n# Summary\n\n  ----------------------------------------------------------------------------------------------------------------------\n
    \ Message Tag                                Level        Arguments         Message
    ID for message tag\n  ------------------------------------------ ------------
    ----------------- --------------------------------------------\n  `ZM_CN01_IPV4_DISABLED`
    \                   NOTICE       ns_list           IPv4 is disabled. No DNS queries
    are sent to\n                                                                            these
    name servers: \"{ns_list}\".\n\n  `ZM_CN01_IPV6_DISABLED`                    NOTICE
    \      ns_list           IPv6 is disabled. No DNS queries are sent to\n                                                                            these
    name servers: \"{ns_list}\".\n\n  `ZM_CN01_MISSING_NS_RECORD_UDP`            `ERROR`
    \     ns                Nameserver {ns} reponds to a NS query with\n                                             (changed
    \                      no NS records in the answer section over\n                                             from
    \                          UDP.\n                                             `WARNING`)
    \                    \n\n  `ZM_CN01_MISSING_SOA_RECORD_UDP`           `ERROR`
    \     ns                Nameserver {ns} reponds to a SOA query with\n                                             (changed
    \                      no SOA records in the answer section over\n                                             from
    \                          UDP.\n                                             `WARNING`)
    \                    \n\n  `ZM_CN01_NO_RESPONSE_NS_QUERY_UDP`         `ERROR`
    \     ns                Nameserver {ns} does not respond to NS\n                                             (changed
    \                      queries over UDP.\n                                             from
    \                          \n                                             `WARNING`)
    \                    \n\n  `ZM_CN01_NO_RESPONSE_SOA_QUERY_UDP`        `ERROR`
    \     ns                Nameserver {ns} does not respond to SOA\n                                             (changed
    \                      queries over UDP.\n                                             from
    \                          \n                                             `WARNING`)
    \                    \n\n  `ZM_CN01_NO_RESPONSE_UDP`                  `ERROR`
    \     ns                Nameserver {ns} does not respond to any\n                                             (changed
    \                      queries over UDP.\n                                             from
    \                          \n                                             `WARNING`)
    \                    \n\n  `ZM_CN01_NS_RECORD_NOT_AA_UDP`             `ERROR`
    \     ns                Nameserver {ns} does not give an\n                                             (changed
    \                      authoritative response on an NS query over\n                                             from
    \                          UDP.\n                                             `WARNING`)
    \                    \n\n  `ZM_CN01_SOA_RECORD_NOT_AA_UDP`            `ERROR`
    \     ns                Nameserver {ns} does not give an\n                                             (changed
    \                      authoritative response on an SOA query over\n                                             from
    \                          UDP.\n                                             `WARNING`)
    \                    \n\n  `ZM_CN01_UNEXPECTED_RCODE_NS_QUERY_UDP`    `ERROR`
    \     ns, rcode         Nameserver {ns} responds with an unexpected\n                                             (changed
    \                      RCODE ({rcode}) on an NS query over UDP.\n                                             from
    \                          \n                                             `WARNING`)
    \                    \n\n  `ZM_CN01_UNEXPECTED_RCODE_SOA_QUERY_UDP`   `ERROR`
    \     ns, rcode         Nameserver {ns} responds with an unexpected\n                                             (changed
    \                      RCODE ({rcode}) on an SOA query over UDP.\n                                             from
    \                          \n                                             `WARNING`)
    \                    \n\n  `ZM_CN01_WRONG_NS_RECORD_UDP`              `ERROR`
    \     ns, domain_found, Nameserver {ns} responds with a wrong owner\n                                             (changed
    \    domain_expected   name ({domain_found} instead of\n                                             from
    \                          {domain_expected}) on NS queries over UDP.\n                                             `WARNING`)
    \                    \n\n  `ZM_CN01_WRONG_SOA_RECORD_UDP`             `ERROR`
    \     ns, domain_found, Nameserver {ns} responds with a wrong owner\n                                             (changed
    \    domain_expected   name ({domain_found} instead of\n                                             from
    \                          {domain_expected}) on SOA queries over UDP.\n                                             `WARNING`)
    \                    \n  ----------------------------------------------------------------------------------------------------------------------\n\nThe
    value in the Level column is the default severity level of the\nmessage. The severity
    level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
    Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
    argument names in the Arguments column lists the arguments used in\nthe message.
    The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
    Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
    least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
    *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
    Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
    but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
    no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
    or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
    Case is \"pass\".\n"
  Errors:
  - ZM_CN01_IPV4_DISABLED
  - ZM_CN01_SOA_RECORD_NOT_AA_UDP
  - ZM_CN01_NO_RESPONSE_NS_QUERY_UDP
  - ZM_CN01_WRONG_SOA_RECORD_UDP
  - ZM_CN01_MISSING_NS_RECORD_UDP
  - ZM_CN01_UNEXPECTED_RCODE_SOA_QUERY_UDP
  - ZM_CN01_NO_RESPONSE_UDP
  - ZM_CN01_UNEXPECTED_RCODE_NS_QUERY_UDP
  - ZM_CN01_IPV6_DISABLED
  - ZM_CN01_WRONG_NS_RECORD_UDP
  - ZM_CN01_NO_RESPONSE_SOA_QUERY_UDP
  - ZM_CN01_MISSING_SOA_RECORD_UDP
  - ZM_CN01_NS_RECORD_NOT_AA_UDP
  Maturity: BETA
  Summary: UDP connectivity to name servers

dns-connectivity02:
  Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
    see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity02.md>.\n\n#
    Objective\n\nTCP is a protocol to reach a general purpose name server hosting
    a zone,\n\"All general-purpose DNS implementations MUST support \\[...\\] TCP\ntransport\"
    ([RFC\n7766](https://www.rfc-editor.org/rfc/rfc7766#section-5), section 5).\n\nThis
    Test Case will verify if the name servers of *Child Zone* are\nreachable over
    TCP. The name servers tested are both those in the\ndelegation of *Child Zone*
    and those in the NS records in the *Child\nZone* itself.\n\nThis Test Case will
    mimic the tests done by\n[Connectivity01](connectivity01.md), but over TCP instead:\n\n-
    \  Name Server responding to a query.\n-   Name Server including SOA record of
    *Child Zone* in the answer\n    section in the response on a SOA query for *Child
    Zone*.\n-   Name Server including NS record of *Child Zone* in the answer\n    section
    in the response on an NS query for *Child Zone*.\n-   Name Server setting the
    AA flag in a response with SOA or NS in\n    answer section.\n-   Name Server
    responding with expected [RCODE\n    Name](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6)\n
    \   (\"NoError\") on query for SOA or NS for *Child Zone*.\n\n# Summary\n\n  ---------------------------------------------------------------------------------------------------------------------\n
    \ Message Tag                                Level        Arguments         Message
    ID for message tag\n  ------------------------------------------ ------------
    ----------------- -------------------------------------------\n  `ZM_CN02_MISSING_NS_RECORD_TCP`
    \           `ERROR`      ns                Nameserver {ns} reponds to a NS query
    with\n                                             (changed                       no
    NS records in the answer section over\n                                             from
    \                          TCP.\n                                             `WARNING`)
    \                    \n\n  `ZM_CN02_MISSING_SOA_RECORD_TCP`           `ERROR`
    \     ns                Nameserver {ns} reponds to a SOA query with\n                                             (changed
    \                      no SOA records in the answer section over\n                                             from
    \                          TCP.\n                                             `WARNING`)
    \                    \n\n  `ZM_CN02_NO_RESPONSE_NS_QUERY_TCP`         `ERROR`
    \     ns                Nameserver {ns} does not respond to NS\n                                             (changed
    \                      queries over TCP.\n                                             from
    \                          \n                                             `WARNING`)
    \                    \n\n  `ZM_CN02_NO_RESPONSE_SOA_QUERY_TCP`        `ERROR`
    \     ns                Nameserver {ns} does not respond to SOA\n                                             (changed
    \                      queries over TCP.\n                                             from
    \                          \n                                             `WARNING`)
    \                    \n\n  `ZM_CN02_NO_RESPONSE_TCP`                  `ERROR`
    \     ns                Nameserver {ns} does not respond to any\n                                             (changed
    \                      queries over TCP.\n                                             from
    \                          \n                                             `WARNING`)
    \                    \n\n  `ZM_CN02_NS_RECORD_NOT_AA_TCP`             `ERROR`
    \     ns                Nameserver {ns} does not give an\n                                             (changed
    \                      authoritative response on an NS query over\n                                             from
    \                          TCP.\n                                             `WARNING`)
    \                    \n\n  `ZM_CN02_SOA_RECORD_NOT_AA_TCP`            `ERROR`
    \     ns                Nameserver {ns} does not give an\n                                             (changed
    \                      authoritative response on an SOA query over\n                                             from
    \                          TCP.\n                                             `WARNING`)
    \                    \n\n  `ZM_CN02_UNEXPECTED_RCODE_NS_QUERY_TCP`    `ERROR`
    \     ns, rcode         Nameserver {ns} responds with an unexpected\n                                             (changed
    \                      RCODE ({rcode}) on an NS query over TCP.\n                                             from
    \                          \n                                             `WARNING`)
    \                    \n\n  `ZM_CN02_UNEXPECTED_RCODE_SOA_QUERY_TCP`   `ERROR`
    \     ns, rcode         Nameserver {ns} responds with an unexpected\n                                             (changed
    \                      RCODE ({rcode}) on an SOA query over TCP.\n                                             from
    \                          \n                                             `WARNING`)
    \                    \n\n  `ZM_CN02_WRONG_NS_RECORD_TCP`              `ERROR`
    \     ns, ,             Nameserver {ns} responds with a wrong owner\n                                             (changed
    \    domain_found,     name ({domain_found} instead of\n                                             from
    \        domain_expected   {domain_expected}) on NS queries over TCP.\n                                             `WARNING`)
    \                    \n\n  `ZM_CN02_WRONG_SOA_RECORD_TCP`             `ERROR`
    \     ns, ,             Nameserver {ns} responds with a wrong owner\n                                             (changed
    \    domain_found,     name ({domain_found} instead of\n                                             from
    \        domain_expected   {domain_expected}) on SOA queries over TCP.\n                                             `WARNING`)
    \                    \n  ---------------------------------------------------------------------------------------------------------------------\n\nThe
    value in the Level column is the default severity level of the\nmessage. The severity
    level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
    Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
    argument names in the Arguments column lists the arguments used in\nthe message.
    The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
    Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
    least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
    *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
    Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
    but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
    no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
    or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
    Case is \"pass\".\n"
  Errors:
  - ZM_CN02_MISSING_NS_RECORD_TCP
  - ZM_CN02_SOA_RECORD_NOT_AA_TCP
  - ZM_CN02_NO_RESPONSE_TCP
  - ZM_CN02_WRONG_SOA_RECORD_TCP
  - ZM_CN02_NO_RESPONSE_NS_QUERY_TCP
  - ZM_CN02_UNEXPECTED_RCODE_SOA_QUERY_TCP
  - ZM_CN02_NS_RECORD_NOT_AA_TCP
  - ZM_CN02_UNEXPECTED_RCODE_NS_QUERY_TCP
  - ZM_CN02_MISSING_SOA_RECORD_TCP
  - ZM_CN02_WRONG_NS_RECORD_TCP
  - ZM_CN02_NO_RESPONSE_SOA_QUERY_TCP
  Maturity: BETA
  Summary: TCP connectivity to name servers

dns-connectivity03:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity03.md>.

    # Objective

    The objective in this test is to verify that all IP addresses of the
    domain's authoritative name servers are announced from different ASNs
    (autonomous system number). See [RFC
    1930](https://datatracker.ietf.org/doc/html/rfc1930) and
    [Wikipedia](https://en.wikipedia.org/wiki/Autonomous_system_(Internet))
    for an explanation of AS (autonomous system).

    This test is done separately on IPv4 and IPv6, and both must match the
    criterion.

    [RFC 2182](https://datatracker.ietf.org/doc/html/rfc2182#section-3.1),
    section 3.1, clearly specifies that distinct authoritative name servers
    for a child domain should be placed in different topological and
    geographical locations. The objective is to minimise the likelihood of a
    single failure disabling all of them.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level ERROR or CRITICAL.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level WARNING, but no message with severity
    level ERROR or CRITICAL.

    In other cases the outcome of this Test Case is "pass".

      Message                   Default severity level
      ------------------------- ----------------------------------
      `ZM_EMPTY_ASN_SET`        ERROR
      `ZM_ERROR_ASN_DATABASE`   ERROR
      `ZM_IPV4_ONE_ASN`         `ERROR` (changed from `WARNING`)
      `ZM_IPV4_SAME_ASN`        NOTICE
      `ZM_IPV4_DIFFERENT_ASN`   INFO
      `ZM_IPV6_ONE_ASN`         `ERROR` (changed from `WARNING`)
      `ZM_IPV6_SAME_ASN`        NOTICE
      `ZM_IPV6_DIFFERENT_ASN`   INFO
  Errors:
  - ZM_EMPTY_ASN_SET
  - ZM_IPV4_DIFFERENT_ASN
  - ZM_IPV4_ONE_ASN
  - ZM_IPV6_SAME_ASN
  - ZM_ERROR_ASN_DATABASE
  - ZM_IPV6_ONE_ASN
  - ZM_IPV4_SAME_ASN
  - ZM_IPV6_DIFFERENT_ASN
  Maturity: BETA
  Summary: AS Diversity

dns-connectivity04:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity04.md>.

    # Objective

    The objective in this Test Case is to verify that all IP addresses of
    the domain's authoritative name servers are announced from different IP
    prefixes.

    This Test is done separately on IPv4 and IPv6, and both must match the
    criterion.

    [RFC 2182, section
    3.1](https://datatracker.ietf.org/doc/html/rfc2182#section-3.1), clearly
    specifies that distinct authoritative name servers for a child domain
    should be placed in different topological and geographical locations.
    The objective is to minimise the likelihood of a single failure
    disabling all of them.

    # Summary

      --------------------------------------------------------------------------------------------------
      Message Tag                       Level     Arguments    Message ID for message tag
      --------------------------------- --------- ------------ -----------------------------------------
      `ZM_CN04_EMPTY_PREFIX_SET`        ERROR     ns_ip        Prefix database returned no information
                                                               for IP address {ns_ip}.

      `ZM_CN04_ERROR_PREFIX_DATABASE`   ERROR     ns_ip        Prefix database error. No data to analyze
                                                               for IP address {ns_ip}.

      `ZM_CN04_IPV4_SAME_PREFIX`        WARNING   ns_list,     The following name server(s) are
                                                  ip_prefix    announced in the same IPv4 prefix
                                                               ({ip_prefix}): "{ns_list}"

      `ZM_CN04_IPV4_DIFFERENT_PREFIX`   INFO      ns_list      The following name server(s) are
                                                               announced in unique IPv4 prefix(es):
                                                               "{ns_list}"

      `ZM_CN04_IPV6_SAME_PREFIX`        WARNING   ns_list,     The following name server(s) are
                                                  ip_prefix    announced in the same IPv6 prefix
                                                               ({ip_prefix}): "{ns_list}"

      `ZM_CN04_IPV6_DIFFERENT_PREFIX`   INFO      ns_list      The following name server(s) are
                                                               announced in unique IPv6 prefix(es):
                                                               "{ns_list}"
      --------------------------------------------------------------------------------------------------

    The value in the Level column is the default severity level of the
    message. The severity level can be changed in the [Zonemaster-Engine
    Profile](../../../configuration/profiles.md). Also see the [Severity
    Level Definitions](../SeverityLevelDefinitions.md) document.

    The argument names in the Arguments column lists the arguments used in
    the message. The argument names are defined in the [Argument
    List](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
    or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level
    *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
    severity level *ERROR* or *CRITICAL*.

    In other cases, no message or only messages with severity level
    *[INFO](../SeverityLevelDefinitions.md#info)* or
    *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
    Test Case is "pass".
  Errors:
  - ZM_CN04_EMPTY_PREFIX_SET
  - ZM_CN04_IPV6_SAME_PREFIX
  - ZM_CN04_IPV4_SAME_PREFIX
  - ZM_CN04_IPV6_DIFFERENT_PREFIX
  - ZM_CN04_ERROR_PREFIX_DATABASE
  - ZM_CN04_IPV4_DIFFERENT_PREFIX
  Maturity: BETA
  Summary: IP Prefix Diversity

dns-consistency02:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency02.md>.

    # Objective

    All authoritative name servers must serve the same SOA record for the
    tested domain (section 4.2.1 of [RFC
    1034](https://datatracker.ietf.org/doc/html/rfc1034)). As per section
    3.3.13 of [RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035), the
    RNAME field in the SOA RDATA refers to the administrative contact. An
    inconsistency in the administrative contact for the domain might result
    in operational failures being reported to different persons.

    The objective of this test is to verify that the administrative contact
    is consistent between different authoritative name servers.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    In other cases the outcome of this Test Case is "pass".

      ----------------------------------------------------------------------
      Message                         Default severity level (if message is
                                      emitted)
      ------------------------------- --------------------------------------
      `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)

      `ZM_NO_RESPONSE_SOA_QUERY`      `ERROR` (changed from `DEBUG`)

      `ZM_ONE_SOA_RNAME`              INFO

      `ZM_MULTIPLE_SOA_RNAMES`        `ERROR` (changed from `NOTICE`)
      ----------------------------------------------------------------------
  Errors:
  - ZM_NO_RESPONSE
  - ZM_ONE_SOA_RNAME
  - ZM_NO_RESPONSE_SOA_QUERY
  - ZM_MULTIPLE_SOA_RNAMES
  Maturity: BETA
  Summary: SOA RNAME consistency

dns-consistency03:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency03.md>.

    # Objective

    All SOA record timer fields must be consistent across all authoritative
    name servers. An inconsistency in these fields might result in
    operational inconsistencies for the designated zone.

    There are other test cases that provide consistency tests for the other
    SOA fields:

    -   [CONSISTENCY01](consistency01.md) (SOA Serial)
    -   [CONSISTENCY02](consistency02.md) (RNAME)
    -   [CONSISTENCY06](consistency06.md) (MNAME)

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    In other cases the outcome of this Test Case is "pass".

      ---------------------------------------------------------------------------
      Message                                Default severity level (if message
                                             is emitted)
      -------------------------------------- ------------------------------------
      `ZM_NO_RESPONSE`                       `ERROR` (changed from `DEBUG`)

      `ZM_NO_RESPONSE_SOA_QUERY`             `ERROR` (changed from `DEBUG`)

      `ZM_ONE_SOA_TIME_PARAMETER_SET`        INFO

      `ZM_MULTIPLE_SOA_TIME_PARAMETER_SET`   `ERROR` (changed from `NOTICE`)
      ---------------------------------------------------------------------------
  Errors:
  - ZM_NO_RESPONSE
  - ZM_ONE_SOA_TIME_PARAMETER_SET
  - ZM_NO_RESPONSE_SOA_QUERY
  - ZM_MULTIPLE_SOA_TIME_PARAMETER_SET
  Maturity: BETA
  Summary: SOA timers consistency

dns-consistency04:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency04.md>.

    # Objective

    All authoritative name servers must serve the same NS record set for the
    tested domain, child zone ([RFC
    1034](https://datatracker.ietf.org/doc/html/rfc1034), section 4.2.2).
    Any inconsistencies in NS records described in [RFC
    1035](https://datatracker.ietf.org/doc/html/rfc1035), section 3.3.11,
    might result in operational failures.

    The objective of this test is to verify that the NS records are
    consistent between all authoritative name servers of the child zone.

    Two NS RR sets are considered to be equal if both sets have the same
    number of NS records, and for each NS record in one of the sets there is
    exactly one NS record with identical owner name, class, TTL and RDATA in
    the other NS set.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    In other cases the outcome of this Test Case is "pass".

      ----------------------------------------------------------------------
      Message                         Default severity level (if message is
                                      emitted)
      ------------------------------- --------------------------------------
      `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)

      `ZM_NO_RESPONSE_NS_QUERY`       `ERROR` (changed from `DEBUG`)

      `ZM_ONE_NS_SET`                 INFO

      `ZM_MULTIPLE_NS_SET`            `ERROR` (changed from `NOTICE`)
      ----------------------------------------------------------------------
  Errors:
  - ZM_NO_RESPONSE
  - ZM_ONE_NS_SET
  - ZM_NO_RESPONSE_NS_QUERY
  - ZM_MULTIPLE_NS_SET
  Maturity: BETA
  Summary: Name server NS consistency

dns-consistency05:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency05.md>.

    # Objective

    For name servers that have IP addresses listed as glue, the IP addresses
    must match the authoritative A and AAAA records for that host. This is
    an IANA [name server
    requirement](https://www.iana.org/help/nameserver-requirements).

    The objective of this test is to verify that the [glue
    records](#terminology) in the delegation are consistent with
    authoritative data.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    The outcome of this Test case is "pass" in all other cases.

      --------------------------------------------------------------------------
      Message                               Default severity level (when message
                                            is outputted)
      ------------------------------------- ------------------------------------
      `ZM_CHILD_NS_FAILED`                  `ERROR` (changed from `DEBUG`)

      `ZM_NO_RESPONSE`                      `ERROR` (changed from `DEBUG`)

      `ZM_CHILD_ZONE_LAME`                  `ERROR` (changed from `ERROR`)

      `ZM_IN_BAILIWICK_ADDR_MISMATCH`       `ERROR` (changed from `ERROR`)

      `ZM_OUT_OF_BAILIWICK_ADDR_MISMATCH`   `ERROR` (changed from `ERROR`)

      `ZM_EXTRA_ADDRESS_CHILD`              `ERROR` (changed from `NOTICE`)

      `ZM_ADDRESSES_MATCH`                  INFO
      --------------------------------------------------------------------------
  Errors:
  - ZM_CHILD_NS_FAILED
  - ZM_OUT_OF_BAILIWICK_ADDR_MISMATCH
  - ZM_CHILD_ZONE_LAME
  - ZM_ADDRESSES_MATCH
  - ZM_NO_RESPONSE
  - ZM_EXTRA_ADDRESS_CHILD
  - ZM_IN_BAILIWICK_ADDR_MISMATCH
  Maturity: BETA
  Summary: Consistency between glue and authoritative data

dns-consistency06:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency06.md>.

    # Objective

    All authoritative name servers must serve the same SOA record (section
    4.2.1) of [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1035) for
    the tested domain. As per section 3.3.13 of [RFC
    1035](https://datatracker.ietf.org/doc/html/rfc1035) the MNAME field in
    the SOA RDATA refers to the name of "the name server that was the
    original or primary source of data for this zone". Inconsistency in
    MNAME of the domain might result in operational failures for
    applications that uses MNAME.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    In other cases the outcome of this Test Case is "pass".

      ----------------------------------------------------------------------
      Message                         Default severity level (if message is
                                      emitted)
      ------------------------------- --------------------------------------
      `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)

      `ZM_NO_RESPONSE_SOA_QUERY`      `ERROR` (changed from `DEBUG`)

      `ZM_ONE_SOA_MNAME`              INFO

      `ZM_MULTIPLE_SOA_MNAMES`        `ERROR` (changed from `NOTICE`)
      ----------------------------------------------------------------------
  Errors:
  - ZM_NO_RESPONSE
  - ZM_ONE_SOA_MNAME
  - ZM_NO_RESPONSE_SOA_QUERY
  - ZM_MULTIPLE_SOA_MNAMES
  Maturity: BETA
  Summary: SOA MNAME consistency

dns-delegation01:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation01.md>.

    # Objective

    Section 4.1 of [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034)
    specifies that there must be a minimum of two name servers for a domain.
    This test is done to verify this condition.

    The RFC ([RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034))
    predates IPv6. Since IPv4 and IPv6 work as separate networks, this test
    case has been extended to test for two name servers that resolve into
    IPv4 addresses and IPv6 addresses respectively.

    Both [RFC 3901](https://datatracker.ietf.org/doc/html/rfc3901) (section
    3) and [RFC 4472](https://datatracker.ietf.org/doc/html/rfc4472)
    (section 1.3) states that a domain (zone) should be available over IPv4
    for the time being. Therefore, it is by the default level in this test
    case considered to be more problematic not being available over IPv4
    than not being available over IPv6.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    Else the outcome of this Test Case is "pass".

      Message                         Default severity level
      ------------------------------- ----------------------------------
      `ZM_ENOUGH_IPV4_NS_CHILD`       INFO
      `ZM_ENOUGH_IPV4_NS_DEL`         INFO
      `ZM_ENOUGH_IPV6_NS_CHILD`       INFO
      `ZM_ENOUGH_IPV6_NS_DEL`         INFO
      `ZM_ENOUGH_NS_CHILD`            INFO
      `ZM_ENOUGH_NS_DEL`              INFO
      `ZM_NOT_ENOUGH_IPV4_NS_CHILD`   ERROR
      `ZM_NOT_ENOUGH_IPV4_NS_DEL`     ERROR
      `ZM_NOT_ENOUGH_IPV6_NS_CHILD`   ERROR
      `ZM_NOT_ENOUGH_IPV6_NS_DEL`     ERROR
      `ZM_NOT_ENOUGH_NS_CHILD`        ERROR
      `ZM_NOT_ENOUGH_NS_DEL`          ERROR
      `ZM_NO_IPV4_NS_CHILD`           `ERROR` (changed from `WARNING`)
      `ZM_NO_IPV4_NS_DEL`             `ERROR` (changed from `WARNING`)
      `ZM_NO_IPV6_NS_CHILD`           `ERROR` (changed from `NOTICE`)
      `ZM_NO_IPV6_NS_DEL`             `ERROR` (changed from `NOTICE`)
  Errors:
  - ZM_ENOUGH_IPV4_NS_CHILD
  - ZM_NOT_ENOUGH_IPV6_NS_CHILD
  - ZM_ENOUGH_NS_CHILD
  - ZM_NO_IPV4_NS_CHILD
  - ZM_ENOUGH_IPV6_NS_CHILD
  - ZM_NOT_ENOUGH_NS_CHILD
  - ZM_NOT_ENOUGH_IPV4_NS_CHILD
  - ZM_NO_IPV6_NS_CHILD
  - ZM_ENOUGH_IPV4_NS_DEL
  - ZM_NOT_ENOUGH_IPV6_NS_DEL
  - ZM_ENOUGH_NS_DEL
  - ZM_NO_IPV4_NS_DEL
  - ZM_ENOUGH_IPV6_NS_DEL
  - ZM_NOT_ENOUGH_NS_DEL
  - ZM_NOT_ENOUGH_IPV4_NS_DEL
  - ZM_NO_IPV6_NS_DEL
  Maturity: BETA
  Summary: Minimum number of name servers

dns-delegation02:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation02.md>.

    # Objective

    If the domain's name servers use several different names, they can all
    be using the same IP address. This may be due to a configuration error,
    or a workaround for a certain policy restriction. This test case checks
    that the name servers used do not reuse the same IP addresses.

    Section 4.1 of [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034)
    says at least two name servers must be used for a delegation.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    In other cases the outcome of this Test Case is "pass".

      Message                     Default severity level (if message is emitted)
      --------------------------- ------------------------------------------------
      `ZM_DEL_NS_SAME_IP`         ERROR
      `ZM_CHILD_NS_SAME_IP`       ERROR
      `ZM_DEL_DISTINCT_NS_IP`     INFO
      `ZM_CHILD_DISTINCT_NS_IP`   INFO
  Errors:
  - ZM_DEL_NS_SAME_IP
  - ZM_DEL_DISTINCT_NS_IP
  - ZM_CHILD_NS_SAME_IP
  - ZM_CHILD_DISTINCT_NS_IP
  Maturity: BETA
  Summary: Name servers must have distinct IP addresses

dns-delegation03:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation03.md>.

    # Objective

    The Domain Name System defaults to using UDP for queries and answers
    with a DNS payload limit of 512 octets (bytes). Larger replies cause an
    initial truncation indication leading to a subsequent handling via TCP
    with substantially higher overhead. EDNS0 is used to allow for larger
    UDP responses thus reducing the need for use of TCP.

    But [IANA](https://www.iana.org/help/nameserver-requirements) still
    maintains that referrals from the parent zone name servers must fit into
    a non-EDNS0 UDP DNS packet.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    In other cases the outcome of this Test Case is "pass".

      -----------------------------------------------------------------------
      Message                            Default severity level of message
      ---------------------------------- ------------------------------------
      `ZM_REFERRAL_SIZE_TOO_LARGE`       WARNING

      `ZM_REFERRAL_SIZE_OK`              INFO
      -----------------------------------------------------------------------
  Errors:
  - ZM_REFERRAL_SIZE_TOO_LARGE
  - ZM_REFERRAL_SIZE_OK
  Maturity: BETA
  Summary: No truncation of referrals

dns-delegation04:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation04.md>.

    # Objective

    Subsection 6.1 of [RFC
    2181](https://datatracker.ietf.org/doc/html/rfc2181) specifies that the
    nameservers must answer authoritatively for the domain. Answers to
    queries to the name servers for the designated zone must have the "AA"
    bit set.

    # Pass/fail criteria

    If all the name servers answer with the AA-bit set, then the test
    succeeds.
  Errors:
  - ZM_DNS_DELEGATION04_FAILED
  Maturity: BETA
  Summary: Name server is authoritative

dns-delegation05:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation05.md>.

    # Objective

    Name servers for a zone are defined in NS records. An NS record points
    at a name, i.e. the RDATA for an NS record is a domain name. That name
    is the name of the name server. [RFC
    2181](https://datatracker.ietf.org/doc/html/rfc2181#section-10.3),
    section 10.3, states that the name of the name server must not itself
    point at a CNAME.

    The objective of this test is to verify that name servers of the tested
    domain (zone) do not point at CNAME records.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    In other cases the outcome of this Test Case is "pass".

      Message                 Default severity level
      ----------------------- --------------------------------
      `ZM_NO_RESPONSE`        `ERROR` (changed from `DEBUG`)
      `ZM_UNEXPECTED_RCODE`   WARNING
      `ZM_NS_IS_CNAME`        ERROR
      `ZM_NO_NS_CNAME`        INFO
  Errors:
  - ZM_NO_RESPONSE
  - ZM_NS_IS_CNAME
  - ZM_UNEXPECTED_RCODE
  - ZM_NO_NS_CNAME
  Maturity: BETA
  Summary: Name server must not point at CNAME alias

dns-delegation07:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation07.md>.

    # Objective

    If the list of name servers for a domain obtained from its parent are
    not found in its its child zone, then it leads to an inconsistency
    (section 2.3 of
    [RIPE-114](https://www.ripe.net/publications/docs/ripe-114))

    # Pass/fail criteria

    If the set of glue name records obtained are found in the list of name
    servers obtained from the child also, then the test succeeds
  Errors:
  - ZM_DNS_DELEGATION07_FAILED
  Maturity: BETA
  Summary: Parent glue name records present in child

dns-nameserver01:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver01.md>.

    # Objective

    To ensure consistency in DNS, an authoritative name server should not be
    configured to do recursive lookups. Also, open recursive resolvers are
    considered bad internet practice due to their capability of assisting in
    large scale DDoS attacks. The introduction to [RFC
    5358](https://datatracker.ietf.org/doc/html/rfc5358) elaborates on
    mixing recursor and authoritative functionality, and the issue is
    further elaborated by [D.J.
    Bernstein](https://cr.yp.to/djbdns/separation.html).

    Section 2.5 of [RFC 2870](https://datatracker.ietf.org/doc/html/rfc2870)
    have very specific requirement on disabling recursion functionality on
    root name servers.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    In other cases the outcome of this Test Case is "pass".

      ----------------------------------------------------------------------
      Message                         Default severity level (if message is
                                      emitted)
      ------------------------------- --------------------------------------
      `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)

      `ZM_IS_A_RECURSOR`              ERROR

      `ZM_NO_RECURSOR`                INFO
      ----------------------------------------------------------------------
  Errors:
  - ZM_NO_RESPONSE
  - ZM_NO_RECURSOR
  - ZM_IS_A_RECURSOR
  Maturity: BETA
  Summary: A name server should not be a recursor

dns-nameserver02:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver02.md>.

    # Objective

    EDNS(0) is a mechanism to announce capabilities of a DNS implementation,
    and is now basically required by any new functionality in DNS such as
    DNSSEC. EDNS(0) is standardized in [RFC
    6891](https://datatracker.ietf.org/doc/html/rfc6891).

    This test case checks that all name servers has the capability to do
    EDNS(0) or if not, correctly replies to queries containing EDNS (OPT
    record).

    Servers not supporting EDNS(0) must return FORMERR ([RFC 6891, section
    7](https://datatracker.ietf.org/doc/html/rfc6891#section-7)):

    > Responders that choose not to implement the protocol extensions
    > defined in this document MUST respond with a return code (RCODE) of
    > FORMERR to messages containing an OPT record in the additional section
    > and MUST NOT include an OPT record in the response.

    Servers supporting EDNS(0) must reply with EDNS(0) ([RFC 6891, section
    6.1.1](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.1)):

    > If an OPT record is present in a received request, compliant
    > responders MUST include an OPT record in their respective responses.

    To eliminating the risk of falsely classifying the server as not
    supporting EDNS due e.g. firewall issues, the UDP buffer size is set to
    512 bytes (octets).

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    The outcome of this Test case is "pass" in all other cases.

      -----------------------------------------------------------------------
      Message                            Default severity level (when message
                                         is outputted)
      ---------------------------------- ------------------------------------
      `ZM_NO_RESPONSE`                   `ERROR` (changed from `DEBUG`)

      `ZM_NO_EDNS_SUPPORT`               `ERROR` (changed from `WARNING`)

      `ZM_BREAKS_ON_EDNS`                ERROR

      `ZM_EDNS_RESPONSE_WITHOUT_EDNS`    ERROR

      `ZM_EDNS_VERSION_ERROR`            ERROR

      `ZM_NS_ERROR`                      `ERROR` (changed from `WARNING`)
      -----------------------------------------------------------------------
  Errors:
  - ZM_NO_RESPONSE
  - ZM_EDNS_VERSION_ERROR
  - ZM_BREAKS_ON_EDNS
  - ZM_NS_ERROR
  - ZM_NO_EDNS_SUPPORT
  - ZM_EDNS_RESPONSE_WITHOUT_EDNS
  Maturity: BETA
  Summary: Test of EDNS0 support

dns-nameserver04:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver04.md>.

    # Objective

    Responses from the authoritative name servers must contain same source
    IP address as the destination IP address of the initial query. This has
    been clarified in section 4 of [RFC
    2181](https://datatracker.ietf.org/doc/html/rfc2181#section-4).

    # Pass/fail criteria

    If any response comes from another IP address than the query was sent
    to, this test case fails.
  Errors:
  - ZM_DNS_NAMESERVER04_FAILED
  Maturity: BETA
  Summary: Same source address

dns-nameserver05:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver05.md>.

    # Objective

    Older implementations of authoritative name servers have shown different
    misbehaviours trying to answer queries for AAAA records, as described in
    [RFC 4074](https://datatracker.ietf.org/doc/html/rfc4074). This test
    case is intended to find out if the name server authoritative for the
    domain shows any of these behaviours.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    In other cases the outcome of this Test Case is "pass".

      Message                      Default severity level
      ---------------------------- ----------------------------------
      `ZM_AAAA_BAD_RDATA`          ERROR
      `ZM_AAAA_QUERY_DROPPED`      ERROR
      `ZM_AAAA_UNEXPECTED_RCODE`   ERROR
      `ZM_AAAA_WELL_PROCESSED`     INFO
      `ZM_A_UNEXPECTED_RCODE`      `ERROR` (changed from `WARNING`)
      `ZM_NO_RESPONSE`             `ERROR` (changed from `DEBUG`)
  Errors:
  - ZM_AAAA_BAD_RDATA
  - ZM_A_UNEXPECTED_RCODE
  - ZM_AAAA_UNEXPECTED_RCODE
  - ZM_NO_RESPONSE
  - ZM_AAAA_QUERY_DROPPED
  - ZM_AAAA_WELL_PROCESSED
  Maturity: BETA
  Summary: Behaviour against AAAA query

dns-nameserver06:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver06.md>.

    # Objective

    All name servers names listed for a delegation must be resolvable in
    DNS. If they are not resolvable using DNS this is a sign of
    misconfiguration, and raises the risk of unreachability for the domain.
    It could also lower the performance for any resolver trying to resolve
    the name.

    The objective of this test is to resolve the domain using all the listed
    name servers used in the delegation. More information about resolver
    behavior is in section 7 of [RFC
    1035](https://datatracker.ietf.org/doc/html/rfc1035).

    # Pass/fail criteria

    If any of the name server names fails to resolve to an IP address, this
    test case fails.
  Errors:
  - ZM_DNS_NAMESERVER06_FAILED
  Maturity: BETA
  Summary: NS can be resolved

dns-nameserver07:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver07.md>.

    # Objective

    The configuration and/or implementation of some authoritative name
    servers causes them to return an upward referral to the root zone. There
    are proofs that such a [behaviour could be used for DDoS
    attacks](https://www.dns-oarc.net/oarc/articles/upward-referrals-considered-harmful)

    # Pass/fail criteria

    The test case is Ok only if there are no responses in the authority
    section
  Errors:
  - ZM_DNS_NAMESERVER07_FAILED
  Maturity: BETA
  Summary: To check whether authoritative name servers return an upward referral

dns-nameserver08:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver08.md>.

    # Objective

    The DNS standards require that nameservers treat names with case
    insensitivity. That is, the names example.com and EXAMPLE.COM should
    resolve to the same IP address. However, in the response, most
    nameservers echo back the name as it appeared in the request, preserving
    the original case.

    Therefore, another way to add entropy to requests is to randomly vary
    the case of letters in domain names queried. This technique, also known
    as "0x20" because bit 0x20 is used to set the case of of US-ASCII
    letters, was first proposed in the [IETF internet
    draft](https://datatracker.ietf.org/doc/html/draft-vixie-dnsext-dns0x20-00)
    Use of Bit 0x20 in DNS Labels to Improve Transaction Identity. With this
    technique, the nameserver response must match not only the query name,
    but the case of every letter in the name string; for example,
    wWw.eXaMpLe.CoM or WwW.ExamPLe.COm. This may add little or no entropy to
    queries for the top-level and root domains, but it's effective for most
    hostnames.

    # Pass/fail criteria

    The test case is Ok only if there are no responses in the authority
    section
  Errors:
  - ZM_DNS_NAMESERVER08_FAILED
  Maturity: BETA
  Summary: Testing QNAME case insensitivity

dns-nameserver09:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver09.md>.

    # Objective

    There has been cases where the nameservers respond with complete
    case-sensitivity (in violation of the DNS standards): that is, they
    match the exact case of the name in the response; but return different
    results for equivalent names with different cases in the request
    (typically NXDOMAIN).

    # Pass/fail criteria

    The test case passes only if the results of all queries are exactly the
    same.
  Errors:
  - ZM_DNS_NAMESERVER09_FAILED
  Maturity: BETA
  Summary: Testing QNAME case sensitivity

dns-nameserver10:
  Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
    see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver10.md>.\n\n#
    Objective\n\nEDNS ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891))
    is a\nmechanism to announce capabilities of a DNS implementation, and is\nrequired
    by new functionality in DNS such as DNSSEC ([RFC\n4033](https://datatracker.ietf.org/doc/html/rfc4033#section-3),
    section\n3).\n\n[RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.3),\nsection
    6.1.3, states that if a nameserver has implemented EDNS but has\nnot implemented
    the version level of the request, then it MUST respond\nwith RCODE \"BADVERS\".
    Only version \"0\" has been defined for EDNS.\n\nNote that RCODE \"BADVERS\" is
    an extended RCODE which is calculated from\nthe combination of the normal RCODE
    field in the DNS package header\n([RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035#section-4.1.1),\nsection
    4.1.1) and the OPT record EXTENDED-RCODE field ([RFC\n6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.3),\nsection
    6.1.3). Also see [IANA RCODE\nRegistry](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6).\n\n#
    Summary\n\n-   Only relevant for a zone whose name servers correctly support EDNS,\n
    \   version 0.\n\n  --------------------------------------------------------------------------------------------\n
    \ Message Tag outputted              Level        Arguments     Description of
    when message\n                                                                tag
    is outputted\n  ---------------------------------- ------------ -------------
    ------------------------------\n  `ZM_N10_NO_RESPONSE_EDNS1_QUERY`   `ERROR`      ns_ip_list
    \   Response when EDNS ver=0, but\n                                     (changed
    \                  not when 1.\n                                     from                       \n
    \                                    `WARNING`)                 \n\n  `ZM_N10_UNEXPECTED_RCODE`
    \         `ERROR`      ns_ip_list,   Unexpected RCODE value when\n                                     (changed
    \    rcode         EDNS ver=1.\n                                     from                       \n
    \                                    `WARNING`)                 \n\n  `ZM_N10_EDNS_RESPONSE_ERROR`
    \      `ERROR`      ns_ip_list    Expected RCODE value when EDNS\n                                     (changed
    \                  ver=1, but error in response.\n                                     from
    \                      \n                                     `WARNING`)                 \n
    \ --------------------------------------------------------------------------------------------\n\nThe
    value in the Level column is the default severity level of the\nmessage. The severity
    level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
    Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
    argument names in the Arguments column lists the arguments used in\nthe message.
    The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
    Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
    least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
    *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
    Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
    but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
    no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
    or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
    Case is \"pass\".\n"
  Errors:
  - ZM_N10_NO_RESPONSE_EDNS1_QUERY
  - ZM_N10_EDNS_RESPONSE_ERROR
  - ZM_N10_UNEXPECTED_RCODE
  Maturity: BETA
  Summary: Test for undefined EDNS version

dns-nameserver11:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver11.md>.

    # Objective

    EDNS is a mechanism to announce capabilities of a DNS implementation,
    and is now basically required by any new functionality in DNS such as
    DNSSEC ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891)).

    [RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.2),
    section 6.1.2, states that any OPTION-CODE values not understood by a
    responder or requestor MUST be ignored. Unknown OPTION-CODE values must
    be processed as though the OPTION-CODE was not even there.

    In this test case, we will query with an unknown EDNS OPTION-CODE and
    expect that the OPTION-CODE is not present in the response for the
    query.

    # Summary

      -----------------------------------------------------------------------------------------------
      Message Tag                            Level        Arguments     Message ID for message tag
      -------------------------------------- ------------ ------------- -----------------------------
      `ZM_N11_NO_EDNS`                       `ERROR`      ns_ip_list    The DNS response, on query
                                             (changed                   with unknown EDNS
                                             from                       option-code, does not contain
                                             `WARNING`)                 any EDNS from name servers
                                                                        "{ns_ip_list}".

      `ZM_N11_NO_RESPONSE`                   `ERROR`      ns_ip_list    There is no response on query
                                             (changed                   with unknown EDNS option-code
                                             from                       from name servers
                                             `WARNING`)                 "{ns_ip_list}".

      `ZM_N11_RETURNS_UNKNOWN_OPTION_CODE`   `ERROR`      ns_ip_list    The DNS response, on query
                                             (changed                   with unknown EDNS
                                             from                       option-code, contains an
                                             `WARNING`)                 unknown EDNS option-code from
                                                                        name servers "{ns_ip_list}".

      `ZM_N11_UNEXPECTED_ANSWER_SECTION`     `ERROR`      ns_ip_list    The DNS response, on query
                                             (changed                   with unknown EDNS
                                             from                       option-code, does not contain
                                             `WARNING`)                 the expected SOA record in
                                                                        the answer section from name
                                                                        servers "{ns_ip_list}".

      `ZM_N11_UNEXPECTED_RCODE`              `ERROR`      ns_ip_list,   The DNS response, on query
                                             (changed     rcode         with unknown EDNS
                                             from                       option-code, has unexpected
                                             `WARNING`)                 RCODE name "{rcode}" from
                                                                        name servers "{ns_ip_list}".

      `ZM_N11_UNSET_AA`                      `ERROR`      ns_ip_list    The DNS response, on query
                                             (changed                   with unknown EDNS
                                             from                       option-code, is unexpectedly
                                             `WARNING`)                 not authoritative from name
                                                                        servers "{ns_ip_list}".
      -----------------------------------------------------------------------------------------------

    The value in the Level column is the default severity level of the
    message. The severity level can be changed in the [Zonemaster-Engine
    profile](../../../configuration/profiles.md). Also see the [Severity
    Level Definitions](../SeverityLevelDefinitions.md) document.

    The argument names in the Arguments column lists the arguments used in
    the message. The argument names are defined in the [argument
    list](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
    or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level
    *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
    severity level *ERROR* or *CRITICAL*.

    In other cases, no message or only messages with severity level
    *[INFO](../SeverityLevelDefinitions.md#info)* or
    *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
    Test Case is "pass".
  Errors:
  - ZM_N11_NO_EDNS
  - ZM_N11_UNEXPECTED_RCODE
  - ZM_N11_RETURNS_UNKNOWN_OPTION_CODE
  - ZM_N11_UNSET_AA
  - ZM_N11_NO_RESPONSE
  - ZM_N11_UNEXPECTED_ANSWER_SECTION
  Maturity: BETA
  Summary: Test for unknown EDNS OPTION-CODE

dns-nameserver12:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver12.md>.

    # Objective

    EDNS is a mechanism to announce capabilities of a dns implementation,
    and is now basically required by any new functionality in dns such as
    DNSSEC ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891)).

    [RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.4),
    section 6.1.4, states that "Z" flag bits must be set to zero by senders
    and ignored by receiver.

    [IANA](https://www.iana.org/) lists the flags in the [EDNS Header
    Flags](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-13)
    assignment list.

    In this test case, the query will have an unknown EDNS flag set, i.e.
    one of the Z flag bits set to "1", and it is expected that all "Z" bits
    to be clear in the response (set to "0").

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    The outcome of this Test case is "pass" in all other cases.

      Message                 Default severity level
      ----------------------- ----------------------------------
      `ZM_NO_RESPONSE`        `ERROR` (changed from `DEBUG`)
      `ZM_NO_EDNS_SUPPORT`    `ERROR` (changed from `WARNING`)
      `ZM_NS_ERROR`           `ERROR` (changed from `WARNING`)
      `ZM_Z_FLAGS_NOTCLEAR`   `ERROR` (changed from `WARNING`)
  Errors:
  - ZM_NO_RESPONSE
  - ZM_NS_ERROR
  - ZM_NO_EDNS_SUPPORT
  - ZM_Z_FLAGS_NOTCLEAR
  Maturity: BETA
  Summary: Test for unknown EDNS flags

dns-nameserver13:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver13.md>.

    # Objective

    EDNS is a mechanism to announce capabilities of a DNS implementation,
    and is now basically required by any new functionality in DNS such as
    DNSSEC ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891)).

    [RFC 6891, section
    7](https://datatracker.ietf.org/doc/html/rfc6891#section-7) states that
    an OPT record must be included in a truncated response, if the query
    includes an OPT pseudo record.

    This Test Case will try to verify that if the response to a query with
    an OPT record is truncated, then the response will contain an OPT
    record.

    To trigger a truncated response, the OPT pseudo record 'DO' bit is set
    and the buffer size is limited to 512 bytes. If the zone is not signed
    with DNSSEC, the response will probably not be truncated anyway.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    The outcome of this Test case is "pass" in all other cases.

      --------------------------------------------------------------------------
      Message                         Default severity level (when message is
                                      outputed)
      ------------------------------- ------------------------------------------
      `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)

      `ZM_NO_EDNS_SUPPORT`            `ERROR` (changed from `WARNING`)

      `ZM_NS_ERROR`                   `ERROR` (changed from `WARNING`)

      `ZM_MISSING_OPT_IN_TRUNCATED`   `ERROR` (changed from `WARNING`)
      --------------------------------------------------------------------------
  Errors:
  - ZM_NO_RESPONSE
  - ZM_NS_ERROR
  - ZM_NO_EDNS_SUPPORT
  - ZM_MISSING_OPT_IN_TRUNCATED
  Maturity: BETA
  Summary: Test for truncated response on EDNS query

dns-nameserver14:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver14.md>.

    # Objective

    This test case actually combines the test options in test cases
    [NAMESERVER10](nameserver10.md) and [NAMESERVER11](nameserver11.md).

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    The outcome of this Test case is "pass" in all other cases.

      -----------------------------------------------------------------------
      Message                      Default severity level (Output message)
      ---------------------------- ------------------------------------------
      `ZM_NO_RESPONSE`             `ERROR` (changed from `DEBUG`)

      `ZM_NO_EDNS_SUPPORT`         `ERROR` (changed from `WARNING`)

      `ZM_NS_ERROR`                `ERROR` (changed from `WARNING`)

      `ZM_UNKNOWN_OPTION_CODE`     `ERROR` (changed from `WARNING`)

      `ZM_UNSUPPORTED_EDNS_VER`    `ERROR` (changed from `WARNING`)
      -----------------------------------------------------------------------
  Errors:
  - ZM_NO_RESPONSE
  - ZM_UNSUPPORTED_EDNS_VER
  - ZM_NS_ERROR
  - ZM_NO_EDNS_SUPPORT
  - ZM_UNKNOWN_OPTION_CODE
  Maturity: BETA
  Summary: Test for unknown version with unknown OPTION-CODE

dns-nameserver15:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver15.md>.

    # Objective

    This Test Case verifies if a name server responds to TXT queries in the
    CHAOS class, specifically about its software version as it may sometimes
    be desirable not to reveal that information.

    A description of DNS classes can be found in
    [RFC2929](https://datatracker.ietf.org/doc/html/rfc2929#section-3.2),
    section 3.2.

    # Summary

      -----------------------------------------------------------------------------------------------
      Message Tag                 Level   Arguments     Message ID for message tag
      --------------------------- ------- ------------- ---------------------------------------------
      `ZM_N15_SOFTWARE_VERSION`   INFO    ns_ip_list,   The following name server(s) respond to
                                          query_name,   software version query "{query_name}" with
                                          string        string "{string}". Returned from name
                                                        servers: "{ns_ip_list}"

      `ZM_N15_NO_VERSION`         INFO    ns_ip_list    The following name server(s) do not respond
                                                        to software version queries. Returned from
                                                        name servers: "{ns_ip_list}"
      -----------------------------------------------------------------------------------------------

    The value in the Level column is the default severity level of the
    message. The severity level can be changed in the [Zonemaster-Engine
    Profile](../../../configuration/profiles.md). Also see the [Severity
    Level Definitions](../SeverityLevelDefinitions.md) document.

    The argument names in the Arguments column lists the arguments used in
    the message. The argument names are defined in the [Argument
    List](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
    or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level
    *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
    severity level *[ERROR](../SeverityLevelDefinitions.md#error)* or
    *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.

    In other cases, no message or only messages with severity level
    *[INFO](../SeverityLevelDefinitions.md#info)* or
    *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
    Test Case is "pass".
  Errors:
  - ZM_N15_SOFTWARE_VERSION
  - ZM_N15_NO_VERSION
  Maturity: BETA
  Summary: Checking for revealed software version

dns-syntax04:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax04.md>.

    # Objective

    The Name Server name must be a valid hostname according to the rules
    defined in [RFC 952](https://datatracker.ietf.org/doc/html/rfc952), in
    section 2.1 in [RFC
    1123](https://datatracker.ietf.org/doc/html/rfc1123#section-2.1),
    section 11 in [RFC
    2182](https://datatracker.ietf.org/doc/html/rfc2181#section-11) and
    section 2 and 5 in [RFC
    3696](https://datatracker.ietf.org/doc/html/rfc3696#section-2). Newer
    RFCs may override some rules defined in earlier documents.

    # Pass/fail criteria

    If any of the steps 3 to 5 in the ordered description of this test case
    fails, the whole test case fails.
  Errors:
  - ZM_DNS_SYNTAX04_FAILED
  Maturity: BETA
  Summary: The NS name must have a valid domain/hostname

dns-syntax05:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax05.md>.

    # Objective

    The SOA RNAME field does not allow the '@' characters to be used for
    describing a mailbox. The first dot ('.') is thus translated into the
    '@' character. This is a common mistake. The rules are defined in [RFC
    1035](https://datatracker.ietf.org/doc/html/rfc1035).

    # Pass/fail criteria

    If there is any '@' character in any SOA/RNAME field, this test case
    fails.
  Errors:
  - ZM_DNS_SYNTAX05_FAILED
  Maturity: BETA
  Summary: Misuse of '@' character in the SOA RNAME field

dns-syntax06:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax06.md>.

    # Objective

    The SOA RNAME field is a mailbox address. The SOA RNAME field is defined
    in [RFC
    1035](https://datatracker.ietf.org/doc/html/rfc1035#section-3.3.13),
    section 3.3.13 and in [RFC
    1912](https://datatracker.ietf.org/doc/html/rfc1912#section-2.2),
    section 2.2. The RNAME field should follow the rules of an e-mail
    address also defined in [RFC
    5322](https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1),
    section 3.4.1.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    In other cases the outcome of this Test Case is "pass".

      Message                            Default severity level
      ---------------------------------- ----------------------------------
      `ZM_NO_RESPONSE`                   `ERROR` (changed from `DEBUG`)
      `ZM_NO_RESPONSE_SOA_QUERY`         `ERROR` (changed from `DEBUG`)
      `ZM_RNAME_RFC822_INVALID`          `ERROR` (changed from `WARNING`)
      `ZM_RNAME_MAIL_DOMAIN_INVALID`     `ERROR` (changed from `WARNING`)
      `ZM_RNAME_MAIL_DOMAIN_LOCALHOST`   `ERROR` (changed from `WARNING`)
      `ZM_RNAME_MAIL_ILLEGAL_CNAME`      `ERROR` (changed from `WARNING`)
      `ZM_RNAME_RFC822_VALID`            INFO
  Errors:
  - ZM_NO_RESPONSE
  - ZM_RNAME_MAIL_DOMAIN_LOCALHOST
  - ZM_RNAME_RFC822_INVALID
  - ZM_RNAME_RFC822_VALID
  - ZM_NO_RESPONSE_SOA_QUERY
  - ZM_RNAME_MAIL_ILLEGAL_CNAME
  - ZM_RNAME_MAIL_DOMAIN_INVALID
  Maturity: BETA
  Summary: No illegal characters in the SOA RNAME field

dns-syntax07:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax07.md>.

    # Objective

    The SOA MNAME field is a hostname. Hostnames are valid according to the
    rules defined in [RFC
    952](https://datatracker.ietf.org/doc/html/rfc952), in section 2.1 in
    [RFC 1123](https://datatracker.ietf.org/doc/html/rfc1123#section-2.1),
    section 11 in [RFC
    2182](https://datatracker.ietf.org/doc/html/rfc2181#section-11) and
    section 2 and 5 in [RFC
    3696](https://datatracker.ietf.org/doc/html/rfc3696#section-2). Newer
    RFCs may override some rules defined in earlier documents.

    # Pass/fail criteria

    If any of the steps 4 to 8 in the ordered description of this test case
    fails, the whole test case fails.
  Errors:
  - ZM_DNS_SYNTAX07_FAILED
  Maturity: BETA
  Summary: No illegal characters in the SOA MNAME field

dns-zone01:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone01.md>.

    # Objective

    The MNAME field from the SOA record of a zone is supposed to contain the
    master name server for that zone. The hostname of the MNAME field may
    not be listed in the NS records in the zone among the delegated name
    servers, but should still be authoritative for the zone. MNAME may be
    used for other services such as DNS NOTIFY described in
    [RFC1996](https://datatracker.ietf.org/doc/html/rfc1996#section-2).

    [RFC1035](https://datatracker.ietf.org/doc/html/rfc1035#section-3.3.13),
    section 3.3.13, specifies that "the *domain-name* of the name server
    that was the original or primary source of data for this zone".

    [RFC1996](https://datatracker.ietf.org/doc/html/rfc1996#section-2),
    section 2, and
    [RFC2136](https://datatracker.ietf.org/doc/html/rfc2136#section-1),
    section 1, add that "the primary master is named in the zone's SOA MNAME
    field and optionally by an NS RR. There is by definition only one
    primary master server per zone".

    [RFC2181](https://datatracker.ietf.org/doc/html/rfc2181#section-7.3),
    section 7.2, clarifies that "it is quite clear in the specifications,
    yet seems to have been widely ignored, that the MNAME field of the SOA
    record should contain the name of the primary (master) server for the
    zone identified by the SOA. It should not contain the name of the zone
    itself. That information would be useless, as to discover it, one needs
    to start with the domain name of the SOA record - that is the name of
    the zone".

    There exists an unstandardized practice to set the SOA MNAME to ".",
    which should not be interpreted that there is no primary master server,
    but to indicate that there is no default server for dynamic updates.
    With ".", SOA MNAME has no server name. There is at least one old and
    expired Internet-Draft that attempted to standardize that behavior,
    [draft-jabley-dnsop-missing-mname](https://www.ietf.org/archive/id/draft-jabley-dnsop-missing-mname-00.html).
    If the SOA MNAME is an empty name (".") this Test Case will not try to
    connect to a server behind it since there will never be a server behind
    that name, as the purpose is most definitely to follow that practice.
    Instead, a special message will be outputted.

    This Test Case will check that: - the SOA MNAME contains the master name
    server of *Child Zone*, as best as it can be determined. - the SOA MNAME
    name server is authoritative of *Child Zone*. - the SOA SERIAL of the
    SOA MNAME is at least equal to the ones found from the name servers in
    the NS record set of *Child Zone*. This comparison must be done
    following [RFC1982](https://datatracker.ietf.org/doc/html/rfc1982). -
    the SOA MNAME name server is listed as part of the NS record set of
    *Child Zone*.

    # Summary

      ----------------------------------------------------------------------------------------------------
      Message Tag                         Level     Arguments        Message ID for message tag
      ----------------------------------- --------- ---------------- -------------------------------------
      `ZM_Z01_MNAME_HAS_LOCALHOST_ADDR`   WARNING   nsname, ns_ip    SOA MNAME name server "{nsname}"
                                                                     resolves to a localhost IP address
                                                                     ({ns_ip}).

      `ZM_Z01_MNAME_IS_DOT`               NOTICE    ns_ip_list       SOA MNAME is specified as "." which
                                                                     usually means "no server". Fetched
                                                                     from name servers "{ns_ip_list}".

      `ZM_Z01_MNAME_IS_LOCALHOST`         WARNING   ns_ip_list       SOA MNAME name server is "localhost",
                                                                     which is invalid. Fetched from name
                                                                     servers "{ns_ip_list}".

      `ZM_Z01_MNAME_MISSING_SOA_RECORD`   WARNING   ns               SOA MNAME name server "{ns}" reponds
                                                                     to an SOA query with no SOA records
                                                                     in the answer section.

      `ZM_Z01_MNAME_NO_RESPONSE`          WARNING   ns               SOA MNAME name server "{ns}" does not
                                                                     respond to an SOA query.

      `ZM_Z01_MNAME_NOT_AUTHORITATIVE`    WARNING   ns               SOA MNAME name server "{ns}" is not
                                                                     authoritative for the zone.

      `ZM_Z01_MNAME_NOT_IN_NS_LIST`       INFO      nsname           SOA MNAME name server "{nsname}" is
                                                                     not listed as NS record for the zone.

      `ZM_Z01_MNAME_NOT_MASTER`           WARNING   ns_list,         SOA MNAME name server(s) "{ns_list}"
                                                    soaserial,       do(es) not have the highest SOA
                                                    soaserial_list   SERIAL (expected "{soaserial}" but
                                                                     got "{soaserial_list}")

      `ZM_Z01_MNAME_NOT_RESOLVE`          WARNING   nsname           SOA MNAME name server "{nsname}"
                                                                     cannot be resolved into an IP
                                                                     address.

      `ZM_Z01_MNAME_UNEXPECTED_RCODE`     WARNING   ns, rcode        SOA MNAME name server "{ns}" gives
                                                                     unexpected RCODE name ("{rcode}") in
                                                                     response to an SOA query.
      ----------------------------------------------------------------------------------------------------

    The value in the Level column is the default severity level of the
    message. The severity level can be changed in the [Zonemaster-Engine
    profile](../../../configuration/profiles.md). Also see the [Severity
    Level Definitions](../SeverityLevelDefinitions.md) document.

    The argument names in the Arguments column lists the arguments used in
    the message. The argument names are defined in the [argument
    list](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
    or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level
    *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
    severity level *ERROR* or *CRITICAL*.

    In other cases, no message or only messages with severity level
    *[INFO](../SeverityLevelDefinitions.md#info)* or
    *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
    Test Case is "pass".
  Errors:
  - ZM_Z01_MNAME_HAS_LOCALHOST_ADDR
  - ZM_Z01_MNAME_NOT_IN_NS_LIST
  - ZM_Z01_MNAME_NO_RESPONSE
  - ZM_Z01_MNAME_NOT_RESOLVE
  - ZM_Z01_MNAME_IS_LOCALHOST
  - ZM_Z01_MNAME_NOT_MASTER
  - ZM_Z01_MNAME_NOT_AUTHORITATIVE
  - ZM_Z01_MNAME_UNEXPECTED_RCODE
  - ZM_Z01_MNAME_IS_DOT
  - ZM_Z01_MNAME_MISSING_SOA_RECORD
  Maturity: BETA
  Summary: Fully qualified master nameserver in SOA

dns-zone02:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone02.md>.

    # Objective

    The SOA refresh value is the number of seconds that describes how often
    a secondary name server will poll the primary name server to see if
    there is any updates. The SOA refresh value is described in section
    3.3.13 in [RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035), and
    clarified in section 2.2 of [RFC
    1912](https://datatracker.ietf.org/doc/html/rfc1912). Setting the
    refresh value low will increase the DNS traffic between the servers, and
    also increase the load on the master name server. The primary name
    server will in most cases send DNS notifications to tell the secondary
    name servers that zone content has been updated, as described in [RFC
    1996](https://datatracker.ietf.org/doc/html/rfc1996).

    The [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)
    recommendation for the refresh value is 24 hours (86400 seconds). Older
    DNSCheck code had a four hour minimum value, and this is the minimum
    value we recommend.

    # Pass/fail criteria

    If the SOA refresh value is less than 14400 this test case fails.
  Errors:
  - ZM_DNS_ZONE02_FAILED
  Maturity: BETA
  Summary: SOA 'refresh' minimum value

dns-zone03:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone03.md>.

    # Objective

    The SOA retry value is the number of seconds that describes minimum time
    elapsed since a failed zone refresh from the primary name server. The
    SOA refresh value is described in section 3.3.13 in [RFC
    1035](https://datatracker.ietf.org/doc/html/rfc1035), and clarified in
    section 2.2 of [RFC
    1912](https://datatracker.ietf.org/doc/html/rfc1912).

    > It's typically some fraction of the refresh interval.

    Setting the retry value low will increase the DNS traffic between the
    servers, and also increase the load on the master name server.

    # Pass/fail criteria

    If the SOA retry value is higher than or equal to the refresh value,
    this test case fails.
  Errors:
  - ZM_DNS_ZONE03_FAILED
  Maturity: BETA
  Summary: SOA 'retry' lower than 'refresh'

dns-zone04:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone04.md>.

    # Objective

    The SOA retry value is the number of seconds that describes minimum time
    elapsed since a failed zone refresh from the primary name server. The
    SOA refresh value is described in section 3.3.13 in [RFC
    1035](https://datatracker.ietf.org/doc/html/rfc1035), and clarified in
    section 2.2 of [RFC
    1912](https://datatracker.ietf.org/doc/html/rfc1912).

    Setting the retry value low will increase the DNS traffic between the
    servers, and also increase the load on the master name server.

    The [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)
    recommendation for the retry value is 2 hours (7200 seconds). Older
    DNSCheck code had a one hour minimum value (3600 seconds), and this is
    the minimum value we recommend.

    # Pass/fail criteria

    If the retry value is less than 3600 seconds, this test case fails.
  Errors:
  - ZM_DNS_ZONE04_FAILED
  Maturity: BETA
  Summary: SOA 'retry' at least 1 hour

dns-zone05:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone05.md>.

    # Objective

    The SOA expire value specifies for how long any secondary name server
    keeps the zone valid without any contact with the primary name server.
    This value should be greater than how long a major outage would
    typically last. The expire value should also be larger than the refresh
    and retry values, as described in section 3.3.13 in [RFC
    1035](https://datatracker.ietf.org/doc/html/rfc1035), and clarified in
    section 2.2 of [RFC
    1912](https://datatracker.ietf.org/doc/html/rfc1912).

    Setting the expire value low will increase the risk of any unwanted
    non-availability of the zone because of any failures in contacting the
    primary name server.

    The [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)
    recommendation for the expire value is 1000 hours (roughly 41 days).
    Older DNSCheck code had a 7 day minimum value (604800 seconds), and this
    is the minimum value we recommend as an absolut minimum.

    # Pass/fail criteria

    If the expire value is less than 604800 seconds or if the expire value
    is lower than the refresh value, this test case fails.
  Errors:
  - ZM_DNS_ZONE05_FAILED
  Maturity: BETA
  Summary: SOA 'expire' minimum value

dns-zone06:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone06.md>.

    # Objective

    The SOA minimum field sets the default TTL for all records in a zone.
    The recommended value is to be "cache-friendly". However, for a zone
    that changes content often, there is a need to keep the TTL values
    shorter. The use of the SOA minimum value today is the negative cache
    (where a resolver find content is missing).

    The SOA minimum field is described in section 3.3.13 in [RFC
    1035](https://datatracker.ietf.org/doc/html/rfc1035), and clarified in
    section 2.2 of [RFC
    1912](https://datatracker.ietf.org/doc/html/rfc1912). The description of
    the implementation of negative caching is in [RFC
    2308](https://datatracker.ietf.org/doc/html/rfc2308) (although it has
    been updated by several DNSSEC related RFCs, it is still relevant for
    this purpose).

    The [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)
    recommendation for the minimum value 2 days, but the negative caching is
    now the norm. DNSCheck has a recommended value of between 300 seconds (5
    minutes) and 86400 seconds (1 day).

    # Pass/fail criteria

    If the minimum value is larger than 86400 seconds or if the minimum
    value is lower than 300 seconds, this test case fails.
  Errors:
  - ZM_DNS_ZONE06_FAILED
  Maturity: BETA
  Summary: SOA 'minimum' maximum value

dns-zone07:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone07.md>.

    # Objective

    Any NS type record should not be a CNAME. The SOA MNAME should in this
    respect not be a CNAME.

    Quote from 2.4 in [RFC
    1912](https://datatracker.ietf.org/doc/html/rfc1912):

    > Having NS records pointing to a CNAME is bad and may conflict badly
    > with current BIND servers.

    The SOA MNAME field is described in section 3.3.13 in [RFC
    1035](https://datatracker.ietf.org/doc/html/rfc1035).

    The [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)
    recommendation for the minimum value 2 days, but the negative caching is
    now the norm. DNSCheck has a recommended value of between 300 seconds (5
    minutes) and 86400 seconds (1 day).

    # Pass/fail criteria

    If the SOA MNAME field is pointing to a CNAME, this test case fails.
  Errors:
  - ZM_DNS_ZONE07_FAILED
  Maturity: BETA
  Summary: SOA master is not an alias

dns-zone10:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone10.md>.

    # Objective

    The SOA record is crucial for the DNS zone and "exactly one SOA RR
    should be present at the top of the zone" ([RFC
    1035](https://datatracker.ietf.org/doc/html/rfc1035#section-5.2),
    section 5.2). This test case will verify that the zone of the domain to
    be tested return exactly one SOA record.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    In other cases the outcome of this Test Case is "pass".

      Message                   Default severity level
      ------------------------- --------------------------------
      `ZM_MULTIPLE_SOA`         ERROR
      `ZM_NO_RESPONSE`          `ERROR` (changed from `DEBUG`)
      `ZM_NO_SOA_IN_RESPONSE`   `ERROR` (changed from `DEBUG`)
      `ZM_ONE_SOA`              INFO
      `ZM_WRONG_SOA`            `ERROR` (changed from `DEBUG`)
  Errors:
  - ZM_MULTIPLE_SOA
  - ZM_WRONG_SOA
  - ZM_NO_SOA_IN_RESPONSE
  - ZM_NO_RESPONSE
  - ZM_ONE_SOA
  Maturity: BETA
  Summary: No multiple SOA records

dnssec-01:
  Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
    see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec01.md>.\n\n#
    Objective\n\nThe list of allowed Digest Algorithms in a DS record published by
    the\nparent is specified by [RFC\n8624](https://datatracker.ietf.org/doc/html/rfc8624#section-3.3),\nsection
    3.3, and is published in the [IANA\nregistry](https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xml)\nof
    *DS RR Type Digest Algorithms*. No DS Digest Algorithm values, other\nthan those
    specified in the RFC and allocated by IANA, should be used in\npublic DNS.\n\nIf
    [RFC 8624](https://datatracker.ietf.org/doc/html/rfc8624#section-3.3)\nand the
    [IANA\nregistry](https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xml)\ndisagree
    on the same DS digest algorithm, the RFC takes precedence until\nthe registry
    has a been updated with a reference to the RFC.\n\nThe table of algorithms below
    is for reference only and is copied from\n[IANA\nregistry](https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xml).\nIt
    is here to make it easier to read the steps when symbolic names are\ngiven. This
    is only an excerpt from the table. The full table is\navailable at the IANA registry.\n\n
    \ Algorithm number   Algorithm (or description)\n  ------------------ ----------------------------\n
    \ 0                  (Reserved)\n  1                  SHA-1\n  2                  SHA-256\n
    \ 3                  GOST R 34.11-94\n  4                  SHA-384\n  5-255              (Unassigned)\n\nThis
    test case will verify that the Zonemaster implementation has\nsupport for the
    DS digest algorithm of the DS record found, and if not\noutput a message tag.
    If the support is missing other test cases will\nnot be able to verify that DS
    record.\n\n# Summary\n\n-   At least one DS record must be found, or no further
    investigation\n    will be done and no messages will be outputted.\n-   No messages
    will be outputted due to errors in the responses from\n    the parent name servers.\n\n
    \ ---------------------------------------------------------------------------------------------------\n
    \ Message Tag outputted                  Level       Arguments               Description
    of when\n                                                                             message
    tag is outputted\n  -------------------------------------- ----------- -----------------------
    ------------------------\n  `ZM_DS01_DIGEST_NOT_SUPPORTED_BY_ZM`   NOTICE      ns_ip_list,
    algo_mnemo, DS Digest cannot be\n                                                     algo_num,
    keytag        validated by this\n                                                                             installation
    of\n                                                                             Zonemaster.\n\n
    \ `ZM_DS01_DS_ALGO_DEPRECATED`           ERROR       ns_ip_list, algo_mnemo, The
    DS digest algorithm\n                                                     algo_num,
    keytag        is deprecated.\n\n  `ZM_DS01_DS_ALGO_2_MISSING`            `ERROR`
    \                            DS created with algo 2\n                                         (changed
    \                           (SHA-256) is missing.\n                                         from
    \                               \n                                         `NOTICE`)
    \                          \n\n  `ZM_DS01_DS_ALGO_NOT_DS`               ERROR
    \      ns_ip_list, algo_mnemo, The DS digest algorithm\n                                                     algo_num,
    keytag        is not for DS.\n\n  `ZM_DS01_DS_ALGO_RESERVED`             ERROR
    \      ns_ip_list, algo_mnemo, No DS digest algorithm\n                                                     algo_num,
    keytag        defined for the digest\n                                                                             code.\n
    \ ---------------------------------------------------------------------------------------------------\n\nThe
    value in the Level column is the default severity level of the\nmessage. The severity
    level can be overridden in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
    Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
    argument names in the Arguments column lists the arguments used in\nthe message.
    The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
    Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
    least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
    *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
    Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
    but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
    no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
    or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
    Case is \"pass\".\n"
  Errors:
  - ZM_DS01_DIGEST_NOT_SUPPORTED_BY_ZM
  - ZM_DS01_DS_ALGO_RESERVED
  - ZM_DS01_DS_ALGO_2_MISSING
  - ZM_DS01_DS_ALGO_DEPRECATED
  - ZM_DS01_DS_ALGO_NOT_DS
  Maturity: BETA
  Summary: Legal values for the DS hash digest algorithm

dnssec-02:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec02.md>.

    # Objective

    DNS delegations from a parent to a child are secured with DNSSEC by
    publishing one or several Delegation Signer (DS) records in the parent
    zone, along with the NS records for the delegation.

    For the secure delegation to work, at least one DS record must match a
    DNSKEY record in the child zone ([RFC
    4035](https://datatracker.ietf.org/doc/html/rfc4035#section-5), section
    5). Each DS record should match a DNSKEY record in the child zone. More
    than one DS may match the same DNSKEY. The DNSKEY that the DS record
    refer to must be used to sign the DNSKEY RRset in the child zone ([RFC
    4035](https://datatracker.ietf.org/doc/html/rfc4035#section-5), section
    5).

    The DNSKEY record that the DS record refer to must have bit 7 ("Zone Key
    flag") set in the DNSKEY RR Flags ([RFC
    4034](https://datatracker.ietf.org/doc/html/rfc4034#section-5.2),
    section 5.2).

    Bit 15 ("Secure Entry Point flag") on a DNSKEY record signals that it is
    meant to be a KSK and pointed out by a DS record. It is noted if the
    DNSKEY record that the DS points at does not have that flag set ([RFC
    4034](https://datatracker.ietf.org/doc/html/rfc4034#section-2.1.1),
    section 2.1.1).

    # Summary

    -   Both DS record and DNSKEY record must be found, or else no further
        investigation will be done and no messages will be outputted.
    -   No messages will be outputted due to errors in the responses from
        the parent name servers.

      -------------------------------------------------------------------------------------------------------
      Message Tag outputted                   Level        Arguments         Description of when message tag
                                                                             is outputted
      --------------------------------------- ------------ ----------------- --------------------------------
      `ZM_DS02_ALGO_NOT_SUPPORTED_BY_ZM`      NOTICE       ns_ip_list,       DNSKEY with tag {keytag} uses
                                                           algo_mnemo,       unsupported algorithm {algo_num}
                                                           algo_num, keytag  ({algo_mnemo}) by this
                                                                             installation of Zonemaster.
                                                                             Fetched from the nameservers
                                                                             with IP addresses
                                                                             "{ns_ip_list}".

      `ZM_DS02_DNSKEY_NOT_FOR_ZONE_SIGNING`   ERROR        ns_ip_list,       Flags field of DNSKEY record
                                                           keytag            with tag {keytag} does not have
                                                                             ZONE bit set although DS with
                                                                             same tag is present in parent.
                                                                             Fetched from the nameservers
                                                                             with IP addresses
                                                                             "{ns_ip_list}".

      `ZM_DS02_DNSKEY_NOT_SEP`                `ERROR`      ns_ip_list,       Flags field of DNSKEY record
                                              (changed     keytag            with tag {keytag} does not have
                                              from                           SEP bit set although DS with
                                              `NOTICE`)                      same tag is present in parent.
                                                                             Fetched from the nameservers
                                                                             with IP addresses
                                                                             "{ns_ip_list}".

      `ZM_DS02_DNSKEY_NOT_SIGNED_BY_ANY_DS`   ERROR        ns_ip_list        The DNSKEY RRset has not been
                                                                             signed by any DNSKEY matched by
                                                                             a DS record. Fetched from the
                                                                             nameservers with IP addresses
                                                                             "{ns_ip_list}".

      `ZM_DS02_NO_DNSKEY_FOR_DS`              `ERROR`      ns_ip_list,       The DNSKEY record with tag
                                              (changed     keytag            {keytag} that the DS refers to
                                              from                           does not exist in the DNSKEY
                                              `WARNING`)                     RRset. Fetched from the
                                                                             nameservers with IP
                                                                             "{ns_ip_list}".

      `ZM_DS02_NO_MATCHING_DNSKEY_RRSIG`      `ERROR`      ns_ip_list,       The DNSKEY RRset is not signed
                                              (changed     keytag            by the DNSKEY with tag {keytag}
                                              from                           that the DS record refers to.
                                              `WARNING`)                     Fetched from the nameservers
                                                                             with IP "{ns_ip_list}".

      `ZM_DS02_NO_MATCH_DS_DNSKEY`            ERROR        ns_ip_list,       The DS record does not match the
                                                           keytag            DNSKEY with tag {keytag} by
                                                                             algorithm or digest. Fetched
                                                                             from the nameservers with IP
                                                                             "{ns_ip_list}".

      `ZM_DS02_NO_VALID_DNSKEY_FOR_ANY_DS`    ERROR        ns_ip_list        There is no valid DNSKEY matched
                                                                             by any of the DS records.
                                                                             Fetched from the nameservers
                                                                             with IP addresses
                                                                             "{ns_ip_list}".

      `ZM_DS02_RRSIG_NOT_VALID_BY_DNSKEY`     ERROR        ns_ip_list,       The DNSKEY RRset is signed with
                                                           keytag            an RRSIG with tag {keytag} which
                                                                             cannot be validated by the
                                                                             matching DNSKEY. Fetched from
                                                                             the nameservers with IP
                                                                             addresses "{ns_ip_list}".
      -------------------------------------------------------------------------------------------------------

    The value in the Level column is the default severity level of the
    message. The severity level can be overridden in the [Zonemaster-Engine
    profile](../../../configuration/profiles.md). Also see the [Severity
    Level Definitions](../SeverityLevelDefinitions.md) document.

    The argument names in the Arguments column lists the arguments used in
    the message. The argument names are defined in the [argument
    list](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
    or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level
    *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
    severity level *ERROR* or *CRITICAL*.

    In other cases, no message or only messages with severity level
    *[INFO](../SeverityLevelDefinitions.md#info)* or
    *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
    Test Case is "pass".
  Errors:
  - ZM_DS02_ALGO_NOT_SUPPORTED_BY_ZM
  - ZM_DS02_NO_MATCH_DS_DNSKEY
  - ZM_DS02_NO_DNSKEY_FOR_DS
  - ZM_DS02_RRSIG_NOT_VALID_BY_DNSKEY
  - ZM_DS02_DNSKEY_NOT_SEP
  - ZM_DS02_NO_VALID_DNSKEY_FOR_ANY_DS
  - ZM_DS02_NO_MATCHING_DNSKEY_RRSIG
  - ZM_DS02_DNSKEY_NOT_FOR_ZONE_SIGNING
  - ZM_DS02_DNSKEY_NOT_SIGNED_BY_ANY_DS
  Maturity: BETA
  Summary: DS must match a valid DNSKEY in the child zone

dnssec-03:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec03.md>.

    # Objective

    For an authoritative name server an increased number of NSEC3 iterations
    have a negative impact on performance.

    Section 10.3 in [RFC
    5155](https://datatracker.ietf.org/doc/html/rfc5155#section-10.3) sets a
    maximum number of iterations depending on the DNSSEC key size -
    regardless of which algorithm is used.

    > A zone owner MUST NOT use a value higher than shown in the table below
    > for iterations for the given key size. A resolver MAY treat a response
    > with a higher value as insecure, after the validator has verified that
    > the signature over the NSEC3 RR is correct.

      Key Size   Iterations
      ---------- ------------
      1024       150
      2048       500
      4096       2,500

    Section 5.3.2 in [RFC
    6781](https://datatracker.ietf.org/doc/html/rfc6781#section-5.3.2)
    describes the consequences for an authoritative name server in more
    detail, and references the [NSEC Hash
    Performance](https://www.nlnetlabs.nl/downloads/publications/nsec3_hash_performance.pdf)
    study from NLNet Labs.

    > Choosing a value of 100 iterations is deemed to be a sufficiently
    > costly, yet not excessive, value: In the worst-case scenario, the
    > performance of name servers would be halved, regardless of key size.

    # Pass/fail criteria

    If the NSEC3 iterations value is higher than 100, this test case gives a
    warning. If it is higher than the number recommended for the
    corresponding key size, this test case fails.
  Errors:
  - ZM_DNSSEC_03_FAILED
  Maturity: BETA
  Summary: Check for too many NSEC3 iterations

dnssec-04:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec04.md>.

    # Objective

    Having RRSIG signature lifetimes last for too long opens up for DNS
    replay attacks. Having too short RRSIG signature lifetimes is likely to
    have a major operational impact if the master name server is down for
    that long.

    There is no clear recommendation of the exact validity periods to use
    with DNSSEC. Shorter validity than 12 hours until expiration will give a
    serious operational problem just in case of temporary network problems,
    and longer than 180 days will create wide open holes for replay attacks.

    The considerations are described in
    [RFC6781](https://datatracker.ietf.org/doc/html/rfc6781).

    # Pass/fail criteria

    If any of the signature expirations time is either shorter than 12 hours
    or longer than 180 days, this test case fails.
  Errors:
  - ZM_DNSSEC_04_FAILED
  Maturity: BETA
  Summary: Check for too short or too long RRSIG lifetimes

dnssec-05:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec05.md>.

    # Objective

    A domain name (zone) should only use DNSKEY algorithms that are
    specified by [RFC
    8624](https://www.rfc-editor.org/rfc/rfc8624.html#section-3.1), section
    3.1 and the [IANA
    registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml)
    of *DNSSEC Algorithm Numbers* to be used for DNSSEC signing. A public
    domain name (zone) should not use private algorithms.

    If [RFC 8624](https://www.rfc-editor.org/rfc/rfc8624.html#section-3.1)
    and [IANA
    registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml)
    disagree on the same algorithm, the RFC takes precedence until the
    registry has a been updated with a reference to the RFC.

    The table of algorithms below is for reference only and is copied from
    [IANA
    registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml).
    It is here to make it easier to read the steps when symbolic names are
    given. This is only an excerpt from the table. The full table is
    available at [IANA
    registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml).

      Algorithm number   Algorithm (or description)
      ------------------ --------------------------------
      0                  (Delete DS)
      1                  RSA/MD5
      2                  Diffie-Hellman
      3                  DSA/SHA1
      4                  (Reserved)
      5                  RSA/SHA-1
      6                  DSA-NSEC3-SHA1
      7                  RSASHA1-NSEC3-SHA1
      8                  RSA/SHA-256
      9                  (Reserved)
      10                 RSA/SHA-512
      11                 (Reserved)
      12                 GOST R 34.10-2001
      13                 ECDSA Curve P-256 with SHA-256
      14                 ECDSA Curve P-384 with SHA-384
      15                 Ed25519
      16                 Ed448
      17-122             (Unassigned)
      123-251            (Reserved)
      252                (Indirect Keys)
      253                (Private algorithm)
      254                (Private algorithm OID)
      255                (Reserved)

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    In other cases the outcome of this Test Case is "pass".

      Message                          Default severity level
      -------------------------------- ----------------------------------
      `ZM_NO_RESPONSE`                 `ERROR` (changed from `DEBUG`)
      `ZM_NO_RESPONSE_DNSKEY`          `ERROR` (changed from `WARNING`)
      `ZM_ALGORITHM_DEPRECATED`        ERROR
      `ZM_ALGORITHM_RESERVED`          ERROR
      `ZM_ALGORITHM_UNASSIGNED`        ERROR
      `ZM_ALGORITHM_NOT_RECOMMENDED`   WARNING
      `ZM_ALGORITHM_PRIVATE`           ERROR
      `ZM_ALGORITHM_NOT_ZONE_SIGN`     ERROR
      `ZM_ALGORITHM_OK`                INFO
  Errors:
  - ZM_NO_RESPONSE
  - ZM_ALGORITHM_PRIVATE
  - ZM_ALGORITHM_UNASSIGNED
  - ZM_ALGORITHM_OK
  - ZM_ALGORITHM_DEPRECATED
  - ZM_ALGORITHM_NOT_ZONE_SIGN
  - ZM_ALGORITHM_NOT_RECOMMENDED
  - ZM_NO_RESPONSE_DNSKEY
  - ZM_ALGORITHM_RESERVED
  Maturity: BETA
  Summary: Check for invalid DNSKEY algorithms

dnssec-06:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec06.md>.

    # Objective

    In order for an authoritative name server to be DNSSEC compliant, it
    must serve DNSSEC signatures (RRSIG) as additional data in a DNS answer.
    This additional processing is described in section 3.1 of [RFC
    4035](https://datatracker.ietf.org/doc/html/rfc4035#section-3.1).

    # Pass/fail criteria

    If any of the name servers configured for the domains fail to answer
    with DNSSEC data, this test case fails.
  Errors:
  - ZM_DNSSEC_06_FAILED
  Maturity: BETA
  Summary: Verify DNSSEC additional processing

dnssec-08:
  Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
    see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec08.md>.\n\n#
    Objective\n\nA DNSSEC signed zone should have a DNSKEY RRset in the zone apex
    ([RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.1),\nsection
    2.1) and that RRset should be signed by a key that matches one\nof the records
    in the DNSKEY RRset ([RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.2),\nsection
    2.2).\n\nThis test case will verify if the *Child Zone* meets that requirement.\n\n#
    Summary\n\n-   If no DNSKEY records are found, then further investigation will
    not\n    be done and no messages will be outputted.\n\n  -------------------------------------------------------------------------------------------\n
    \ Message Tag outputted                  Level    Arguments     Description of
    when message\n                                                                tag
    is outputted\n  -------------------------------------- -------- -------------
    -----------------------------\n  `ZM_DS08_ALGO_NOT_SUPPORTED_BY_ZM`     NOTICE
    \  ns_ip_list,   This installation of\n                                                  algo_mnemo,
    \  Zonemaster does not support\n                                                  algo_num,
    \    the DNSKEY algorithm.\n                                                  keytag
    \       \n\n  `ZM_DS08_DNSKEY_RRSIG_EXPIRED`         ERROR    ns_ip_list,   DNSKEY
    RRset is signed with\n                                                  keytag
    \       an RRSIG that has expired.\n\n  `ZM_DS08_DNSKEY_RRSIG_NOT_YET_VALID`   ERROR
    \   ns_ip_list,   DNSKEY RRset is signed with a\n                                                  keytag
    \       not yet valid RRSIG.\n\n  `ZM_DS08_MISSING_RRSIG_IN_RESPONSE`    ERROR
    \   ns_ip_list    DNSKEY is unsigned which is\n                                                                against
    expectation.\n\n  `ZM_DS08_NO_MATCHING_DNSKEY`           ERROR    ns_ip_list,
    \  DNSKEY RRset is signed with\n                                                  keytag
    \       an RRSIG that does not match\n                                                                any
    DNSKEY.\n\n  `ZM_DS08_RRSIG_NOT_VALID_BY_DNSKEY`    ERROR    ns_ip_list,   DNSKEY
    RRset is signed with\n                                                  keytag
    \       an RRSIG that cannot be\n                                                                validated
    by the matching\n                                                                DNSKEY.\n
    \ -------------------------------------------------------------------------------------------\n\nThe
    value in the Level column is the default severity level of the\nmessage. The severity
    level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
    Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
    argument names in the Arguments column lists the arguments used in\nthe message.
    The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
    Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
    least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
    *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
    Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
    but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
    no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
    or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
    Case is \"pass\".\n"
  Errors:
  - ZM_DS08_ALGO_NOT_SUPPORTED_BY_ZM
  - ZM_DS08_NO_MATCHING_DNSKEY
  - ZM_DS08_DNSKEY_RRSIG_NOT_YET_VALID
  - ZM_DS08_RRSIG_NOT_VALID_BY_DNSKEY
  - ZM_DS08_DNSKEY_RRSIG_EXPIRED
  - ZM_DS08_MISSING_RRSIG_IN_RESPONSE
  Maturity: BETA
  Summary: Valid RRSIG for DNSKEY

dnssec-09:
  Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
    see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec09.md>.\n\n#
    Objective\n\nIf the zone is signed, the SOA RR should be signed with a valid RRSIG\nusing
    a DNSKEY from the DNSKEY RR set. This is described in [RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.2),\nsection
    2.2.\n\nThis test case will verify if the *Child Zone* meets that requirement.\n\n#
    Summary\n\n-   If no DNSKEY records are found, then further investigation will
    not\n    be done and no messages will be outputted.\n\n  ------------------------------------------------------------------------------------------\n
    \ Message Tag outputted                 Level    Arguments     Description of
    when message\n                                                               tag
    is outputted\n  ------------------------------------- -------- ------------- -----------------------------\n
    \ `ZM_DS09_ALGO_NOT_SUPPORTED_BY_ZM`    NOTICE   ns_ip_list,   This installation
    of\n                                                 algo_mnemo,   Zonemaster
    does not support\n                                                 algo_num,     the
    DNSKEY algorithm.\n                                                 keytag        \n\n
    \ `ZM_DS09_MISSING_RRSIG_IN_RESPONSE`   ERROR    ns_ip_list    SOA is unsigned
    which is\n                                                               against
    expectation\n\n  `ZM_DS09_NO_MATCHING_DNSKEY`          ERROR    ns_ip_list,   SOA
    is signed with an RRSIG\n                                                 keytag
    \       that does not match any\n                                                               DNSKEY\n\n
    \ `ZM_DS09_RRSIG_NOT_VALID_BY_DNSKEY`   ERROR    ns_ip_list,   SOA is signed with
    an RRSIG\n                                                 keytag        that
    cannot be validated by\n                                                               the
    matching DNSKEY\n\n  `ZM_DS09_SOA_RRSIG_EXPIRED`           ERROR    ns_ip_list,
    \  SOA is signed with an RRSIG\n                                                 keytag
    \       that has expired\n\n  `ZM_DS09_SOA_RRSIG_NOT_YET_VALID`     ERROR    ns_ip_list,
    \  SOA is signed with a not yet\n                                                 keytag
    \       valid RRSIG\n  ------------------------------------------------------------------------------------------\n\nThe
    value in the Level column is the default severity level of the\nmessage. The severity
    level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
    Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
    argument names in the Arguments column lists the arguments used in\nthe message.
    The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
    Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
    least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
    *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
    Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
    but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
    no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
    or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
    Case is \"pass\".\n"
  Errors:
  - ZM_DS09_ALGO_NOT_SUPPORTED_BY_ZM
  - ZM_DS09_SOA_RRSIG_EXPIRED
  - ZM_DS09_NO_MATCHING_DNSKEY
  - ZM_DS09_SOA_RRSIG_NOT_YET_VALID
  - ZM_DS09_MISSING_RRSIG_IN_RESPONSE
  - ZM_DS09_RRSIG_NOT_VALID_BY_DNSKEY
  Maturity: BETA
  Summary: RRSIG(SOA) must be valid and created by a valid DNSKEY

dnssec-10:
  Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
    see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec10.md>.\n\n#
    Objective\n\nWhen DNSSEC is enabled, NSEC or NSEC3 records provide a secure denial
    of\nexistence for records not present in the zone. This test case verifies\nthat
    correct NSEC or NSEC3 records with valid signatures are returned\nfor a query
    for an non-existent name.\n\nFurthermore, it is verified that the name servers
    for the zone are\nconsistent about NSEC and NSEC3, i.e. either all servers should
    use NSEC\nor all servers should use NSEC3. It is never permitted to serve both\nNSEC
    and NSEC3 for the same zone.\n\nThe use of the NSEC RR type is described in [RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-3.1.3),\nsection
    3.1.3, and the description of the NSEC RR itself is in [RFC\n4034](https://datatracker.ietf.org/doc/html/rfc4034#section-4),
    section\n4.\n\nThe description of the NSEC3 RR is in [RFC\n5155](https://datatracker.ietf.org/doc/html/rfc5155#section-3),
    section\n3, and its use in the DNS response is described in [RFC\n5155](https://datatracker.ietf.org/doc/html/rfc5155#section-7.2),\nsection
    7.2.\n\n# Summary\n\n-   If no DNSKEY records are found, then further investigation
    will not\n    be done and no messages will be outputted.\n\n  ----------------------------------------------------------------------------------------------\n
    \ Message Tag outputted                   Level    Arguments     Description of
    when message tag\n                                                                 is
    outputted\n  --------------------------------------- -------- ------------- -------------------------------\n
    \ `ZM_DS10_ALGO_NOT_SUPPORTED_BY_ZM`      NOTICE   ns_ip_list,   This installation
    of Zonemaster\n                                                   algo_mnemo,
    \  does not support the DNSKEY\n                                                   algo_num,
    \    algorithm.\n                                                   keytag        \n\n
    \ `ZM_DS10_ANSWER_VERIFY_ERROR`           ERROR    ns_ip_list,   RRSIG on record
    or records in\n                                                   domain,       answer
    section cannot be\n                                                   rrtype        verified.\n\n
    \ `ZM_DS10_HAS_NSEC`                      INFO                   Consistent NSEC
    returned from\n                                                                 servers.\n\n
    \ `ZM_DS10_HAS_NSEC3`                     INFO                   Consistent NSEC3
    returned from\n                                                                 servers.\n\n
    \ `ZM_DS10_INCONSISTENT_NSEC_NSEC3`       ERROR    2 ns_ip_list  Some servers
    return NSEC,\n                                                                 others
    return NSEC3.\n\n  `ZM_DS10_MISSING_NSEC_NSEC3`            ERROR    ns_ip_list
    \   Missing expected NSEC or NSEC3\n                                                                 in
    a signed zone.\n\n  `ZM_DS10_MIXED_NSEC_NSEC3`              ERROR    ns_ip_list
    \   Both NSEC and NSEC3 are\n                                                                 returned
    from the same server.\n\n  `ZM_DS10_NAME_NOT_COVERED_BY_NSEC`      ERROR    ns_ip_list
    \   The non-existent name is not\n                                                                 correctly
    covered by the NSEC\n                                                                 records.\n\n
    \ `ZM_DS10_NAME_NOT_COVERED_BY_NSEC3`     ERROR    ns_ip_list    The non-existent
    name is not\n                                                                 correctly
    covered by the NSEC3\n                                                                 records.\n\n
    \ `ZM_DS10_NON_EXISTENT_RESPONSE_ERROR`   ERROR    ns_ip_list    No or error in
    response of an\n                                                                 expected
    non-existent name.\n\n  `ZM_DS10_NSEC3_MISSING_SIGNATURE`       ERROR    ns_ip_list
    \   Missing signatures for NSEC3\n                                                                 record
    or records.\n\n  `ZM_DS10_NSEC3_RRSIG_VERIFY_ERROR`      ERROR    ns_ip_list    The
    signature or signatures on\n                                                                 the
    NSEC3 record or records\n                                                                 cannot
    be correctly verfied.\n\n  `ZM_DS10_NSEC_MISSING_SIGNATURE`        ERROR    ns_ip_list
    \   Missing signatures for NSEC\n                                                                 record
    or records.\n\n  `ZM_DS10_NSEC_RRSIG_VERIFY_ERROR`       ERROR    ns_ip_list    The
    signature or signatures on\n                                                                 the
    NSEC record or records\n                                                                 cannot
    be correctly verfied.\n\n  `ZM_DS10_UNSIGNED_ANSWER`               ERROR    ns_ip_list,
    \  RRSIG is missing for record or\n                                                   domain,
    \      records in the answer section.\n                                                   rrtype
    \       \n  ----------------------------------------------------------------------------------------------\n\nThe
    value in the Level column is the default severity level of the\nmessage. The severity
    level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
    Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
    argument names in the Arguments column lists the arguments used in\nthe message.
    The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
    Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
    least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
    *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
    Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
    but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
    no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
    or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
    Case is \"pass\".\n"
  Errors:
  - ZM_DS10_ALGO_NOT_SUPPORTED_BY_ZM
  - ZM_DS10_NAME_NOT_COVERED_BY_NSEC3
  - ZM_DS10_INCONSISTENT_NSEC_NSEC3
  - ZM_DS10_NSEC_MISSING_SIGNATURE
  - ZM_DS10_HAS_NSEC
  - ZM_DS10_NSEC3_MISSING_SIGNATURE
  - ZM_DS10_MIXED_NSEC_NSEC3
  - ZM_DS10_UNSIGNED_ANSWER
  - ZM_DS10_ANSWER_VERIFY_ERROR
  - ZM_DS10_NON_EXISTENT_RESPONSE_ERROR
  - ZM_DS10_MISSING_NSEC_NSEC3
  - ZM_DS10_NSEC_RRSIG_VERIFY_ERROR
  - ZM_DS10_HAS_NSEC3
  - ZM_DS10_NSEC3_RRSIG_VERIFY_ERROR
  - ZM_DS10_NAME_NOT_COVERED_BY_NSEC
  Maturity: BETA
  Summary: Zone contains NSEC or NSEC3 records

dnssec-12:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec12.md>.

    # Objective

    The objectives for this Test Case has yet to be defined. This is a
    placeholder for a complete defintion of the Test Case. The Test Case is
    not yet implemented.

    Test for DNSSEC Algorithm Completeness (DS-\>DNSKEY-\>RRSIG)

    See issues [#588](https://github.com/zonemaster/zonemaster/issues/588),
    [#528](https://github.com/zonemaster/zonemaster/issues/528),
    [#529](https://github.com/zonemaster/zonemaster/issues/529) and
    [#231](https://github.com/zonemaster/zonemaster/issues/231).

    # Pass/fail criteria

    TBD.
  Errors:
  - ZM_DNSSEC_12_FAILED
  Maturity: BETA
  Summary: Test for DNSSEC Algorithm Completeness

dnssec-13:
  Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
    see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec13.md>.\n\n#
    Objective\n\nFrom [RFC\n6840](https://datatracker.ietf.org/doc/html/rfc6840#section-5.11),\nsection
    5.11:\n\n> The DS RRset and DNSKEY RRset are used to signal which algorithms are\n>
    used to sign a zone. \\[...\\] The zone MUST also be signed with each\n> algorithm
    (though not each key) present in the DNSKEY RRset. \\[...\\]\n\nTo verify that
    the whole zone is signed with all algorithms require\naccess to the complete zone,
    which is generally not possible for public\nzones. This test case is limited to
    three RRsets that must be present in\na signed zone, the SOA RRset, the NS RRset
    and the DNSKEY RRset.\n\nThis test case will verify that for each DNSKEY algorithm,
    there is a\nRRSIG of that algorithm for the three selected RRsets.\n\n# Summary\n\n-
    \  If the name server reports no DNSKEY RRset, then this test case will\n    not
    test or report anything.\n-   This test case will not report anything unless there
    is an issue to\n    report.\n\n  ----------------------------------------------------------------------------------------------\n
    \ Message Tag outputted              Level        Arguments           Description
    of when\n                                                                      message
    tag is outputted\n  ---------------------------------- ------------ -------------------
    --------------------------\n  `ZM_DS13_ALGO_NOT_SIGNED_DNSKEY`   `ERROR`      ns_ip_list,
    \        The DNSKEY RRset is not\n                                     (changed
    \    algo_mnemo,         signed with an algorithm\n                                     from
    \        algo_num            present in the DNSKEY\n                                     `WARNING`)
    \                      RRset\n\n  `ZM_DS13_ALGO_NOT_SIGNED_NS`       `ERROR`      ns_ip_list,
    \        The NS RRset is not signed\n                                     (changed
    \    algo_mnemo,         with an algorithm present\n                                     from
    \        algo_num            in the DNSKEY RRset\n                                     `WARNING`)
    \                      \n\n  `ZM_DS13_ALGO_NOT_SIGNED_SOA`      `ERROR`      ns_ip_list,
    \        The SOA RRset is not\n                                     (changed     algo_mnemo,
    \        signed with an algorithm\n                                     from         algo_num
    \           present in the DNSKEY\n                                     `WARNING`)
    \                      RRset\n  ----------------------------------------------------------------------------------------------\n\nThe
    value in the Level column is the default severity level of the\nmessage. The severity
    level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
    Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
    argument names in the Arguments column lists the arguments used in\nthe message.
    The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
    Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
    least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
    *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
    Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
    but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
    no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
    or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
    Case is \"pass\".\n"
  Errors:
  - ZM_DS13_ALGO_NOT_SIGNED_DNSKEY
  - ZM_DS13_ALGO_NOT_SIGNED_SOA
  - ZM_DS13_ALGO_NOT_SIGNED_NS
  Maturity: BETA
  Summary: All DNSKEY algorithms used to sign the zone

dnssec-14:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec14.md>.

    # Objective

    The DNSKEYs based on RSA have different minimum and maximum key sizes,
    which must be followed. This test case will validate the keys size of
    such keys. RSA based algorithms that are deprecated or else not suitable
    for DNSKEY ([RFC
    8624](https://www.rfc-editor.org/rfc/rfc8624.html#section-3.1) and [IANA
    registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml))
    are just ignored. See test case [DNSSEC05](./dnssec05.md) for test of
    algorithm.

    The table 1 below specify the maximum and minimum key size,
    respectively. Algorithm number can be found in [IANA
    registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml).

    Table 1: Minimum and maximum RSA key sizes in bits

      Algorithm   Min size   Max size   Reference
      ----------- ---------- ---------- ---------------------------------------------------------------------
      5           512        4096       [RFC 3110](https://datatracker.ietf.org/doc/html/rfc3110)
      7           512        4096       [RFC 5155](https://datatracker.ietf.org/doc/html/rfc5155)
      8           512        4096       [RFC 5702](https://datatracker.ietf.org/doc/html/rfc5702#section-2)
      10          1024       4096       [RFC 5702](https://datatracker.ietf.org/doc/html/rfc5702#section-2)

    It is also recommended that an RSA based algorithm has a key length of
    at least 2048 bit as stated in [NIST SP 800-57 Part 1
    Rev. 4](https://csrc.nist.gov/publications/detail/sp/800-57-part-1/rev-4/archive/2016-01-28),
    table 2 on page 53 in section 5.6.1 and table 4 on page 55 in section
    5.6.2.

    This test case verifies that RSA DNSKEYs follows the stated key lengths
    from the RFCs and also the NIST recommended shortest key length.

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *ERROR* or *CRITICAL*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level *WARNING*, but no message with severity
    level *ERROR* or *CRITICAL*.

    In other cases the outcome of this Test Case is "pass".

      Message                          Default severity level
      -------------------------------- ----------------------------------
      `ZM_NO_RESPONSE`                 `ERROR` (changed from `DEBUG`)
      `ZM_NO_RESPONSE_DNSKEY`          `ERROR` (changed from `WARNING`)
      `ZM_DNSKEY_SMALLER_THAN_REC`     WARNING
      `ZM_DNSKEY_TOO_SMALL_FOR_ALGO`   ERROR
      `ZM_DNSKEY_TOO_LARGE_FOR_ALGO`   ERROR
      `ZM_KEY_SIZE_OK`                 INFO
  Errors:
  - ZM_NO_RESPONSE
  - ZM_DNSKEY_TOO_LARGE_FOR_ALGO
  - ZM_DNSKEY_SMALLER_THAN_REC
  - ZM_KEY_SIZE_OK
  - ZM_NO_RESPONSE_DNSKEY
  - ZM_DNSKEY_TOO_SMALL_FOR_ALGO
  Maturity: BETA
  Summary: Check for valid RSA DNSKEY key size

dnssec-15:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec15.md>.

    # Objective

    CDS and CDNSKEY record types are defined in [RFC
    7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC
    8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types
    are optional in a zone. The objective of this test case is to verify
    that they are correctly set-up, if included in the zone.

    If a CDS record is included in the zone, the corresponding CDNSKEY
    record should also be included ([RFC
    7344](https://datatracker.ietf.org/doc/html/rfc7344#section-4), section
    4).

    The CDS and CDNSKEY RRsets should be consistent between all name servers
    for the zone in question.

    If there are both CDS RRs and CDNSKEY RRs in the zone they must match in
    content ([RFC
    7344](https://datatracker.ietf.org/doc/html/rfc7344#section-4), section
    4). It means that both must be derived from the same DNSKEY or both
    being "delete" CDS and CDNSKEY.

    # Summary

      ------------------------------------------------------------------------------------------------------------
      Message Tag outputted            [Default                                 Description of when message tag is
                                       level](../SeverityLevelDefinitions.md)   outputted
      -------------------------------- ---------------------------------------- ----------------------------------
      `ZM_DS15_HAS_CDNSKEY_NO_CDS`     NOTICE                                   CDNSKEY RRset is found, but no CDS
                                                                                RRset.

      `ZM_DS15_HAS_CDS_AND_CDNSKEY`    INFO                                     CDNSKEY and CDS RRsets are found.

      `ZM_DS15_HAS_CDS_NO_CDNSKEY`     NOTICE                                   CDS RRset is found, but no CDNSKEY
                                                                                RRset.

      `ZM_DS15_INCONSISTENT_CDNSKEY`   ERROR                                    All servers do not have the same
                                                                                CDNSKEY RRset.

      `ZM_DS15_INCONSISTENT_CDS`       ERROR                                    All servers do not have the same
                                                                                CDS RRset.

      `ZM_DS15_MISMATCH_CDS_CDNSKEY`   ERROR                                    Both CDS and CDNSKEY RRsets are
                                                                                found but they do not match.

      `ZM_DS15_NO_CDS_CDNSKEY`         INFO                                     No CDS or CDNSKEY RRsets are found
                                                                                on any name server.
      ------------------------------------------------------------------------------------------------------------

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
    or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level
    *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
    severity level *ERROR* or *CRITICAL*.

    In other cases, no message or only messages with severity level
    *[INFO](../SeverityLevelDefinitions.md#info)* or
    *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
    Test Case is "pass".
  Errors:
  - ZM_DS15_HAS_CDNSKEY_NO_CDS
  - ZM_DS15_INCONSISTENT_CDS
  - ZM_DS15_HAS_CDS_NO_CDNSKEY
  - ZM_DS15_NO_CDS_CDNSKEY
  - ZM_DS15_HAS_CDS_AND_CDNSKEY
  - ZM_DS15_MISMATCH_CDS_CDNSKEY
  - ZM_DS15_INCONSISTENT_CDNSKEY
  Maturity: BETA
  Summary: Existence of CDS and CDNSKEY

dnssec-16:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec16.md>.

    # Objective

    CDS and CDNSKEY record types are defined in [RFC
    7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC
    8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types
    are optional in a zone. The objective of this test case is to verify
    that the CDS RRset is valid. This test case is only relevant if the zone
    has at least one CDS record. For tests of the CDNSKEY, see test case
    [DNSSEC17](dnssec17.md).

    # Summary

    -   If no CDS record is found, the test case will terminate early with
        no message tag outputted.
    -   If a CDS record is of "delete" type, then it can by definition not
        match or point at any DNSKEY record.

      -------------------------------------------------------------------------------------------------------------------
      Message Tag outputted                    [Default                                 Description of when message tag
                                               level](../SeverityLevelDefinitions.md)   is outputted
      ---------------------------------------- ---------------------------------------- ---------------------------------
      `ZM_DS16_CDS_INVALID_RRSIG`              ERROR                                    CDS RRset is signed with an
                                                                                        invalid RRSIG.

      `ZM_DS16_CDS_MATCHES_NON_SEP_DNSKEY`     `ERROR` (changed from `NOTICE`)          CDS record matches a DNSKEY with
                                                                                        SEP bit (bit 15) unset.

      `ZM_DS16_CDS_MATCHES_NON_ZONE_DNSKEY`    ERROR                                    CDS record matches a DNSKEY with
                                                                                        zone bit (bit 7) unset.

      `ZM_DS16_CDS_MATCHES_NO_DNSKEY`          `ERROR` (changed from `WARNING`)         CDS record does not match any
                                                                                        DNSKEY in DNSKEY RRset.

      `ZM_DS16_CDS_NOT_SIGNED_BY_CDS`          `ERROR` (changed from `NOTICE`)          CDS RRset is not signed by the
                                                                                        key that the CDS record points
                                                                                        to.

      `ZM_DS16_CDS_SIGNED_BY_UNKNOWN_DNSKEY`   ERROR                                    CDS RRset is signed by a key not
                                                                                        in DNSKEY RRset.

      `ZM_DS16_CDS_UNSIGNED`                   ERROR                                    CDS RRset is unsigned.

      `ZM_DS16_CDS_WITHOUT_DNSKEY`             ERROR                                    CDS RRset exists, but there is no
                                                                                        DNSKEY RRset.

      `ZM_DS16_DELETE_CDS`                     INFO                                     CDS RRset has a "delete" CDS
                                                                                        record as a single record.

      `ZM_DS16_DNSKEY_NOT_SIGNED_BY_CDS`       `ERROR` (changed from `WARNING`)         DNSKEY RRset is not signed by the
                                                                                        key or keys that the CDS records
                                                                                        point to.

      `ZM_DS16_MIXED_DELETE_CDS`               ERROR                                    "Delete" CDS record is mixed with
                                                                                        normal CDS record.
      -------------------------------------------------------------------------------------------------------------------

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
    or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level
    *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
    severity level *ERROR* or *CRITICAL*.

    In other cases, no message or only messages with severity level
    *[INFO](../SeverityLevelDefinitions.md#info)* or
    *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
    Test Case is "pass".
  Errors:
  - ZM_DS16_CDS_INVALID_RRSIG
  - ZM_DS16_CDS_UNSIGNED
  - ZM_DS16_CDS_NOT_SIGNED_BY_CDS
  - ZM_DS16_MIXED_DELETE_CDS
  - ZM_DS16_CDS_MATCHES_NON_ZONE_DNSKEY
  - ZM_DS16_DELETE_CDS
  - ZM_DS16_CDS_SIGNED_BY_UNKNOWN_DNSKEY
  - ZM_DS16_CDS_WITHOUT_DNSKEY
  - ZM_DS16_CDS_MATCHES_NON_SEP_DNSKEY
  - ZM_DS16_DNSKEY_NOT_SIGNED_BY_CDS
  - ZM_DS16_CDS_MATCHES_NO_DNSKEY
  Maturity: BETA
  Summary: Validate CDS

dnssec-17:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec17.md>.

    # Objective

    CDS and CDNSKEY record types are defined in [RFC
    7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC
    8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types
    are optional in a zone. The objective of this test case is to verify
    that the CDNSKEY RRset is valid. This test case is only relevant if the
    zone has at least one CDNSKEY record. For tests of the CDS, see test
    case [DNSSEC16](dnssec16.md).

    # Summary

    -   If no CDNSKEY record is found, the test case will terminate early
        with no message tag outputted.
    -   If a CDNSKEY record is of "delete" type, then it can by definition
        not match or point at any DNSKEY record.

      -----------------------------------------------------------------------------------------------------------------------
      Message Tag outputted                        [Default                                 Description of when message tag
                                                   level](../SeverityLevelDefinitions.md)   is outputted
      -------------------------------------------- ---------------------------------------- ---------------------------------
      `ZM_DS17_CDNSKEY_INVALID_RRSIG`              ERROR                                    CDNSKEY RRset signed with an
                                                                                            invalid RRSIG.

      `ZM_DS17_CDNSKEY_IS_NON_SEP`                 `ERROR` (changed from `NOTICE`)          CDNSKEY record has the SEP bit
                                                                                            (bit 15) unset.

      `ZM_DS17_CDNSKEY_IS_NON_ZONE`                ERROR                                    CDNSKEY record has the zone bit
                                                                                            (bit 7) unset.

      `ZM_DS17_CDNSKEY_MATCHES_NO_DNSKEY`          `ERROR` (changed from `WARNING`)         CDNSKEY record does not match any
                                                                                            DNSKEY in DNSKEY RRset.

      `ZM_DS17_CDNSKEY_NOT_SIGNED_BY_CDNSKEY`      `ERROR` (changed from `NOTICE`)          CDNSKEY RRset is not signed by
                                                                                            the key that the CDNSKEY record
                                                                                            points to.

      `ZM_DS17_CDNSKEY_SIGNED_BY_UNKNOWN_DNSKEY`   ERROR                                    CDNSKEY RRset is signed by a key
                                                                                            not in DNSKEY RRset.

      `ZM_DS17_CDNSKEY_UNSIGNED`                   ERROR                                    CDNSKEY RRset is unsigned.

      `ZM_DS17_CDNSKEY_WITHOUT_DNSKEY`             ERROR                                    CDNSKEY RRset exists, but there
                                                                                            is no DNSKEY RRset.

      `ZM_DS17_DELETE_CDNSKEY`                     INFO                                     CDNSKEY RRset has a "delete"
                                                                                            CDNSKEY record as a single
                                                                                            record.

      `ZM_DS17_DNSKEY_NOT_SIGNED_BY_CDNSKEY`       `ERROR` (changed from `WARNING`)         DNSKEY RRset is not signed by the
                                                                                            key or keys that the CDNSKEY
                                                                                            records point to.

      `ZM_DS17_MIXED_DELETE_CDNSKEY`               ERROR                                    "Delete" CDNSKEY record is mixed
                                                                                            with normal CDNSKEY record.
      -----------------------------------------------------------------------------------------------------------------------

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
    or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level
    *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
    severity level *ERROR* or *CRITICAL*.

    In other cases, no message or only messages with severity level
    *[INFO](../SeverityLevelDefinitions.md#info)* or
    *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
    Test Case is "pass".
  Errors:
  - ZM_DS17_CDNSKEY_INVALID_RRSIG
  - ZM_DS17_CDNSKEY_UNSIGNED
  - ZM_DS17_CDNSKEY_NOT_SIGNED_BY_CDNSKEY
  - ZM_DS17_MIXED_DELETE_CDNSKEY
  - ZM_DS17_CDNSKEY_IS_NON_ZONE
  - ZM_DS17_DELETE_CDNSKEY
  - ZM_DS17_CDNSKEY_SIGNED_BY_UNKNOWN_DNSKEY
  - ZM_DS17_CDNSKEY_WITHOUT_DNSKEY
  - ZM_DS17_CDNSKEY_IS_NON_SEP
  - ZM_DS17_DNSKEY_NOT_SIGNED_BY_CDNSKEY
  - ZM_DS17_CDNSKEY_MATCHES_NO_DNSKEY
  Maturity: BETA
  Summary: Validate CDNSKEY

dnssec-18:
  Description: |
    This test case comes from version v2023.1.4 of Zonemaster. For more
    information, see
    <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec18.md>.

    # Objective

    CDS and CDNSKEY record types are defined in [RFC
    7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC
    8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types
    are optional in a zone. The objective of this test case is to verify
    that there is a correct chain of trust from DS, in the parent zone to
    the CDS and CDNSKEY RRsets ([RFC
    7344](https://datatracker.ietf.org/doc/html/rfc7344#section-4.1),
    section 4.1).

    As stated in [RFC
    4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.4),
    section 2.4: \> A DS RR SHOULD point to a DNSKEY RR that is present in
    the child's \> apex DNSKEY RRset, and the child's apex DNSKEY RRset
    SHOULD be \> signed by the corresponding private key."

    This Test case is only relevant if \* The *Child Zone* has either CDS or
    CDNSKEY record or both, and \* The parent zone has a DS RRset for the
    *Child Zone*.

    # Summary

    -   If no CDS or CDNSKEY records are found, this test case is not run
        and no message will be outputted.
    -   If no DS records are found at parent, this test case is not run and
        no message will be outputted.

      -------------------------------------------------------------------------------------------------------------------
      Message Tag outputted                 [Default                                 Description of when message tag is
                                            level](../SeverityLevelDefinitions.md)   outputted
      ------------------------------------- ---------------------------------------- ------------------------------------
      `ZM_DS18_NO_MATCH_CDS_RRSIG_DS`       ERROR                                    The CDS RRset is not signed with a
                                                                                     DNSKEY record that a DS record
                                                                                     points to.

      `ZM_DS18_NO_MATCH_CDNSKEY_RRSIG_DS`   ERROR                                    CDNSKEY RRset is not signed with a
                                                                                     DNSKEY record that a DS record
                                                                                     points to.
      -------------------------------------------------------------------------------------------------------------------

    # Pass/fail criteria

    The outcome of this Test Case is "fail" if there is at least one message
    with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
    or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.

    The outcome of this Test Case is "warning" if there is at least one
    message with the severity level
    *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
    severity level *ERROR* or *CRITICAL*.

    In other cases, no message or only messages with severity level
    *[INFO](../SeverityLevelDefinitions.md#info)* or
    *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
    Test Case is "pass".
  Errors:
  - ZM_DS18_NO_MATCH_CDS_RRSIG_DS
  - ZM_DS18_NO_MATCH_CDNSKEY_RRSIG_DS
  Maturity: BETA
  Summary: Validate trust from DS to CDS and CDNSKEY

