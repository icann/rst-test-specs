epp.hostName:
  Description: |
    The fully-qualified domain name of the EPP server.

    The server name **MUST** comply with the requirements for valid
    hostnames described in [RFC
    1123](https://www.rfc-editor.org/rfc/rfc1123.html), section 2.1.
    Additionally, all IDN labels in the server name **MUST** comply with
    IDNA2008.
  Type: input
  Example: epp.rsp.tech
  Required: true
  Schema:
    type: string
    format: hostname

epp.greeting:
  Description: |
    An XML instance which contains a copy of the server's `<greeting>`.
  Type: file
  Required: true
  Example: greeting.xml
  Schema:
    type: string

epp.clid01:
  Description: The username used to log in to the EPP server.
  Type: input
  Required: true
  Example: clid-01
  Schema:
    type: string
    minLength: 3
    maxLength: 16

epp.pwd01:
  Description: The password used to log in to the EPP server.
  Type: input
  Required: true
  Example: foo2bar
  Schema:
    type: string

epp.serverIssuedClientCertificate01:
  Description: |
    If the EPP server uses a private CA to issue client certificates, then
    a certificate generated using the CSR provided in the `epp.client01CSR`
    resource may be provided using this parameter. This certificate will only be
    used in conjunction with the `epp.clid01` and `epp.pwd01` credentials. If
    the server will accept ICANN's own client certificate, this parameter
    **MUST** be empty.
  Type: file
  Required: false
  Example: rst_test_client_cert.pem
  Schema:
    type: string

epp.serverIssuedClientCertificate02:
  Description: |
    If the EPP server uses a private CA to issue client certificates, then
    a certificate generated using the CSR provided in the `epp.client02CSR`
    resource may be provided using this parameter. This certificate will only be
    used in conjunction with the `epp.clid02` and `epp.pwd02` credentials. If
    the server will accept ICANN's own client certificate, this parameter
    **MUST** be omitted.
  Type: file
  Required: false
  Example: rst_test_client_cert.pem
  Schema:
    type: string

epp.clid02:
  Description: The username used for transfer tests.
  Type: input
  Required: true
  Example: clid-02
  Schema:
    type: string
    minLength: 3
    maxLength: 16

epp.pwd02:
  Description: The password used for transfer tests.
  Type: input
  Required: true
  Example: foo3bar
  Schema:
    type: string

epp.clid01DataModel:
  Description: |
    the data model configured for this registrar. This may be omitted and will
    in any case be ignored unless the value of the `general.registryDataModel`
    input parameter is `per-registrar`.

    * A value of `minimum` means that this registrar does not need to specify a
      registrant object when creating a domain name.
    * A value of `maximum` means that this registrar **MUST** specify a
      registrant object when creating a domain name.

    If the value of the `general.registryDataModel` input parameter is
    `per-registrar`, then the value of this input parameter **MUST** be
    different from the value of the `epp.clid02DataModel` input parameter.
  Type: input
  Required: false
  Example: minimum
  Schema:
    type: string
    enum:
      - minimum
      - maximum

epp.clid02DataModel:
  Description: |
    the data model configured for this registrar. This may be omitted and will
    in any case be ignored unless the value of the `general.registryDataModel`
    input parameter is `per-registrar`.

    * A value of `minimum` means that this registrar does not need to specify a
      registrant object when creating a domain name.
    * A value of `maximum` means that this registrar **MUST** specify a
      registrant object when creating a domain name.

    If the value of the `general.registryDataModel` input parameter is
    `per-registrar`, then the value of this input parameter **MUST** be
    different from the value of the `epp.clid01DataModel` input parameter.
  Type: input
  Required: false
  Example: minimum
  Schema:
    type: string
    enum:
      - minimum
      - maximum

epp.hostModel:
  Description: |
    The host model supported by the EPP server. The possible values for this
    parameter are:
      * `objects`
      * `attributes`
  Type: input
  Required: true
  Example: objects
  Schema:
    type: string
    enum:
      - objects
      - attributes

epp.secDNSInterfaces:
  Description: |
    Which of the interfaces defined in Section 4 of [RFC
    5910](https://www.rfc-editor.org/rfc/rfc5910.html) the server supports
    (either `dsData` or `keyData`).
  Type: input
  Required: true
  Example: dsData
  Schema:
    type: string
    enum:
      - dsData
      - keyData

epp.registeredNames:
  Description: |
    An array of domain names that exist in the EPP server and which are
    therefore unavailable for registration. The domains **MUST NOT** be under
    the sponsorship of the `epp.clid01` or `epp.clid02` registrars. The array
    **MUST** contain one member for each TLD in the TLD set.
  Type: input
  Example: ["example.example1", "example.example2"]
  Required: true
  Schema:
    type: array
    items:
      type: string
      format: hostname

epp.registeredNameservers:
  Description: |
    An array of host objects that exist in the EPP server and which are
    therefore unavailable for registration.

    If the value of `epp.hostModel` is `objects`, for each TLD in the TLD set,
    this array **MUST** contain one hostname which is subordinate to that TLD.

    However, if it is `attributes`, this parameter **MUST** be omitted.
  Type: input
  Required: false
  Example: ["ns1.example.example1", "ns2.example.example2"]
  Schema:
    type: array
    items:
      type: string
      format: hostname

epp.registeredContacts:
  Description: |
    An array of contact IDs that exist in the EPP server and which are therefore
    unavailable for registration.

    If the value of `general.registryDataModel` is `minimum`, this parameter
    **MUST** be omitted. Otherwise, at least two contact IDs **MUST** be
    provided.
  Type: input
  Required: false
  Example: ["abc123", "def321"]
  Schema:
    type: array
    minItems: 2
    items:
      type: string

#epp.restoreReportRequired:
#  Description: |
#    Whether the server requires submission of a restore report when a client
#    attempts to restore a domain.
#  Type: input
#  Required: true
#  Example: false
#  Schema:
#    type: boolean

epp.requiredContactTypes:
  Description: |
    An array containing the values of the `type` attribute of `<contact>`
    element(s) that are required to successfully create a domain name.

    If the value of `general.registryDataModel` is `minimum`, this array `MUST`
    be empty.
  Type: input
  Required: true
  Example: ["admin"]
  Schema:
    type: array
    items:
      type: string
      enum:
        - admin
        - tech
        - billing

epp.supportedContactElements:
  Description: |
    In [RFC 5733](https://www.rfc-editor.org/rfc/rfc5733.html#section-3.2.1),
    the mandatory elements that **MUST** be included in contact `<create>`
    commands are `<name>`, `<city>`, `<cc>` and `<email>`. RFC 5733 also
    specifies a set of optional elements. To comply with RFC 5733, EPP
    servers **MUST** accept and process the mandatory elements, but **MAY**
    reject commands that contain optional elements.

    This input parameter should be used to indicate which of the optional
    elements the EPP server supports.

    If a value contains a colon (`:`), then the first part is the element name
    and the second part is an attribute name.

    Elements that are listed in this parameter **MAY** also be listed in the
    `epp.requiredContactElements` parameter.

    If the value of `general.registryDataModel` is `minimum`, this array `MUST`
    be empty.
  Type: input
  Required: true
  Example:
    - org
    - street
    - sp
    - pc
    - voice
    - voice:ext
  Schema:
    type: array
    items:
      type: string
      enum:
        - org
        - street
        - sp
        - pc
        - voice
        - voice:ext
        - fax
        - fax:ext

epp.requiredContactElements:
  Description: |
    This input parameter is complementary to the `epp.supportedContactElements`
    parameter. It may be used to indicate those elements which are optional in
    [RFC 5733](https://www.rfc-editor.org/rfc/rfc5733.html) but are mandatory in
    the server policy.

    All elements that are listed in this parameter **MUST** also be listed in
    the `epp.supportedContactElements` parameter.

    This input parameter is an array of element tag names, optionally suffixed
    with a colon (`:`) followed by an attribute name.

    If the value of `general.registryDataModel` is `minimum`, this array `MUST`
    be empty.
  Type: input
  Required: false
  Example:
    - street
    - voice
  Schema:
    type: array
    items:
      type: string
      enum:
        - org
        - street
        - sp
        - pc
        - voice
        - voice:ext
        - fax
        - fax:ext

epp.loginExtension:
   Description: |
     An EPP `<extension>` element containing the extension elements(s) which are
     required to succesfully log in to the EPP server.

     The XML namespace URI(s) of the child elements(s) of the `<extension>`
     element **MUST** appear in `<extURI>` elements in the `<greeting>`, and the
     extension(s) **MUST** be registered in the [EPP Extension
     Registry](https://www.iana.org/assignments/epp-extensions/epp-extensions.xhtml).

     If no extensions are required, this input parameter **MUST** be omitted. If
     provided, its content will not be validated until the test run occurs, and
     if found to be invalid, the `EPP_INVALID_EXTENSION` error will be emitted.

     **Note:** the RST v2.0 service natively supports the [Login
     Security extension (RFC
     8807)](https://www.rfc-editor.org/rfc/rfc8807.html). If your EPP server
     implements this extension, you **MUST NOT** include it in this input
     parameter.
   Type: input
   Required: false
   Schema:
     Type: string
   Example: |
     <extension xmlns='urn:ietf:params:xml:ns:epp-1.0'>
       <login xmlns="our:epp:extension">
         <!-- extension element(s) go here
       </login>
       <!-- any additional element(s) here -->
     </extension>
