---
RST-Test-Plan-Schema-Version: 1.3
Version: 3.0
Last-Updated: 2023-10-23

Contact:
  Name: GDS Technical Services
  Organization: Internet Corporation for Assigned Names and Numbers (ICANN)
  Email: rst@icann.org

Preamble: |
  The Test System consists of several *test plans*, each of which addresses a
  particular scenario. The test plans follow a standard structure and
  methodology derived from ISO/IEC 29119 *(formerly IEEE 829-2008)*.

  Each *test plan* includes one or more *test suites*, which in turn include
  one or more *test cases*. For a test to succeed, every test case has to pass.

  This file describes each test plan, suite and case in the RST system.

  ### 2.1. Key acronyms and terms

  RST
  : Registry System Testing. This system.

  PDT
  : Pre-Delegation Test. A test carried out prior to the delegation of a new TLD
  into the DNS root zone.

  RSP
  : Registry Service Provider. A specialist provider of critical registry
  services.

  DNS
  : Domain Name System. The internet's system of globally unique identifiers.

  TLD
  : Top-level domain. The highest level of the DNS namespace hierarchy.

  gTLD
  : generic top-level domain.

  DNSSEC
  : DNS Security Extensions.

  EPP
  : Extensible Provisioning Protocol. The protocol used by registrars to create
  and manage domain name registrations in an SRS.

  SRS
  : Shared Registry System. A TLD registry in which registrations are managed
  by one or more registrars, using EPP.

  RDDS
  : Registration Data Directory Services. A service to provide access to
  data about domain registrations to third parties.

  RDAP
  : Registration Data Access Protocol. The protocol used to deliver the RDDS.

  RDE
  : Registry Data Escrow. A system whereby the registration data stored in a
  Shared Registry System is backed up to a trusted third party.

  IDN
  : Internationalized Domain Name. A domain name that contains characters not in
  the ASCII character set.

  LGR
  : Label Generation Ruleset. The rules by which IDN domain names are validated.

  RO
  : Registry Operator. The entity which ICANN has granted the right to operate a
  gTLD.

  RA
  : Registry Agreement. The contract between a Registry Operator and ICANN.

  KSK
  : Key Signing Key. A cryptographic key which acts as the Secure Entry Point
  for a DNS zone, and which signs a DNS zone's ZSKs. A digest of this key is
  published in the parent zone (ie. the root zone for a TLD).

  ZSK
  : Zone Signing Key. A cryptographic key which signs a DNS zone's resource
  records.

Test-Plans:
  StandardPreDelegationTest:
    Order: 1
    Name: Pre-Delegation Test
    Description: |
      The purpose of the Pre-Delegation Test is to verify that the applicant has
      met its commitment to establish registry operations in accordance with the
      technical and operational criteria described in the gTLD Applicant
      Guidebook (AGB). Each applicant will be required to complete PDT as a
      prerequisite to delegation into the root zone.

      The Pre-Delegation Test covers all critical registry services and IDNs,
      and therefore uses all test suites.
    Test-Suites:
      - StandardDNS
      - StandardDNSSEC
      - StandardEPP
      - StandardRDAP
      - StandardIDN
      - StandardRDE

  StandardRSPChangeTest:
    Order: 2
    Name: RSP Change Test
    Description: |
      A Registry Operator may apply to ICANN to change a Material Subcontracting
      Arrangement (MSA) and appoint a new Registry Services Provider. Before
      this change can be approved, the new RSP must complete Registry System
      Testing to ensure their systems comply with the technical and operational
      requirements of the Registry Agreement.

      The RSP Change Test covers all critical registry services and IDNs, and
      therefore uses all test suites.
    Test-Suites:
      - StandardDNS
      - StandardDNSSEC
      - StandardEPP
      - StandardIDN
      - StandardRDAP
      - StandardRDE

  DNSRSPChangeTest:
    Order: 3
    Name: DNS RSP Change Test
    Description: |
      A Registry Operator may apply to ICANN to change a Material Subcontracting
      Arrangement (MSA) and appoint a new provider of authoritative DNS services
      instead of or in addition to any existing provider(s).

      Before this change can be approved, the new DNS provider must complete
      testing to ensure their systems comply with the technical and operational
      requirements of the Registry Agreement.

      The DNS RSP Change Test uses the DNS test suite only.
    Test-Suites:
      - StandardDNS
      - StandardDNSSEC

  IDNTest:
    Order: 4
    Name: IDN Test
    Description: |
      A Registry Operator may apply to ICANN to amend its Registry Agreement
      to offer new scripts and/or languages for Internationalized Domain Names.

      The purpose of an IDN RST test is to verify that the Registry Operator’s
      registry system handles IDN registrations in accordance with the
      submitted policy statements and IDN tables.

      The IDN Test uses the IDN test suite only.
    Test-Suites:
      - StandardIDN

  SRSGatewayTest:
    Order: 5
    Name: SRS Gateway Test
    Description: |
      An SRS Gateway service is a Shared Registry System implementation that
      acts as a proxy between a subset of Registrars and the Registry. It uses
      a local cache to speed up EPP query commands, but forwards all EPP
      transform commands to the TLD Registry System. TLD registries need to
      deploy a proxy setup in order to operate in certain markets worldwide.

      The purpose of an SRS Gateway Test is to verify that the Registry
      Operator’s proxy setup operates in accordance with the technical and
      operational criteria for EPP systems described in the gTLD Applicant
      Guidebook (AGB). Furthermore, it must keep its own database synchronized
      with that of the TLD registry.

      The SRS Gateway Test Change Test uses the RDAP and EPP test suites.
    Test-Suites:
      - StandardSRSGateway

  MainRSPEvaluationTest:
    Order: 6
    Name: Main RSP Evaluation Test
    Description: |
      The Main RSP is responsible for the creation and maintenance of domain
      name registrations in a Shared Registration System (SRS). This encompasses
      the lifecycle of a domain name registration using domain registrars and
      protocols such as the Extensible Provisioning Protocol (EPP) and adherence
      to policies regarding the use and transparency domain name registrations
      through reporting, the Registration Data Access Protocol (RDAP), and other
      mechanisms.
    Test-Suites:
      - StandardEPP
      - MandatoryRPMs
      - StandardIDN
      - StandardRDAP
      - StandardRDE

  DNSRSPEvaluationTest:
    Order: 7
    Name: DNS RSP Evaluation Test
    Description: |
      DNS RSPs provide primary or secondary authoritative DNS services.
      Therefore, this test plan only covers the DNS area.

      RSPs wishing to offer DNSSEC services in addition to authoritative DNS
      will also be evaluated using the DNSSEC RSP Evaluation Test below.
    Test-Suites:
      - StandardDNS

  DNSSECRSPEvaluationTest:
    Order: 8
    Name: DNSSEC RSP Evaluation Test
    Description: |
      DNSSEC RSPs provide signing of TLD zone files as a service. They do not
      provide primary or secondary authoritative DNS services.

      RSPs wishing to offer DNSSEC services in addition to authoritative DNS
      will also be evaluated using the DNSSEC RSP Evaluation Test below.
    Test-Suites:
      - StandardDNSSEC
      - DNSSECOperations

  SRSGatewayRSPTest:
    Order: 9
    Name: SRS Gateway RSP Evaluation Test
    Description: |
      SRS Gateway RSPs provide a proxy between a subset of Registrars and the
      Registry. It uses a local cache to speed up EPP query commands, but
      forwards all EPP transform commands to the TLD Registry System. TLD
      registries need to deploy a proxy setup in order to operate in certain
      markets worldwide.
    Test-Suites:
      - StandardSRSGateway

Test-Suites:
  StandardDNS:
    Order: 1
    Name: Authoritative DNS Service
    Description: |
      The DNS test suite validates the authoritative DNS services for the TLD
      or RSP.

      The DNS test suite is taken from the test plans that are part of the
      [Zonemaster software](https://github.com/zonemaster) (`Zonemaster::Engine`
      version v4.7.3). Test case IDs from this document can be mapped to the
      Zonemaster test IDs by removing the `dns-` prefix.

      Since Zonemaster is designed to perform testing of domain names anywhere
      in the DNS hierarchy, not all Zonemaster tests are applicable for TLDs and
      may not be listed in the test suites in this document.

      ## Testing of Anycast networks using multiple vantage points

      In order to test anycast networks without requiring RSPs to provide the
      unicast adresses of their nodes, all tests carried out over the network
      will be performed from multiple vantage points. All vantage points must
      receive the same response in order for the tests to pass.
    Test-Cases: ^dns-
    Input-Parameters:
      - dns.nameservers

  StandardDNSSEC:
    Order: 2
    Name: DNS Security Extensions (DNSSEC)
    Description: |
      The DNSSEC test suite validates the DNSSEC signing service for the TLD or
      RSP.

      The DNSSEC test suite is taken from the test plans that are part of the
      [Zonemaster software](https://github.com/zonemaster) (`Zonemaster::Engine`
      version v4.7.3). Test case IDs from this document can be mapped to the
      Zonemaster test IDs by removing the `dnssec-` prefix.

      Since Zonemaster is designed to perform testing of domain names anywhere
      in the DNS hierarchy, not all Zonemaster tests are applicable for TLDs and
      may not be listed in the test suites in this document.
    Test-Cases: ^dnssec-
    Input-Parameters:
      - dns.nameservers
      - dnssec.dsRecords

  StandardRDAP:
    Order: 3
    Name: Registration Data Acess Protocol (RDAP)
    Description: |
      The DNSSEC test suite validates the RDAP service of the TLD or RSP.

      The RDAP test suite is derived from the test specification of the [RDAP
      Conformance Tool](https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf).
      As with the DNS and DNSSEC tests, the test IDs can be mapped to the test
      IDs in this document by removing the `rdap-NN` prefix.
    Test-Cases: ^rdap-
    Input-Parameters:
      - rdap.baseURLs
      - rdap.testDomains
      - rdap.testEntities
      - rdap.testNameservers

  StandardEPP:
    Order: 4
    Name: Extensible Provisioning Protocol (EPP)
    Description: |
      The EPP test suite validates the EPP service of the TLD or RSP.
    Test-Cases: ^epp-

  StandardRDE:
    Order: 5
    Name: Registry Data Escrow (RDE)
    Description: |
      The RDE test suite validates Registry Data Escrow deposits generated for
      the TLD or RSP.
    Test-Cases: ^rde-

  StandardIDN:
    Order: 6
    Name: Internationalized Domain Names (IDN)
    Description: |
      The RDE test suite validates the IDN table(s) for a TLD or RSP, including
      compliance with specifications for variant labels at the top- or second-
      level.
    Test-Cases: ^idn-

  StandardSRSGateway:
    Order: 7
    Name: SRS Gateway
    Description: |
      The SRS Gateway test suite validates the conformance of the Gateway
      registry infrastructure of a TLD or RSP, and the synchronisation between
      primary and gateway systems.
    Test-Cases: ^srsgw-

  DNSSECOperations:
    Order: 8
    Name: DNSSEC Operations
    Description: |
      This test suite verifies the ability of an RSP to carry out standard
      DNSSEC operational procedures while maintaining a chain of trust to the
      parent zone.
    Test-Cases: ^dnssecOps

  MandatoryRPMs:
    Order: 9
    Name: Mandatory Rights Protection Mechanisms (RPMs)
    Description: |
      This test suite verifies an RSP's support for the mandatory Rights
      Protection Mechanisms (RPMs), and the Launch Extension (RFC 8334) if
      supported.
    Test-Cases: ^mandatoryRPMs-

Test-Cases:

### BEGIN AUTO-GENERATED SECTION ###
#
# Don't edit anything in this section, it will be clobbered when 'make' is next
# run!
#

#exec perl ./tools/generate-zonemaster-cases.pl ../../zonemaster/zonemaster

#exec perl ./tools/generate-rdap-cases.pl "./etc/rdap conformance tool_v5.docx"

### END AUTO-GENERATED SECTION ###

  dnssecOps01-ZSKRollover:
    Summary: ZSK rollover
    Description: |
      This test case verifies the RSP's ability to perform a ZSK rollover for a
      zone.

      The system will monitor the SOA record in the domain name specified in the
      `dnssec.zskRolloverZone` input parameter. The domain may be present
      anywhere in the DNS hierarchy (that is, it does not need to be a TLD), but
      MUST have a secure chain of trust up to the root zone, so that it can be
      validated using the root zone trust anchor.

      During the test period (currently defined as 24 hours) the operator must
      successfully carry out a ZSK rollover for the domain, where the Zone
      Signing Key is replaced, without disrupting the chain of trust.

      To simplify testing, applicants may wish to provision domain that is
      configured with short TTLs and a short ZSK lifetime, so that a ZSK
      rollover is guaranteed to occur within the 24 test period.
    Input-Parameters:
      - dnssecOps.zskRolloverZone
    Dependencies:
  dnssecOps02-KSKRollover:
    Summary: KSK rollover
    Description: |
      This test case verifies the RSP's ability to perform a KSK rollover for a
      zone.

      The system will monitor the SOA record in the domain name specified in the
      `dnssec.kskRolloverZone` input parameter. The domain may be present
      anywhere in the DNS hierarchy (that is, it does not need to be a TLD), but
      MUST have a secure chain of trust up to the root zone, so that it can be
      validated using the root zone trust anchor.

      During the test period (currently defined as 24 hours) the operator must
      successfully carry out a KSK rollover for the domain, where the Key
      Signing Key is replaced, and the DS record in the parent zone is updated,
      without disrupting the chain of trust.
    Input-Parameters:
      - dnssecOps.kskRolloverZone
    Dependencies:
  dnssecOps03-AlgorithmRollover:
    Summary: algorithm rollover
    Description: |
      This test case verifies the RSP's ability to perform an algorithm rollover
      for a zone.

      The system will monitor the SOA record in the domain name specified in the
      `dnssec.algorithmRolloverZone` input parameter. The domain may be present
      anywhere in the DNS hierarchy (that is, it does not need to be a TLD), but
      MUST have a secure chain of trust up to the root zone, so that it can be
      validated using the root zone trust anchor.

      During the test period (currently defined as 72 hours) the operator must
      successfully carry out an algorithm rollover for the domain, where the
      algorithm used to secure the domain is changed, without disrupting the
      chain of trust.
    Input-Parameters:
      - dnssecOps.algorithmRolloverZone
    Dependencies:

  rde-01:
    Summary: validate deposit filename format
    Description: |
      The deposit filename must conform to the format specified in the RA.
    Input-Parameters:
      - rde.depositFile
  rde-02:
    Summary: validate signature over deposit file
    Description: |
      The signature must be valid for the deposit file and the RSP's key.
    Input-Parameters:
      - rde.publicKey
      - rde.depositFile
      - rde.signatureFile
  rde-03:
    Summary: decrypt deposit file(s)
    Description: |
      It must be possible to decrypt the deposit file using the RST key. The PGP
      key for which the deposit must be encrypted will be provided separately.
    Input-Parameters:
      - rde.depositFile
  rde-04:
    Summary: validate XML/CSV
    Description: |
      * XML deposit files must be well-formed and validate against the XML
        schema.
      * CSV files must conform to RFC 4180.
    Input-Parameters:
      - rde.depositFile
  rde-04:
    Summary: validate object types
    Description: |
      The header object must reference the correct object XML namespace URIs.

      The correct URIs is determined by the `general.minimumPublicDataSet` and
      `epp.hostModel` input parameters.

      All expected URIs must be present in the header, and the header must not
      contain any unexpected URIs.
    Input-Parameters:
      - rde.depositFile
      - general.minimumPublicDataSet
      - epp.hostModel
  rde-06:
    Summary: validate object counts
    Description: |
      The number of each type of object must match the number of objects
      actually present in the deposit file.
    Input-Parameters:
      - rde.depositFile
  rde-07:
    Summary: validate domain objects
    Description: |
      Domain objects (whether CSV or XML) must have the required object
      properties, and the values of those object properties must be well-formed.

      The required properties are:

        * `<domain:name>`
        * `<domain:roid>` (which must have a repository ID registered with IANA)
        * at least one `<domain:status>` element
        * `<domain:registrant>` (if applicable)
        * `<domain:clID>` (sponsoring registrar ID)
        * `<domain:crDate>` (creation date)
        * `<domain:exDate>` (expiry date)

      Contact and/or host objects which are referenced in domain objects must be
      present in the deposit.
    Input-Parameters:
      - rde.depositFile
      - general.minimumPublicDataSet
      - epp.hostModel
  rde-08:
    Summary: validate host objects (if applicable)
    Description: |
      Host objects (whether CSV or XML) must have the required object
      properties, and the values of those object properties must be well-formed.

      The required properties are:

        * `<host:name>`
        * `<host:roid>` (which must have a repository ID registered with IANA)
        * at least one `<domain:status>` element
        * one or more `<addr>` elements (if the host name is subordinate to
          the TLD)
        * `<host:clID>` (sponsoring registrar ID)

      If the applicant uses the host attribute model, then this test will be
      skipped.
    Input-Parameters:
      - rde.depositFile
      - epp.hostModel
  rde-09:
    Summary: validate contact objects (if applicable)
    Description: |
      Contact objects (whether CSV or XML) must have the required object
      properties, and the values of those object properties must be well-formed.

      The required properties are:

        * `<contact:id>`
        * `<contact:roid>` (which must have a repository ID registered with
          IANA)
        * at least one `<contact:status>` element
        * 1-2 `<contact:postalInfo>` elements containing the following:
            * a "type" attribute of "int" or "loc"
            * `<contact:name>` element
            * an `<contact:addr>` element containing the following:
              * at least one 1 `<contact:street>` element
              * `<contact:city>` element
              * `<contact:cc>` element
        * `<contact:voice>`
        * `<contact:email>`
        * `<contact:clID>` (sponsoring registrar ID)

      If the applicant uses the "thin" registry model, then this test will be
      skipped.
    Input-Parameters:
      - rde.depositFile
      - general.minimumPublicDataSet
  rde-10:
    Summary: validate registrar objects
    Description: |
      Registrar objects (whether CSV or XML) must have the required object
      properties, and the values of those object properties must be well-formed.

      The required properties are:

        * `<rdeRegistrar:id>`
        * `<rdeRegistrar:name>`
        * `<rdeRegistrar:gurid>` (IANA ID)
    Input-Parameters:
      - rde.depositFile
  rde-11:
    Summary: validate IDN table objects
    Description: |
      IDN table objects (whether CSV or XML) must have the required object
      properties, and the values of those object properties must be well-formed.

      All IDN table objects present in the deposit must correspond to IDN tables
      approved for the TLD, and all approved tables must have a corresponding
      object in the deposit.
    Input-Parameters:
      - rde.depositFile
  rde-12:
    Summary: validate NNDN objects
    Description: |
      NNDN table objects (whether CSV or XML) must have the required object
      properties, and the values of those object properties must be well-formed.

      The aName property of NNDN objects must not match the name property of a
      domain object.
    Input-Parameters:
      - rde.depositFile
  rde-13:
    Summary: validate EPP parameters object
    Description: |
      The EPP Parameters object must match the `<greeting>` element returned by
      the EPP server.
    Input-Parameters:
      - epp.hostName
  rde-14:
    Summary: validate policy object
    Description: |
      The object policies included in the `<rdePolicy:policy>` object must
      conform to the Registration Data Policy and the applicable data model.

      * If the `general.minimumPublicDataSet` input parameter is `true`, then
        contact objects MUST NOT be present in the deposit.
      * If the `epp.hostModelt` input parameter is `attributes`, then
        host objects MUST NOT be present in the deposit.
    Input-Parameters:
      - general.minimumPublicDataSet
      - epp.hostModel

  epp-01:
    Summary: EPP server must have at least one A record
    Description: |
      At least one `A` record must be published in the DNS for the EPP hostname,
      to allow IPv4-only hosts to connect to the EPP service.
    Input-Parameters:
      - epp.hostName
  epp-02:
    Summary: EPP server must have at least one AAAA record
    Description: |
      At least one `A` record must be published in the DNS for the EPP hostname,
      to allow IPv6-only hosts to connect to the EPP service.
    Input-Parameters:
      - epp.hostName
  epp-03:
    Summary: All IP addresses must accept TCP connections on port 700
    Description: |
      EPP is associated with TCP port 700. All IPv4/IPv6 addresses published
      in the DNS for the EPP hostname must accept TCP connections on this port.

      Since the EPP specification requires IP-based access control, the RSP must
      configure their firewall to allow access from the RST system.
    Input-Parameters:
      - epp.hostName
    Dependencies:
      - epp-01
      - epp-02
  epp-04:
    Summary: All service ports support TLSv1.2 or higher
    Description: |
      EPP uses TLS to secure the channel between client and server. The server
      must support TLSv1.2 and optionally any subsequent protocol published by
      the IETF.
    Input-Parameters:
      - epp.hostName
    Dependencies:
      - epp-03
  epp-05:
    Summary: All service ports must not support TLSv1.1 or earlier
    Description: |
      TLSv1.1 and all previous versions have known security issues and should
      not be supported by the server.
    Input-Parameters:
      - epp.hostName
    Dependencies:
      - epp-03
  epp-06:
    Summary: |
      All service ports must offer a valid certificate issued by a trusted CA
    Description: |
      To ensure that the connection can be trusted, the server must present a
      certificate issued by a trusted CA, such as those supported by major
      browsers.
    Input-Parameters:
      - epp.hostName
    Dependencies:
      - epp-03
  epp-07:
    Summary: TLS certificate must be valid
    Description: |
      The TLS certificate must not have expired, and must be presented with any
      additional intermediate certificates.
    Input-Parameters:
      - epp.hostName
    Dependencies:
      - epp-03
  epp-08:
    Summary: TLS certificate must be valid for the server name
    Description: |
      The EPP server name must match at least one subjectAltName fields in the
      certificate (either exact match or wildcard).
    Input-Parameters:
      - epp.hostName
    Dependencies:
      - epp-03
  epp-09:
    Summary: |
      All service ports must send a <greeting> frame after successful connection
    Description: |
      Once the connection is established the server must send a `<greeting>`
      frame to the client.
    Input-Parameters:
      - epp.hostName
  epp-10:
    Summary: All server responses must validate against the XML schema
    Description: |
      All response frames received from the server must be well-formed XML
      instances, and validate against all XSD schemas (the base EPP schemas
      in addition to any extensions).
  epp-11:
    Summary: <svID> element in the <greeting> must be valid
    Description: |
      The `<svID>` element in the `<greeting>` must identify the EPP server.
    Input-Parameters:
      - epp.hostName
    Dependencies:
      - epp-09
  epp-12:
    Summary: <svDate> element in the <greeting> must be valid
    Description: |
      The `<svDate>` element in the `<greeting>` must specify a time within
      close proximity to the current date and time as received from the NTP
      network.
    Input-Parameters:
      - epp.hostName
    Dependencies:
      - epp-09
  epp-13:
    Summary: <version> element in the <greeting> must be valid
    Description: |
      The `<version>` element in the <greeting> must be exactly `1.0`.
    Input-Parameters:
      - epp.hostName
    Dependencies:
      - epp-09
  epp-14:
    Summary: <lang> element(s) in the <greeting> must be valid
    Description: |
      All `<lang>` element(s) in the `<greeting>` must contain valid language
      codes.
    Input-Parameters:
      - epp.hostName
    Dependencies:
      - epp-09
  epp-15:
    Summary: |
      <objURI> element(s) in the <greeting> must be valid for the registry type
    Description: |
      All `<objURI>` element(s) in the `<greeting>` must contain XML namespace
      URIs that are appropriate.

      For example, the presence of the host and  contact namespace URIs may be
      required depending on the `epp.hostModel` and
      `general.minimumPublicDataSet` parameters.
    Dependencies:
      - epp-09
    Input-Parameters:
      - epp.hostName
      - epp.hostModel
      - general.minimumPublicDataSet
  epp-16:
    Summary: <extURI> element(s) in the <greeting> must be valid
    Description: |
      All `<extURI>` element(s) in the `<greeting>` must contain XML namespace
      URIs that have been registered in the IANA registry.
    Dependencies:
      - epp-09
    Input-Parameters:
      - epp.hostName
      - epp.hostModel
      - general.minimumPublicDataSet
  epp-17:
    Summary: <login> command must return a successful response
    Description: |
      The EPP server must return a `1000` result in response to a `<login>`
      command.

      The client will use the object and extension XML namespaces from the
      server's `<greeting>` as part of the `<login>` command.
    Dependencies:
      - epp-09
    Input-Parameters:
      - epp.hostName
      - epp.clid
      - epp.pwd
  epp-18:
    Summary: <hello> command must return a <greeting>
    Description: |
      The EPP server must respond to a `<hello>` command with a `<greeting>`.
    Dependencies:
      - epp-09
  epp-19:
    Summary: domain <check> command test
    Description: |
      The client will perform a series of `<check>` commands and will validate
      the `avail` attribute of the `<domain:name>` elements in the server
      response, as follows:

        * syntactically invalid domain: `avail` attribute must be `0`
        * valid but registered domain: `avail` attribute must be `0`. The domain
          will be generated using random characters.
        * valid and unregistered domain: `avail` attribute must be `1`

      These checks will be carried out for each TLD in the TLD set.
    Input-Parameters:
      - epp.registeredNames
    Dependencies:
      - epp-17
  epp-20:
    Summary: domain sunrise <check> command test
    Description: |
      TODO.
    Input-Parameters:
    Dependencies:
      - epp-17
  epp-21:
    Summary: domain trademark claims <check> command test
    Description: |
      TODO.
    Input-Parameters:
    Dependencies:
      - epp-17
  epp-22:
    Summary: host <check> command test (if applicable)
    Description: |
      TODO.
    Input-Parameters:
      - epp.hostModel
    Dependencies:
      - epp-17
  epp-23:
    Summary: contact <check> command test (if applicable for the registry type)
    Description: |
      TODO.
    Input-Parameters:
      - general.minimumPublicDataSet
    Dependencies:
      - epp-17
  epp-24:
    Summary: contact <create> command test (if applicable for the registry type)
    Description: |
      TODO.
    Input-Parameters:
      - general.minimumPublicDataSet
    Dependencies:
      - epp-17
  epp-25:
    Summary: contact <info> command test (if applicable for the registry type)
    Description: |
      TODO.
    Input-Parameters:
      - general.minimumPublicDataSet
    Dependencies:
      - epp-17
  epp-26:
    Summary: contact <update> command test (if applicable for the registry type)
    Description: |
      TODO.
    Input-Parameters:
      - general.minimumPublicDataSet
    Dependencies:
      - epp-17
  epp-27:
    Summary: contact <delete> command test (if applicable for the registry type)
    Description: |
      TODO.
    Input-Parameters:
      - general.minimumPublicDataSet
    Dependencies:
      - epp-17
  epp-28:
    Summary: host <create> command test (if applicable)
    Description: |
      TODO.
    Input-Parameters:
      - epp.hostModel
    Dependencies:
      - epp-17
  epp-29:
    Summary: host <info> command test (if applicable)
    Description: |
      TODO.
    Input-Parameters:
      - epp.hostModel
    Dependencies:
      - epp-17
  epp-30:
    Summary: host <update> command test (if applicable)
    Description: |
      TODO.
    Input-Parameters:
      - epp.hostModel
    Dependencies:
      - epp-17
  epp-31:
    Summary: host <delete> command test (if applicable)
    Description: |
      TODO.
    Input-Parameters:
      - epp.hostModel
    Dependencies:
      - epp-17
  epp-32:
    Summary: domain <create> command test (if applicable)
    Description: |
      This test performs a series domain `<create>` commands, using pseudo-
      random ASCII domain names under each TLD in the TLD set. If the
      `general.minimumPublicDataSet` input parameter is `false` then a contact
      object (containing pseudo-random contact information) will be created
      beforehand and used as the registrant. If the `epp.hostModel` parameter is
      `objects`, then two host objects with pseudo-random names will be created
      and used as the nameservers (otherwise the names will be provided) as
      attributes.

      The client will perform several `<create>` commands, each of which will
      test certain aspects of the server's processing of those commands, for
      example:

        * to confirm the server supports all permitted client-assigned status
          codes
        * to confirm that the server rejects a `<create>` command which
          specifies a contact object (where the `general.minimumPublicDataSet`)
          input parameter is `true`
        * to confirm that the server rejects a `<create>` command which does not
          specify a contact object (where the `general.minimumPublicDataSet`)
          input parameter is `false`
        * to confirm that the server rejects a `<create>` command containing
          host objects when the `epp.hostModel` parameter is `attributes`
        * to confirm that the server rejects a `<create>` command containing
          host attributes when the `epp.hostModel` parameter is `objects`
        * to confirm that the the server which implements RFC9154 accepts a
          `<create>` command without an authInfo command.          

    Input-Parameters:
      - epp.hostModel
      - general.minimumPublicDataSet
    Dependencies:
      - epp-17
  epp-33:
    Summary: domain <info> command test
    Description: |
      This test performs a series of `<info>` commands on the domain objects
      created in `epp-32`. This test checks that (a) the domain names are
      present in the repository, and (b) that the expected object properties are
      present and valid.

      The responses will confirm that:

        * the `<roid>` element is valid and contains a repository ID registered
          with IANA;
        * the `<crDate>` and `<exDate>` elements are present valid;
        * the `<crID>` and `<clID>` elements match the client ID used to create
          the domain.
        * DNSSEC information provided in the `<create>` command is present and
          correct.

    Input-Parameters:
      - epp.clid
    Dependencies:
      - epp-32
  epp-34:
    Summary: domain <update> command test
    Description: |
      This test will confirm that the client is able to perform an `<update>`
      command on domain names, including:

        * adding and removing client-assigned status codes
        * adding and removing nameservers (whether objects or attributes)
        * changing registrant object (if applicable)
        * adding and remove DNSSEC information

    Input-Parameters:
      - epp.clid
      - epp.hostModel
      - general.minimumPublicDataSet
    Dependencies:
      - epp-17
  epp-35:
    Summary: domain <renew> command test
    Description: |
      This test will confirm that the client is able to renew domain names.

        * Following a succesful `<renew>` command, the expiry date of the domain
          must have been increased by the period specified by the client;
        * Where a server supports RFC 3915, the domain must have an RGP status
          of `renewPeriod`;
        * The server must reject a `<renew>` command if it would result in the
          expiry date being more than 10 years into the future.

    Input-Parameters:
      - general.gracePeriodsSupported
    Dependencies:
      - epp-17
  epp-36:
    Summary: domain <transfer> command test
    Description: |
      TODO.
    Input-Parameters:
    Dependencies:
      - epp-17
  epp-37:
    Summary: domain <delete> command test
    Description: |
      TODO.
    Input-Parameters:
    Dependencies:
      - epp-17
  epp-38:
    Summary: host rename test (if applicable)
    Description: |
      TODO.
    Input-Parameters:
      - epp.hostModel
    Dependencies:
      - epp-17
  epp-39:
    Summary: domain restore test (if applicable)
    Description: |
      TODO.
    Input-Parameters:
    Dependencies:
      - epp-17

  mandatoryRPMs-01:
    Summary: launch application sunrise <info> command test
    Description: |
      TODO.
    Input-Parameters:
      - general.sunriseModel
    Dependencies:
  mandatoryRPMs-02:
    Summary: |
      domain/launch application sunrise <create> command test
    Description: |
      TODO.
    Input-Parameters:
      - general.sunriseModel
    Dependencies:
  mandatoryRPMs-03:
    Summary: domain trademark claims <create> command test
    Description: |
      TODO.
    Input-Parameters:
    Dependencies:
  mandatoryRPMs-04:
    Summary: LORDN submission test
    Description: |
      TODO.
    Input-Parameters:
    Dependencies:

Input-Parameters:
  epp.hostName:
    Description: the fully-qualified domain name of the EPP server.
    Type: string
    Example: epp.rsp.tech
  epp.clid:
    Description: the username used to log in to the EPP server.
    Type: string
    Example: clid-01
  epp.pwd:
    Description: the password used to log in to the EPP server.
    Type: string
    Example: foo2bar
  rde.depositFile:
    Description: |
      an RDE deposit file. The TLD to which the deposit relates must match one
      of the TLDs that are associated with the test object.
    Type: file
    Example: example_20231004_FULL_S1_R0.ryde
  rde.signatureFile:
    Description: an ASCII-armoured OpenPGP signature covering the deposit file.
    Type: file
    Example: example_20231004_FULL_S1_R0.sig
  rde.publicKey:
    Description: a PGP public key block
    Type: file
    Example: rsp-rde-signing-key.asc
  general.minimumPublicDataSet:
    Description: |
      if true, then the registry only supports the minimum public data set, and
      does not collect registrant and/or technical contact information from
      registrars.
    Type: boolean
    Example: true
  general.gracePeriodsSupported:
    Description: |
      Whether or not the registry supports grace periods as defined in RFC 3915.
    Type: boolean
    Example: true
  epp.hostModel:
    Description: |
      The host model supported by the EPP server. The possible values for this
      parameter are:
        * `objects`
        * `attributes`
    Type: string
    Example: objects
  epp.registeredNames:
    Description: |
      An array of domain names that exists in the EPP server and which are
      therefore unavailable for registration. The array must contain one member
      for each TLD in the TLD set.
    Type: array
    Example: ["example.example1", "example.example2"]
  general.sunriseModel:
    Description: |
      The sunrise model supported by the EPP server. The possible values for
      this parameter are:
        * `start-date`      
        * `end-date`      
    Type: string
    Example: start-date
  dnssecOps.zskRolloverZone:
    Description: |
      The domain name which will be monitored for the occurrence of a ZSK
      rollover.
    Type: string
    Example: example.com
  dnssecOps.kskRolloverZone:
    Description: |
      The domain name which will be monitored for the occurrence of a KSK
      rollover.
    Type: string
    Example: example.com
  dnssecOps.algorithmRolloverZone:
    Description: |
      The domain name which will be monitored for the occurrence of an algorithm
      rollover.
    Type: string
    Example: example.com

  dns.nameservers:
    Description: |
      The set of nameservers that will be authoritative for the TLD(s).

      This input parameter is an array where the object properties are the
      TLD names, and the values are objects. For these objects, the properties
      are the nameserver names, and the values are arrays of IPv4 and IPv6
      addresses.

      There MUST be at least two nameservers, and at least two nameservers MUST
      have at least IPv6 address.
    Type: object
    Example: {"example": {"ns1.example.com": ["192.168.53.1", "2001:DB8::53:1"], "ns2.example.com": ["192.168.53.2", "2001:DB8::53:2"]}}

  dnssec.dsRecords:
    Description: |
      The DS record(s) that may be used to validate the DNSSEC signature for the
      TLD(s). This input parameter is an object where the object properties are
      the TLD names and the values are arrays of objects representing DS
      records.

      There MUST be an entry for every TLD in the TLD set and there MUST be
      at least one DS record for each TLD.
    Type: object
    Example: {"example": [{"keyTag": 12345, "alg": 8, "digestType": 2, "digest": "E2D3...5766"}]}

  rdap.baseURLs:
    Descrption: |
      The RDAP base URL(s) for the TLD(s). This input parameter is an object,
      where the object properties are the TLD names and the values are strings
      containing the base URL. The URL MUST end with a slash ("/").
    Type: object
    Example: {"example": "https://rdap.example.com/example/"}

  rdap.testDomains:
    Description: |
      The domain(s) that will be queried to validate domain responses. This
      input parameter is an object, where the object properties are the TLD
      names and the values domain names.
    Type: string
    Example: {"example": "example.example"}
  rdap.testEntities:
    Description: |
      The entities(s) that will be queried to validate entity responses. This
      input parameter is an object, where the object properties are the TLD
      names and the values entity handles.
    Type: string
    Example: {"example": "9999"}
  rdap.testNameservers:
    Description: |
      The nameservers(s) that will be queried to validate nameserver responses.
      This input parameter is an object, where the object properties are the TLD
      names and the values host names.
    Type: string
    Example: {"example": "ns1.example.com"}
