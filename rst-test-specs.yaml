---
RST-Test-Plan: 1.0
Version: 2.0
Last-Updated: 2023-09-26

Preamble: |
  This file was assembled from a set of Word documents originally created by
  IIS (.SE), who created the original Pre-Delegation Testing (PDT, now called
  Registry System Testing or RST) System.

  The Test System consists of several *test plans*, each of which addresses a
  particular scenario. The test plans follow a standard structure and methodology
  derived from IEEE 829-2008 (which has since been superseded by ISO/IEC 29119).

  Each *test plan* includes one or more *test suites* which in turn include
  one or more *test cases*. For a test to succeed, every test case has to pass.

  This file describes each test plan, suite and case in the RST system.

  **Note**: you may see references to numbered sections - these references relate
  to the original Word/PDF files, since the text was copied verbatim from those
  documents into the YAML file.

Contact:
  Name: GDS Technical Services
  Organization: Internet Corporation for Assigned Names and Numbers (ICANN)
  Email: rst@icann.org

Plans:
  StandardPreDelegationTest:
    Name: Standard PDT Test Plan
    Description: |
      ICANN (Internet Corporation for Assigned Names and Numbers) are now
      allowing applications for new gTLDs (generic Top-Level Domains). All
      applicants have to go through the evaluation process. One step in the
      evaluation process is the Pre-Delegation Testing (PDT).

      Only the test cases listed in this document will be included in a
      Standard PDT Test. For details about a test case, refer to the relevant
      Test Area Specification document.

      The purpose of the Pre-Delegation Testing is to verify that the
      applicant has met its commitment to establish registry operations in
      accordance with the technical and operational criteria described in the
      gTLD Applicant Guidebook (AGB). Each applicant will be required to
      complete Pre-Delegation Testing as a prerequisite to delegation into the
      root zone.

    Test-Suites:
      DNS:
        - DNS01
        - DNS02
        - DNS03
        - DNS04
        - DNS05
        - DNS06
        - DNS07
        - DNS08
        - DNS09
        - DNS10
        - DNS11
        - DNS12
        - DNS14
        - DNS15
        - DNS16
        - DNS17
        - DNS18
        - DNS19
        - DNS20
        - DNS21
        - DNS23
        - DNS24
        - DNS25
        - DNS26
        - DNS27
        - DNS28
        - DNS29
        - DNS30
        - DNS31
        - DNS32
        - DNS33
        - DNS34
        - DNS35
        - DNS36

      RDDS:
        - WhoisCLI01
        - WhoisCLI02
        - WhoisCLI03
        - WhoisWeb01
        - WhoisWeb02
        - WhoisWeb03
        - WhoisWeb04
        - WhoisWeb05
        - WhoisWeb09
        - WhoisSearch00
        - WhoisSearch01
        - WhoisSearch02
        - WhoisSearch03
        - WhoisSearch04
        - WhoisSearch09

      EPP:
        - EppConnTest
        - EPPDomCreate01
        - EPPDomCreate02
        - EPPDomCreate03
        - EPPDomRenew01
        - EPPDomTransfer01
        - EPPDomTransfer02
        - EPPDomDelete01
        - EPPConCreate01
        - EPPConDelete01
        - EPPHostDelete01
        - EPPHostUpdate01
        - EPPContactUpdate01
        - EPPDomUpdate01
        - EPPExtensions

      IDN:
        - IDNvalid00
        - IDNvalid01
        - IDNvalid02
        - IDNvalid03
        - IDNvalid04
        - IDNvalid05
        - IDNvalid06
        - IDNvalid07
        - IDNvalid09
        - IDNvalid10
        - IDNvalid11
        - IDNvalid12
        - IDNvalid13

      RDE:
        - DataEscrowFileName01
        - DataEscrowFileName02
        - DataEscrowVerify01
        - DataEscrowVerify02
        - DataEscrowContent01
        - DataEscrowContent02

  StandardRSPChangeTest:
    Name: Standard RSP Change Test Plan
    Description: |
      The RST Service Provider will test the technical infrastructure (DNS,
      EPP, Whois, Data Escrow and IDN) and also review submitted documents
      (IDN, Documentation).
    Test-Suites:
      DNS:
        - DNS01
        - DNS02
        - DNS03
        - DNS04
        - DNS05
        - DNS06
        - DNS07
        - DNS08
        - DNS09
        - DNS10
        - DNS11
        - DNS12
        - DNS14
        - DNS15
        - DNS16
        - DNS17
        - DNS18
        - DNS19
        - DNS20
        - DNS21
        - DNS23
        - DNS24
        - DNS25
        - DNS26
        - DNS27
        - DNS28
        - DNS29
        - DNS30
        - DNS31
        - DNS32
        - DNS33
        - DNS34
        - DNS35
        - DNS36

      RDDS:
        - WhoisCLI01
        - WhoisCLI02
        - WhoisCLI03
        - WhoisWeb01
        - WhoisWeb02
        - WhoisWeb03
        - WhoisWeb04
        - WhoisWeb05
        - WhoisWeb09
        - WhoisSearch00
        - WhoisSearch01
        - WhoisSearch02
        - WhoisSearch03
        - WhoisSearch04
        - WhoisSearch09

      EPP:
        - EppConnTest
        - EPPDomCreate01
        - EPPDomCreate02
        - EPPDomCreate03
        - EPPDomRenew01
        - EPPDomTransfer01
        - EPPDomTransfer02
        - EPPDomDelete01
        - EPPConCreate01
        - EPPConDelete01
        - EPPHostDelete01
        - EPPHostUpdate01
        - EPPContactUpdate01
        - EPPDomUpdate01
        - EPPExtensions

      IDN:
        - IDNvalid00
        - IDNvalid01
        - IDNvalid02
        - IDNvalid03
        - IDNvalid04
        - IDNvalid05
        - IDNvalid06
        - IDNvalid07
        - IDNvalid09
        - IDNvalid10
        - IDNvalid11
        - IDNvalid12
        - IDNvalid13

      RDE:
        - DataEscrowFileName01
        - DataEscrowFileName02
        - DataEscrowVerify01
        - DataEscrowVerify02
        - DataEscrowContent01
        - DataEscrowContent02

  DNSRSPChangeTest:
    Name: DNS RSP Change Test Plan
    Description: |
      The RST Service Provider will test the DNS technical infrastructure.
    Test-Suites:
      DNS:
        - DNS02
        - DNS03
        - DNS04
        - DNS07
        - DNS08
        - DNS10
        - DNS11
        - DNS12
        - DNS14
        - DNS15
        - DNS16
        - DNS17
        - DNS19
        - DNS20
        - DNS21
        - DNS23
        - DNS24
        - DNS25
        - DNS26
        - DNS27
        - DNS31
        - DNS32
        - DNS33
        - DNS36

  IDNTest:
    Name: IDN RST Test Plan
    Description: |
      A Registry Operator may apply to ICANN to amend its Registry Agreement
      for an already delegated TLD, to either offer new services or retract
      services currently offered. If the requested amendment affects Registry
      Operator’s support for IDN, an RST IDN test is called for before the
      amendment can be authorized.

      The purpose of an IDN RST test is to verify that the Registry Operator’s
      registry system handles IDN registrations in accordance with the
      submitted policy statements and IDN tables.

      Only the test cases listed in this document will be included in an IDN
      RST Test. For details about a test case, refer to the relevant Test Area
      Specification document.
    Test-Suites:
      IDN:
        - IDNvalid00
        - IDNvalid01
        - IDNvalid02
        - IDNvalid03
        - IDNvalid04
        - IDNvalid05
        - IDNvalid06
        - IDNvalid07
        - IDNvalid09
        - IDNvalid10
        - IDNvalid11
        - IDNvalid12
        - IDNvalid13

  SRSGatewayTest:
    Name: SRS Gateway Test Plan
    Description: |
      An SRS Gateway service is a Shared Registry System implementation that
      acts as a proxy between a subset of Registrars and the Registry. It uses
      a local cache to speed up EPP query commands, but forwards all EPP
      transform commands to the TLD Registry System. TLD registries need to
      deploy a proxy setup in order to operate in certain markets worldwide.

      The purpose of an SRS Gateway Test is to verify that the Registry
      Operator’s proxy setup operates in accordance with the technical and
      operational criteria for EPP systems described in the gTLD Applicant
      Guidebook (AGB). Furthermore, it must keep its own database synchronized
      with that of the TLD registry.

      Only the test cases listed in this document will be included in an SRS
      Gateway Test. For details about a test case, refer to the relevant Test
      Area Specification document.
    Test-Suites:
      RDDS:
        - SRSGWWhoisCLI01
        - SRSGWWhoisCLI02
        - SRSGWWhoisCLI03

      EPP:
        - TLDSRSEPPConnTest
        - TLDSRSEPPDomCreate01
        - TLDSRSEPPDomCreate02
        - TLDSRSEPPDomCreate03
        - TLDSRSEPPDomRenew01
        - TLDSRSEPPDomTransfer01
        - TLDSRSEPPDomTransfer02
        - TLDSRSEPPDomDelete01
        - TLDSRSEPPConCreate01
        - TLDSRSEPPConDelete01
        - TLDSRSEPPHostDelete01
        - TLDSRSEPPHostUpdate01
        - TLDSRSEPPConUpdate01
        - TLDSRSEPPDomUpdate01
        - SRSGWAddrVer
        - SRSGWConnTest
        - SRSGWDomCreate01
        - SRSGWDomCreate02
        - SRSGWDomCreate03
        - SRSGWDomRenew01
        - SRSGWDomTransfer01
        - SRSGWDomTransfer02
        - SRSGWDomDelete01
        - SRSGWConCreate01
        - SRSGWConDelete01
        - SRSGWHostDelete01
        - SRSGWHostUpdate01
        - SRSGWConUpdate01
        - SRSGWDomUpdate01

Test-Cases:
  DNS01:
    Summary: Minimum number of name servers
    Description: |
      ## Objective

      There must be at least two NS records listed in a delegation, and the
      hosts must not resolve to the same IP address.

      This test case fulfills the requirement in the "Technical requirements
      for authoritative name servers" document referenced in 2.1.1.

      ## Inputs

      The following information will be needed as input for this test case:

        ----------------------------------------------------------------------
        Id                        Description                     Type
        ------------------------- ------------------------------- ------------
        TLD                       The ASCII compatible name of    String
                                  the TLD

        DnsNameServer-\[1..n\]    FQDN of authoritative name      String
                                  server

        DnsGlueRecord-\[1..n\]    All IPv4 or IPv6 addresses for  String
                                  auth NS
        ----------------------------------------------------------------------

      The above input is also considered to be the exact same information that
      is sent to IANA for inclusion in the root zone. IANA will only publish
      the subordinate host glue records in the root zone.

      ## Outcome(s)

      There must be at least two name servers in the input delegation data. If
      there are less than two distinct IPv4 addresses for the delegated name
      servers this test case fails.

      There must be at least two distinct IPv6 addresses for the delegated
      name servers. If there are less than two distinct IPv6 addresses this
      test case fails.

      There must be at least two NS records for the delegation. If there are
      less than two NS this test case fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 5.3 should
      be authoritative for the designated zone.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      An NS query is made to all listed name servers for the designated zone.
      The NS records in the answer are compared with the parent zone (from the
      input data). If the total number of common NS records between parent and
      zone is less than two a message is generated.

      The IP addresses of all NS records are collected. If the total count of
      distinct IPv4 addresses is below 2 a message is generated. If the total
      count of distinct IPv6 addresses is below 2 a message is generated. If
      the total of common NS records in the delegation from both the parent
      and the child zone is below 2, a message is also generated.
  DNS02:
    Summary: Name server reachability
    Description: |
      ## Objective

      The name servers must answer DNS queries over both the UDP and TCP
      protocols on port 53.

      This test case fulfills the requirements 2.3.1 in the "Technical
      requirements for authoritative name servers" document, and the requirements on TCP
      and UDP of section 5.2 in the Applicant Guidebook.

      ## Inputs

      See section 5.3 in this document.

      ## Outcome(s)

      If any query is failing to get an answer, an error message is generated
      and this test case fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 5.3 must be
      authoritative for the designated zone.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      A SOA query is sent over UDP and TCP to all the listed nameservers. If
      any query fails to give an answer, a message is generated.
  DNS03:
    Summary: Answer authoritatively
    Description: |
      ## Objective

      The name servers must answer authoritatively for the designated zone.
      Responses to queries to the name servers for the designated zone must
      have the "AA"-bit set.

      This test case fulfills the requirements 2.4.1 and 2.4.2 in the
      "Technical requirements for authoritative name
      servers" document.

      ## Inputs

      See section 5.3 in this document.

      ## Outcome(s)

      If any name server answers without the AA-bit, an error message is
      generated and this test case fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 5.3 should
      be authoritative for the designated zone.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      All listed name servers are queried for the SOA record over UDP and TCP.
      If any of the name servers fail to give an authoritative answer
      ("AA-bit" is set in the answer), a message is generated.
  DNS04:
    Summary: Network diversity
    Description: |
      ## Objective

      The name servers must be in at least two topologically separate networks
      for IPv4 and IPv6, respectively.

      This test case fulfills the requirements 2.5.2 in the "Technical
      requirements for authoritative name servers" document.

      ## Inputs

      See section 5.3 in this document. In addition to this we use the IP to
      ASN mapping in the RIPE RIS database.

      ## Outcome(s)

      There must be at least two different origin ASs from the process
      described in section 8.8. The RIPE RIS database is used to determine if
      at least two origin ASs are used. If it does not report at least two
      origin ASs for IPv4 and IPv6, respectively, this test case fails. The
      two origin ASs must also have some independence as described in the
      steps below.

      ## Environmental needs

      The RIPE RIS database must be available online.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  All NS records and their IP addresses are looked up for the
          designated zone.

      2.  The following steps are done independently for the IPv4 and IPv6
          addresses, respectively, and both protocols must pass.

          a.  For all IP addresses do a lookup of origin ASNs using one of the
              following commands:\
              whois -h riswhois.ripe.net \-- \"-F -M **\<IPaddr\>**\"\
              whois -h riswhois.ripe.net \-- \"-M **\<IPaddr\>**\"

          b.  Each lookup will result in a set of origin ASNs (one or more
              ASNs). Save that set to a list of sets.

          c.  When comparing two sets in the list, the sets are considered to
              be equal if they have the same ASNs as elements. The order
              between ASNs in a set shall be ignored.

          d.  Compare the sets in the list. If there are two sets in the lists
              thar are NOT equal, then the tested protocol (IPv4 or IPv6) will
              pass, or else it will fail.

      3.  If both IPv4 and IPv6 pass the steps above, this Test Cass ends with
          PASS, else it ends with FAIL.

      ## Examples of passing and failing configurations

      In our examples the nameservers have three IP addresses, x~1~, x~2~ and
      x~3~. The lookup of origin gives the result as below.

      Example 1. This configuration is a PASS. Two addresses have different
      origin ASs:

      > x~1~: 65536
      >
      > x~2~: 65536, 65550
      >
      > x~3~: 65550

      Example 2. This configuration is also a PASS. One address has a
      different configuration of origin ASs than the other:

      > x~1~: 65536
      >
      > x~2~: 65536, 65550
      >
      > x~3~: 65536, 65550

      Example 3. This configuration is a FAIL. All addresses have the same
      configuration of origin ASs:

      > x~1~: 65536, 65550
      >
      > x~2~: 65536, 65550
      >
      > x~3~: 65536, 65550

      Example 3. This configuration is also a FAIL. The addresses have only
      one and the same origin AS:

      > x~1~: 65536
      >
      > x~2~: 65536
      >
      > x~3~: 65536

      Note that the tests of origin ASs are done independently on IPv4 and
      IPv6, and that both must meet the requirements to give a PASS on this
      test case.
  DNS05:
    Summary: Consistency between glue and authoritative data
    Description: |
      ## Objective

      For name servers that have IP addresses listed as glue, the IP addresses
      must match the authoritative A and AAAA records for that host.

      This test case fulfills the requirements 2.6.1 in the "Technical
      requirements for authoritative name servers" document.

      ## Inputs

      See section 5.3 in this document.

      ## Outcome(s)

      If there is an inconsistency between the IP-addresses for any host on
      any authoritative name server, an error message is generated and this
      test case fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 5.3 should
      be authoritative for the designated zone.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      The name server data on the input parameters side is compared to the
      content of the answers for all the name servers. If there is an
      inconsistency between the sets of IP-addresses a message is generated.
  DNS06:
    Summary: Consistency between delegation and zone
    Description: |
      ## Objective

      The set of NS records served by the authoritative name servers must
      match those proposed for the delegation in the parent zone.

      This test case fulfills the requirements 2.7.1 in the "Technical
      requirements for authoritative name servers" document.

      ## Inputs

      See section 5.3 in this document.

      ## Outcome(s)

      The NS sets between the parent and the child zone must be consistent. If
      the NS sets are not consistent an error message is generated and this
      test case fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 5.3 should
      be authoritative for the designated zone.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      All authoritative name servers are queried for the NS set. The name
      server data on the input parameters side is compared to the content of
      the answers for all the name servers. If there is an inconsistency
      between the NS record sets, a message is generated.
  DNS07:
    Summary: SOA record consistency between authoritative name servers
    Description: |
      ## Objective

      The data served by the authoritative name servers for the designated
      zone must be consistent. All authoritative name servers must serve the
      same SOA record for the designated zone.

      This test case fulfills the requirements 2.8.1 and 2.8.3 in the
      "Technical requirements for authoritative name servers" document.

      ## Inputs

      See section 5.3 in this document.

      ## Outcome(s)

      All authoritative name servers must have consistent SOA digests and SOA
      serial values. If there is any inconsistency, an error messages is
      generated, and this test case fails in this first step.

      If there are occurrences of the error, there is a manual inspection of
      the SOA Serial numbers in the logs. See the requirement in 2.8.3.1 in
      the "Technical requirements for authoritative name
      servers"
      document. If the difference of the SOA Serial is considered minor, the
      error is discarded, and the test case is passed. If the difference is
      considered major, this test case fails.

      ## Environmental needs

      All name servers listed in the inputs section 5.3 should be
      authoritative for the designated zone.

      ## Special procedural requirements

      If for operational reasons the zone content fluctuates rapidly, the
      serial numbers need only be loosely coherent.

      There are several different methods to set the SOA Serial number. The
      most popular are "unix time" where the Serial is a second counter based
      on unix time, "date" where the Serial is a date and a serial number
      counter at the end, and "counter" where the Serial value is just any
      type of counter. The most common use is probably "unix time". In both
      "date" and "unix time" it should be easy to note that the authoritative
      name servers do not differ any more than a few serial number updates. A
      manual inspection of the SOA serial should be enough to determine if the
      zone updates work properly or not, and if the serial values are within a
      reasonable range, the test is ok.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      The SOA record is queried from all the name servers found in the input
      parameters, and also in the zone itself. If the SOA serial number is not
      all the same for all the answers, a message is generated. A digest is
      calculated from the SOA records as well, and if the digest is not all
      the same for all the answers a message is generated.
  DNS08:
    Summary: NS record consistency between authoritative name servers
    Description: |
      ## Objective

      The data served by the authoritative name servers for the designated
      zone must be consistent. All authoritative name servers must serve the
      same NS record set for the zone domain.

      This test case fulfills the requirements 2.8.1 and 2.8.2 in the
      "Technical requirements for authoritative name
      servers"
      document.

      ## Inputs

      See section 5.3 in this document.

      ## Outcome(s)

      All authoritative name servers must have consistent NS sets in the
      answer. If there is any inconsistency in the answers, a message is
      generated and this test case fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 5.3 should
      be authoritative for the designated zone.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      An NS record query for the TLD is made for all the name servers found in
      the input parameters. If any of the NS records in an authoritative
      answer is not consistent with any of the other answers, a message is
      generated.
  DNS09:
    Summary: No truncation of referrals
    Description: |
      ## Objective

      Referrals from the parent zone\'s name servers must fit into a non-EDNS0
      UDP DNS packet and therefore the DNS payload must not exceed 512 octets.

      This test case fulfills the requirements 2.9.1 and 2.9.2 in the
      "Technical requirements for authoritative name servers" document.

      ## Inputs

      See section 5.3 in this document.

      ## Outcome(s)

      The created DNS referral packet must not be more than 512 octets. If the
      DNS packet is larger than 512 bytes, a message is generated and this
      test case fails.

      ## Environmental needs

      This test has no environmental requirements.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      An empty DNS answer packet is generated. All NS records from the input,
      and all the in-bailiwick glue is added to the packet. If the size of the
      packet is more than 512 octets a message is generated.
  DNS10:
    Summary: Prohibited networks
    Description: |
      ## Objective

      The authoritative name server IP addresses must not be in specially
      designated networks that are either not globally routable, or are
      otherwise unsuited for authoritative name service.

      This test case fulfills the requirements in 2.10 of the "Technical
      requirements for authoritative name servers" document.

      ## Inputs

      See section 5.3 in this document.

      ## Outcome(s)

      All IP addresses used by the name servers in the delegation for the
      designated zone must be globally routable. If any of the IP addresses
      used is reserved, private or otherwise unsuitable (see the table in
      14.8), an error messages is generated and this test case fails.

      ## Environmental needs

      This test has no environmental requirements.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      All name servers found in the input parameters are queried for their IP
      addresses in the zone. Along with IP addresses from the input data, all
      addresses are is compared to a list containing blocks of reserved IPv4
      addresses not suitable for global routing, blocks of reserved IPv6
      addresses not suitable for global routing, and Teredo and 6to4 IPv6
      tunnel addresses.

      For IPv4 addresses the *IANA IPv4 Special-Purpose Address Registry* is
      used:

      -   <https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml>

      For IPv6 addresses the *IANA IPv6 Special-Purpose Address Registry* is
      used:

      -   <https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml>
  DNS11:
    Summary: No open recursive name service
    Description: |
      ## Objective

      The authoritative name servers must not provide recursive name service.

      This test case fulfills the requirements 2.11.1 in the "Technical
      requirements for authoritative name servers" document.

      ## Inputs

      See section 5.3 in this document.

      ## Outcome(s)

      No name server must respond with a possible referral packet. If the
      response is a referral, a message is generated and this test case fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 5.3 should
      be authoritative for the designated zone.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      A SOA query for an almost certainly nonexistent name sent to the list of
      name servers, with the recursion request and DNSSEC flags set, resulting
      in a response with the recursion available flag set, an RCODE other than
      SERVFAIL or REFUSED and not referring to other servers. If the response
      is a possible referral, a message is generated.
  DNS12:
    Summary: Same source address
    Description: |
      ## Objective

      Responses from the authoritative name servers must contain the same
      source IP address as the destination IP address of the initial query.

      This test case fulfills the requirements 2.12.1 in the "Technical
      requirements for authoritative name servers" document.

      ## Inputs

      See section 5.3 in this document.

      ## Outcome(s)

      The DNS answer must come from the same source IP address as the
      destination of the query. If there is a mismatch, a message is generated
      and this test case fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 5.3 should
      be authoritative for the designated zone.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      One query per authoritative name server IP address is made, and the
      answer is verified to come from the same IP address. If there is a
      mismatch between these IP addresses, a message is generated.
  DNS14:
    Summary: Legal values for the DS hash digest algorithm
    Description: |
      ## Objective

      For the hash digest, ICANN supports two types --- SHA1 (value 1), and
      SHA256 (value 2). The DnsKeyDigestType for the supplied DS records must
      match one of those type values.

      This test case fulfills the DNSSEC and Anycast requirements 5.2.2 in the
      gTLD Application Handbook, Module 5 and the tests described in the
      "Technical requirements for authoritative name
      servers"
      document.

      ## Inputs

      The following information will be needed as input for this test case:

        ------------------------------------------------------------------------
        Id                          Description                     Type
        --------------------------- ------------------------------- ------------
        TLD                         The ASCII compatible name of    String
                                    the TLD

        DnsKeyDigest-\[1..n\]       The digest (DS) of the DNSKEY   String

        DnsKeyTag-\[1..n\]          The key tag of the DNSKEY       Number

        DnsKeyAlgorithm-\[1..n\]    The algorithm number of the     Number
                                    DNSKEY

        DnsKeyDigestType-\[1..n\]   The digest type number of the   Number
                                    DS

        DnsNameServer-\[1..n\]      FQDN of authoritative name      String
                                    server

        DnsGlueRecord-\[1..n\]      All IPv4 or IPv6 addresses for  String
                                    auth NS
        ------------------------------------------------------------------------

      The above input parameters are not the name server delegation data, but
      the name of the designated zone and a list of DS records that is to be
      published in the root zone.

      ## Outcome(s)

      All submitted DS records must have a valid DS hash algorithm digest
      type; the value must be either 1 or 2. (There are more valid DS hash
      algorithms, but these are not at the moment allowed for publication in
      the root zone.)

      ## Environmental needs

      This test has no environmental needs.

      ## Special procedural requirements

      This test has no special procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      The test program is executed with all of the input parameters described
      in section 17.3. The DnsKeyDigestType input number is compared with the
      values 1 and 2, where it must match either.
  DNS15:
    Summary: DS must match a DNSKEY in the designated zone
    Description: |
      ## Objective

      There must be a DNSKEY that matches the DS record present in the child
      zone.

      This test case fulfills the anycast requirements 5.2.2 in the gTLD
      Application Handbook, Module 5 and the tests described in the "Technical
      requirements for authoritative name servers" document.

      ## Inputs

      See section 17.3 for all input parameters.

      ## Outcome(s)

      All submitted DS records must match a DNSKEY that is published on all
      the authoritative name servers for the designated zone, or else the test
      will emit a failure. If the matched DNSKEY is a ZSK, and not a KSK, then
      a warning will be emitted.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 17.3 should
      be authoritative for the designated zone.

      ## Special procedural requirements

      If a top-level domain operator has a situation where all DS records does
      not match a DNSKEY, and this is by design and can be demonstrated not to
      affect the stability of the TLD or the root zone, it is possible to
      request that the DS records be "listed" regardless. This test case will
      give a notify message as the result of the test after discussing with
      the domain operator.

      (Note: At least one DS must always match a DNSKEY.)

      This is the same procedure as for the final publication of the DS
      records in the root zone.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      The test program is executed with all of the input parameters described
      in section 17.3.

      For each DS record from the input parameters do:

      -   Send a query for DNSKEY to all specified authoritative name servers.

      -   Verify that there is a matching DNSKEY in the answer section for all
          queries made.

      -   If a matching DNSKEY does not have the Secure Entry Point flag set,
          emit a warning.
  DNS16:
    Summary: Signatures in the designated zone must validate
    Description: |
      ## Objective

      Verify that the provided DNSSEC trust anchor can be used to validate
      DNSSEC signatures (RRSIG) in the test zone.

      Inputs

      The following information will be needed as input for this test case:

        ------------------------------------------------------------------------
        Id                          Description                     Type
        --------------------------- ------------------------------- ------------
        TLD                         The ASCII compatible name of    String
                                    the TLD

        DnsKeyDigest-\[1..n\]       The digest (DS) of the DNSKEY   String

        DnsKeyTag-\[1..n\]          The key tag of the DNSKEY       Number

        DnsKeyAlgorithm-\[1..n\]    The algorithm number of the     Number
                                    DNSKEY

        DnsKeyDigestType-\[1..n\]   The digest type number of the   Number
                                    DS

        DnsNameServer-\[1..n\]      FQDN of authoritative name      String
                                    server

        DnsGlueRecord-\[1..n\]      All IPv4 or IPv6 addresses for  String
                                    auth NS

        SubDomain                   A delegated domain with NS and  String
                                    DS records published in the TLD
                                    zone
        ------------------------------------------------------------------------

      The above input is also considered to be the exact same information that
      is sent to IANA for inclusion in the root zone, except for the
      SubDomain. IANA will only publish the subordinate host glue records in
      the root zone.

      ## Outcome(s)

      After the measurement criteria in section 2.4.1 has been passed, the
      following outcome must be true for all DNS answers, or this test case
      fails:

      -   The signatures covering the DNSKEY record must be validated
          following the DNSSEC chain from the given DS records.

      -   The signatures covering the SOA record must be validated following
          the DNSSEC chain from the given DS records.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 19.3 should
      be authoritative for the designated zone.

      The node availability criteria described in section 2.4.1 also apply to
      this test.

      ## Special procedural requirements

      This test has no special procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      The test program is executed with all of the input parameters described
      in section 19.3.

      For each name server, a query is sent to all the name servers for the
      DNSKEY record. The answers must contain DNSKEY records and an RRSIG
      record(s). The signature is validated with the DNSKEYs found, and then
      matched with the DS record from the input.

      For each unique DNSKEY algorithm found in the, there must be an RRSIG
      matching each algorithm.
  DNS17:
    Summary: Zone contains NSEC or NSEC3 records
    Description: |
      ## Objective

      Verify that correct NSEC or NSEC3 records with valid signatures are
      returned for a query for an non-existent name.

      This test case fulfills the DNSSEC validation requirement AGB3 from the
      Applicant Guidebook.

      ## Inputs

      See section 19.3 for all input parameters.

      ## Outcome(s)

      After the measurement criteria in section 2.4.1 has been passed, the
      following outcome must be true for all DNS answers, or this test case
      fails:

      The signatures covering the NSEC or NSEC3 record must be validated
      following the DNSSEC chain from the given DS records. If the records are
      not present, if the records are not correct or if an invalid RRSIG is
      returned, this test fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 19.3 should
      be authoritative for the designated zone.

      The node availability criteria described in section 2.4.1 also apply to
      this test.

      ## Special procedural requirements

      This test has no special procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      The test program is executed with all of the input parameters described
      in section 19.3.

      A query is made for the SOA record on xx\--example.\[TLD\], a label that
      should never occur because of the prefix. The answer should contain
      correct NSEC or NSEC3 records (according to the DNSSEC standards) with
      valid signatures.
  DNS18:
    Summary: Consistency between glue and authoritative data
    Description: |
      ## Objective

      For name servers that have IP addresses listed as glue, the IP addresses
      must match the authoritative A and AAAA records for that host.

      ## Inputs

      See section 19.3 for all input parameters.

      ## Outcome(s)

      After the measurement criteria in section 2.4.1 has been passed, the
      following outcome must be true for all DNS answers, or this test case
      fails:

      This test fails if there is a glue record (A or AAAA) in the delegation
      that does not exist in the delegated zone, i.e. the owner name and IP
      address of the record must be the same.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 19.3 must be
      authoritative for the designated zone.

      The node availability criteria described in section 2.4.1 also apply to
      this test.

      ## Special procedural requirements

      This test case is dependent on the availability of all unicast
      addresses, however we cannot verify that all unicast addresses has been
      made available for testing.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      For each name server in the input parameter (DnsNameServer) send a DNS
      query for each glue record. Compare the RR set in the response with the
      glue record. If there is no record in the answer with the same owner
      name and IP address as the glue record, the entire test fails. The RR
      set may contain additional records."
  DNS19:
    Summary: SOA record consistency between authoritative name servers
    Description: |
      ## Objective

      The data served by the authoritative name servers for the designated
      zone must be consistent. All authoritative name servers must serve the
      same SOA record for the designated zone.

      ## Inputs

      See section 19.3 in this document.

      ## Outcome(s)

      After the measurement criteria in section 2.4.1 has been passed, the
      following outcome must be true for all DNS answers, or this test case
      fails:

      If there is an inconsistency between any SOA records retrieved for the
      designated zone, the test fails.

      If there are occurrences of different SOA Serial numbers, we manually
      inspect the Serial numbers in the logs. See the requirement in 2.8.3.1
      in the "Technical requirements for authoritative name
      servers"
      document.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 19.3 must be
      authoritative for the designated zone.

      The node availability criteria described in section 2.4.1 also apply to
      this test.

      ## Special procedural requirements

      If for operational reasons the zone content fluctuates rapidly, the
      serial numbers need only be loosely coherent. Manual inspection of the
      logs is performed in case of the occurrence of different SOA Serial
      numbers.

      There are several different methods to set the SOA Serial number. The
      most popular are "unix time" where the Serial is a second counter based
      on unix time, "date" where the Serial is a date and a serial number
      counter at the end, and "counter" where the Serial value is just any
      type of counter. The most common use is probably "unix time". In both
      "date" and "unix time" it should be easy to note that the name servers
      do not differ any more than a few serial number updates. A manual
      inspection of the SOA serial should be enough to make a decision on
      whether the name server updates work properly or not, and if the serial
      values are within a reasonable range the test is ok.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      A SOA query for the designated zone is made for each name server in the
      input data described in section 19.3. If the answers are not consistent
      this test fails.
  DNS20:
    Summary: NS record consistency between authoritative name servers
    Description: |
      ## Objective

      The data served by the authoritative name servers for the designated
      zone must be consistent. All authoritative name servers must serve the
      same NS record set for the designated zone.

      ## Inputs

      See section 19.3 in this document.

      ## Outcome(s)

      After the measurement criteria in section 2.4.1 has been passed, the
      following outcome must be true for all DNS answers, or this test case
      fails:

      If there is an inconsistency between any set of NS records retrieved for
      the designated zone, the test fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 19.3 must be
      authoritative for the designated zone.

      The node availability criteria described in section 2.4.1 also apply to
      this test.

      ## Special procedural requirements

      This test case is dependent on the availability of all unicast
      addresses, however we cannot verify that all unicast addresses has been
      made available for testing.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      An NS query for the designated zone is made for each name server in the
      input data described in section 19.3. If the answers are not consistent
      this test fails.
  DNS21:
    Summary: No open recursive name service
    Description: |
      ## Objective

      The authoritative name servers must not provide recursive name service.

      ## Inputs

      See section 19.3 in this document.

      ## Outcome(s)

      After the measurement criteria in section 2.4.1 has been passed, the
      following outcome must be true for all DNS answers, or this test case
      fails:

      If any of the authoritative name servers returns with an RCODE other
      than SERVFAIL or REFUSED, this test case fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 19.3 must be
      authoritative for the designated zone.

      The node availability criteria described in section 2.4.1 also apply to
      this test.

      ## Special procedural requirements

      This test case is dependent on the availability of all unicast
      addresses; however, we cannot verify that all unicast addresses has been
      made available for testing.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      A SOA query for an almost certainly nonexistent name (e.g., example.com)
      is sent to the list of name servers, with the recursion request and
      DNSSEC flags set, resulting in a response with the recursion available
      flag set, an RCODE other than SERVFAIL or REFUSED and not referring to
      other servers. If the response is a possible referral, a failure message
      is emitted from the test of the name server.
  DNS23:
    Summary: Syntax for SOA RNAME
    Description: |
      ## Objective

      The SOA RNAME field must be valid in accordance with section 3.3.13 in
      RFC 1035 and section 3.4 in RFC 2822.

      ## Inputs

      See section 5.3 in this document.

      ## Outcome(s)

      The SOA field RNAME must comply with RFC 2822 "Address Specification".
      If the validation of RNAME fails, a message is generated and this test
      case fails.

      ## Environmental needs

      This test has no environmental requirements.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      A SOA query is made to all authoritative name servers. The SOA field
      RNAME is validated against the rules described in RFC 2822, "Address
      Specification". If the RNAME field does not validate, a message is
      generated.
  DNS24:
    Summary: SOA Minimum
    Description: |
      ## Objective

      The SOA Minimum field must be set to 300 seconds or more.

      ## Inputs

      See section 5.3 in this document.

      ## Outcome(s)

      The SOA Minimum value must not be less than 300. If the value is less
      than 300, a message is returned and this test case emits a warning.

      ## Environmental needs

      This test has no environmental requirements.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      The value from the SOA Minimum field is retrieved. If the value is less
      than 300 a message is generated.
  DNS25:
    Summary: NSEC3 Iterations
    Description: |
      ## Objective

      The number of NSEC3 Iterations must meet the requirements of RFC 5155,
      section 10.3 and RFC 6781, section 5.3.2.

      ## Inputs

      See section 17.3 in this document.

      ## Outcome(s)

      If the NSEC3 Iterations value is greater than 100 this test emits a
      warning (RFC 6781). If the NSEC3 Iterations is greater what is stated in
      RFC 5155 (section 10.3), depending on key size, then this test emits a
      failure. The limits for failure are based on the size of the smallest
      key, rounded up to the nearest table value or rounded down if the key is
      larger than the largest table value (table from RFC 5155):

        ----------------------------------------------------------------------
        **Key size**                       **Iterations**
        ---------------------------------- -----------------------------------
        1024                                150

        2048                                500

        4096                               2500
        ----------------------------------------------------------------------

      ## Environmental needs

      This test has no environmental requirements.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      The test program is executed with all of the input parameters described
      in section 17.3.

      1.  The Iterations value from the NSEC3PARAM is retrieved from all
          specified authoritative name servers.

      2.  The DNSKEY set is retrieved, and the smallest key size is selected.

      3.  The number of iterations is compared to the value 100.

      4.  If the number is higher than 100, it is compared to the values
          stated in RFC 5155 (see table above).
  DNS26:
    Summary: RRSIG Lifetimes
    Description: |
      ## Objective

      Check that RRSIG lifetimes are not too short (12 hours) or too long (180
      days).

      ## Inputs

      See section 17.3 for all input parameters.

      ## Outcome(s)

      If any of the RRSIG lifetimes are lower than 12 hours or higher than 180
      days, the test emits a warning.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 17.3 should
      be authoritative for the designated zone.

      ## Special procedural requirements

      This test has no special procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      The test program is executed with all of the input parameters described
      in section 17.3.

      The RRSIG records are retrieved. The signature lifetimes covering the
      DNSKEY and the SOA records are then matched against the lower value of
      12 hours and the upper value 180 days, and if the lifetimes are out of
      this range the test emits a warning.
  DNS27:
    Summary: DNSKEY Algorithms
    Description: |
      ## Objective

      Check that there are no invalid DNSKEY algorithms used by any DNSKEY in
      the designated zone.

      ## Inputs

      See section 17.3 for all input parameters.

      ## Outcome(s)

      If any of the DNSKEY algorithm numbers does not match the IANA defined
      DNSKEY algorithm types, the test emits a warning.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 17.3 should
      be authoritative for the designated zone.

      ## Special procedural requirements

      This test has no special procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      The test program is executed with all of the input parameters described
      in section 17.3.

      All DNSKEY records are retrieved from the designated zone. The DNSKEY
      algorithm number is derived from the DNSKEY record and compared to the
      list of valid DNSKEY algorithms as defined by
      IANA.
  DNS28:
    Summary: DS TTL
    Description: |
      ## Objective

      The TTL on DS records in the designated zone must not be too long
      (\>172800 seconds).

      ## Inputs

      The following information will be needed as input for this test case:

        ----------------------------------------------------------------------
        Id                        Description                     Type
        ------------------------- ------------------------------- ------------
        TLD                       The ASCII compatible name of    String
                                  the TLD

        DnsNameServer-\[1..n\]    FQDN of authoritative name      String
                                  server

        DnsGlueRecord-\[1..n\]    All IPv4 or IPv6 addresses for  String
                                  auth NS

        SubDomain                 A delegated domain with NS and  String
                                  DS records published in the TLD
                                  zone
        ----------------------------------------------------------------------

      The above input is also considered to be the exact same information that
      is sent to IANA for inclusion in the root zone. IANA will only publish
      the subordinate host glue records in the root zone.

      ## Outcome(s)

      All TTL values from the DS record must be less than or equal to 172800
      seconds for this test to pass. If there are missing DS records, or the
      TTL value is higher than 172800 this test emits a warning.

      ## Environmental needs

      All authoritative name servers listed in the inputs section should be
      authoritative for the designated zone.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no procedural requirements.

      ## Ordered description of steps to be taken to execute the test case

      A query for the DS record of the SubDomain is done for all the listed
      name servers. The TTL of the DS record is evaluated, and it must not
      exceed 172800 seconds.
  DNS29:
    Summary: Wildcards
    Description: |
      ## Objective

      There must not be any wildcards in the designated zone.

      ## Inputs

      The following information will be needed as input for this test case:

        ----------------------------------------------------------------------
        Id                        Description                     Type
        ------------------------- ------------------------------- ------------
        TLD                       The ASCII compatible name of    String
                                  the TLD

        DnsNameServer-\[1..n\]    FQDN of authoritative name      String
                                  server

        DnsGlueRecord-\[1..n\]    All IPv4 or IPv6 addresses for  String
                                  auth NS
        ----------------------------------------------------------------------

      The above input is also considered to be the exact same information that
      is sent to IANA for inclusion in the root zone. IANA will only publish
      the subordinate host glue records in the root zone.

      ## Outcome(s)

      Both queries must answer with the RCODE NXDOMAIN for this test to pass.
      All other RCODEs will generate a fail.

      ## Environmental needs

      All authoritative name servers listed in the inputs section should be
      authoritative for the designated zone.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no procedural requirements.

      ## Ordered description of steps to be taken to execute the test case

      Two queries are made, for the A and the AAAA records for an almost
      certainly nonexistent name in the designated zone. The RCODE should not
      be NOERROR.
  DNS30:
    Summary: Dotless domain
    Description: |
      ## Objective

      The apex of the domain must not contain authoritative data such as an
      A/AAAA record, or an MX record, for use as what is called a "dotless
      domain".

      ## Inputs

      See section 31.3 in this document.

      ## Outcome(s)

      All queries must answer with the RCODE NOERROR, and the ANSWER and
      AUTHORITY parts of the answer must not contain NS records for this test
      to pass. Any NS records in the answer will fail this test.

      ## Environmental needs

      All authoritative name servers listed in the inputs section should be
      authoritative for the designated zone.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test depends on the EPP test level to finish, since we need a
      registered domain with a secure delegation in order to have a DS record
      available for testing.

      ## Ordered description of steps to be taken to execute the test case

      Three queries are made, for the A, the AAAA and the MX records for the
      label \<TLD\> in the designated zone. The RCODE should be NOERROR, with
      the ANSWER and AUTHORITY parts of the answer should be empty.
  DNS31:
    Summary: nic.<TLD> or whois.nic.<TLD> must be delegated
    Description: |
      ## Objective

      The names nic.\<TLD\> or whois.nic.\<TLD\> must be a delegated zone.

      ## Inputs

      See section 31.3 in this document.

      ## Outcome(s)

      The answer must be NOERROR and the ANSWER or AUTHORITY section must
      contain NS records, for either nic.\<TLD\> or whois.nic.\<TLD\>. If any
      of the queries fail to return an NS set, this test fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section should be
      authoritative for the designated zone.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test depends on the EPP test level to finish, since we need a
      registered domain with a secure delegation in order to have a DS record
      available for testing.

      ## Ordered description of steps to be taken to execute the test case

      A query is made for the NS record for the label nic.\<TLD\> and the
      whois.nic.\<TLD\> in the designated zone. The answer should be a set of
      NS records for the name server handling the delegation.
  DNS32:
    Summary: Name server reachability
    Description: |
      ## Objective

      The name servers must answer DNS queries over both the UDP and TCP
      protocols on port 53.

      This test case fulfills the requirements 2.3.1 in the "Technical
      requirements for authoritative name servers" document, and the requirements on TCP
      and UDP of section 5.2 in the Applicant Guidebook.

      ## Inputs

      See section 19.3 in this document.

      ## Outcome(s)

      After the measurement criteria in section 2.4.1 has been passed, the
      following outcome must be true for all DNS answers, or this test case
      fails:

      All name servers answers over UDP and TCP. If any of the listed name
      servers in section 19.3 does not answer below the threshold level
      described below this paragraph, this test case fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 19.3 must be
      authoritative for the designated zone.

      The node availability criteria described in section 2.4.1 in this
      document also apply to this test.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      A SOA query over UDP and TCP for the designated zone is made for each
      name server in the input data described in section 19.3. If there are no
      answers, this test case fails (based on the outcome criteria in 34.4).
  DNS33:
    Summary: Answer authoritatively
    Description: |
      ## Objective

      The name servers must answer authoritatively for the designated zone.
      Responses to queries to the name servers for the designated zone must
      have the "AA"-bit set.

      This test case fulfills the requirements 2.4.1 and 2.4.2 in the
      "Technical requirements for authoritative name
      servers"
      document.

      ## Inputs

      See section 19.3 in this document.

      ## Outcome(s)

      After the measurement criteria in section 2.4.1 has been passed, the
      following outcome must be true for all DNS answers, or this test case
      fails:

      All name servers give authoritative answers over UDP and TCP. If any of
      the listed name servers in section 19.3 does not answer authoritatively,
      this test case fail.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 19.3 should
      be authoritative for the designated zone.

      The node availability criteria described in section 2.4.1 in this
      document also apply to this test.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      A SOA query over UDP and TCP for the designated zone is made for each
      name server in the input data described in section 19.3. If any of the
      name servers fail to give an authoritative answer ("AA-bit" is set in
      the answer), the test case fails.
  DNS34:
    Summary: Consistency between delegation and zone
    Description: |
      ## Objective

      The set of NS records served by the authoritative name servers must
      match those proposed for the delegation in the parent zone.

      This test case fulfills the requirements 2.7.1 in the "Technical
      requirements for authoritative name servers" document.

      ## Inputs

      See section 19.3 in this document.

      ## Outcome(s)

      After the measurement criteria in section 2.4.1 has been passed, the
      following outcome must be true for all DNS answers, or this test case
      fails:

      If any extraneous name server is present in the parent data or in the
      delegated child zone, this test case fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 19.3 should
      be authoritative for the designated zone.

      The node availability criteria described in section 2.4.1 in this
      document also apply to this test.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      The name server data on the input parameters side is compared to the
      content of the answers for all the name servers. If there is an
      inconsistency between the NS record sets, this test fails.
  DNS35:
    Summary: Name server must be able to provide referral to known subdomains
    Description: |
      ## Objective

      All name servers must provide a referral with NS, DS and optional glue
      for the delegated subdomain.

      ## Inputs

      See section 19.3 in this document.

      ## Outcome(s)

      After the measurement criteria in section 2.4.1 has been passed, the
      following outcome must be true for all DNS answers, or this test case
      fails:

      If the result of the query does not contain NS and DS records in the
      authority section, this test fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 19.3 should
      be authoritative for the designated zone.

      The node availability criteria described in section 2.4.1 in this
      document also apply to this test.

      ## Special procedural requirements

      This test has no procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      A SOA query for SubDomain from the input parameters is made to all the
      name servers. The result must contain a DS and NS set for the next link
      in the delegation chain.
  DNS36:
    Summary: RRSIG(SOA) must validate with supplied DS record
    Description: |
      ## Objective

      Confirm that any of the supplied DS records are actually used, directly
      as ZSK or indirectly as KSK, for signing the zones' SOA record.

      ## Inputs

      See section 17.3 for all input parameters.

      ## Outcome(s)

      If none of the signatures over the SOA-record validate when using the
      supplied DS-record as a trust anchor, this test case fails.

      ## Environmental needs

      All authoritative name servers listed in the inputs section 17.3 should
      be authoritative for the designated zone.

      ## Special procedural requirements

      This test has no special procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Load all supplied DS records into a DNSSEC-validating resolver.

      2.  Retrieve the SOA RR set from the child zone.

      3.  Retrieve the RRSIG of the SOA RR set from the child zone.

      4.  Retrieve the DNSKEY RR set from the child zone.

      5.  Retrieve the RRSIG of the DNSKEY RR set from the child zone.

      6.  Do a cryptographic validation of the SOA record using the DS records
          or DS record as trust anchor.

      7.  The TC ends with pass if it is possible to validate the SOA record
          using at least one DS record as trust anchor.

  DataEscrowFileName01:
    Summary: Verify file names, full escrow
    Description: |
      ## Objective

      The test will receive one full deposit of sample data. The objective is
      to verify file names.

      Requirements from the test plan: \[R21\], \[AGB1\], \[RS5\]

      ## Inputs

      The following information will be needed as input for this test case:

        ------------------------------------------------------------------------
        Id                      Description                         Type
        ----------------------- ----------------------------------- ------------
        TLD                     The ASCII compatible name of the    String
                                TLD

        DataFileFull-\[1..n\]   The files containing the full       Files
                                deposit

        DataSigFull-\[1..n\]    The files containing the signature  Files
        ------------------------------------------------------------------------

      ## Outcome(s)

      Files MUST be named according to the following convention:

      {gTLD}\_{YYYY-MM-DD}\_{type}\_S{#}\_R{rev}.{ext}

      ## Environmental needs

      This test has no environmental needs.

      ## Special procedural requirements

      This test has no special procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      All of the checks are case insensitive.

      The data files MUST follow this format
      {gTLD}\_{YYYY-MM-DD}\_{type}\_S{#}\_R{rev}.{ext}

      For each **\<DataFileFull\>**, check that:

      1.  {gTLD} is equal to **\<TLD\>**. If it is an IDN-TLD, then this MUST
          be the A-label.

      2.  {YYYY-MM-DD} is equal to year, month, and day. The file MUST be
          maximum 40 days old.

      3.  {type} is equal to "full".

      4.  {#} is a number greater than or equal to 1. Leading zeroes are not
          allowed.

      5.  {rev} is a number greater than or equal to 0. Leading zeroes are not
          allowed.

      6.  {ext} is equal to "ryde".

      The signature files MUST follow this format
      {gTLD}\_{YYYY-MM-DD}\_{type}\_S{#}\_R{rev}.{ext}

      For each **\<DataSigFull\>**, check that:

      1.  {gTLD} is equal to **\<TLD\>**. If it is an IDN-TLD, then this MUST
          be the A-label.

      2.  {YYYY-MM-DD} is equal to year, month, and day. The file MUST be
          maximum 40 days old.

      3.  {type} is equal to "full".

      4.  {#} is a number greater than or equal to 1. Leading zeroes are not
          allowed.

      5.  {rev} is a number greater than or equal to 0. Leading zeroes are not
          allowed.

      6.  {ext} is equal to "sig".
  DataEscrowFileName02:
    Summary: Verify file names, differential escrow
    Description: |
      ## Objective

      This test is optional and will only be performed if the Registry
      Operator has supplied a differential deposit.

      The test will receive one differential deposit of sample data. The
      objective is to verify file names.

      Requirements from the test plan: \[R21\], \[AGB2\], \[RS5\]

      ## Inputs

      The following information will be needed as input for this test case:

        ------------------------------------------------------------------------
        Id                      Description                         Type
        ----------------------- ----------------------------------- ------------
        TLD                     The ASCII compatible name of the    String
                                TLD

        DataFileDiff-\[1..n\]   The files containing the            Files
                                differential deposit

        DataSigDiff-\[1..n\]    The files containing the signature  Files
        ------------------------------------------------------------------------

      ## Outcome(s)

      Files MUST be named according to the following convention:

      {gTLD}\_{YYYY-MM-DD}\_{type}\_S{#}\_R{rev}.{ext}

      ## Environmental needs

      This test has no environmental needs.

      ## Special procedural requirements

      This test has no special procedural requirements.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      All of the checks are case insensitive.

      The data files MUST follow this format
      {gTLD}\_{YYYY-MM-DD}\_{type}\_S{#}\_R{rev}.{ext}

      For each **\<DataFileDiff\>**, check that:

      1.  {gTLD} is equal to **\<TLD\>**. If it is an IDN-TLD, then this MUST
          be the A-label.

      2.  {YYYY-MM-DD} is equal to year, month, and day. The file MUST be
          maximum 40 days old.

      3.  {type} is equal to "diff".

      4.  {#} is a number greater than or equal to 1. Leading zeroes are not
          allowed.

      5.  {rev} is a number greater than or equal to 0. Leading zeroes are not
          allowed.

      6.  {ext} is equal to "ryde".

      The signature files MUST follow this format
      {gTLD}\_{YYYY-MM-DD}\_{type}\_S{#}\_R{rev}.{ext}

      For each **\<DataSigDiff\>**, check that:

      1.  {gTLD} is equal to **\<TLD\>**. If it is an IDN-TLD, then this MUST
          be the A-label.

      2.  {YYYY-MM-DD} is equal to year, month, and day. The file MUST be
          maximum 40 days old.

      3.  {type} is equal to "diff".

      4.  {#} is a number greater than or equal to1. Leading zeroes are not
          allowed.

      5.  {rev} is a number greater than or equal to 0. Leading zeroes are not
          allowed.

      6.  {ext} is equal to "sig".
  DataEscrowVerify01:
    Summary: Verify signatures, full escrow
    Description: |
      ## Objective

      The test will verify the signatures of the received files. If it is a
      multi-part transmission, then the files are reassembled. Decrypt and
      uncompress the result.

      Requirements from the test plan: \[R21\], \[AGB1\], \[RS4\], \[RS8-1\],
      \[RS8-2\], \[RS8-3\], \[ALGO\]

      ## Inputs

      The following information will be needed as input for this test case:

        ------------------------------------------------------------------------
        Id                      Description                         Type
        ----------------------- ----------------------------------- ------------
        DataFileFull-\[1..n\]   The files containing the full       Files
                                deposit

        DataSigFull-\[1..n\]    The files containing the signature  Files

        DataRegPubKey           The public key used for             File
                                verification
        ------------------------------------------------------------------------

      ## Outcome(s)

      -   The signature, encryption, and compression are done in accordance
          with RFC 4880.

      -   The files MUST be signed using RSA, DSA, or ECDSA with SHA1,
          RIPEMD160, SHA224, SHA256, SHA384, or SHA512.

      -   If multi-part files, then all files MUST be present.

      -   The files MUST be encrypted using RSA, Elgamal, or ECDH with IDEA,
          TripleDES, CAST5, Blowfish, AES128, AES192, AES256, or Twofish.

      -   The decrypted and uncompressed file will be used in upcoming test.

      ## Environmental needs

      This test has no environmental needs.

      ## Special procedural requirements

      This test has no special procedural requirements.

      ## Intercase dependencies

      DataEscrowFileName01 must first have been executed successfully.

      ## Ordered description of steps to be taken to execute the test case

      All operations are done in accordance with RFC 4880.

      For each **\<DataSigFull\>**:

      1.  Validate the signature. It MUST be possible to validate the
          **\<DataFileFull\>** using the signature and the
          **\<DataRegPubKey\>**.

      2.  Check the properties of the signature:

          a.  Digest algorithm SHA1, RIPEMD160, SHA224, SHA256, SHA384, or
              SHA512 MUST be used. MD5 is deprecated and MUST NOT be used.

          b.  Public key algorithm RSA, DSA or ECDSA MUST be used.

      If there is more than one **\<DataFileFull\>**:

      1.  All file parts MUST be present. See {#} in the file name and that
          they form a sequence of numbers starting with 1.

      2.  Concatenate the files in order.

      Decrypt and uncompress the (concatenated) file:

      1.  Decrypt the file using the private test key. The file will be
          uncompressed automatically by the client software.

      2.  Check the properties of the encrypted file:

          a.  Symmetric algorithm IDEA, TripleDES, CAST5, Blowfish, AES128,
              AES192, AES256, or Twofish MUST be used.

          b.  Public key algorithm RSA, Elgamal or ECDH MUST be used. (Note
              that this will always be RSA because of the RST Provider's
              public key.)

      3.  Check the original file name of the unencrypted file. It MUST be the
          same as the encrypted deposit but with extension tar.

      Untar the decrypted archive and check that there is an XML file. It MUST
      be named as the deposit but with the extension xml. The XML file MUST
      NOT be placed in any subdirectory within the archive.
  DataEscrowVerify02:
    Summary: Verify signatures, differential escrow
    Description: |
      ## Objective

      This test is optional and will only be performed if the Registry
      Operator has supplied a differential deposit.

      The test will verify the signature of the received files. If it is a
      multi-part transmission, then the files are reassembled. Decrypt and
      uncompress the result.

      Requirements from the test plan: \[R21\], \[AGB2\], \[RS4\], \[RS8-1\],
      \[RS8-2\], \[RS8-3\], \[ALGO\]

      ## Inputs

      The following information will be needed as input for this test case:

        ------------------------------------------------------------------------
        Id                      Description                         Type
        ----------------------- ----------------------------------- ------------
        DataFileDiff-\[1..n\]   The files containing the            Files
                                differential deposit

        DataSigDiff-\[1..n\]    The files containing the signature  Files

        DataRegPubKey           The public key used for             File
                                verification
        ------------------------------------------------------------------------

      ## Outcome(s)

      -   The signature, encryption, and compression are done in accordance
          with RFC 4880.

      -   The files MUST be signed using RSA, DSA, or ECDSA with SHA1,
          RIPEMD160, SHA224, SHA256, SHA384, or SHA512.

      -   If multi-part files, then all files MUST be present.

      -   The files MUST be encrypted using RSA, Elgamal, or ECDH with IDEA,
          TripleDES, CAST5, Blowfish, AES128, AES192, AES256, or Twofish.

      -   The decrypted and uncompressed file will be used in upcoming test.

      ## Environmental needs

      This test has no environmental needs.

      ## Special procedural requirements

      This test has no special procedural requirements.

      ## Intercase dependencies

      DataEscrowFileName02 must first have been executed successfully.

      ## Ordered description of steps to be taken to execute the test case

      All operations are done in accordance with RFC 4880.

      For each **\<DataSigDiff\>**:

      1.  Validate the signature. It MUST be possible to validate the
          **\<DataFileDiff\>** using the signature and the
          **\<DataRegPubKey\>**.

      2.  Check the properties of the signature:

          a.  Digest algorithm SHA1, RIPEMD160, SHA224, SHA256, SHA384, or
              SHA512 MUST be used. MD5 is deprecated and MUST NOT be used.

          b.  Public key algorithm RSA, DSA or ECDSA MUST be used.

      If there is more than one **\<DataFileDiff\>**:

      1.  All file parts MUST be present. See {#} in the file name and that
          they form a sequence of numbers starting with 1.

      2.  Concatenate the files in order.

      Decrypt and uncompress the (concatenated) file:

      1.  Decrypt the file using the private test key. The file will be
          uncompressed automatically by the client software.

      2.  Check the properties of the encrypted file:

          a.  Symmetric algorithm IDEA, TripleDES, CAST5, Blowfish, AES128,
              AES192, AES256, or Twofish MUST be used.

          b.  Public key algorithm RSA, Elgamal or ECDH MUST be used. (Note
              that this will always be RSA because of the RST Provider's
              public key.)

      3.  Check the original file name of the unencrypted file. It MUST be the
          same as the encrypted deposit but with extension tar.

      Untar the decrypted archive and check that there is an XML file. It MUST
      be named as the deposit but with the extension xml. The XML file MUST
      NOT be placed in any subdirectory within the archive.
  DataEscrowContent01:
    Summary: Validate content, full escrow
    Description: |
      ## Objective

      This test will validate the full deposit against the profile.

      Requirements from the test plan: \[R21\], \[R22\], \[AGB1\], \[RS3\],
      \[RS8-4\]

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        DataFileFull           The unencrypted file containing the File
                               full deposit

        DataProfile            The data escrow profile described   XML file
                               using W3C XML Schema. Provided by
                               ICANN.
        -----------------------------------------------------------------------

      ## Outcome(s)

      The full deposit MUST have valid XML and contain required and valid
      attributes.

      ## Environmental needs

      This test has no environmental needs.

      ## Special procedural requirements

      This test has no special procedural requirements.

      ## Intercase dependencies

      DataEscrowVerify01 must first have been executed successfully.

      ## Ordered description of steps to be taken to execute the test case

      1.  Check if it is an XML or CSV deposit.

          a.  If CSV deposit, then the corresponding XML in the tests below.

      2.  Validate the **\<DataFileFull\>** XML file against the
          **\<DataProfile\>** XML schema provided by ICANN. The Registry
          Operator MUST use extensions which have been agreed upon with ICANN.

      3.  Check the content of the XML:

          a.  The type MUST be "FULL".

          b.  The date part of the watermark MUST match the date in the file
              name.

          c.  There MUST NOT be a "deletes" element in the file.
  DataEscrowContent02:
    Summary: Validate content, differential escrow
    Description: |
      ## Objective

      This test is optional and will only be performed if the Registry
      Operator has supplied a differential deposit.

      This test will validate the differential deposit against the profile.

      Requirements from the test plan: \[R21\], \[R22\], \[AGB2\], \[RS3\],
      \[RS8-4\]

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        DataFileDiff           The unencrypted file containing the File
                               differential deposit

        DataProfile            The data escrow profile described   XML file
                               using W3C XML Schema. Provided by
                               ICANN.
        -----------------------------------------------------------------------

      ## Outcome(s)

      The differential deposit MUST have valid XML and contain required and
      valid attributes.

      ## Environmental needs

      This test has no environmental needs.

      ## Special procedural requirements

      This test has no special procedural requirements.

      ## Intercase dependencies

      DataEscrowVerify02 must first have been executed successfully.

      ## Ordered description of steps to be taken to execute the test case

      1.  Check if it is an XML or CSV deposit.

          a.  If CSV deposit, then the corresponding XML in the tests below.

      2.  Validate the **\<DataFilediff\>** XML file against the
          **\<DataProfile\>** XML schema provided by ICANN. The Registry
          Operator MUST use extensions which have been agreed upon with ICANN.

      3.  Check the content of the XML:

          a.  The type MUST be "DIFF".

          b.  The prevId attribute MUST be present.

          c.  The date part of the watermark MUST match the date in the file
              name.

  DocDNS01:
    Summary: Capacity and DDOS mitigation
    Description: |
      ## Objective

      The test verifies that the self-certification documents include

      -   results from system performance tests indicating available network
          and server capacity.

      -   an estimate of expected capacity during normal operation.

      -   mitigation of DDoS attacks.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents that contain
          system performance test including available network and server
          capacity. Expected part is: document gTLDSelfCert section 1.1.5.

      2.  Verify the following results from a system performance test are
          included

          a.  available network and

          b.  server capacity.

      3.  Identify the parts in the self-certification documents that contain
          an estimation of expected capacity during normal operation. Expected
          part is: document gTLDSelfCert section 1.1.2, 1.1.5.

      4.  Verify that an estimate of expected capacity during normal operation
          is included.

      5.  Verify that the self-certification documents demonstrate that the
          DNS server and network availability capacity is equal to or greater
          than 2 times the expected load.

      6.  Identify the parts in the self-certification documents that cover
          DDoS attacks. Expected part is: document gTLDSelfCert section 1.1.4.

      7.  Verify that Distributed Denial of Service attacks are adequately
          addressed.\
          While it is difficult to give definite criteria for adequate
          mitigation of DDoS attacks, the self-certification should address at
          least the following points for automatic or semi-automatic as well
          as manual countermeasures:

          a.  Describe the strategy for dealing with DDoS attacks.

          b.  Describe the controls used in dealing with DDoS attacks.

          c.  The extent to which the chosen countermeasures suppress DDoS
              traffic.

          d.  The extent to which the chosen countermeasures affect legitimate
              DNS queries.

          e.  The time that elapses before countermeasures reach full effect.

          f.  The time that elapses before normal operation is reestablished
              after a DDos attack has ended.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   Results regarding available network and server capacity are included
          (step 2).

      -   An estimate of expected capacity is included. The documentation must
          show that the DNS server and network availability capacity exceeds
          the anticipated load by at least 2 times as stated in the
          self-certification documents (step 5).

      -   An adequate description of the handling of DDOS attacks is included
          (step 7).

      Criteria for FAIL:

      -   Part of the requested information is unclear or missing.
  DocDNS02:
    Summary: Load capacity, latency and network reachability
    Description: |
      ## Objective

      The test verifies that the self-certification documents include data on
      load capacity, latency and network reachability, for UDP and TCP
      support, and the corresponding for DNSSEC.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents that cover
          load capacity, latency and network reachability for UDP and TCP
          support, and the corresponding with DNSSEC. Expected part is:
          document gTLDSelfCert section 1.1, 1.1.5, 1.2, 1.3.

      2.  Verify the following are included

          a.  load capacity,

          b.  latency and

          c.  network reachability with ASN's of transit providers or peers.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   Values for load capacity & latency MUST be provided.

      -   Network reachability information MUST be provided.

      Criteria for FAIL:

      -   Some of the requested information is unclear or missing.
  DocDNS03:
    Summary: Load capacity – tables and graphs
    Description: |
      ## Objective

      The test verifies that the self-certification documents include a report
      of load capacity both using a tables and corresponding graphs, for UDP
      and TCP support, and the corresponding for DNSSEC. The graphs shall show
      the percentage of queries responded against an increasing number of
      queries per second, generated from local traffic generators.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents that contain
          report on load capacity for UDP and TCP support, and the
          corresponding with DNSSEC. Expected part is: document gTLDSelfCert
          section 1.1.3, 1.1.5.

      2.  Verify that the load capacity is reported both using

          a.  a table, and

          b.  a corresponding graph.

      3.  Verify the data provided reflects percentage of queries responded
          against an increasing number of queries per second generated from
          local (to the servers) traffic generators.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   Load capacity is reported in a table (step 2 a).

      -   Load capacity is reported in a graph (step 2 b).

      -   The table and graph shows the percentage of queries successfully
          responded to against an increasing number of queries per second
          (step 3).

      Criteria for FAIL:

      -   Part of the requested information is unclear or missing.
  DocDNS04:
    Summary: Load capacity – 20 data points
    Description: |
      ## Objective

      The test verifies that the report on load capacity for UDP and TCP
      support, and the corresponding with DNSSEC, in the self-certification
      documents includes at least 20 data points, and loads of queries that
      will cause up to 10% query loss against a randomly selected subset of
      servers within the Registry Operator's DNS infrastructure.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents that contain
          report on load capacity for UDP and TCP support, and the
          corresponding with DNSSEC. Expected part is: document gTLDSelfCert
          section 1.1.3, 1.1.5.

      2.  Verify that the reported table includes:

          a.  at least 20 data points and

          b.  loads that will cause up to 10% query loss against a randomly
              selected subset of servers within the Registry Operator's DNS
              infrastructure.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   The table on load capacity contains at least 20 data points (step 2
          a).

      -   The table on load capacity contains data points for loads causing up
          to 10% query loss or contains load up to 100 000 queries per second
          (step 2 b).

      Criteria for FAIL:

      -   Part of the requested information is unclear or missing.
  DocDNS05:
    Summary: Query latency
    Description: |
      ## Objective

      The test verifies that the self-certification documents for UDP and TCP
      support, and the corresponding with DNSSEC include a report on query
      latency in milliseconds, measured by DNS probes located just outside the
      border routers.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents that contain
          report on latency for UDP and TCP support, and the corresponding
          with DNSSEC. Expected part is: document gTLDSelfCert section 1.2.1,
          1.2.2.

      2.  Verify that query latency is

          a.  reported in milliseconds,

          b.  measured by DNS probes located just outside the border routers
              of the physical network hosting the name servers, from a network
              topology point of view.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   Query latency is reported in milliseconds (step 2 a).

      -   Query latency is measured outside the border routers of the network
          hosting the name servers (step 2 b).

      Criteria for FAIL:

      -   Part of the requested information is unclear or missing.
  DocDNS06:
    Summary: TCP reachability
    Description: |
      ## Objective

      The test verifies that the self-certification documents for TCP support
      include documentation on reachability by providing records of TCP-based
      DNS queries from nodes external to the network hosting the servers.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents that contain
          report on reachability for TCP support. Expected part is: document
          gTLDSelfCert section 1.3.1.

      2.  Verify that reachability is documented by providing records of
          TCP-based DNS queries from nodes external to the network hosting the
          servers. These nodes may be the same as those used for measuring
          latency for TCP support, TC DocDNS05.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   Records of TCP-based queries are included (step 2).

      -   It is stated that these are sent from external nodes (step 2).

      Criteria for FAIL:

      -   Part of the requested information is unclear or missing.
  DocDNS07:
    Summary: Basic DNSSEC support
    Description: |
      ## Objective

      The test verifies that the self-certification documents for DNSSEC
      support state support for EDNS(0) in Registry Operator's server
      infrastructure, the ability to return correct DNSSEC-related resource
      records such as DNSKEY, RRSIG, and NSEC/NSEC3 for the signed zone, and
      the ability to accept and publish DS resource records from second-level
      domain administrators.

      The test also verifies that the documents state support for the full
      life cycle of cryptographic keys.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents that cover
          DNSSEC support. Expected part is: document gTLDSelfCert section 1.4.

      2.  Verify that it states

          a.  support for EDNS(0) in its server infrastructure,

          b.  the ability to return correct DNSSEC-related resource records
              such as DNSKEY, RRSIG, and NSEC/NSEC3 for the signed zone,
              [and]{.underline}

          c.  the ability to accept and publish DS resource records from
              second-level domain administrators.

      3.  Verify that it states the ability to support the full life cycle of
          cryptographic keys.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   It is stated that support for EDNS(0) is included (step 2 a).

      -   It is stated that correct DNSSEC-related resource records can be
          returned. Examples are DNSKEY, RRSIG and NSEC/NSEC3 (step 2 b).

      -   It is stated that DS resource records from second-level domain
          administrators can be accepted and published (step 2 c).

      -   It is stated that the full life cycle of cryptographic keys is
          supported (step 3).

      Criteria for FAIL:

      -   Part of the requested information is unclear or missing.
  DocDNS08:
    Summary: Name server consistency
    Description: |
      ## Objective

      The test verifies that there is no conflict between the authoritative
      nameservers (anycast nodes, unicast nodes and DNS operators) declared in
      the self-certification documents and those defined for the technical
      tests.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        XMLFile                Description of Registry Operator's  Files
                               DNS environment in XML format
        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents that states
          nameservers. Expected part is: document gTLDSelfCert section 1.1.5.

      2.  Identify the authoritative nameservers declared in the submitted
          XML-file.

      3.  Verify that there is no conflict between the authoritative
          nameservers (anycast nodes, unicast nodes and DNS operators) defined
          for the technical test and those declared in the self-certification
          documents.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   No differences may be present between the name servers provided for
          the DNS tests & those declared in the self-certification documents
          (step 2).

      Criteria for FAIL:

      -   One or more of the PASS criteria is not fulfilled.

      -   Part of the requested information is unclear or missing.
  DocWhois01:
    Summary: Maximum QPS
    Description: |
      ## Objective

      The test verifies that the self-certification documents

      -   describe the maximum number of queries per second successfully
          handled, both on port 43 and web interface

      -   include a load expectation provided by the Registry Operator

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents concerning
          Whois transaction capacity, including both TCP port 43 and via a web
          interface. Expected part is: document gTLDSelfCert section 2.1.

      2.  Verify that the self-certification documents include a description
          of the maximum number of queries successfully handled on TCP port
          43.

      3.  Verify that the self-certification documents include a description
          of the maximum number of queries successfully handled on a web
          interface.

      4.  Verify that the self-certification documents demonstrate that the
          Whois service capacity is equal to or greater than 2 times the
          expected load.

      5.  Verify that the self-certification documents include an estimate of
          expected load.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   The maximum number of queries per second successfully handled on TCP
          port 43 is included (step 2).

      -   The maximum number of queries per second successfully handled on a
          web interface is included (step 3).

      -   The capacity is equal to or greater than 2 times the expected load
          (step 4).

      -   A load expectation is stated (step 5).

      Criteria for FAIL:

      -   Part of the requested information is unclear or missing.
  DocWhois02:
    Summary: Verify the self-certification documents
    Description: |
      ## Objective

      The test verifies that the self-certification documents

      -   Include a description of deployed control functions to detect data
          mining of the Whois database.

      -   Include a description of deployed control functions to mitigate data
          mining of the Whois database.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents describing
          detection and mitigation of data mining of the Whois service.
          Expected part is: document gTLDSelfCert section 2.2.

      2.  Verify that the self-certification documents include a description
          of deployed control functions for detecting data mining of the Whois
          service.

      3.  Verify that the self-certification documents include a description
          of deployed control functions for mitigating data mining of the
          Whois service.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   A description of a deployed control function for the detection of
          data-mining attempts of the Whois service is included (step 2).

      -   A description of a deployed control function for the mitigation of
          data-mining attempts of the Whois service is included (step 3).

      Criteria for FAIL:

      -   Part of the requested information is unclear or missing.
  DocEPP01:
    Summary: EPP capacity
    Description: |
      ## Objective

      The test verifies that the self-certification documents demonstrate that
      the EPP service capacity exceeds the anticipated load.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents concerning
          EPP service capacity. Expected part is: document gTLDSelfCert
          section 3.1.

      2.  Verify that the self-certification documents demonstrate that the
          EPP service capacity is equal to or greater than 2 times the
          expected load.

      The outcome of the testcase is PASS if the criteria for PASS and no
      criteria for FAIL is fulfilled.

      Criteria for PASS:

      -   The anticipated load on the EPP service is stated, as well as the
          capacity of the service. The documentation must show that the EPP
          service capacity exceeds the expected load by at least 2 times as
          stated in the self-certification documents (step 2).

      Criteria for FAIL:

      -   Part of the requested information is unclear or missing.
  DocEPP02:
    Summary: Verify self-certification documents
    Description: |
      ## Objective

      The test verifies that the self-certification documents

      -   provide the expected transactions per second rate for the EPP
          interface.

      -   provide this rate with 10 data points ranging from empty registry
          database to the expected size after one year of operations.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents concerning
          EPP transaction rate. Expected part is: document gTLDSelfCert
          section 3.1.

      2.  Verify that the self-certification documents provides expected
          transactions rate for the EPP interface.

      3.  Verify that the documentation states the expected size of the
          registry database after one year of operations, as determined by the
          Registry Operator.

      4.  Verify that the expected transaction rate is given in 10 data points
          ranging from an empty registry database to the expected size after
          one year of operations.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   Expected transaction rate for the EPP interface is provided (step
          2).

      -   An estimate of the registry database after one year of operation is
          provided (step 3).

      -   The expected transaction rate is provided for 10 data points ranging
          from an empty database to the above mentioned estimated size (step
          4).

      Criteria for FAIL:

      -   Part of the requested information is unclear or missing.
  DocEPP03:
    Summary: EPP landrush
    Description: |
      ## Objective

      The test verifies that the self-certification documents describe
      measures taken to handle EPP services during initial registry
      operations, e.g. a land-rush period.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents concerning
          EPP service capacity. Expected part is: document gTLDSelfCert
          section 3.2.

      2.  Verify that the self-certification documents describe measure taken
          to handle EPP services during initial registry operations, e.g. a
          land-rush period.

      The outcome of the testcase is PASS if the criteria for PASS and no
      criteria for FAIL is fulfilled.

      Criteria for PASS:

      -   A brief description is included of reasonable measures for handling
          EPP services during initial registry operations (step 2).

      Criteria for FAIL:

      -   Part of the requested information is unclear or missing.
  DocEPP04:
    Summary: EPP extensions
    Description: |
      ## Objective

      The test verifies that the Registry Operator attests the EPP extensions
      are documented in accordance with RFC 3735 in their self certification
      document.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        -----------------------------------------------------------------------

      ## Outcome(s)

      A pass will be awarded if statement in the self certification claims the
      EPP extensions are documented in accordance with the guidelines of RFC
      3735, otherwise the test case will fail.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents concerning
          EPP extensions. Expected part is: document gTLDSelfCert section 3.3.

      2.  Verify that the self-certification documents demonstrate that the
          EPP extensions

          a.  complies with RFC 3735

          b.  are documented in Internet-Draft format following the guidelines
              described in RFC 3735

      The outcome of the testcase is PASS if the criteria for PASS and no
      criteria for FAIL are fulfilled.
  DocEscr01:
    Summary: Data Escrow Agreement
    Description: |
      ## Objective

      The test verifies that the Registry Operator's data escrow agreement
      complies with specification 2 of the Registry Agreement.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        DataEscrowAgreement    The data escrow agreement between   Document
                               Registry Operator and data escrow
                               agent

        LetterOfCompliance     A letter of compliance from either  Document
                               the data escrow agent or ICANN
        -----------------------------------------------------------------------

      ## Outcome(s)

      The data escrow agreement is found valid.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the uploaded data escrow agreement and written letter of
          compliance from either escrow agent or ICANN, as relevant. Expected
          part is: document gTLDSelfCert section 4.

      2.  Verify that the data escrow agent is an ICANN approved data escrow
          agent, according to list
          <https://newgtlds.icann.org/en/applicants/data-escrow>

      3.  Verify that the submitted letter of compliance is issued by the
          correct party (data escrow agent or ICANN). Registry Operators
          requiring letter of compliance from ICANN are separately identified
          by ICANN, all other shall provide letters of compliance from the
          data escrow agents.

      4.  Verify that the data escrow agreement is duly executed (signed by
          the Registry Operator and the approved data escrow agent)

      5.  Verify that the relevant letter of compliance is duly executed, i.e.
          signed by either;

          a.  the data escrow agent; or

          b.  by ICANN representative

      6.  Verify that the effective date of the data escrow agreement is not
          in the future.

      7.  Verify that the date in the letter of compliance is not in the
          future.

      8.  Verify that the TLD referred to in the data escrow agreement and the
          relevant letter of compliance is the same and that the TLD is
          attributable to the relevant Registry Operator.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   The data escrow agent is an ICANN approved data escrow agent.

      -   The data escrow agreement is signed by both parties.

      -   The gTLD-string is correctly stated in the data escrow agreement and
          in the letter of compliance.

      -   The effective date of the agreement and the date in the letter of
          compliance are not in the future.

      -   The data escrow agreement is shown to be approved by

          -   a cover letter, signed by the data escrow agent, certifying that
              both Part A and Part B of Specification 2 are fulfilled, or by

          -   an ICANN approval letter for non standard escrow agreements,
              signed by ICANN representative.

      Criteria for FAIL:

      -   Some of the requested information is unclear or missing.
  DocSL01:
    Summary: DNS SLA
    Description: |
      ## Objective

      The test verifies that the self-certification documents concerning DNS
      service levels comply with with the SLA given in Specification 10 of the
      Registry Agreement.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        Specification 10       Specification 10 of the Registry    Documents
                               Agreement
        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents that contain
          service levels for DNS support. Expected part is: document
          gTLDSelfCert section 1.5.

      2.  Verify that DNS service availability

          a.  is stated in the self-certification documents and

          b.  that it complies with the SLA in Specification 10.

      3.  Verify that DNS name server availability

          a.  is stated in the self-certification documents and

          b.  that it complies with the SLA in Specification 10.

      4.  Verify that TCP DNS resolution RTT

          a.  is stated in the self-certification documents and

          b.  that it complies with the SLA in Specification 10.

      5.  Verify that UDP DNS resolution RTT

          a.  is stated in the self-certification documents and

          b.  that it complies with the SLA in Specification 10.

      6.  Verify that DNS update time

          a.  is stated in the self-certification documents and

          b.  that it complies with the SLA in Specification 10.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   All service levels comply with what is stated in Specification 10 of
          the Registry Agreement.

      Criteria for FAIL:

      -   One or more service levels does not fulfill what is stated in the
          Registry Agreement.

      -   Part of the requested information is unclear or missing.
  DocSL02:
    Summary: Whois SLA
    Description: |
      ## Objective

      The test verifies that the self-certification documents concerning Whois
      service levels comply with with the SLA given in Specification 10 of the
      Registry Agreement.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        Specification 10       Specification 10 of the Registry    Documents
                               Agreement
        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the parts in the self-certification documents that contain
          service levels for Whois services. Expected part is: document
          gTLDSelfCert section 2.3.

      2.  Verify that the availability of Whois services

          a.  is stated in the self-certification documents and

          b.  that it complies with the SLA in Specification 10.

      3.  Verify that the query Round-Trip Time for Whois services

          a.  is stated in the self-certification documents and

          b.  that it complies with the SLA in Specification 10.

      4.  Verify that the update time for Whois services

          a.  is stated in the self-certification documents and

          b.  that it complies with the SLA in Specification 10.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   All service levels comply with what is stated in Specification 10 of
          the Registry Agreement.

      Criteria for FAIL:

      -   One or more service levels does not fulfill what is stated in the
          Registry Agreement.

      -   Part of the requested information is unclear or missing.
  DocSL03:
    Summary: EPP SLA
    Description: |
      ## Objective

      The test verifies that the self-certification documents concerning EPP
      service levels comply with with the SLA given in Specification 10 of the
      Registry Agreement.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDSelfCert           The submitted self-certification    Documents
                               documentation

        Specification 10       Specification 10 of the Registry    Documents
                               Agreement
        -----------------------------------------------------------------------

      ## Outcome(s)

      The self-certification documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.
  DocDPS01:
    Summary: DNSSEC Practice Statement – Structure
    Description: |
      ## Objective

      The test verifies that the structure of the DNSSEC Practice Statement
      (DPS) is compliant with RFC 6841.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDDPS                The submitted DNSSEC Practice       Document
                               Statement

        -----------------------------------------------------------------------

      ## Outcome(s)

      The documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is missing or incomplete for most parts.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the DNSSEC Practice Statement, DPS. Expected document is:
          document gTLDDPS.

      2.  Verify that the DPS essentially follows the structure described in
          the IETF A Framework for DNSSEC Policies and DNSSEC Practice
          Statements, RFC 6841.

      3.  Verify that the DPS essentially includes the 8 main sections and all
          applicable second level subsections of these, stated in RFC 6841,
          section 5 "Contents of a Set of Provisions".

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   The DPS follows the structure given in RFC 6841 with only minor
          deviations (step 2).

      -   The DPS includes all 8 main sections and all applicable second level
          subsections stated in RFC 6841 section 5, with only minor deviations
          (step 3).

      Criteria for FAIL:

      -   Greater than minor deviations from RFC 6841 exists in the DPS, e.g.
          missing sections.

      -   Part of the requested information is unclear or missing.
  DocDPS02:
    Summary: DNSSEC Practice Statement – Content
    Description: |
      ## Objective

      The test verifies that the contents of the DNSSEC Practice Statement
      (DPS) is compliant with RFC 6841.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        gTLDDPS                The submitted DNSSEC Practice       Document
                               Statement

        -----------------------------------------------------------------------

      ## Outcome(s)

      The documents MUST include the required information.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      Suspend test if documentation is incomplete for most parts or missing
      completely.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify the DNSSEC Practice Statement, DPS. Expected document is:
          document gTLDDPS.

      2.  Verify that the DPS essentially follows the contents described in
          the IETF A Framework for DNSSEC Policies and DNSSEC Practice
          Statements, RFC 6841.

      3.  Verify that the DPS essentially follows the guidelines given in RFC
          6841, section 4 "Contents of a Set of Provisions".

      4.  Verify specifically that the DPS includes the following content:

          a.  "Section 1 Introduction", including Document identification and
              Version.

          b.  "Section 2 Publication and Repositories".

          c.  "Section 5 Technical Security Controls" including:

              i.  What keys are going to be used

              ii. Key pair generation and installation

              iii. Private key protection

              iv. Life cycle technical controls

          d.  "Section 6 Zone Signing" including:

              i.  Key lengths and algorithms

              ii. Authenticated denial of existence (NSEC/NSEC3)

              iii. Signature format

              iv. Key rollover (for each present key type)

              v.  Signature lifetime and re-signing frequency

          e.  "Section 8 Legal Matters", must include information about under
              what jurisdiction the registry is operated.

      The outcome of the testcase is PASS if all criteria for PASS and no
      criteria for FAIL are fulfilled.

      Criteria for PASS:

      -   The DPS contains the contents given in RFC 6841 section 4, with only
          minor deviations (step 2 and 3).

      -   The DPS contain all of the contents stated above (step 4).

      Criteria for FAIL:

      -   Greater than minor deviations from RFC 6841 section 4 exists in the
          DPS, e.g. more than one missing information.

      -   One or more of the information requested in step 4 is missing or
          unclear.

      -   Part of the otherwise requested information is unclear or missing.

      -   Information about under what jurisdiction the registry is operated
          is not specified.

  EPPConnTest:
    Summary: Verify the connectivity of the EPP system
    Description: |
      ## Objective

      This test verifies the connectivity from different nodes to the EPP
      provisioning system by doing a login and then a logout. For information
      about nodes, see section 1.2.

      The test will be performed over IPv4, and also IPv6 if the registry
      supports it.

      ## Inputs

      The following information is needed as input for this test case:

        --------------------------------------------------------------------------
        Id                        Description                         Type
        ------------------------- ----------------------------------- ------------
        EppLoginId                Login ID for EPP test user          String

        EppLoginPwd               Login password for EPP test user    String

        EppNsDomainUri            Object URI for Domain Object        String

        EppNsDomainSl             Schema location for Domain Object   String

        EppNsContactUri           Object URI for Contact Object       String

        EppNsContactSl            Schema location for Contact Object  String

        EppNsHostUri              Object URI for Host Object. If the  String
                                  Registry Operator is not supporting
                                  Host Objects, this field is not
                                  mandatory.

        EppNsHostSl               Schema location for Host Object. If String
                                  the Registry Operator is not
                                  supporting Host Objects, this field
                                  is not mandatory.

        EppExtSecDnsUri           Object URI for Sec Dns Object       String
                                  Extension

        EppExtSecDnsSl            Schema location for Sec Dns Object  String
                                  Extension

        EppExtUri-\[1..n\]        Object URI for extension 1..n       String

        EppExtSl-\[1..n\]         Schema location for extensions 1..n String

        EppServerIPv4             IPv4 address to EPP server          String

        EppServerIPv6             IPv6 address to EPP server if       String
                                  registry supports IPv6

        EppServerPort             Port number to EPP server           Number

        EppClientCertificate      Yes if Registry Operator requires   Boolean
                                  client certificate

        EppClientKeyPairPem       PEM file with valid client          PEM file
                                  certificate for test user (Public
                                  and private)

        EppClientKeyPairPwd       Password for client certificate for String
                                  test user

        EppServerCertificatePem   PEM file with server certificate    PEM file
                                  (Public)
        --------------------------------------------------------------------------

      ## Outcome(s)

      The login command from each probe MUST complete with result code 1000

      The logout command from each probe MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   IPv6 connectivity

      ## Special procedural requirements

      Abort the test if any operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      This test will be performed from all of the nodes.

      1.  Connect to EppServerIPv4.\
          Create a login command with *EppLoginId* and password
          *EppLoginPwd*.\
          Use the *EppNsDomainUri*, *EppNsDomainSl*, *EppNsContactUri*,
          *EppNsContactSl*, *EppNsHostUri* and *EppNsHostSl* to build the
          login message.\
          Add the secDNS extension with *EppExtSecDnsUri* and
          *EppExtSecDnsSl*.\
          Add zero or more extra extensions with *EppExtUri* and *EppExtSl*.\
          If the server requires client certificate, connect with client
          certificate *EppClientKeyPairPem.*\
          The login command MUST complete with result code 1000.

      2.  Create a logout command.\
          The logout command MUST complete with result code 1500.

      If registry supports IPv6:

      1.  Connect to EppServerIPv6.\
          Create a login command with *EppLoginId* and password
          *EppLoginPwd*.\
          Use the *EppNsDomainUri*, *EppNsDomainSl*, *EppNsContactUri*,
          *EppNsContactSl*, *EppNsHostUri* and *EppNsHostSl* to build the
          login message.\
          Add the secDNS extension with *EppExtSecDnsUri* and
          *EppExtSecDnsSl*.\
          Add zero or more extra extensions with *EppExtUri* and *EppExtSl*.\
          If the server requires client certificate, connect with client
          certificate *EppClientKeyPairPem.*\
          The login command MUST complete with result code 1000.

      2.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  EPPDomCreate01:
    Summary: Create a domain
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, creating a domain object, logging out, and verifying that the domain
      is visible in the zone within 24 hours. It also verifies that
      information is visible in Whois within 24 hours.

      When executing this test case as EPPDomCreate01A, the DNS and Whois
      verifications are not included. Requirements and test steps marked with
      an asterisk (\*) should be disregarded for an \'A\' test case.

      ## Inputs

      The following information is needed as input for this test case:

      The IP address for the authoritative name server for the TLD zone is
      required as the test verifies DNS visibility. It is fetched from the XML
      data file submitted for the DNS tests.

      The IP address of the Whois server is extracted from the DNS zone by the
      Whois test and is also used for this TC.

      The full information from the input table in 5.3 is also used for login.

        ----------------------------------------------------------------------------
        Id                            Description                       Type
        ----------------------------- --------------------------------- ------------
        DnsGlueRecord1                IPv4 or IPv6 address of 1^st^     String
                                      authoritative name server

        WhoisIPv4Port43               The IPv4 address of the Whois     String
                                      service on port 43

        EppDomCreate01Name            Domain name to create             String

        EppDomCreate01Period          Domain period type                Y/M

        EppDomCreate01PeriodValue     Domain period value               Number

        EppDomCreate01RegistrantId    Domain registrant id              String

        EppDomCreate01AdminId         Domain Admin id if required       String

        EppDomCreate01TechId          Domain Tech id if required        String

        EppDomCreate01BillingId       Domain Billing id if required     String

        EpPDomCreate01AuthPw          AuthPw if requited                String

        EppDomCreate01Ns01            Host Object or Host Attribute     String
                                      name for ns01

        EppDomCreate01Ns02            Host Object or Host Attribute     String
                                      name for ns02

        EppDomCreate01Ext01Uri        Extension 01 object URI           String

        EppDomCreate01Ext01Sl         Extension 01 schema location      String

        EppDomCreate01Ext01ExtName    Extension 01 name                 String

        EppDomCreate01Ext01ExtValue   Extension 01 value for direct     String
                                      text node

        EppDomCreate01Ext01Field01    Extension 01 field name 01        String

        EppDomCreate01Ext01Value01    Extension 01 field value 01       String

        ...                           Repeat for max y fields

        ...                           Repeat for max x extensions
        ----------------------------------------------------------------------------

      ## Outcome(s)

      Initial DNS lookup MUST return NXDOMAIN for *EppDomCreate01Name*. \*

      Initial Whois lookup MUST NOT return any information about
      *EppDomCreate01Name*. \*

      Login step MUST complete with result code 1000.

      Create step MUST complete with result code 1000 or 1001.

      Logout step MUST complete with result code 1500.

      *EppDomCreate01Name* MUST be visible in zone within 24 hours. \*

      *EppDomCreate01Name* MUST be visible in Whois within 24 hours. \*

      *Requirements marked with \* are not considered in test case
      EPPDomCreate01A.*

      ## Environmental needs

      -   DNS test script

      -   Whois client software

      -   EPP test script

      -   IPv4 connectivity

      -   *EppDomCreate01Name* MUST NOT exist in the DNS zone.

      ```{=html}
      <!-- -->
      ```
      -   *EppDomCreate01RegistrantId* MUST exist in contact database

      -   *EppDomCreate01Ns01* MUST exist in host database, and be configured
          to serve domain *EppDomCreate01Name*.

      -   *EppDomCreate01Ns02* MUST exist in host database, and be configured
          to serve domain *EppDomCreate01Name*.

      ## Special procedural requirements

      Abort the test if any Whois query takes longer than 10 seconds.

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Verify that the domain is not present in Whois: \*

          a.  Start a terminal.

          b.  Query the Whois service using the client software:\
              whois -h *WhoisIPv4Port43* *EppDomCreate01Name*

          c.  The domain name MUST NOT be present in the response.

      2.  Perform a DNS lookup for the domain name *EppDomCreate01Name*. \*\
          The result MUST be NXDOMAIN.

      3.  Perform the same login as the login step in 5.8.\
          The login command MUST complete with result code 1000.

      4.  Create a domain create command with *EppDomCreate01Name*.

          a.  Use period name from *EppDomCreate01Period* and period value
              from *EppDomCreate01PeriodValue*.

          b.  Use name server 1 from *EppDomCreate01Ns01* and name server 2
              from *EppDomCreate01Ns02*.

          c.  If domain create requires extra extensions and values, create an
              extension part from *EppDomCreate01Ext01Uri* and fill in field
              name from *EppDomCreateExt01Field01* and values from
              *EppDomCreateExt01Value01*.

      The domain create command MUST complete with result code 1000 or 1001.

      5.  Create a logout command.\
          The logout command MUST complete with result code 1500.

      6.  Verify that the *EPPDomCreate01Name* domain is visible in the zone
          within 24 hours. \*

      7.  Verify that the *EPPDomCreate01Name* is visible in Whois within 24
          hours. \*

      *Steps marked with \* are not included in test case EppDomCreate01A.*
  EPPDomCreate01A:
    Summary: ''
    Description: |
      ## Objective

      This is a subset of test case EPPDomCreate01. See section 6, "Test Case
      EPPDomCreate01: Create a domain", for details.
  EPPDomCreate02:
    Summary: Add hosts to existing domain
    Description: |
      This test is changed from creating a domain to adding subordinate hosts
      to an existing domain. As a consequence, all fields required for
      creating the domain are now optional, and will be ignored if they are
      present in the input data. They will be removed in a future release.

      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, creating subordinate Host Objects for a domain, updating the domain,
      logging out, and verifying the correct handling of glue records.

      If the Registry Operator does not support Host Objects, the test uses
      Host Attributes to insert the subordinate name servers for the domain.

      When executing this test case as EPPDomCreate02A, DNS verification is
      not included. Requirements and test steps marked with an asterisk (\*)
      should be disregarded for an \'A\' test case.

      ## Inputs

      The following information is needed as input for this test case:

      The IP address for the authoritative name server for the TLD zone is
      required as the test verifies DNS visibility. It is fetched from the XML
      data file submitted for the DNS tests.

      The full information from the input table in 5.3 is also used for login.

        -----------------------------------------------------------------------------
        Id                                Description                     Type
        --------------------------------- ------------------------------- -----------
        DnsGlueRecord1                    IPv4 or IPv6 address of 1^st^   String
                                          authoritative name server

        EppDomCreate02Name                Domain name to update           String

        EppDomCreate02Ns01                Subordinate Host Object or Host String
                                          Attribute name for name server
                                          01

        EppDomCreate02Ns01Ipv4            Subordinate name server 01 IPv4 String
                                          address

        EppDomCreate02Ns01Ipv6            Subordinate name server 01 IPv6 String
                                          address

        EppDomCreate02Ns02                Subordinate Host Object or Host String
                                          Attribute name for name server
                                          02

        EppDomCreate02Ns02Ipv4            Subordinate name server 02 IPv4 String
                                          address

        EppDomCreate02Ns02Ipv6            Subordinate name server 02 IPv6 String
                                          address

        EppDomCreate02UpdExt01Uri         Extension 01 object URI         String

        EppDomCreate02UpdExt01Sl          Extension 01 schema location    String

        EppDomCreate02UpdExt01ExtName     Extension 01 name               String

        EppDomCreate02UpdExt01ExtValue    Extension 01 value for direct   String
                                          text node

        EppDomCreate02UpdExt01Field01     Extension 01 field name 01      String

        EppDomCreate02UpdExt01Value01     Extension 01 field value 01     String

        ...                               Repeat for max y fields for
                                          Update

        ...                               Repeat for max x extensions for
                                          Update

        EppDomCreate02Ns01Ext01Uri        Extension 01 object URI         String

        EppDomCreate02Ns01Ext01Sl         Extension 01 schema location    String

        EppDomCreate02Ns01Ext01ExtName    Extension 01 name               String

        EppDomCreate02Ns01Ext01ExtValue   Extension 01 value for direct   String
                                          text node

        EppDomCreate02Ns01Ext01Field01    Extension 01 field name 01      String

        EppDomCreate02Ns01Ext01Value01    Extension 01 field value 01     String

        ...                               Repeat for max y fields for
                                          name server 01

        ...                               Repeat for max x extensions for
                                          name server 01

        EppDomCreate02Ns02Ext01Uri        Extension 01 object URI         String

        EppDomCreate02Ns02Ext01Sl         Extension 01 schema location    String

        EppDomCreate02Ns02Ext01ExtName    Extension 01 name               String

        EppDomCreate02Ns02Ext01ExtValue   Extension 01 value for direct   String
                                          text node

        EppDomCreate02Ns02Ext01Field01    Extension 01 field name 01      String

        EppDomCreate02Ns02Ext01Value01    Extension 01 field value 01     String

        ...                               Repeat for max y fields for
                                          name server 02

        ...                               Repeat for max x extensions for
                                          name server 02
        -----------------------------------------------------------------------------

      ## Outcome(s)

      Initial DNS lookup MUST NOT show neither *EppDomCreate02Ns01* nor
      *EppDomCreate02Ns02* as nameservers for *EppDomCreate02Name*. \*

      The login command MUST complete with result code 1000.

      If the Registry Operator is using Host Objects, the host create command
      MUST complete with result code 1000 or 1001.

      The domain update command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      *EppDomCreate02Name* MUST be visible in zone with correct glue records
      within 24 hours.

      *Requirements marked with \* are not considered in test case
      EPPDomCreate02A.*

      ## Environmental needs

      -   DNS test script

      ```{=html}
      <!-- -->
      ```
      -   EPP test script

      -   IPv4 connectivity

      -   *EppDomCreate02Name* MUST exist in EPP database.

      -   *EppDomCreate02RegistrantId* MUST exist in contact database

      -   *EppDomCreate02Ns01* MUST be configured to serve domain
          *EppDomCreate02Name*.

      -   *EppDomCreate02Ns02* MUST be configured to serve domain
          *EppDomCreate02Name*.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform a DNS lookup for *EppDomCreate02Name* domain name.\
          The result MUST NOT show neither *EppDomCreate02Ns01 n*or
          *EppDomCreate02Ns02* as Nameservers for *EppDomCreate02Name*. \*

      2.  Perform the same login as the login step in 5.8.\
          The login command MUST complete with result code 1000.

      3.  If the registry does not support Host Objects, skip to step 6.

      4.  Create a host create command for subordinate host
          *EppDomCreate02Ns01* with IPv4 address *EppDomCreate02Ns01Ipv4*
          and/or IPv6 address *EppDomCreate02Ns01Ipv6.\
          * The host create command MUST complete with result code 1000 or
          1001.

      5.  Create a host create command for subordinate host
          *EppDomCreate02Ns02* with IPv4 address *EppDomCreate02Ns02Ipv4*
          and/or IPv6 address *EppDomCreate02Ns02Ipv6.\
          * The host create command MUST complete with result code 1000 or
          1001.

      6.  Create a domain update command with *EppDomCreate02Name* and hosts
          *EppDomCreate02Ns01* and *EppDomCreate02Ns02.\
          * - If the registry supports Host Objects, use Host Objects.\
          - If the registry does not support Host Objects, use Host
          Attributes.*\
          * The domain update command MUST complete with result code 1000 or
          1001.

      7.  Create a logout command.\
          The logout command MUST complete with result code 1500.

      8.  Verify that the *EppDomCreate02Name* domain and the correct glue
          records are visible in the zone within 24 hours. \*

      *Steps marked with \* are not included in test case EppDomCreate02A.*
  EPPDomCreate02A:
    Summary: ''
    Description: |
      ## Objective

      This is a subset of test case EPPDomCreate02. See section 8, "Test Case
      EPPDomCreate02: Add hosts to existing domain", for details.
  EPPDomCreate03:
    Summary: Create a DNSSEC-signed domain
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, creating a domain object with DNSSEC records and logging out.

      When executing this test case as EPPDomCreate03A, DNS verification is
      not included. Requirements and test steps marked with an asterisk (\*)
      should be disregarded for an \'A\' test case.

      ## Inputs

      The following information is needed as input for this test case:

      The IP address for the authoritative name server for the TLD zone is
      required as the test verifies DNS visibility. It is fetched from the XML
      data file submitted for the DNS tests.

      The full information from the input table in 5.3 is also used for login.

      +-----------------------+---------------------------------+---+----------+
      | Id                    | Description                     |   | Type     |
      +=======================+=================================+===+==========+
      | DnsGlueRecord1        | IPv4 or IPv6 address of 1^st^   |   | String   |
      |                       | authoritative name server       |   |          |
      +-----------------------+---------------------------------+---+----------+
      | EppDomCreate03Name    | Domain name to create           |   | String   |
      +-----------------------+---------------------------------+---+----------+
      | EppDomCreate03Period  | Domain period type              |   | Y/M      |
      +-----------------------+---------------------------------+---+----------+
      | EppD                  | Domain period value             |   | Number   |
      | omCreate03PeriodValue |                                 |   |          |
      +-----------------------+---------------------------------+---+----------+
      | EppDo                 | Domain registrant id            |   | String   |
      | mCreate03RegistrantId |                                 |   |          |
      +-----------------------+---------------------------------+---+----------+
      | EppDomCreate03AdminId | Domain admin id if required     | S |          |
      |                       |                                 | t |          |
      |                       |                                 | r |          |
      |                       |                                 | i |          |
      |                       |                                 | n |          |
      |                       |                                 | g |          |
      +-----------------------+---------------------------------+---+----------+
      | EppDomCreate03TechId  | Domain tech id if required      | S |          |
      |                       |                                 | t |          |
      |                       |                                 | r |          |
      |                       |                                 | i |          |
      |                       |                                 | n |          |
      |                       |                                 | g |          |
      +-----------------------+---------------------------------+---+----------+
      | Ep                    | Domain billing id if required   | S |          |
      | pDomCreate03BillingId |                                 | t |          |
      |                       |                                 | r |          |
      |                       |                                 | i |          |
      |                       |                                 | n |          |
      |                       |                                 | g |          |
      +-----------------------+---------------------------------+---+----------+
      | EpPDomCreate03AuthPw  | Authentication password if      | S |          |
      |                       | required                        | t |          |
      |                       |                                 | r |          |
      |                       |                                 | i |          |
      |                       |                                 | n |          |
      |                       |                                 | g |          |
      +-----------------------+---------------------------------+---+----------+
      | EppDomCreate03Ns01    | Host Object name for ns01       |   | String   |
      +-----------------------+---------------------------------+---+----------+
      | EppDomCreate03Ns02    | Host Object name for ns02       |   | String   |
      +-----------------------+---------------------------------+---+----------+
      | E                     | Extension 01 object URI         |   | String   |
      | ppDomCreate03Ext01Uri |                                 |   |          |
      +-----------------------+---------------------------------+---+----------+
      | EppDomCreate03Ext01Sl | Extension 01 schema location    |   | String   |
      +-----------------------+---------------------------------+---+----------+
      | EppDo                 | Extension 01 name               | S |          |
      | mCreate03Ext01ExtName |                                 | t |          |
      |                       |                                 | r |          |
      |                       |                                 | i |          |
      |                       |                                 | n |          |
      |                       |                                 | g |          |
      +-----------------------+---------------------------------+---+----------+
      | EppDom                | Extension 01 value for direct   |   | String   |
      | Create03Ext01ExtValue | text node                       |   |          |
      +-----------------------+---------------------------------+---+----------+
      | EppDo                 | Extension 01 field name 01      |   | String   |
      | mCreate03Ext01Field01 |                                 |   |          |
      +-----------------------+---------------------------------+---+----------+
      | EppDo                 | Extension 01 field value 01     |   | String   |
      | mCreate03Ext01Value01 |                                 |   |          |
      +-----------------------+---------------------------------+---+----------+
      | ...                   | Repeat for max y fields         |   |          |
      +-----------------------+---------------------------------+---+----------+
      | ...                   | Repeat for max x extensions     |   |          |
      +-----------------------+---------------------------------+---+----------+
      | EppDomCreate03KeyType | D for dsData specification      |   | String   |
      |                       |                                 |   |          |
      |                       | K for keyData specification     |   |          |
      |                       |                                 |   |          |
      |                       | DK for dsData and keyData       |   |          |
      |                       | specification                   |   |          |
      +-----------------------+---------------------------------+---+----------+
      | Epp                   | Value for dsData 01 keytag      |   | String   |
      | DomCreate03DsKeyTag01 |                                 |   |          |
      +-----------------------+---------------------------------+---+----------+
      | EppDomCreate03DsAlg01 | Value for dsData 01 alg         |   | Number   |
      +-----------------------+---------------------------------+---+----------+
      | EppDomC               | Value for dsData 01 digest type |   | Number   |
      | reate03DsDigestType01 |                                 |   |          |
      +-----------------------+---------------------------------+---+----------+
      | Epp                   | Value for dsData 01 digest      |   | String   |
      | DomCreate03DsDigest01 |                                 |   |          |
      +-----------------------+---------------------------------+---+----------+
      | ...                   | Repeat for max x dsData records |   |          |
      +-----------------------+---------------------------------+---+----------+
      | Ep                    | Value for keyData 01 flags      |   | Number   |
      | pDomCreate03KdFlags01 |                                 |   |          |
      +-----------------------+---------------------------------+---+----------+
      | EppDo                 | Value for keyData 01 protocol   |   | Number   |
      | mCreate03KdProtocol01 |                                 |   |          |
      +-----------------------+---------------------------------+---+----------+
      | EppDomCreate03KdAlg01 | Value for keyData 01 alg        |   | Number   |
      +-----------------------+---------------------------------+---+----------+
      | Epp                   | Value for keyData 01 pubKey     |   | String   |
      | DomCreate03KdPubKey01 |                                 |   |          |
      +-----------------------+---------------------------------+---+----------+
      | ...                   | Repeat for max x keyData        |   |          |
      |                       | records                         |   |          |
      +-----------------------+---------------------------------+---+----------+

      ## Outcome(s)

      Initial DNS lookup MUST return NXDOMAIN for *EppDomCreate03Name*. \*

      The domain create command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      *EppDomCreate03Name* MUST be visible in the zone with correct DNS
      records within 24 hours.

      *Requirements marked with \* are not considered in test case
      EPPDomCreate02A.*

      ## Environmental needs

      -   DNS test script

      ```{=html}
      <!-- -->
      ```
      -   EPP test script

      -   IPv4 connectivity

      -   *EppDomCreate03Name* MUST NOT exist in the DNS zone.

      -   *EppDomCreate03RegistrantId* MUST exist in contact database

      -   *EppDomCreate03Ns01* MUST exist in host database, and be configured
          to serve domain *EppDomCreate03Name* with correct DNSSEC records.

      -   *EppDomCreate03Ns02* MUST exist in host database, and be configured
          to serve domain *EppDomCreate03Name* with correct DNSSEC records.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform a DNS lookup for *EppDomCreate03Name* domain name.\
          The result MUST be NXDOMAIN. \*

      2.  Perform the same login as the login step in 5.8.\
          The login command MUST complete with result code 1000.

      3.  Create a domain create command with *EppDomCreate03Name*.

          a.  Use period name from *EppDomCreate03Period* and period value
              from *EppDomCreate03PeriodValue*.

          b.  Use name server 1 from *EppDomCreate03Ns01* and name server 2
              from *EppDomCreate03Ns02*.

          c.  Add one or more secDNS records with dsData or keyData or both,
              depending on the value of *EppDomUpdate01KeyType*. Use
              appropriate values from *EppDomUpdate01DsKeyTag01*,
              *EppDomUpdate01DsAlg01*, *EppDomUpdate01DsDigestType01*,
              *EppDomUpdate01DsDigest01*, *EppDomUpdate01KdFlags01*,
              *EppDomUpdate01KdProtocol01*, *EppDomUpdate01KdAlg01*,
              *EppDomUpdate01kdPubKey01*.

          d.  If domain create requires extra extension and values, create an
              extension part from *EppDomCreate03Ext01Uri* and fill in field
              name from *EppDomCreate03Ext01Field01* and values from
              *EppDomCreate03Ext01Value01*.

      > The domain create command MUST complete with result code 1000 or 1001.

      4.  Create a logout command.\
          The logout command MUST complete with result code 1500.

      5.  Verify that the *EppDomCreate03Name* domain is visible, with the
          correct DNSSEC records, in the zone within 24 hours. \*

      *Steps marked with \* are not included in test case EppDomCreate03A.*
  EPPDomCreate03A:
    Summary: ''
    Description: |
      ## Objective

      This is a subset of test case EPPDomCreate03. See section 10, "Test Case
      EPPDomCreate03: Create a signed domain", for details.
  EPPDomRenew01:
    Summary: Renew a domain
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, renewing a domain object and logging out.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 5.3 is also used for login.

        ---------------------------------------------------------------------------
        Id                           Description                       Type
        ---------------------------- --------------------------------- ------------
        EppDomRenew01Name            Domain name to renew              String

        EppDomRenew01Period          Domain period type                Y/M

        EppDomRenew01PeriodValue     Domain period value               Number

        EppDomRenew01ExpDate         Domain current expiry date        String

        EppDomRenew01Ext01Uri        Object URI for extension 01       String

        EppDomRenew01Ext01Sl         Extension 01 schema location      String

        EppDomRenew01Ext01ExtName    Extension 01 name                 String

        EppDomRenew01Ext01ExtValue   Extension 01 value for direct     String
                                     text node

        EppDomRenew01Ext01Field01    Extension 01 field name 01        String

        EppDomRenew01Ext01Value01    Extension 01 field value 01       String

        ...                          Repeat for max y fields

        ...                          Repeat for max x extensions
        ---------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The renew command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4Connectivity

      -   *EppDomRenew01Name* domain MUST exist in the domain database, and be
          ready for renewal

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 5.8.\
          The login command MUST complete with result code 1000.

      2.  Create a domain renew command with *EppDomRenew01Name*.

          a.  Use period name from *EppDomRenew01Period* and period value from
              *EppDomRenew01PeriodValue*.

          b.  If domain renew requires extra extension and values, create an
              extension part from *EppDomRenew01Ext01Uri* and fill in field
              name from *EppDomRenewe01Ext01Field01* and values from
              *EppDomRenew01Ext01Value01*.

      The domain renew command MUST complete with result code 1000 or 1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  EPPDomTransfer01:
    Summary: Request transfer of a domain
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, requesting a transfer of a domain object and logging out.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 5.3 is also used for login.

        -----------------------------------------------------------------------------
        Id                              Description                      Type
        ------------------------------- -------------------------------- ------------
        EppDomTransfer01Name            Domain name to transfer          String

        EppDomTransfer01AddPeriod       Yes if the Registry Operator     Boolean
                                        supports adding a period to
                                        transfer

        EppDomTransfer01Period          Domain period type               Y/M

        EppDomTransfer01PeriodValue     Domain period value              Number

        EppDomTransfer01AuthInfo        Authorization info for domain,   String
                                        registrant or associated
                                        contacts

        EppDomTransfer01AuthRoid        Roid for registrant or contact   String
                                        if EppDomTransfer01AuthInfo is
                                        associated with registrant or
                                        contact object

        EppDomTransfer01Ext01Uri        Extension 01 object URI          String

        EppDomTransfer01Ext01Sl         Extension 01 schema location     String

        EppDomTransfer01Ext01ExtName    Extension 01 name                String

        EppDomTransfer01Ext01ExtValue   Extension 01 value for direct    String
                                        text node

        EppDomTransfer01Ext01Field01    Extension 01 field name 01       String

        EppDomTransfer01Ext01Value01    Extension 01 field value 01      String

        ...                             Repeat for max y fields

        ...                             Repeat for max x extensions
        -----------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The domain transfer command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *EppDomTransfer01Name* domain MUST exist in the domain database, and
          be available for transfer.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 5.8.\
          The login command MUST complete with result code 1000.

      2.  Create a domain transfer command with *EppDomTransfer01Name*.

          a.  Add an Op attribute in transfer command with the value
              "request".

          b.  If *EppDomTransfer01AddPeriod* is true, add period part with
              Period name from *EppDomTransfer01Period* and period value from
              *EppDomTransfer01PeriodValue*.

          c.  Add authinfo part with *EppDomTransfer01AuthInfo*.

          d.  If *EppDomTransfer01AuthRoid* is defined, add a roid attribute
              to pw part with the value *EppDomTransfer01AuthRoid*.

          e.  If domain renew requires extra extension and values, create an
              extension part from *EppDomTransfer01Ext01Uri* and
              *EppDomTransfer01Ext01Sl* and fill in field name from
              *EppDomTransfer01Ext01Field01* and values from
              *EppDomTransfer01Ext01Value01*.

      The domain transfer command MUST complete with result code 1000 or 1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  EPPDomTransfer02:
    Summary: Approve a requested domain transfer
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, approving a transfer of a domain object if the registry supports
      this operation via EPP, and logging out.

      This test will only be run if the *EppDomTransfer02Approve* is set to
      yes.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 5.3 is also used for login.

        -----------------------------------------------------------------------------
        Id                              Description                      Type
        ------------------------------- -------------------------------- ------------
        EppDomTransfer02Approve         Yes if the Registry Operator     Boolean
                                        supports the Approve operation

        EppDomTransfer02Name            Domain name to transfer          String

        EppDomTransfer02AddPeriod       Yes if the Registry Operator     Boolean
                                        supports adding a period to
                                        transfer

        EppDomTransfer02Period          Domain period type               Y/M

        EppDomTransfer02PeriodValue     Domain period value              Number

        EppDomTransfer02AuthInfo        Authorization info for domain,   String
                                        registrant or associated
                                        contacts if required

        EppDomTransfer02AuthRoid        Roid for registrant or contact   String
                                        if EppDomTransfer01AuthInfo is
                                        associated with registrant or
                                        contact object

        EppDomTransfer02Ext01Uri        Extension 01 object URI          String

        EppDomTransfer02Ext01Sl         Extension 01 schema location     String

        EppDomTransfer02Ext01ExtName    Extension 01 name                String

        EppDomTransfer02Ext01ExtValue   Extension 01 value for direct    String
                                        text node

        EppDomTransfer02Ext01Field01    Extension 01 field name 01       String

        EppDomTransfer02Ext01Value01    Extension 01 field value 01      String

        ...                             Repeat for max y fields

        ...                             Repeat for max x extensions
        -----------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The domain transfer command MUST complete with result code 1000 or 1001.

      The logout MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *EppDomTransfer02Name* domain MUST exist in the domain database, and
          be available for transfer approve.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 5.8.\
          The login command MUST complete with result code 1000.

      2.  Create a domain transfer command with *EppDomTransfer02Name*.

          a.  Add an Op attribute in transfer command with the value
              "approve".

          b.  If *EppDomTransfer02AddPeriod* is true, add period part with
              period name from *EppDomTransfer02Period* and period value from
              *EppDomTransfer02PeriodValue.*

          c.  Add authinfo part with *EppDomTransfer01AuthInfo*.

          d.  If *EppDomTransfer02AuthRoid* is defined add a roid attribute to
              pw part with the value *EppDomTransfer02AuthRoid*.

          e.  If domain transfer requires extra extension and values, create
              an extension part from *EppDomTransfer02Ext01Uri* and
              *EppDomTransfer02Ext01Sl* and fill in field name from
              *EppDomTransfer02Ext01Field01* and values from
              *EppDomTransfer02Ext01Value01*.

      The domain transfer command MUST complete with result code 1000 or 1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  EPPDomDelete01:
    Summary: Delete a domain
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, deleting a domain object and logging out.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 5.3 is also used for login.

        ----------------------------------------------------------------------------
        Id                            Description                       Type
        ----------------------------- --------------------------------- ------------
        EppDomDelete01Name            Domain name to delete             String

        EppDomDelete01Ext01Uri        Extension 01 object URI           String

        EppDomDelete01Ext01Sl         Extension 01 schema location      String

        EppDomDelete01Ext01ExtName    Extension 01 name                 String

        EppDomDelete01Ext01ExtValue   Extension 01 value for direct     String
                                      text node

        EppDomDelete01Ext01Field01    Extension 01 field name 01        String

        EppDomDelete01Ext01Value01    Extension 01 field value 01       String

        ...                           Repeat for max y fields

        ...                           Repeat for max x extensions
        ----------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The domain delete command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *EppDomDelete01Name* domain MUST exist in the domain database, and
          be available for delete.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 5.8.\
          The login command MUST complete with result code 1000.

      2.  Create a domain delete command with *EppDomDelete01Name*.

          a.  If domain delete requires extra extension and values, create an
              extension part from *EppDomDelete01Ext01Uri* and
              *EppDomDelete01Ext01Sl* and fill in field name from
              *EppDomDelete01Ext01Field01* and values from
              *EppDomDelete01Ext01Value01*.

      The domain delete command MUST complete with result code 1000 or 1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  EPPConCreate01:
    Summary: Create a contact object
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, creating a contact object and logging out.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 5.3 is also used for login.

        ------------------------------------------------------------------------------
        Id                            Description                        Type
        ----------------------------- ---------------------------------- -------------
        EppConCreate01Id              Contact ID to create               String

        EppConCreate01PIntMand        Yes if PostalInfo type INT is      Boolean
                                      mandatory

        EppConCreate01PIntName        Contact PostalInfo Int Name        String

        EppConCreate01PIntOrg         Contact PostalInfo Int Org         String

        EppConCreate01PIntStreet1     Contact PostalInfo Int Street1     String

        EppConCreate01PIntStreet2     Contact PostalInfo Int Street2, if String
                                      mandatory

        EppConCreate01PIntStreet3     Contact PostalInfo Int Street3, if String
                                      mandatory

        EppConCreate01PIntCity        Contact PostalInfo Int City        String

        EppConCreate01PIntSp          Contact PostalInfo Int State or    String
                                      Province, if mandatory

        EppConCreate01PIntPc          Contact PostalInfo Int Postcode,   String
                                      if mandatory

        EppConCreate01PIntCc          Contact PostalInfo Int Country     String
                                      Code

        EppConCreate01PLocMand        Yes if PostalInfo type LOC is      Boolean
                                      mandatory

        EppConCreate01PLocName        Contact PostalInfo Loc Name        String

        EppConCreate01PLocOrg         Contact PostalInfo Loc Org         String

        EppConCreate01PLocStreet1     Contact PostalInfo Loc Street1     String

        EppConCreate01PLocStreet2     Contact PostalInfo Loc Street2, if String
                                      mandatory

        EppConCreate01PLocStreet3     Contact PostalInfo Loc Street3, if String
                                      mandatory

        EppConCreate01PLocCity        Contact PostalInfo Loc City        String

        EppConCreate01PLocSp          Contact PostalInfo Loc State or    String
                                      Province, if mandatory

        EppConCreate01PLocPc          Contact PostalInfo Loc Postcode,   String
                                      if mandatory

        EppConCreate01PLocCc          Contact PostalInfo Loc Country     String
                                      Code

        EppConCreate01Voice           Contact Voice telephone number, if String
                                      mandatory

        EppConCreate01Fax             Contact Fax telephone number, if   String
                                      mandatory

        EppConCreate01Email           Contact Email address              String

        EppConCreate01Auth            Contact Auth Info, if mandatory    String

        EppConCreate01Ext01Uri        Extension 01 object URI            String

        EppConCreate01Ext01Sl         Extension 01 schema location       String

        EppConCreate01Ext01ExtName    Extension 01 name                  String

        EppConCreate01Ext01ExtValue   Extension 01 value for direct text String
                                      node

        EppConCreate01Ext01Field01    Extension 01 field name 01         String

        EppConCreate01Ext01Value01    Extension 01 field value 01        String

        ...                           Repeat for max y fields

        ...                           Repeat for max x extensions
        ------------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The contact create command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *EppConCreate01Id* domain MUST NOT exist in the domain database.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 5.8.\
          The login command MUST complete with result code 1000.

      2.  Create a contact create command with *EppConCreate01Id*.

          a.  If *EppConCreate01PIntMand* is yes, create a Postal Info type
              Int with appropriate fields from *EppConCreate01PIntName*,
              *EppConCreate01PIntOrg*, *EppConCreate01PIntStreet1*,
              *EppConCreate01PIntStreet2*, *EppConCreate01PIntStreet3*,
              *EppConCreate01PIntCity*, *EppConCreate01PIntSp*,
              *EppConCreate01PIntPc* and *EppConCreate01PIntCc*.

          b.  If *EppConCreate01PLocMand* is yes, create a Postal Info type
              Loc with appropriate fields from *EppConCreate01PLocName*,
              *EppConCreate01PLocOrg*, *EppConCreate01PLocStreet1*,
              *EppConCreate01PLocStreet2*, *EppConCreate01PLocStreet3*,
              *EppConCreate01PLocCity*, *EppConCreate01PLocSp*,
              *EppConCreate01PLOcPc* and *EppConCreate01PLocCc*.

          c.  Add *EppConCreate01Voice*, *EppConCreate01Fax*,
              *EppConCreate01Email* and *EppConCreate01Auth* fields.

          d.  If contact create requires extra extension and values, create an
              extension part from *EppConCreate01Ext01Uri* and
              *EppConCreate01Ext01Sl* and fill in field name from
              *EppConCreate01Ext01Field01* and values from
              *EppConCreate01Ext01Value01*.

      The contact create command MUST complete with result code 1000 or 1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  EPPConDelete01:
    Summary: Delete a contact
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, deleting a contact object and logging out.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 5.3 is also used for login.

        -----------------------------------------------------------------------------
        Id                            Description                        Type
        ----------------------------- ---------------------------------- ------------
        EppConDelete01Id              ContactID to delete                String

        EppConDelete01Ext01Uri        Extension 01 object URI            String

        EppConDelete01Ext01Sl         Extension 01 schema location       String

        EppConDelete01Ext01ExtName    Extension 01 name                  String

        EppConDelete01Ext01ExtValue   Extension 01 value for direct text String
                                      node

        EppConDelete01Ext01Field01    Extension 01 field name 01         String

        EppConDelete01Ext01Value01    Extension 01 field value 01        String

        ...                           Repeat for max y fields

        ...                           Repeat for max x extensions
        -----------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The contact delete command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *EppConDelete01Id* domain MUST exist in the domain database, and be
          available for delete.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 5.8.\
          The login command MUST complete with result code 1000.

      2.  Create a contact delete command with *EppConDelete01Id*.

          a.  If contact delete requires extra extension and values, create an
              extension part from *EppConDelete01Ext01Uri* and
              *EppConDelete01Ext01Sl* and fill in field name from
              *EppConDelete01Ext01Field01* and values from
              *EppConDelete01Ext01Value01*.

      The contact delete command MUST complete with result code 1000 or 1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  EPPHostDelete01:
    Summary: Delete a host
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, deleting a Host Object and logging out.

      If the Registry Operator does not support Host Objects, this test will
      not be performed.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 5.3 is also used for login.

        -----------------------------------------------------------------------------
        Id                             Description                       Type
        ------------------------------ --------------------------------- ------------
        EppHostDelete01Name            Host name to delete               String

        EppHostDelete01Ext01Uri        Extension 01 object URI           String

        EppHostDelete01Ext01Sl         Extension 01 schema location      String

        EppHostDelete01Ext01ExtName    Extension 01 name                 String

        EppHostDelete01Ext01ExtValue   Extension 01 value for direct     String
                                       text node

        EppHostDelete01Ext01Field01    Extension 01 field name 01        String

        EppHostDelete01Ext01Value01    Extension 01 field value 01       String

        ...                            Repeat for max y fields

        ...                            Repeat for max x extensions
        -----------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The host delete command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *EppHostDelete01Name* host MUST exist in the domain database, and be
          available for delete.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 5.8.\
          The login command MUST complete with result code 1000.

      2.  Create a contact delete command with *EppHostDelete01Id*.

          a.  If contact delete requires extra extension and values, create an
              extension part from *EppHostDelete01Ext01Uri* and
              *EppHostDelete01Ext01Sl* and fill in field name from
              *EppHostDelete01Ext01Field01* and values from
              *EppHostDelete01Ext01Value01*.

      The contact delete command MUST complete with result code 1000 or 1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  EPPHostUpdate01:
    Summary: Update a host
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, updating a Host Object and logging out.

      If the Registry Operator does not support Host Objects, this test will
      not be performed.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 5.3 is also used for login.

        -----------------------------------------------------------------------------
        Id                             Description                       Type
        ------------------------------ --------------------------------- ------------
        EppHostUpdate01Name            Host name to update               String

        EppHostUpdate01Ipv4            IPv4 address to add               String

        EppHostUpdate01Ext01Uri        Extension 01 object URI           String

        EppHostUpdate01Ext01Sl         Extension 01 schema location      String

        EppHostUpdate01Ext01ExtName    Extension 01 name                 String

        EppHostUpdate01Ext01ExtValue   Extension 01 value for direct     String
                                       text node

        EppHostUpdate01Ext01Field01    Extension 01 field name 01        String

        EppHostUpdate01Ext01Value01    Extension 01 field value 01       String

        ...                            Repeat for max y fields

        ...                            Repeat for max x extensions
        -----------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The host update command MUST complete with result code 1000.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *EppHostUpdate01Name* host MUST exist in the domain database, and be
          available for update.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 5.8.\
          The login command MUST complete with result code 1000.

      2.  Create a host update command with *EppHostUpdate01Name* and add IPv4
          address *EppHostUpdate01Ipv4*

          a.  If host update requires extra extension and values, create an
              extension part from *EppHostUpdate01Ext01Uri* and
              *EppHostUpdate01Ext01Sl* and fill in field name from
              *EppHostUpdate01Ext01Field01* and values from
              *EppHostUpdate01Ext01Value01*.

      The host update command MUST complete with result code 1000.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  EPPContactUpdate01:
    Summary: Update a contact
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, updating a contact object and logging out.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 5.3 is also used for login.

        --------------------------------------------------------------------------------------------
        Id                                Description                                   Type
        --------------------------------- ------------- ------------------------------- ------------
        EppContactUpdate01Id              Contact ID to                                 String
                                          update

        EppContactUpdate01Email                         Email address to set            String

        EppContactUpdate01Ext01Uri        Extension 01                                  String
                                          object URI

        EppContactUpdate01Ext01Sl         Extension 01                                  String
                                          schema
                                          location

        EppContactUpdate01Ext01ExtName                  Extension 01 name               String

        EppContactUpdate01Ext01ExtValue   Extension 01                                  String
                                          value for
                                          direct text
                                          node

        EppContactUpdate01Ext01Field01    Extension 01                                  String
                                          field name 01

        EppContactUpdate01Ext01Value01    Extension 01                                  String
                                          field value
                                          01

        ...                               Repeat for
                                          max y fields

        ...                               Repeat for
                                          max x
                                          extensions
        --------------------------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The contact update command MUST complete with result code 1000.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *EppContactUpdate01Id* contact MUST exist in the domain database,
          and be available for update.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 5.8.\
          The login command MUST complete with result code 1000.

      2.  Create a contact update command with *EppContactUpdate01Id* and set
          *EppContactUpdate01Email*

          a.  If contact update requires extra extension and values, create an
              extension part from *EppContactUpdate01Ext01Uri* and
              *EppContactUpdate01Ext01Sl* and fill in field name from
              *EppContactUpdate01Ext01Field01* and values from
              *EppContactUpdate01Ext01Value01*.

      The contact update command MUST complete with result code 1000.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  EPPDomUpdate01:
    Summary: Add DNSSEC records to a domain
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, update a domain object with DNSSEC records and logging out. The test
      then verifies that the changes are visible in the zone within 60
      minutes, both for DNS and Whois.

      When executing this test case as EPPDomUpdate01A, DNS and Whois
      verifications are not included. Requirements and test steps marked with
      an asterisk (\*) should be disregarded for an 'A' test case.

      ## Inputs

      The following information is needed as input for this test case:

      The IP address for the authoritative name server for the TLD zone is
      required as the test verifies DNS visibility. It is fetched from the XML
      data file submitted for the DNS tests.

      As the test verifies Whois visibility, the IP address of a Whois server
      that responds on port 43 is needed. The IP address of the Whois server
      is extracted from the DNS zone by the Whois test and is also used for
      this TC.

      The full information from the input table in 5.3 is also used for login.

      +------------------------+--------------------------------+----------+
      | Id                     | Description                    | Type     |
      +========================+================================+==========+
      | DnsGlueRecord1         | IPv4 or IPv6 address of 1^st^  | String   |
      |                        | authoritative name server      |          |
      +------------------------+--------------------------------+----------+
      | WhoisIPv4Port43        | The IPv4 address of the Whois  | String   |
      |                        | service on port 43             |          |
      +------------------------+--------------------------------+----------+
      | EppDomUpdate01Name     | Domain name to update          | String   |
      +------------------------+--------------------------------+----------+
      | EppDomUpdate01Ext01Uri | Extension 01 object URI        | String   |
      +------------------------+--------------------------------+----------+
      | EppDomUpdate01Ext01Sl  | Extension 01 schema location   | String   |
      +------------------------+--------------------------------+----------+
      | EppD                   | Extension 01 name              | String   |
      | omUpdate01Ext01ExtName |                                |          |
      +------------------------+--------------------------------+----------+
      | EppDo                  | Extension 01 value for direct  | String   |
      | mUpdate01Ext01ExtValue | text node                      |          |
      +------------------------+--------------------------------+----------+
      | EppD                   | Extension 01 field name 01     | String   |
      | omUpdate01Ext01Field01 |                                |          |
      +------------------------+--------------------------------+----------+
      | EppD                   | Extension 01 field value 01    | String   |
      | omUpdate01Ext01Value01 |                                |          |
      +------------------------+--------------------------------+----------+
      | ...                    | Repeat for max y fields        |          |
      +------------------------+--------------------------------+----------+
      | ...                    | Repeat for max x extensions    |          |
      +------------------------+--------------------------------+----------+
      | EppDomUpdate01KeyType  | D for dsData specification     | String   |
      |                        |                                |          |
      |                        | K for keyData specification    |          |
      |                        |                                |          |
      |                        | DK for dsData and keyData      |          |
      |                        | specification                  |          |
      +------------------------+--------------------------------+----------+
      | Ep                     | Value for dsData 01 keytag     | String   |
      | pDomUpdate01DsKeyTag01 |                                |          |
      +------------------------+--------------------------------+----------+
      | EppDomUpdate01DsAlg01  | Value for dsData 01 alg        | Number   |
      +------------------------+--------------------------------+----------+
      | EppDom                 | Value for dsData 01 digest     | Number   |
      | Update01DsDigestType01 | type                           |          |
      +------------------------+--------------------------------+----------+
      | Ep                     | Value for dsData 01 digest     | String   |
      | pDomUpdate01DsDigest01 |                                |          |
      +------------------------+--------------------------------+----------+
      | ...                    | Repeat for max x dsData        |          |
      |                        | records                        |          |
      +------------------------+--------------------------------+----------+
      | E                      | Value for keyData 01 flags     | Number   |
      | ppDomUpdate01KdFlags01 |                                |          |
      +------------------------+--------------------------------+----------+
      | EppD                   | Value for keyData 01 protocol  | Number   |
      | omUpdate01KdProtocol01 |                                |          |
      +------------------------+--------------------------------+----------+
      | EppDomUpdate01KdAlg01  | Value for keyData 01 alg       | Number   |
      +------------------------+--------------------------------+----------+
      | Ep                     | Value for keyData 01 pubKey    | String   |
      | pDomUpdate01KdPubKey01 |                                |          |
      +------------------------+--------------------------------+----------+
      | ...                    | Repeat for max x keyData       |          |
      |                        | records                        |          |
      +------------------------+--------------------------------+----------+

      ## Outcome(s)

      The initial DNS lookup MUST NOT return NXDOMAIN for
      *EppDomUpdate01Name*. \*

      The initial Whois lookup MUST NOT return any DNSSEC Signed information
      about *EppDomUpdate01Name*. \*

      The domain update command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      *EppDomUpdate01Name* MUST be visible in the zone with correct DNS
      records within 60 minutes. \*

      *EppDomUpdate01Name* MUST be visible as a DNSSEC signed domain in Whois
      within 60 minutes. \*

      *Requirements marked with \* are not considered in test case
      EPPDomUpdate01A.*

      ## Environmental needs

      -   DNS test script

      ```{=html}
      <!-- -->
      ```
      -   EPP test script

      -   IPv4 connectivity

      -   *EppDomUpdate01Name* MUST exist in the DNS zone without DNSSEC
          records.

      -   *EppDomUpdate01RegistrantId* MUST exist in contact database

      -   *EppDomUpdate01Ns01* MUST exist in host database, and be configured
          to serve domain *EppDomUpdate01Name* with correct DNSSEC records.

      -   *EppDomUpdate01Ns02* MUST exist in host database, and be configured
          to serve domain *EppDomUpdate01Name* with correct DNSSEC records.

      ## Special procedural requirements

      Abort the test if any Whois query takes longer than 10 seconds.

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform a DNS lookup for *EppDomUpdate01Name* domain name.\
          The result MUST NOT be NXDOMAIN. \*

      2.  Perform the same login as the login step in 5.8.\
          The login command MUST complete with result code 1000.

      3.  Create a domain update command with *EppDomUpdate01Name*.

          a.  Add one or more secDNS records with dsData or keyData or both,
              depending on the value of *EppDomUpdate01KeyType*. Use
              appropriate values from *EppDomUpdate01DsKeyTag01*,
              *EppDomUpdate01DsAlg01*, *EppDomUpdate01DsDigestType01*,
              *EppDomUpdate01DsDigest01*, *EppDomUpdate01KdFlags01*,
              *EppDomUpdate01KdProtocol01*, *EppDomUpdate01KdAlg01*,
              *EppDomUpdate01kdPubKey01*.

          b.  If domain update requires extra extension and values, create an
              extension part from *EppDomUpdate01Ext01Uri* and fill in field
              name from *EppDomUpdate01Ext01Field01* and values from
              *EppDomUpdate01Ext01Value01*.

      The domain update command MUST complete with result code 1000 or 1001.

      4.  Create a logout command.\
          The logout command MUST complete with result code 1500.

      5.  Verify that the *EppDomUpdate01Name* domain is updated, with the
          correct DNSSEC records in the zone within 60 minutes. \*

      6.  Verify that the *EPPDomUpdate01Name* is visible in Whois as a DNSSEC
          signed domain within 60 minutes. \*

      *Steps marked with \* are not included in test case EppDomUpdate01A.*
  EPPDomUpdate01A:
    Summary: ''
    Description: |
      ## Objective

      This is a subset of test case EPPDomUpdate01. See section 21, "Test Case
      EPPDomUpdate01: Add DNSSEC to a domain", for details.
  EPPExtensions:
    Summary: Verify required EPP extensions
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with extensions required
      by registry agreement.

      ## Inputs

      The following information is needed as input for this test case:

      -   The extensions required by the Registry Agreement.

      -   Logfiles from login in any of the previous tests.

      ## Outcome(s)

      Each extension in the Registry Agreement stated to be mandatory must be
      listed in the EPP greeting.

      ## Environmental needs

      N/A

      ## Special procedural requirements

      None.

      ## Intercase dependencies

      A result log from any of the previous tests MUST be available.

      ## Ordered description of steps to be taken to execute the test case

      1.  Verify that each extension in the Registry Agreement that is stated
          to be mandatory is listed in the EPP greeting.
  TLDSRSEPPConnTest:
    Summary: Verify connectivity
    Description: |
      ## Objective

      This test verifies the connectivity from different nodes to the EPP
      provisioning system by doing a login and then a logout. For information
      about nodes, see section 1.6.1.

      The test will be performed over IPv4, and also IPv6 if the Registry
      Operator supports it.

      ## Inputs

      The following information is needed as input for this test case:

        -------------------------------------------------------------------------------
        Id                              Description                        Type
        ------------------------------- ---------------------------------- ------------
        TLDSRSEPPLoginId                Login ID for EPP test user         String

        TLDSRSEPPLoginPwd               Login password for EPP test user   String

        TLDSRSEPPNsDomainUri            Object URI for Domain Object       String

        TLDSRSEPPNsDomainSl             Schema location for Domain Object  String

        TLDSRSEPPNsContactUri           Object URI for Contact Object      String

        TLDSRSEPPNsContactSl            Schema location for Contact Object String

        TLDSRSEPPNsHostUri              Object URI for Host Object. If the String
                                        registry does not support Host
                                        Objects, this field is not
                                        mandatory.

        TLDSRSEPPNsHostSl               Schema location for Host Object.   String
                                        If the registry does not support
                                        Host Objects, this field is not
                                        mandatory.

        TLDSRSEPPExtSecDnsUri           Object URI for Sec Dns Object      String
                                        Extension

        TLDSRSEPPExtSecDnsSl            Schema location for Sec Dns Object String
                                        Extension

        TLDSRSEPPExtUri-\[1..n\]        Object URI for extension 1..n      String

        TLDSRSEPPExtSl-\[1..n\]         Schema location for extensions     String
                                        1..n

        TLDSRSEPPServerIPv4             IPv4 address to EPP server         String

        TLDSRSEPPServerIPv6             IPv6 address to EPP server if      String
                                        Registry Operator supports IPv6

        TLDSRSEPPServerPort             Port number to EPP server          Number

        TLDSRSEPPClientCertificate      Yes if the registry requires       Boolean
                                        client certificate

        TLDSRSEPPClientKeyPairPem       PEM file with valid client         PEM file
                                        certificate for test user (Public
                                        and private)

        TLDSRSEPPClientKeyPairPwd       Password for client certificate    String
                                        for test user

        TLDSRSEPPServerCertificatePem   PEM file with server certificate   PEM file
                                        (Public)
        -------------------------------------------------------------------------------

      ## Outcome(s)

      The login command from each probe MUST complete with result code 1000

      The logout command from each probe MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   IPv6 connectivity

      ## Special procedural requirements

      Abort the test if any operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      This test will be performed from all of the nodes.

      1.  Connect to TLDSRSEPPServerIPv4.\
          Create a login command with *TLDSRSEPPLoginId* and password
          *TLDSRSEPPLoginPwd*.\
          Use the *TLDSRSEPPNsDomainUri*, *TLDSRSEPPNsDomainSl*,
          *TLDSRSEPPNsContactUri*, *TLDSRSEPPNsContactSl*,
          *TLDSRSEPPNsHostUri* and *TLDSRSEPPNsHostSl* to build the login
          message.\
          Add the secDNS extension with *TLDSRSEPPExtSecDnsUri* and
          *TLDSRSEPPExtSecDnsSl*.\
          Add zero or more extra extensions with *TLDSRSEPPExtUri* and
          *TLDSRSEPPExtSl*.\
          If the server requires client certificate, connect with client
          certificate *TLDSRSEPPClientKeyPairPem.*\
          The login command MUST complete with result code 1000.

      2.  Create a logout command.\
          The logout command MUST complete with result code 1500.

      If the registry supports IPv6:

      3.  Connect to TLDSRSEPPServerIPv6.\
          Create a login command with *TLDSRSEPPLoginId* and password
          *TLDSRSEPPLoginPwd*.\
          Use the *TLDSRSEPPNsDomainUri*, *TLDSRSEPPNsDomainSl*,
          *TLDSRSEPPNsContactUri*, *TLDSRSEPPNsContactSl*,
          *TLDSRSEPPNsHostUri* and *TLDSRSEPPNsHostSl* to build the login
          message.\
          Add the secDNS extension with *TLDSRSEPPExtSecDnsUri* and
          *TLDSRSEPPExtSecDnsSl*.\
          Add zero or more extra extensions with *TLDSRSEPPExtUri* and
          *TLDSRSEPPExtSl*.\
          If the server requires client certificate, connect with client
          certificate *TLDSRSEPPClientKeyPairPem.*\
          The login command MUST complete with result code 1000.

      4.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  TLDSRSEPPDomCreate01:
    Summary: Create a domain
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, creating a domain object, logging out, and verifying that the
      information is visible in Whois within 24 hours.

      ## Inputs

      The full information from the input table in 24.3 is used for login.

        -----------------------------------------------------------------------------
        Id                                  Description                  Type
        ----------------------------------- ---------------------------- ------------
        TLDSRSWhoisIPv4Port43               The IPv4 address of the      String
                                            Whois service on port 43

        TLDSRSEPPDomCreate01Name            Domain name to create        String

        TLDSRSEPPDomCreate01Period          Domain period type           Y/M

        TLDSRSEPPDomCreate01PeriodValue     Domain period value          Number

        TLDSRSEPPDomCreate01RegistrantId    Domain registrant id         String

        TLDSRSEPPDomCreate01AdminId         Domain Admin id if required  String

        TLDSRSEPPDomCreate01TechId          Domain Tech id if required   String

        TLDSRSEPPDomCreate01BillingId       Domain Billing id if         String
                                            required

        TLDSRSEPPDomCreate01AuthPw          AuthPw if required           String

        TLDSRSEPPDomCreate01Ns01            Host Object or Host          String
                                            Attribute name for ns01

        TLDSRSEPPDomCreate01Ns02            Host Object or Host          String
                                            Attribute name for ns02

        TLDSRSEPPDomCreate01Ext01Uri        Extension 01 object URI      String

        TLDSRSEPPDomCreate01Ext01Sl         Extension 01 schema location String

        TLDSRSEPPDomCreate01Ext01ExtName    Extension 01 name            String

        TLDSRSEPPDomCreate01Ext01ExtValue   Extension 01 value for       String
                                            direct text node

        TLDSRSEPPDomCreate01Ext01Field01    Extension 01 field name 01   String

        TLDSRSEPPDomCreate01Ext01Value01    Extension 01 field value 01  String

        ...                                 Repeat for max y fields

        ...                                 Repeat for max x extensions
        -----------------------------------------------------------------------------

      ## Outcome(s)

      Initial Whois lookup MUST NOT return any information about
      *TLDSRSEPPDomCreate01Name*.

      Login step MUST complete with result code 1000.

      Create step MUST complete with result code 1000 or 1001.

      Logout step MUST complete with result code 1500.

      *TLDSRSEPPDomCreate01Name* MUST be visible in Whois within 24 hours.

      ## Environmental needs

      -   Whois client software

      -   EPP test script

      -   IPv4 connectivity

      ```{=html}
      <!-- -->
      ```
      -   *TLDSRSEPPDomCreate01RegistrantId* MUST exist in contact database

      -   *TLDSRSEPPDomCreate01Ns01* MUST exist in host database, and be
          configured to serve domain *TLDSRSEPPDomCreate01Name*.

      -   *TLDSRSEPPDomCreate01Ns02* MUST exist in host database, and be
          configured to serve domain *TLDSRSEPPDomCreate01Name*.

      ## Special procedural requirements

      Abort the test if any Whois query takes longer than 10 seconds.

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Verify that the domain is not present in Whois:

          a.  Start a terminal.

          b.  Query the Whois service using the client software:\
              whois -h *WhoisIPv4Port43* *TLDSRSEPPDomCreate01Name*

          c.  The domain name MUST NOT be present in the response.

      2.  Perform the same login as the login step in 24.8.\
          The login command MUST complete with result code 1000.

      3.  Create a domain create command with *TLDSRSEPPDomCreate01Name*.

          a.  Use period name from *TLDSRSEPPDomCreate01Period* and period
              value from *TLDSRSEPPDomCreate01PeriodValue*.

          b.  Use name server 1 from *TLDSRSEPPDomCreate01Ns01* and name
              server 2 from *TLDSRSEPPDomCreate01Ns02*.

          c.  If domain create requires extra extensions and values, create an
              extension part from *TLDSRSEPPDomCreate01Ext01Uri* and fill in
              field name from *TLDSRSEPPDomCreateExt01Field01* and values from
              *TLDSRSEPPDomCreateExt01Value01*.

      The domain create command MUST complete with result code 1000 or 1001.

      4.  Create a logout command.\
          The logout command MUST complete with result code 1500.

      5.  Verify that the *EPPDomCreate01Name* is visible in Whois within 24
          hours.
  TLDSRSEPPDomCreate02:
    Summary: Add hosts to existing domain
    Description: |
      This test is changed from creating a domain to adding subordinate hosts
      to an existing domain. As a consequence, all fields required for
      creating the domain are now optional, and will be ignored if they are
      present in the input data. They will be removed in a future release.

      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, creating subordinate Host Objects for a domain, updating the domain,
      logging out, and verifying the correct handling of glue records.

      If the registry does not support Host Objects, the test uses Host
      Attributes to insert the subordinate name servers for the domain.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 24.3 is used for login.

        ----------------------------------------------------------------------------
        Id                                      Description                Type
        --------------------------------------- -------------------------- ---------
        TLDSRSEPPDomCreate02Name                Domain name to update      String

        TLDSRSEPPDomCreate02Ns01                Subordinate Host Object or String
                                                Host Attribute name for
                                                name server 01

        TLDSRSEPPDomCreate02Ns01Ipv4            Subordinate name server 01 String
                                                IPv4 address

        TLDSRSEPPDomCreate02Ns01Ipv6            Subordinate name server 01 String
                                                IPv6 address

        TLDSRSEPPDomCreate02Ns02                Subordinate Host Object or String
                                                Host Attribute name for
                                                name server 02

        TLDSRSEPPDomCreate02Ns02Ipv4            Subordinate name server 02 String
                                                IPv4 address

        TLDSRSEPPDomCreate02Ns02Ipv6            Subordinate name server 02 String
                                                IPv6 address

        TLDSRSEPPDomCreate02UpdExt01Uri         Extension 01 object URI    String

        TLDSRSEPPDomCreate02UpdExt01Sl          Extension 01 schema        String
                                                location

        TLDSRSEPPDomCreate02UpdExt01ExtName     Extension 01 name          String

        TLDSRSEPPDomCreate02UpdExt01ExtValue    Extension 01 value for     String
                                                direct text node

        TLDSRSEPPDomCreate02UpdExt01Field01     Extension 01 field name 01 String

        TLDSRSEPPDomCreate02UpdExt01Value01     Extension 01 field value   String
                                                01

        ...                                     Repeat for max y fields
                                                for Update

        ...                                     Repeat for max x
                                                extensions for Update

        TLDSRSEPPDomCreate02Ns01Ext01Uri        Extension 01 object URI    String

        TLDSRSEPPDomCreate02Ns01Ext01Sl         Extension 01 schema        String
                                                location

        TLDSRSEPPDomCreate02Ns01Ext01ExtName    Extension 01 name          String

        TLDSRSEPPDomCreate02Ns01Ext01ExtValue   Extension 01 value for     String
                                                direct text node

        TLDSRSEPPDomCreate02Ns01Ext01Field01    Extension 01 field name 01 String

        TLDSRSEPPDomCreate02Ns01Ext01Value01    Extension 01 field value   String
                                                01

        ...                                     Repeat for max y fields
                                                for name server 01

        ...                                     Repeat for max x
                                                extensions for name server
                                                01

        TLDSRSEPPDomCreate02Ns02Ext01Uri        Extension 01 object URI    String

        TLDSRSEPPDomCreate02Ns02Ext01Sl         Extension 01 schema        String
                                                location

        TLDSRSEPPDomCreate02Ns02Ext01ExtName    Extension 01 name          String

        TLDSRSEPPDomCreate02Ns02Ext01ExtValue   Extension 01 value for     String
                                                direct text node

        TLDSRSEPPDomCreate02Ns02Ext01Field01    Extension 01 field name 01 String

        TLDSRSEPPDomCreate02Ns02Ext01Value01    Extension 01 field value   String
                                                01

        ...                                     Repeat for max y fields
                                                for name server 02

        ...                                     Repeat for max x
                                                extensions for name server
                                                02
        ----------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      If the registry is using Host Objects, the host create command MUST
      complete with result code 1000 or 1001.

      The domain update command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *TLDSRSEPPDomCreate02Name* MUST exist in domain database.

      -   *TLDSRSEPPDomCreate02RegistrantId* MUST exist in contact database

      -   *TLDSRSEPPDomCreate02Ns01* MUST be configured to serve domain
          *TLDSRSEPPDomCreate02Name*.

      -   *TLDSRSEPPDomCreate02Ns02* MUST be configured to serve domain
          *TLDSRSEPPDomCreate02Name*.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 24.8.\
          The login command MUST complete with result code 1000.

      2.  If the Registry Operator does not support Host Objects, skip to step
          6.

      3.  Create a host create command for subordinate host
          *TLDSRSEPPDomCreate02Ns01* with IPv4 address
          *TLDSRSEPPDomCreate02Ns01Ipv4* and/or IPv6 address
          *TLDSRSEPPDomCreate02Ns01Ipv6.\
          * The host create command MUST complete with result code 1000 or
          1001.

      4.  Create a host create command for subordinate host
          *TLDSRSEPPDomCreate02Ns02* with IPv4 address
          *TLDSRSEPPDomCreate02Ns02Ipv4* and/or IPv6 address
          *TLDSRSEPPDomCreate02Ns02Ipv6.\
          * The host create command MUST complete with result code 1000 or
          1001.

      5.  Create a domain update command with *TLDSRSEPPDomCreate02Name* and
          hosts *TLDSRSEPPDomCreate02Ns01* and *TLDSRSEPPDomCreate02Ns02.\
          * - If the Registry Operator supports Host Objects, use Host
          Objects.\
          - If the Registry Operator does not support Host Objects, use Host
          Attributes.*\
          * The domain update command MUST complete with result code 1000 or
          1001.

      6.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  TLDSRSEPPDomCreate03:
    Summary: Create a DNSSEC-signed domain
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, creating a domain object with DNSSEC records and logging out.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 24.3 is used for login.

      +-----------------------------+----------------------------+---+---------+
      | Id                          | Description                |   | Type    |
      +=============================+============================+===+=========+
      | TLDSRSEPPDomCreate03Name    | Domain name to create      |   | String  |
      +-----------------------------+----------------------------+---+---------+
      | TLDSRSEPPDomCreate03Period  | Domain period type         |   | Y/M     |
      +-----------------------------+----------------------------+---+---------+
      | TLDS                        | Domain period value        |   | Number  |
      | RSEppDomCreate03PeriodValue |                            |   |         |
      +-----------------------------+----------------------------+---+---------+
      | TLDSR                       | Domain registrant id       |   | String  |
      | SEppDomCreate03RegistrantId |                            |   |         |
      +-----------------------------+----------------------------+---+---------+
      | TLDSRSEPPDomCreate03AdminId | Domain admin id if         | S |         |
      |                             | required                   | t |         |
      |                             |                            | r |         |
      |                             |                            | i |         |
      |                             |                            | n |         |
      |                             |                            | g |         |
      +-----------------------------+----------------------------+---+---------+
      | TLDSRSEPPDomCreate03TechId  | Domain tech id if required | S |         |
      |                             |                            | t |         |
      |                             |                            | r |         |
      |                             |                            | i |         |
      |                             |                            | n |         |
      |                             |                            | g |         |
      +-----------------------------+----------------------------+---+---------+
      | TL                          | Domain billing id if       | S |         |
      | DSRSEppDomCreate03BillingId | required                   | t |         |
      |                             |                            | r |         |
      |                             |                            | i |         |
      |                             |                            | n |         |
      |                             |                            | g |         |
      +-----------------------------+----------------------------+---+---------+
      | TLDSRSEPPDomCreate03AuthPw  | Authentication password if | S |         |
      |                             | required                   | t |         |
      |                             |                            | r |         |
      |                             |                            | i |         |
      |                             |                            | n |         |
      |                             |                            | g |         |
      +-----------------------------+----------------------------+---+---------+
      | TLDSRSEPPDomCreate03Ns01    | Host Object name for ns01  |   | String  |
      +-----------------------------+----------------------------+---+---------+
      | TLDSRSEPPDomCreate03Ns02    | Host Object name for ns02  |   | String  |
      +-----------------------------+----------------------------+---+---------+
      | T                           | Extension 01 object URI    |   | String  |
      | LDSRSEppDomCreate03Ext01Uri |                            |   |         |
      +-----------------------------+----------------------------+---+---------+
      | TLDSRSEPPDomCreate03Ext01Sl | Extension 01 schema        |   | String  |
      |                             | location                   |   |         |
      +-----------------------------+----------------------------+---+---------+
      | TLDSR                       | Extension 01 name          | S |         |
      | SEppDomCreate03Ext01ExtName |                            | t |         |
      |                             |                            | r |         |
      |                             |                            | i |         |
      |                             |                            | n |         |
      |                             |                            | g |         |
      +-----------------------------+----------------------------+---+---------+
      | TLDSRS                      | Extension 01 value for     |   | String  |
      | EppDomCreate03Ext01ExtValue | direct text node           |   |         |
      +-----------------------------+----------------------------+---+---------+
      | TLDSR                       | Extension 01 field name 01 |   | String  |
      | SEppDomCreate03Ext01Field01 |                            |   |         |
      +-----------------------------+----------------------------+---+---------+
      | TLDSR                       | Extension 01 field value   |   | String  |
      | SEppDomCreate03Ext01Value01 | 01                         |   |         |
      +-----------------------------+----------------------------+---+---------+
      | ...                         | Repeat for max y fields    |   |         |
      +-----------------------------+----------------------------+---+---------+
      | ...                         | Repeat for max x           |   |         |
      |                             | extensions                 |   |         |
      +-----------------------------+----------------------------+---+---------+
      | TLDSRSEPPDomCreate03KeyType | D for dsData specification |   | String  |
      |                             |                            |   |         |
      |                             | K for keyData              |   |         |
      |                             | specification              |   |         |
      |                             |                            |   |         |
      |                             | DK for dsData and keyData  |   |         |
      |                             | specification              |   |         |
      +-----------------------------+----------------------------+---+---------+
      | TLD                         | Value for dsData 01 keytag |   | String  |
      | SRSEppDomCreate03DsKeyTag01 |                            |   |         |
      +-----------------------------+----------------------------+---+---------+
      | TLDSRSEPPDomCreate03DsAlg01 | Value for dsData 01 alg    |   | Number  |
      +-----------------------------+----------------------------+---+---------+
      | TLDSRSE                     | Value for dsData 01 digest |   | Number  |
      | ppDomCreate03DsDigestType01 | type                       |   |         |
      +-----------------------------+----------------------------+---+---------+
      | TLD                         | Value for dsData 01 digest |   | String  |
      | SRSEppDomCreate03DsDigest01 |                            |   |         |
      +-----------------------------+----------------------------+---+---------+
      | ...                         | Repeat for max x dsData    |   |         |
      |                             | records                    |   |         |
      +-----------------------------+----------------------------+---+---------+
      | TL                          | Value for keyData 01 flags |   | Number  |
      | DSRSEppDomCreate03KdFlags01 |                            |   |         |
      +-----------------------------+----------------------------+---+---------+
      | TLDSR                       | Value for keyData 01       |   | Number  |
      | SEppDomCreate03KdProtocol01 | protocol                   |   |         |
      +-----------------------------+----------------------------+---+---------+
      | TLDSRSEPPDomCreate03KdAlg01 | Value for keyData 01 alg   |   | Number  |
      +-----------------------------+----------------------------+---+---------+
      | TLD                         | Value for keyData 01       |   | String  |
      | SRSEppDomCreate03KdPubKey01 | pubKey                     |   |         |
      +-----------------------------+----------------------------+---+---------+
      | ...                         | Repeat for max x keyData   |   |         |
      |                             | records                    |   |         |
      +-----------------------------+----------------------------+---+---------+

      ## Outcome(s)

      The domain create command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *TLDSRSEPPDomCreate03RegistrantId* MUST exist in contact database

      -   *TLDSRSEPPDomCreate03Ns01* MUST exist in host database, and be
          configured to serve domain *TLDSRSEPPDomCreate03Name* with correct
          DNSSEC records.

      -   *TLDSRSEPPDomCreate03Ns02* MUST exist in host database, and be
          configured to serve domain *TLDSRSEPPDomCreate03Name* with correct
          DNSSEC records.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 24.8.\
          The login command MUST complete with result code 1000.

      2.  Create a domain create command with *TLDSRSEPPDomCreate03Name*.

          a.  Use period name from *TLDSRSEPPDomCreate03Period* and period
              value from *TLDSRSEPPDomCreate03PeriodValue*.

          b.  Use name server 1 from *TLDSRSEPPDomCreate03Ns01* and name
              server 2 from *TLDSRSEPPDomCreate03Ns02*.

          c.  Add one or more secDNS records with dsData or keyData or both,
              depending on the value of *TLDSRSEPPDomUpdate01KeyType*. Use
              appropriate values from *TLDSRSEPPDomUpdate01DsKeyTag01*,
              *TLDSRSEPPDomUpdate01DsAlg01*,
              *TLDSRSEPPDomUpdate01DsDigestType01*,
              *TLDSRSEPPDomUpdate01DsDigest01*,
              *TLDSRSEPPDomUpdate01KdFlags01*,
              *TLDSRSEPPDomUpdate01KdProtocol01*,
              *TLDSRSEPPDomUpdate01KdAlg01*, *TLDSRSEPPDomUpdate01kdPubKey01*.

          d.  If domain create requires extra extension and values, create an
              extension part from *TLDSRSEPPDomCreate03Ext01Uri* and fill in
              field name from *TLDSRSEPPDomCreate03Ext01Field01* and values
              from *TLDSRSEPPDomCreate03Ext01Value01*.

      > The domain create command MUST complete with result code 1000 or 1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  TLDSRSEPPDomRenew01:
    Summary: Renew a domain
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, renewing a domain object and logging out.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 24.3 is also used for
      login.

        ----------------------------------------------------------------------------
        Id                                 Description                  Type
        ---------------------------------- ---------------------------- ------------
        TLDSRSEPPDomRenew01Name            Domain name to renew         String

        TLDSRSEPPDomRenew01Period          Domain period type           Y/M

        TLDSRSEPPDomRenew01PeriodValue     Domain period value          Number

        TLDSRSEPPDomRenew01ExpDate         Domain current expiry date   String

        TLDSRSEPPDomRenew01Ext01Uri        Object URI for extension 01  String

        TLDSRSEPPDomRenew01Ext01Sl         Extension 01 schema location String

        TLDSRSEPPDomRenew01Ext01ExtName    Extension 01 name            String

        TLDSRSEPPDomRenew01Ext01ExtValue   Extension 01 value for       String
                                           direct text node

        TLDSRSEPPDomRenew01Ext01Field01    Extension 01 field name 01   String

        TLDSRSEPPDomRenew01Ext01Value01    Extension 01 field value 01  String

        ...                                Repeat for max y fields

        ...                                Repeat for max x extensions
        ----------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The renew command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4Connectivity

      -   *TLDSRSEPPDomRenew01Name* domain MUST exist in the domain database,
          and be ready for renewal

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 24.8.\
          The login command MUST complete with result code 1000.

      2.  Create a domain renew command with *TLDSRSEPPDomRenew01Name*.

          a.  Use period name from *TLDSRSEPPDomRenew01Period* and period
              value from *TLDSRSEPPDomRenew01PeriodValue*.

          b.  If domain renew requires extra extension and values, create an
              extension part from *TLDSRSEPPDomRenew01Ext01Uri* and fill in
              field name from *TLDSRSEPPDomRenewe01Ext01Field01* and values
              from *TLDSRSEPPDomRenew01Ext01Value01*.

      The domain renew command MUST complete with result code 1000 or 1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  TLDSRSEPPDomTransfer01:
    Summary: Request transfer of a domain
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, requesting a transfer of a domain object and logging out.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 24.3 is used for login.

        --------------------------------------------------------------------------------
        Id                                    Description                      Type
        ------------------------------------- -------------------------------- ---------
        TLDSRSEPPDomTransfer01Name            Domain name to transfer          String

        TLDSRSEPPDomTransfer01AddPeriod       Yes, if the registry supports    Boolean
                                              adding a period to transfer

        TLDSRSEPPDomTransfer01Period          Domain period type               Y/M

        TLDSRSEPPDomTransfer01PeriodValue     Domain period value              Number

        TLDSRSEPPDomTransfer01AuthInfo        Authorization info for domain,   String
                                              registrant or associated
                                              contacts

        TLDSRSEPPDomTransfer01AuthRoid        Roid for registrant or contact   String
                                              if
                                              TLDSRSEPPDomTransfer01AuthInfo
                                              is associated with registrant or
                                              contact object

        TLDSRSEPPDomTransfer01Ext01Uri        Extension 01 object URI          String

        TLDSRSEPPDomTransfer01Ext01Sl         Extension 01 schema location     String

        TLDSRSEPPDomTransfer01Ext01ExtName    Extension 01 name                String

        TLDSRSEPPDomTransfer01Ext01ExtValue   Extension 01 value for direct    String
                                              text node

        TLDSRSEPPDomTransfer01Ext01Field01    Extension 01 field name 01       String

        TLDSRSEPPDomTransfer01Ext01Value01    Extension 01 field value 01      String

        ...                                   Repeat for max y fields

        ...                                   Repeat for max x extensions
        --------------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The domain transfer command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *TLDSRSEPPDomTransfer01Name* domain MUST exist in the domain
          database, and be available for transfer.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 24.8.\
          The login command MUST complete with result code 1000.

      2.  Create a domain transfer command with *TLDSRSEPPDomTransfer01Name*.

          a.  Add an Op attribute in transfer command with the value
              "request".

          b.  If *TLDSRSEPPDomTransfer01AddPeriod* is true, add period part
              with Period name from *TLDSRSEPPDomTransfer01Period* and period
              value from *TLDSRSEPPDomTransfer01PeriodValue*.

          c.  Add authinfo part with *TLDSRSEPPDomTransfer01AuthInfo*.

          d.  If *TLDSRSEPPDomTransfer01AuthRoid* is defined, add a roid
              attribute to pw part with the value
              *TLDSRSEPPDomTransfer01AuthRoid*.

          e.  If domain renew requires extra extension and values, create an
              extension part from *TLDSRSEPPDomTransfer01Ext01Uri* and
              *TLDSRSEPPDomTransfer01Ext01Sl* and fill in field name from
              *TLDSRSEPPDomTransfer01Ext01Field01* and values from
              *TLDSRSEPPDomTransfer01Ext01Value01*.

      The domain transfer command MUST complete with result code 1000 or 1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  TLDSRSEPPDomTransfer02:
    Summary: Approve a requested domain transfer
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, approving a transfer of a domain object if the Registry Operator
      supports this operation via EPP, and logging out.

      This test will only be run if the *TLDSRSEPPDomTransfer02Approve* is set
      to yes.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 24.3 is used for login.

        --------------------------------------------------------------------------------
        Id                                    Description                      Type
        ------------------------------------- -------------------------------- ---------
        TLDSRSEPPDomTransfer02Approve         Yes, if the registry supports    Boolean
                                              the approve operation

        TLDSRSEPPDomTransfer02Name            Domain name to transfer          String

        TLDSRSEPPDomTransfer02AddPeriod       Yes, if the registry supports    Boolean
                                              adding a period to a transfer

        TLDSRSEPPDomTransfer02Period          Domain period type               Y/M

        TLDSRSEPPDomTransfer02PeriodValue     Domain period value              Number

        TLDSRSEPPDomTransfer02AuthInfo        Authorization info for domain,   String
                                              registrant or associated
                                              contacts if required

        TLDSRSEPPDomTransfer02AuthRoid        Roid for registrant or contact   String
                                              if
                                              TLDSRSEPPDomTransfer02AuthInfo
                                              is associated with registrant or
                                              contact object

        TLDSRSEPPDomTransfer02Ext01Uri        Extension 01 object URI          String

        TLDSRSEPPDomTransfer02Ext01Sl         Extension 01 schema location     String

        TLDSRSEPPDomTransfer02Ext01ExtName    Extension 01 name                String

        TLDSRSEPPDomTransfer02Ext01ExtValue   Extension 01 value for direct    String
                                              text node

        TLDSRSEPPDomTransfer02Ext01Field01    Extension 01 field name 01       String

        TLDSRSEPPDomTransfer02Ext01Value01    Extension 01 field value 01      String

        ...                                   Repeat for max y fields

        ...                                   Repeat for max x extensions
        --------------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The domain transfer command MUST complete with result code 1000 or 1001.

      The logout MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *TLDSRSEPPDomTransfer02Name* domain MUST exist in the domain
          database, and be available for transfer approve.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 24.8.\
          The login command MUST complete with result code 1000.

      2.  Create a domain transfer command with *TLDSRSEPPDomTransfer02Name*.

          a.  Add an Op attribute in transfer command with the value
              "approve".

          b.  If *TLDSRSEPPDomTransfer02AddPeriod* is true, add period part
              with period name from *TLDSRSEPPDomTransfer02Period* and period
              value from *TLDSRSEPPDomTransfer02PeriodValue.*

          c.  Add authinfo part with *TLDSRSEPPDomTransfer01AuthInfo*.

          d.  If *TLDSRSEPPDomTransfer02AuthRoid* is defined add a roid
              attribute to pw part with the value
              *TLDSRSEPPDomTransfer02AuthRoid*.

          e.  If domain transfer requires extra extension and values, create
              an extension part from *TLDSRSEPPDomTransfer02Ext01Uri* and
              *TLDSRSEPPDomTransfer02Ext01Sl* and fill in field name from
              *TLDSRSEPPDomTransfer02Ext01Field01* and values from
              *TLDSRSEPPDomTransfer02Ext01Value01*.

      The domain transfer command MUST complete with result code 1000 or 1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  TLDSRSEPPDomDelete01:
    Summary: Delete a domain
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, deleting a domain object and logging out.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 24.3 is also used for
      login.

        -----------------------------------------------------------------------------
        Id                                  Description                   Type
        ----------------------------------- ----------------------------- -----------
        TLDSRSEPPDomDelete01Name            Domain name to delete         String

        TLDSRSEPPDomDelete01Ext01Uri        Extension 01 object URI       String

        TLDSRSEPPDomDelete01Ext01Sl         Extension 01 schema location  String

        TLDSRSEPPDomDelete01Ext01ExtName    Extension 01 name             String

        TLDSRSEPPDomDelete01Ext01ExtValue   Extension 01 value for direct String
                                            text node

        TLDSRSEPPDomDelete01Ext01Field01    Extension 01 field name 01    String

        TLDSRSEPPDomDelete01Ext01Value01    Extension 01 field value 01   String

        ...                                 Repeat for max y fields

        ...                                 Repeat for max x extensions
        -----------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The domain delete command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *TLDSRSEPPDomDelete01Name* domain MUST exist in the domain database,
          and be available for delete.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 24.8.\
          The login command MUST complete with result code 1000.

      2.  Create a domain delete command with *TLDSRSEPPDomDelete01Name*.

          a.  If domain delete requires extra extension and values, create an
              extension part from *TLDSRSEPPDomDelete01Ext01Uri* and
              *TLDSRSEPPDomDelete01Ext01Sl* and fill in field name from
              *TLDSRSEPPDomDelete01Ext01Field01* and values from
              *TLDSRSEPPDomDelete01Ext01Value01*.

          b.  The domain delete command MUST complete with result code 1000 or
              1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  TLDSRSEPPConCreate01:
    Summary: Create a contact
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, creating a contact object and logging out.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 24.3 is also used for
      login.

        ------------------------------------------------------------------------------
        Id                                  Description                   Type
        ----------------------------------- ----------------------------- ------------
        TLDSRSEPPConCreate01Id              Contact ID to create          String

        TLDSRSEPPConCreate01PIntMand        Yes, if PostalInfo type INT   Boolean
                                            is mandatory

        TLDSRSEPPConCreate01PIntName        Contact PostalInfo Int Name   String

        TLDSRSEPPConCreate01PIntOrg         Contact PostalInfo Int Org    String

        TLDSRSEPPConCreate01PIntStreet1     Contact PostalInfo Int        String
                                            Street1

        TLDSRSEPPConCreate01PIntStreet2     Contact PostalInfo Int        String
                                            Street2, if mandatory

        TLDSRSEPPConCreate01PIntStreet3     Contact PostalInfo Int        String
                                            Street3, if mandatory

        TLDSRSEPPConCreate01PIntCity        Contact PostalInfo Int City   String

        TLDSRSEPPConCreate01PIntSp          Contact PostalInfo Int State  String
                                            or Province, if mandatory

        TLDSRSEPPConCreate01PIntPc          Contact PostalInfo Int        String
                                            Postcode, if mandatory

        TLDSRSEPPConCreate01PIntCc          Contact PostalInfo Int        String
                                            Country Code

        TLDSRSEPPConCreate01PLocMand        Yes if PostalInfo type LOC is Boolean
                                            mandatory

        TLDSRSEPPConCreate01PLocName        Contact PostalInfo Loc Name   String

        TLDSRSEPPConCreate01PLocOrg         Contact PostalInfo Loc Org    String

        TLDSRSEPPConCreate01PLocStreet1     Contact PostalInfo Loc        String
                                            Street1

        TLDSRSEPPConCreate01PLocStreet2     Contact PostalInfo Loc        String
                                            Street2, if mandatory

        TLDSRSEPPConCreate01PLocStreet3     Contact PostalInfo Loc        String
                                            Street3, if mandatory

        TLDSRSEPPConCreate01PLocCity        Contact PostalInfo Loc City   String

        TLDSRSEPPConCreate01PLocSp          Contact PostalInfo Loc State  String
                                            or Province, if mandatory

        TLDSRSEPPConCreate01PLocPc          Contact PostalInfo Loc        String
                                            Postcode, if mandatory

        TLDSRSEPPConCreate01PLocCc          Contact PostalInfo Loc        String
                                            Country Code

        TLDSRSEPPConCreate01Voice           Contact Voice telephone       String
                                            number, if mandatory

        TLDSRSEPPConCreate01Fax             Contact Fax telephone number, String
                                            if mandatory

        TLDSRSEPPConCreate01Email           Contact Email address         String

        TLDSRSEPPConCreate01Auth            Contact Auth Info, if         String
                                            mandatory

        TLDSRSEPPConCreate01Ext01Uri        Extension 01 object URI       String

        TLDSRSEPPConCreate01Ext01Sl         Extension 01 schema location  String

        TLDSRSEPPConCreate01Ext01ExtName    Extension 01 name             String

        TLDSRSEPPConCreate01Ext01ExtValue   Extension 01 value for direct String
                                            text node

        TLDSRSEPPConCreate01Ext01Field01    Extension 01 field name 01    String

        TLDSRSEPPConCreate01Ext01Value01    Extension 01 field value 01   String

        ...                                 Repeat for max y fields

        ...                                 Repeat for max x extensions
        ------------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The contact create command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *TLDSRSEPPConCreate01Id* domain MUST NOT exist in the domain
          database.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 24.8.\
          The login command MUST complete with result code 1000.

      2.  Create a contact create command with *TLDSRSEPPConCreate01Id*.

          a.  If *TLDSRSEPPConCreate01PIntMand* is yes, create a Postal Info
              type Int with appropriate fields from
              *TLDSRSEPPConCreate01PIntName*, *TLDSRSEPPConCreate01PIntOrg*,
              *TLDSRSEPPConCreate01PIntStreet1*,
              *TLDSRSEPPConCreate01PIntStreet2*,
              *TLDSRSEPPConCreate01PIntStreet3*,
              *TLDSRSEPPConCreate01PIntCity*, *TLDSRSEPPConCreate01PIntSp*,
              *TLDSRSEPPConCreate01PIntPc* and *TLDSRSEPPConCreate01PIntCc*.

          b.  If *TLDSRSEPPConCreate01PLocMand* is yes, create a Postal Info
              type Loc with appropriate fields from
              *TLDSRSEPPConCreate01PLocName*, *TLDSRSEPPConCreate01PLocOrg*,
              *TLDSRSEPPConCreate01PLocStreet1*,
              *TLDSRSEPPConCreate01PLocStreet2*,
              *TLDSRSEPPConCreate01PLocStreet3*,
              *TLDSRSEPPConCreate01PLocCity*, *TLDSRSEPPConCreate01PLocSp*,
              *TLDSRSEPPConCreate01PLOcPc* and *TLDSRSEPPConCreate01PLocCc*.

          c.  Add *TLDSRSEPPConCreate01Voice*, *TLDSRSEPPConCreate01Fax*,
              *TLDSRSEPPConCreate01Email* and *TLDSRSEPPConCreate01Auth*
              fields.

          d.  If contact create requires extra extension and values, create an
              extension part from *TLDSRSEPPConCreate01Ext01Uri* and
              *TLDSRSEPPConCreate01Ext01Sl* and fill in field name from
              *TLDSRSEPPConCreate01Ext01Field01* and values from
              *TLDSRSEPPConCreate01Ext01Value01*.

          e.  The contact create command MUST complete with result code 1000
              or 1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  TLDSRSEPPConDelete01:
    Summary: Delete a contact
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, deleting a contact object and logging out.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 24.3 is used for login.

        -----------------------------------------------------------------------------
        Id                                  Description                   Type
        ----------------------------------- ----------------------------- -----------
        TLDSRSEPPConDelete01Id              ContactID to delete           String

        TLDSRSEPPConDelete01Ext01Uri        Extension 01 object URI       String

        TLDSRSEPPConDelete01Ext01Sl         Extension 01 schema location  String

        TLDSRSEPPConDelete01Ext01ExtName    Extension 01 name             String

        TLDSRSEPPConDelete01Ext01ExtValue   Extension 01 value for direct String
                                            text node

        TLDSRSEPPConDelete01Ext01Field01    Extension 01 field name 01    String

        TLDSRSEPPConDelete01Ext01Value01    Extension 01 field value 01   String

        ...                                 Repeat for max y fields

        ...                                 Repeat for max x extensions
        -----------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The contact delete command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *TLDSRSEPPConDelete01Id* domain MUST exist in the Registry Operator
          domain database, and be available for delete.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 24.8.\
          The login command MUST complete with result code 1000.

      2.  Create a contact delete command with *TLDSRSEPPConDelete01Id*.

          a.  If contact delete requires extra extension and values, create an
              extension part from *TLDSRSEPPConDelete01Ext01Uri* and
              *TLDSRSEPPConDelete01Ext01Sl* and fill in field name from
              *TLDSRSEPPConDelete01Ext01Field01* and values from
              *TLDSRSEPPConDelete01Ext01Value01*.

          b.  The contact delete command MUST complete with result code 1000
              or 1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  TLDSRSEPPHostDelete01:
    Summary: Delete a host
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, deleting a Host Object and logging out.

      If the Registry Operator does not support Host Objects, this test will
      not be performed.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 24.3 is used for login.

        ------------------------------------------------------------------------------
        Id                                   Description                   Type
        ------------------------------------ ----------------------------- -----------
        TLDSRSEPPHostDelete01Name            Host name to delete           String

        TLDSRSEPPHostDelete01Ext01Uri        Extension 01 object URI       String

        TLDSRSEPPHostDelete01Ext01Sl         Extension 01 schema location  String

        TLDSRSEPPHostDelete01Ext01ExtName    Extension 01 name             String

        TLDSRSEPPHostDelete01Ext01ExtValue   Extension 01 value for direct String
                                             text node

        TLDSRSEPPHostDelete01Ext01Field01    Extension 01 field name 01    String

        TLDSRSEPPHostDelete01Ext01Value01    Extension 01 field value 01   String

        ...                                  Repeat for max y fields

        ...                                  Repeat for max x extensions
        ------------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The host delete command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *TLDSRSEPPHostDelete01Name* host MUST exist in the Registry Operator
          domain database, and be available for delete.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 24.8.\
          The login command MUST complete with result code 1000.

      2.  Create a contact delete command with *TLDSRSEPPHostDelete01Id*.

          a.  If contact delete requires extra extension and values, create an
              extension part from *TLDSRSEPPHostDelete01Ext01Uri* and
              *TLDSRSEPPHostDelete01Ext01Sl* and fill in field name from
              *TLDSRSEPPHostDelete01Ext01Field01* and values from
              *TLDSRSEPPHostDelete01Ext01Value01*.

          b.  The contact delete command MUST complete with result code 1000
              or 1001.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  TLDSRSEPPHostUpdate01:
    Summary: Update a host
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, updating a Host Object and logging out.

      If the Registry Operator does not support Host Objects, this test will
      not be performed.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 24.3 is used for login.

        -----------------------------------------------------------------------------
        Id                                   Description                  Type
        ------------------------------------ ---------------------------- -----------
        TLDSRSEPPHostUpdate01Name            Host name to update          String

        TLDSRSEPPHostUpdate01Ipv4            IPv4 address to add          String

        TLDSRSEPPHostUpdate01Ext01Uri        Extension 01 object URI      String

        TLDSRSEPPHostUpdate01Ext01Sl         Extension 01 schema location String

        TLDSRSEPPHostUpdate01Ext01ExtName    Extension 01 name            String

        TLDSRSEPPHostUpdate01Ext01ExtValue   Extension 01 value for       String
                                             direct text node

        TLDSRSEPPHostUpdate01Ext01Field01    Extension 01 field name 01   String

        TLDSRSEPPHostUpdate01Ext01Value01    Extension 01 field value 01  String

        ...                                  Repeat for max y fields

        ...                                  Repeat for max x extensions
        -----------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The host update command MUST complete with result code 1000.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *TLDSRSEPPHostUpdate01Name* host MUST exist in the Registry Operator
          domain database, and be available for update.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 24.8.\
          The login command MUST complete with result code 1000.

      2.  Create a host update command with *TLDSRSEPPHostUpdate01Name* and
          add IPv4 address *TLDSRSEPPHostUpdate01Ipv4*

          a.  If host update requires extra extension and values, create an
              extension part from *TLDSRSEPPHostUpdate01Ext01Uri* and
              *TLDSRSEPPHostUpdate01Ext01Sl* and fill in field name from
              *TLDSRSEPPHostUpdate01Ext01Field01* and values from
              *TLDSRSEPPHostUpdate01Ext01Value01*.

          b.  The host update command MUST complete with result code 1000.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  TLDSRSEPPConUpdate01:
    Summary: Update a contact
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, updating a contact object and logging out.

      ## Inputs

      The following information is needed as input for this test case:

      The full information from the input table in 24.3 is also used for
      login.

        --------------------------------------------------------------------------------------------
        Id                                      Description                              Type
        --------------------------------------- ------------- -------------------------- -----------
        TLDSRSEPPContactUpdate01Id              Contact ID to                            String
                                                update

        TLDSRSEPPContactUpdate01Email                         Email address to set       String

        TLDSRSEPPContactUpdate01Ext01Uri        Extension 01                             String
                                                object URI

        TLDSRSEPPContactUpdate01Ext01Sl         Extension 01                             String
                                                schema
                                                location

        TLDSRSEPPContactUpdate01Ext01ExtName                  Extension 01 name          String

        TLDSRSEPPContactUpdate01Ext01ExtValue   Extension 01                             String
                                                value for
                                                direct text
                                                node

        TLDSRSEPPContactUpdate01Ext01Field01    Extension 01                             String
                                                field name 01

        TLDSRSEPPContactUpdate01Ext01Value01    Extension 01                             String
                                                field value
                                                01

        ...                                     Repeat for
                                                max y fields

        ...                                     Repeat for
                                                max x
                                                extensions
        --------------------------------------------------------------------------------------------

      ## Outcome(s)

      The login command MUST complete with result code 1000.

      The contact update command MUST complete with result code 1000.

      The logout command MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *TLDSRSEPPContactUpdate01Id* contact MUST exist in the Registry
          Operator domain database, and be available for update.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Perform the same login as the login step in 24.8.\
          The login command MUST complete with result code 1000.

      2.  Create a contact update command with *TLDSRSEPPContactUpdate01Id*
          and set *TLDSRSEPPContactUpdate01Email*

          a.  If contact update requires extra extension and values, create an
              extension part from *TLDSRSEPPContactUpdate01Ext01Uri* and
              *TLDSRSEPPContactUpdate01Ext01Sl* and fill in field name from
              *TLDSRSEPPContactUpdate01Ext01Field01* and values from
              *TLDSRSEPPContactUpdate01Ext01Value01*.

          b.  The contact update command MUST complete with result code 1000.

      3.  Create a logout command.\
          The logout command MUST complete with result code 1500.
  TLDSRSEPPDomUpdate01:
    Summary: Add DNSSEC records to a domain
    Description: |
      ## Objective

      This test verifies compliance of the EPP server with RFC's for logging
      in, update a domain object with DNSSEC records and logging out. The test
      then verifies that the changes are visible in Whois within 60 minutes.

      ## Inputs

      The following information is needed as input for this test case:

      As the test verifies Whois visibility, the IP address of a Whois server
      that responds on port 43 is needed.

      The full information from the input table in 24.3 is also used for
      login.

      +------------------------------+---------------------------+---------+
      | Id                           | Description               | Type    |
      +==============================+===========================+=========+
      | TLDSRSWhoisIPv4Port43        | The IPv4 address of the   | String  |
      |                              | Whois service on port 43  |         |
      +------------------------------+---------------------------+---------+
      | TLDSRSEPPDomUpdate01Name     | Domain name to update     | String  |
      +------------------------------+---------------------------+---------+
      | TLDSRSEPPDomUpdate01Ext01Uri | Extension 01 object URI   | String  |
      +------------------------------+---------------------------+---------+
      | TLDSRSEPPDomUpdate01Ext01Sl  | Extension 01 schema       | String  |
      |                              | location                  |         |
      +------------------------------+---------------------------+---------+
      | TLDS                         | Extension 01 name         | String  |
      | RSEppDomUpdate01Ext01ExtName |                           |         |
      +------------------------------+---------------------------+---------+
      | TLDSR                        | Extension 01 value for    | String  |
      | SEppDomUpdate01Ext01ExtValue | direct text node          |         |
      +------------------------------+---------------------------+---------+
      | TLDS                         | Extension 01 field name   | String  |
      | RSEppDomUpdate01Ext01Field01 | 01                        |         |
      +------------------------------+---------------------------+---------+
      | TLDS                         | Extension 01 field value  | String  |
      | RSEppDomUpdate01Ext01Value01 | 01                        |         |
      +------------------------------+---------------------------+---------+
      | ...                          | Repeat for max y fields   |         |
      +------------------------------+---------------------------+---------+
      | ...                          | Repeat for max x          |         |
      |                              | extensions                |         |
      +------------------------------+---------------------------+---------+
      | TLDSRSEPPDomUpdate01KeyType  | D for dsData              | String  |
      |                              | specification             |         |
      |                              |                           |         |
      |                              | K for keyData             |         |
      |                              | specification             |         |
      |                              |                           |         |
      |                              | DK for dsData and keyData |         |
      |                              | specification             |         |
      +------------------------------+---------------------------+---------+
      | TL                           | Value for dsData 01       | String  |
      | DSRSEppDomUpdate01DsKeyTag01 | keytag                    |         |
      +------------------------------+---------------------------+---------+
      | TLDSRSEPPDomUpdate01DsAlg01  | Value for dsData 01 alg   | Number  |
      +------------------------------+---------------------------+---------+
      | TLDSRS                       | Value for dsData 01       | Number  |
      | EppDomUpdate01DsDigestType01 | digest type               |         |
      +------------------------------+---------------------------+---------+
      | TL                           | Value for dsData 01       | String  |
      | DSRSEppDomUpdate01DsDigest01 | digest                    |         |
      +------------------------------+---------------------------+---------+
      | ...                          | Repeat for max x dsData   |         |
      |                              | records                   |         |
      +------------------------------+---------------------------+---------+
      | T                            | Value for keyData 01      | Number  |
      | LDSRSEppDomUpdate01KdFlags01 | flags                     |         |
      +------------------------------+---------------------------+---------+
      | TLDS                         | Value for keyData 01      | Number  |
      | RSEppDomUpdate01KdProtocol01 | protocol                  |         |
      +------------------------------+---------------------------+---------+
      | TLDSRSEPPDomUpdate01KdAlg01  | Value for keyData 01 alg  | Number  |
      +------------------------------+---------------------------+---------+
      | TL                           | Value for keyData 01      | String  |
      | DSRSEppDomUpdate01KdPubKey01 | pubKey                    |         |
      +------------------------------+---------------------------+---------+
      | ...                          | Repeat for max x keyData  |         |
      |                              | records                   |         |
      +------------------------------+---------------------------+---------+

      ## Outcome(s)

      The initial Whois lookup MUST NOT return any DNSSEC Signed information
      about *TLDSRSEPPDomUpdate01Name*.

      The domain update command MUST complete with result code 1000 or 1001.

      The logout command MUST complete with result code 1500.

      *TLDSRSEPPDomUpdate01Name* MUST be visible as a DNSSEC signed domain in
      Whois within 60 minutes.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *TLDSRSEPPDomUpdate01RegistrantId* MUST exist in Registry Operator
          contact database

      -   *TLDSRSEPPDomUpdate01Ns01* MUST exist in Registry Operator host
          database, and be configured to serve domain
          *TLDSRSEPPDomUpdate01Name* with correct DNSSEC records.

      -   *TLDSRSEPPDomUpdate01Ns02* MUST exist in Registry Operator host
          database, and be configured to serve domain
          *TLDSRSEPPDomUpdate01Name* with correct DNSSEC records.

      ## Special procedural requirements

      Abort the test if any Whois query takes longer than 10 seconds.

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Verify that the *EPPDomUpdate01Name* is visible in Whois as a DNSSEC
          unsigned domain.

      2.  Perform the same login as the login step in 24.8.\
          The login command MUST complete with result code 1000.

      3.  Create a domain update command with *TLDSRSEPPDomUpdate01Name*.

          a.  Add one or more secDNS records with dsData or keyData or both,
              depending on the value of *TLDSRSEPPDomUpdate01KeyType*. Use
              appropriate values from *TLDSRSEPPDomUpdate01DsKeyTag01*,
              *TLDSRSEPPDomUpdate01DsAlg01*,
              *TLDSRSEPPDomUpdate01DsDigestType01*,
              *TLDSRSEPPDomUpdate01DsDigest01*,
              *TLDSRSEPPDomUpdate01KdFlags01*,
              *TLDSRSEPPDomUpdate01KdProtocol01*,
              *TLDSRSEPPDomUpdate01KdAlg01*, *TLDSRSEPPDomUpdate01kdPubKey01*.

          b.  If domain update requires extra extension and values, create an
              extension part from *TLDSRSEPPDomUpdate01Ext01Uri* and fill in
              field name from *TLDSRSEPPDomUpdate01Ext01Field01* and values
              from *TLDSRSEPPDomUpdate01Ext01Value01*.

          c.  The domain update command MUST complete with result code 1000 or
              1001.

      4.  Create a logout command.\
          The logout command MUST complete with result code 1500.

      5.  Verify that the *EPPDomUpdate01Name* is visible in Whois as a DNSSEC
          signed domain within 60 minutes.

      # EPP LOGIN and LOGOUT to TLD SRS EPP System

      ## Description

      Almost all SRS GW test cases below do an EPP LOGIN to the TLD SRS EPP
      System, followed by an EPP INFO command and then an EPP LOGOUT. The
      steps for LOGIN and LOGOUT are described here.

      ## Inputs

      The following data is needed to connect and logon to the TLS SRS EPP
      System and is found in the pdtepp.xml data file.

        -------------------------------------------------------------------------------
        Id                              Description                        Type
        ------------------------------- ---------------------------------- ------------
        TLDSRSEPPLoginId                Login ID for EPP test user         String

        TLDSRSEPPLoginPwd               Login password for EPP test user   String

        TLDSRSEPPNsDomainUri            Object URI for Domain Object       String

        TLDSRSEPPNsDomainSl             Schema location for Domain Object  String

        TLDSRSEPPNsContactUri           Object URI for Contact Object      String

        TLDSRSEPPNsContactSl            Schema location for Contact Object String

        TLDSRSEPPNsHostUri              Object URI for Host Object. If the String
                                        TLD is not supporting Host
                                        Objects, this field is not
                                        manadatory.

        TLDSRSEPPNsHostSl               Schema location for Host Object.   String
                                        If the TLD is not supporting Host
                                        Objects, this field is not
                                        manadatory.

        TLDSRSEPPExtSecDnsUri           Object URI for Sec Dns Object      String
                                        Extension

        TLDSRSEPPExtSecDnsSl            Schema location for Sec Dns Object String
                                        Extension

        TLDSRSEPPExtUri-\[1..n\]        Object URI for extension 1..n      String

        TLDSRSEPPExtSl-\[1..n\]         Schema location for extensions     String
                                        1..n

        TLDSRSEPPServerIPv4             IPv4 address to EPP server         String

        TLDSRSEPPServerIPv6             IPv6 address to EPP server if TLD  String
                                        supports IPv6

        TLDSRSEPPServerPort             Port number to EPP server          Number

        TLDSRSEPPClientCertificate      Yes if TLD requires client         Boolean
                                        certificate

        TLDSRSEPPClientKeyPairPem       PEM file with valid client         PEM file
                                        certificate for test user (Public
                                        and private)

        TLDSRSEPPClientKeyPairPwd       Password for client certificate    String
                                        for test user

        TLDSRSEPPServerCertificatePem   PEM file with server certificate   PEM file
                                        (Public)
        -------------------------------------------------------------------------------

      ## Ordered description of steps to LOGIN over IPv4

      1.  Connect to *TLDSRSEPPServerIPv4*.

      2.  Create a login command with *TLDSRSEPPLoginId* and password
          *TLDSRSEPPLoginPwd*.

          a.  Use the *TLDSRSEPPNsDomainUri*, *TLDSRSEPPNsDomainSl*,
              *TLDSRSEPPNsContactUri*, *TLDSRSEPPNsContactSl*,
              *TLDSRSEPPNsHostUri* and *TLDSRSEPPNsHostSl* to build the login
              message.

          b.  Add the secDNS extension with *TLDSRSEPPExtSecDnsUri* and
              *TLDSRSEPPExtSecDnsSl*.

          c.  Add zero or more extra extensions with *TLDSRSEPPExtUri* and
              *TLDSRSEPPExtSl*.

          d.  If the server requires client certificate, connect with client
              certificate *TLDSRSEPPClientKeyPairPem.*

      3.  The login command MUST complete with result code 1000.

      To LOGIN over IPv6, replace *TLDSRSEPPServerIPv4* with
      *TLDSRSEPPServerIPv6*.

      ## Ordered description of steps to LOGOUT

      1.  Create a logout command.

      2.  The logout command MUST complete with result code 1500.

      # EPP LOGIN and LOGOUT to SRS GW EPP System

      ## Description

      Almost all SRS GW test cases below do an EPP LOGIN to the SRS GW EPP
      System, followed by an EPP transformation command unique for the test
      case, and then finally an EPP LOGOUT. The steps for LOGIN and LOGOUT are
      described here.

      ## Inputs

      The following data is needed to connect and logon to the SRS GW EPP
      System and is found in the srsgwepp.xml data file.

        ------------------------------------------------------------------------------
        Id                             Description                        Type
        ------------------------------ ---------------------------------- ------------
        SRSGwEppLoginId                Login ID for EPP test user         String

        SRSGwEppLoginPwd               Login password for EPP test user   String

        SRSGwEppNsDomainUri            Object URI for Domain Object       String

        SRSGwEppNsDomainSl             Schema location for Domain Object  String

        SRSGwEppNsContactUri           Object URI for Contact Object      String

        SRSGwEppNsContactSl            Schema location for Contact Object String

        SRSGwEppNsHostUri              Object URI for Host Object. If the String
                                       TLD is not supporting Host
                                       Objects, this field is not
                                       manadatory.

        SRSGwEppNsHostSl               Schema location for Host Object.   String
                                       If the TLD is not supporting Host
                                       Objects, this field is not
                                       manadatory.

        SRSGwEppExtSecDnsUri           Object URI for Sec Dns Object      String
                                       Extension

        SRSGwEppExtSecDnsSl            Schema location for Sec Dns Object String
                                       Extension

        SRSGwEppExtUri-\[1..n\]        Object URI for extension 1..n      String

        SRSGwEppExtSl-\[1..n\]         Schema location for extensions     String
                                       1..n

        SRSGwEppServerIPv4             IPv4 address to EPP server         String

        SRSGwEppServerIPv6             IPv6 address to EPP server if TLD  String
                                       supports IPv6

        SRSGwEppServerPort             Port number to EPP server          Number

        SRSGwEppClientCertificate      Yes if TLD requires client         Boolean
                                       certificate

        SRSGwEppClientKeyPairPem       PEM file with valid client         PEM file
                                       certificate for test user (Public
                                       and private)

        SRSGwEppClientKeyPairPwd       Password for client certificate    String
                                       for test user

        SRSGwEppServerCertificatePem   PEM file with server certificate   PEM file
                                       (Public)
        ------------------------------------------------------------------------------

      ## Ordered description of steps to LOGIN over IPv4

      1.  Connect to *SRSGwEppServerIPv4*.

      2.  Create a login command with *SRSGwEppLoginId* and password
          *SRSGwEppLoginPwd*.

          a.  Use the *SRSGwEppNsDomainUri*, *SRSGwEppNsDomainSl*,
              *SRSGwEppNsContactUri*, *SRSGwEppNsContactSl*,
              *SRSGwEppNsHostUri* and *SRSGwEppNsHostSl* to build the login
              message.

          b.  Add the secDNS extension with *SRSGwEppExtSecDnsUri* and
              *SRSGwEppExtSecDnsSl*.

          c.  Add zero or more extra extensions with *SRSGwEppExtUri* and
              *SRSGwEppExtSl*.

          d.  If the server requires a client certificate, connect with client
              certificate *SRSGwEppClientKeyPairPem.*

      3.  The login command MUST complete with result code 1000.

      To LOGIN over IPv6, replace *SRSGwEppServerIPv4*with
      *SRSGwEppServerIPv6*.

      ## Ordered description of steps to LOGOUT

      1.  Create a logout command.

      2.  The logout command MUST complete with result code 1500.
  SRSGWAddrVer:
    Summary: Verify IP addresses to SRS Gateway System
    Description: |
      ## Objective

      This test verifies that the SRS GW IP address or addresses seem to be
      routed to the country that the gateway is supposed to reside in.

      ## Inputs

      -   SRSGwEppServerIPv4 and SRSGwEppServerIPv6 (see 39.2).

      -   Information from ICANN on which country the SRS GW is supposed to
          reside in.

      ## Outcome(s)

      PASS if the address or addresses match what was expected.

      ## Environmental needs

      -   Tool for Whois lookup to Regional Internet Registries (RIRs)

      -   IPv4 connectivity

      ## Special procedural requirements

      Abort the test if any operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      This test will be performed from all of the nodes.

      1.  Do a lookup of the address or addresses to all five RIRs.

      2.  Inspect the result and determine where the address or addresses
          reside.

      3.  Set PASS or FAIL on the Test Case.
  SRSGWConnTest:
    Summary: Verify connectivity
    Description: |
      ## Objective

      This test verifies the connectivity to the SRS GW EPP provisioning
      system by doing a login and then a logout. The test will be performed
      over IPv4, and also IPv6, if the TLD supports IPv6 on the SRS GW EPP
      service and the local area test node supports IPv6.

      This test case does not test connection to the TLD SRS since that is
      already tested in the equivalent test case in Test Sequence One.

      ## Inputs

      See section 39.2 for the information needed to login.

      ## Outcome(s)

      The login command from each probe MUST complete with result code 1000

      The logout command from each probe MUST complete with result code 1500.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   IPv6 connectivity (if available)

      ## Special procedural requirements

      Abort the test if any operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      This test will be performed from all of the nodes. For IPv4, follow the
      steps in section 39 (\"EPP LOGIN and LOGOUT to SRS GW EPP System\").

      If TLD supports IPv6 and if the local area test node supports IPv6,
      follow the steps in section 39, but replace SRSGwEppServerIPv4 with
      SRSGwEppServerIPv6.
  SRSGWDomCreate01:
    Summary: Create a domain and verify that TLD SRS is updated
    Description: |
      ## Objective

      This test verifies that a domain name created through the SRS GW EPP
      system is correctly synchronized with the TLD SRS EPP system.

      ## Inputs

      -   The data needed for EPP LOGIN and EPP INFO to the TLD SRS EPP system
          is found in section 38.2.

      -   The data needed for EPP LOGIN and EPP INFO to the SRS GW EPP system
          is found in section 39.2.

      -   The data needed for the EPP transformation in this test case is
          listed in the table below and is found in the srsgwepp.xml data
          file.

        -----------------------------------------------------------------------------
        Id                                 Description                   Type
        ---------------------------------- ----------------------------- ------------
        SRSGwEppDomCreate01Name            Domain name to create         String

        SRSGwEppDomCreate01Period          Domain period type            Y/M

        SRSGwEppDomCreate01PeriodValue     Domain period value           Number

        SRSGwEppDomCreate01RegistrantId    Domain registrant id          String

        SRSGwEppDomCreate01AdminId         Domain Admin id if required   String

        SRSGwEppDomCreate01TechId          Domain Tech id if required    String

        SRSGwEppDomCreate01BillingId       Domain Billing id if required String

        SRSGwEppPDomCreate01AuthPw         AuthPw if requited            String

        SRSGwEppDomCreate01Ns01            Host Object or Host Attribute String
                                           name for ns01

        SRSGwEppDomCreate01Ns02            Host Object or Host Attribute String
                                           name for ns02

        SRSGwEppDomCreate01Ext01Uri        Extension 01 object URI       String

        SRSGwEppDomCreate01Ext01Sl         Extension 01 schema location  String

        SRSGwEppDomCreate01Ext01ExtName    Extension 01 name             String

        SRSGwEppDomCreate01Ext01ExtValue   Extension 01 value for direct String
                                           text node

        SRSGwEppDomCreate01Ext01Field01    Extension 01 field name 01    String

        SRSGwEppDomCreate01Ext01Value01    Extension 01 field value 01   String

        ...                                Repeat for max y fields

        ...                                Repeat for max x extensions
        -----------------------------------------------------------------------------

      ## Outcome(s)

      -   The login step preceding both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1000.

      -   The logout step following both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1500.

      -   Initial EPP INFO step to TLD SRS EPP system MUST complete with
          result code 2303.

      -   Initial EPP INFO step to SRS GW EPP system MUST complete with result
          code 2303.

      -   The EPP create step MUST complete with result code 1000 or 1001.

      -   Final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      ## Environmental needs

      -   EPP test scripts

      -   IPv4 connectivity

      -   *SRSGwEppDomCreate01Name* MUST NOT exist in the TLD domain database.

      ```{=html}
      <!-- -->
      ```
      -   *SRSGwEppDomCreate01RegistrantId* MUST exist in TLD contact database

      -   *SRSGwEppDomCreate01Ns01* MUST exist in TLD host database.

      -   *SRSGwEppDomCreate01Ns02* MUST exist in TLD host database.

      -   *SRSGwEppDomCreate01Ns01* and *SRSGwEppDomCreate01Ns02* MUST be
          configured to serve domain *SRSGwEppDomCreate01Name* (if the NS is
          verified to be authoritative for the domain name as part of the
          registration process).

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Initial EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomCreate01Name*. The command MUST complete with result
              code 2303 (\"Object does not exist\").

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      2.  Initial EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomCreate01Name*. The command MUST complete with result
              code 2303 (\"Object does not exist\").

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      3.  EPP transformation

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create a domain create command with *SRSGwEppDomCreate01Name*.

              i.  Use period name from *SRSGwEppDomCreate01Period* and period
                  value from *SRSGwEppDomCreate01PeriodValue*.

              ii. Use name server 1 from *SRSGwEppDomCreate01Ns01* and name
                  server 2 from *SRSGwEppDomCreate01Ns02*.

              iii. If domain create requires extra extensions and values,
                   create an extension part from *SRSGwEppDomCreate01Ext01Uri*
                   and fill in field name from *SRSGwEppDomCreateExt01Field01*
                   and values from *SRSGwEppDomCreateExt01Value01*.

              iv. The domain create command MUST complete with result code
                  1000 or 1001.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      4.  Final EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomCreate01Name*. The command MUST complete with result
              code 1000.

          c.  Temporarily save the result of the command.

          d.  Create a logout command. The logout command MUST complete with
              result code 1500.

      5.  Final EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomCreate01Name*. The command MUST complete with result
              code 1000.

          c.  Temporarily save the result of the command.

          d.  Create a logout command. The logout command MUST complete with
              result code 1500.

      6.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.
  SRSGWDomCreate02:
    Summary: Add hosts to a domain and verify that TLD SRS is updated
    Description: |
      The name of this test case is misleading, but has set to name similar to
      the equivalent RST EPP Test Case. This is actually a domain update test
      case.

      ## Objective

      This test verifies that subordinate Host Objects created for a domain
      through the SRS GW EPP system are correctly synchronized with the TLD
      SRS EPP system.

      If the TLD does not support Host Objects, the test uses Host Attributes
      to insert the subordinate name servers for the domain.

      ## Inputs

      -   The data needed for EPP LOGIN and EPP INFO to the TLD SRS EPP system
          is found in section 38.2.

      -   The data needed for EPP LOGIN and EPP INFO to the SRS GW EPP system
          is found in section 39.2.

      -   The data needed for the EPP transformation in this test case is
          listed in the table below and is found in the srsgwepp.xml data
          file.

        -----------------------------------------------------------------------------
        Id                                     Description                 Type
        -------------------------------------- --------------------------- ----------
        SRSGwEppDomCreate02Name                Domain name to update       String

        SRSGwEppDomCreate02Ns01                Subordinate Host Object or  String
                                               Host Attribute name for
                                               name server 01

        SRSGwEppDomCreate02Ns01Ipv4            Subordinate name server 01  String
                                               IPv4 address

        SRSGwEppDomCreate02Ns01Ipv6            Subordinate name server 01  String
                                               IPv6 address

        SRSGwEppDomCreate02Ns02                Subordinate Host Object or  String
                                               Host Attribute name for
                                               name server 02

        SRSGwEppDomCreate02Ns02Ipv4            Subordinate name server 02  String
                                               IPv4 address

        SRSGwEppDomCreate02Ns02Ipv6            Subordinate name server 02  String
                                               IPv6 address

        SRSGwEppDomCreate02UpdExt01Uri         Extension 01 object URI     String

        SRSGwEppDomCreate02UpdExt01Sl          Extension 01 schema         String
                                               location

        SRSGwEppDomCreate02UpdExt01ExtName     Extension 01 name           String

        SRSGwEppDomCreate02UpdExt01ExtValue    Extension 01 value for      String
                                               direct text node

        SRSGwEppDomCreate02UpdExt01Field01     Extension 01 field name 01  String

        SRSGwEppDomCreate02UpdExt01Value01     Extension 01 field value 01 String

        ...                                    Repeat for max y fields for
                                               Update

        ...                                    Repeat for max x extensions
                                               for Update

        SRSGwEppDomCreate02Ns01Ext01Uri        Extension 01 object URI     String

        SRSGwEppDomCreate02Ns01Ext01Sl         Extension 01 schema         String
                                               location

        SRSGwEppDomCreate02Ns01Ext01ExtName    Extension 01 name           String

        SRSGwEppDomCreate02Ns01Ext01ExtValue   Extension 01 value for      String
                                               direct text node

        SRSGwEppDomCreate02Ns01Ext01Field01    Extension 01 field name 01  String

        SRSGwEppDomCreate02Ns01Ext01Value01    Extension 01 field value 01 String

        ...                                    Repeat for max y fields for
                                               name server 01

        ...                                    Repeat for max x extensions
                                               for name server 01

        SRSGwEppDomCreate02Ns02Ext01Uri        Extension 01 object URI     String

        SRSGwEppDomCreate02Ns02Ext01Sl         Extension 01 schema         String
                                               location

        SRSGwEppDomCreate02Ns02Ext01ExtName    Extension 01 name           String

        SRSGwEppDomCreate02Ns02Ext01ExtValue   Extension 01 value for      String
                                               direct text node

        SRSGwEppDomCreate02Ns02Ext01Field01    Extension 01 field name 01  String

        SRSGwEppDomCreate02Ns02Ext01Value01    Extension 01 field value 01 String

        ...                                    Repeat for max y fields for
                                               name server 02

        ...                                    Repeat for max x extensions
                                               for name server 02
        -----------------------------------------------------------------------------

      ## Outcome(s)

      -   The login step preceding both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1000.

      -   The logout step following both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1500.

      -   Initial EPP INFO step to TLD SRS EPP system MUST complete with
          result code 1000. The result MUST NOT list neither
          *SRSGwEppDomCreate02Ns01* nor *SRSGwEppDomCreate02Ns02* as name
          servers for *SRSGwEppDomCreate02Name*.

      -   Initial EPP INFO step to SRS GW EPP system MUST complete with result
          code 1000. The result MUST NOT list neither
          *SRSGwEppDomCreate02Ns01* nor *SRSGwEppDomCreate02Ns02* as name
          servers for *SRSGwEppDomCreate02Name*.

      -   The two INFO commands MUST give equal results.

      -   The EPP update steps MUST complete with result code 1000 or 1001.

      -   Final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data

      -   The two INFO commands MUST give equal results.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *SRSGwEppDomCreate02Name* MUST exist in TLD database.

      -   *SRSGwEppDomCreate02RegistrantId* MUST exist in TLD contact database

      -   *SRSGwEppDomCreate02Ns01* MUST be configured to serve domain
          *SRSGwEppDomCreate02Name*.

      -   *SRSGwEppDomCreate02Ns02* MUST be configured to serve domain
          *SRSGwEppDomCreate02Name*.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Initial EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomCreate02Name*. The command MUST complete with result
              code 1000.

          c.  Temporarily save the result of the command.

          d.  Create a logout command. The logout command MUST complete with
              result code 1500.

      2.  Initial EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomCreate02Name*. The command MUST complete with result
              code 1000.

          c.  Temporarily save the result of the command.

          d.  Create a logout command. The logout command MUST complete with
              result code 1500.

      3.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.

          c.  The result MUST NOT list neither *SRSGwEppDomCreate02Ns01* nor
              *SRSGwEppDomCreate02Ns02* as name servers for
              *SRSGwEppDomCreate02Name*.

      4.  EPP transformation

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  If the EPP system supports Host Objects, perform the following
              two host create commands, else skip them.

              i.  Create a host create command for subordinate host
                  *SRSGwEppDomCreate02Ns01* with IPv4 address
                  *SRSGwEppDomCreate02Ns01Ipv4* and/or IPv6 address
                  *SRSGwEppDomCreate02Ns01Ipv6.* The host create command MUST
                  complete with result code 1000 or 1001.

              ii. Create a host create command for subordinate host
                  *SRSGwEppDomCreate02Ns02* with IPv4 address
                  *SRSGwEppDomCreate02Ns02Ipv4* and/or IPv6 address
                  *SRSGwEppDomCreate02Ns02Ipv6.* The host create command MUST
                  complete with result code 1000 or 1001.

          c.  Create a domain update command with *SRSGwEppDomCreate02Name*
              and hosts *SRSGwEppDomCreate02Ns01* and
              *SRSGwEppDomCreate02Ns02.*

              i.  If the EPP system supports Host Objects, use Host Objects.

              ii. If the EPP system does not support Host Objects, use Host
                  Attributes.

              iii. The domain update command MUST complete with result code
                   1000 or 1001.

          d.  Create a logout command. The logout command MUST complete with
              result code 1500.

      5.  Final EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomCreate02Name*. The command MUST complete with result
              code 1000.

          c.  Temporarily save the result of the command.

          d.  Create a logout command. The logout command MUST complete with
              result code 1500.

      6.  Final EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomCreate02Name*. The command MUST complete with result
              code 1000.

          c.  Temporarily save the result of the command.

          d.  Create a logout command. The logout command MUST complete with
              result code 1500.

      7.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.
  SRSGWDomCreate03:
    Summary: Create DNSSEC-signed domain and verify TLD SRS is updated
    Description: |
      ## Objective

      This test verifies that a domain object with DNSSEC records created
      through the SRS GW EPP system is correctly synchronized with the TLD SRS
      EPP system.

      ## Inputs

      -   The data needed for EPP LOGIN and EPP INFO to the TLD SRS EPP system
          is found in section 38.2.

      -   The data needed for EPP LOGIN and EPP INFO to the SRS GW EPP system
          is found in section 39.2.

      -   The data needed for the EPP transformation in this test case is
          listed in the table below and is found in the srsgwepp.xml data
          file.

      +-----------------------------+-----------------------------+---+---------+
      | Id                          | Description                 |   | Type    |
      +=============================+=============================+===+=========+
      | SRSGwEppDomCreate03Name     | Domain name to create       |   | String  |
      +-----------------------------+-----------------------------+---+---------+
      | SRSGwEppDomCreate03Period   | Domain period type          |   | Y/M     |
      +-----------------------------+-----------------------------+---+---------+
      | SRS                         | Domain period value         |   | Number  |
      | GwEppDomCreate03PeriodValue |                             |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | SRSG                        | Domain registrant id        |   | String  |
      | wEppDomCreate03RegistrantId |                             |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | SRSGwEppDomCreate03AdminId  | Domain admin id if required | S |         |
      |                             |                             | t |         |
      |                             |                             | r |         |
      |                             |                             | i |         |
      |                             |                             | n |         |
      |                             |                             | g |         |
      +-----------------------------+-----------------------------+---+---------+
      | SRSGwEppDomCreate03TechId   | Domain tech id if required  | S |         |
      |                             |                             | t |         |
      |                             |                             | r |         |
      |                             |                             | i |         |
      |                             |                             | n |         |
      |                             |                             | g |         |
      +-----------------------------+-----------------------------+---+---------+
      | S                           | Domain billing id if        | S |         |
      | RSGwEppDomCreate03BillingId | required                    | t |         |
      |                             |                             | r |         |
      |                             |                             | i |         |
      |                             |                             | n |         |
      |                             |                             | g |         |
      +-----------------------------+-----------------------------+---+---------+
      | SRSGwEppDomCreate03AuthPw   | Authentication password if  | S |         |
      |                             | required                    | t |         |
      |                             |                             | r |         |
      |                             |                             | i |         |
      |                             |                             | n |         |
      |                             |                             | g |         |
      +-----------------------------+-----------------------------+---+---------+
      | SRSGwEppDomCreate03Ns01     | Host Object name for ns01   |   | String  |
      +-----------------------------+-----------------------------+---+---------+
      | SRSGwEppDomCreate03Ns02     | Host Object name for ns02   |   | String  |
      +-----------------------------+-----------------------------+---+---------+
      | SRSGwEppDomCreate03Ext01Uri | Extension 01 object URI     |   | String  |
      +-----------------------------+-----------------------------+---+---------+
      | SRSGwEppDomCreate03Ext01Sl  | Extension 01 schema         |   | String  |
      |                             | location                    |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | SRSG                        | Extension 01 name           | S |         |
      | wEppDomCreate03Ext01ExtName |                             | t |         |
      |                             |                             | r |         |
      |                             |                             | i |         |
      |                             |                             | n |         |
      |                             |                             | g |         |
      +-----------------------------+-----------------------------+---+---------+
      | SRSGw                       | Extension 01 value for      |   | String  |
      | EppDomCreate03Ext01ExtValue | direct text node            |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | SRSG                        | Extension 01 field name 01  |   | String  |
      | wEppDomCreate03Ext01Field01 |                             |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | SRSG                        | Extension 01 field value 01 |   | String  |
      | wEppDomCreate03Ext01Value01 |                             |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | ...                         | Repeat for max y fields     |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | ...                         | Repeat for max x extensions |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | SRSGwEppDomCreate03KeyType  | D for dsData specification  |   | String  |
      |                             |                             |   |         |
      |                             | K for keyData specification |   |         |
      |                             |                             |   |         |
      |                             | DK for dsData and keyData   |   |         |
      |                             | specification               |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | SR                          | Value for dsData 01 keytag  |   | String  |
      | SGwEppDomCreate03DsKeyTag01 |                             |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | SRSGwEppDomCreate03DsAlg01  | Value for dsData 01 alg     |   | Number  |
      +-----------------------------+-----------------------------+---+---------+
      | SRSGwE                      | Value for dsData 01 digest  |   | Number  |
      | ppDomCreate03DsDigestType01 | type                        |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | SR                          | Value for dsData 01 digest  |   | String  |
      | SGwEppDomCreate03DsDigest01 |                             |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | ...                         | Repeat for max x dsData     |   |         |
      |                             | records                     |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | S                           | Value for keyData 01 flags  |   | Number  |
      | RSGwEppDomCreate03KdFlags01 |                             |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | SRSG                        | Value for keyData 01        |   | Number  |
      | wEppDomCreate03KdProtocol01 | protocol                    |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | SRSGwEppDomCreate03KdAlg01  | Value for keyData 01 alg    |   | Number  |
      +-----------------------------+-----------------------------+---+---------+
      | SR                          | Value for keyData 01 pubKey |   | String  |
      | SGwEppDomCreate03KdPubKey01 |                             |   |         |
      +-----------------------------+-----------------------------+---+---------+
      | ...                         | Repeat for max x keyData    |   |         |
      |                             | records                     |   |         |
      +-----------------------------+-----------------------------+---+---------+

      ## Outcome(s)

      -   The login step preceding both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1000.

      -   The logout step following both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1500.

      -   Initial EPP INFO step to TLD SRS EPP system MUST complete with
          result code 2303.

      -   Initial EPP INFO step to SRS GW EPP system MUST complete with result
          code 2303.

      -   The EPP create step MUST complete with result code 1000 or 1001.

      -   Final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *SRSGwEppDomCreate03Name* MUST NOT exist in the EPP database.

      -   *SRSGwEppDomCreate03RegistrantId* MUST exist in the EPP contact
          database

      -   *SRSGwEppDomCreate03Ns01* MUST exist in the EPP host database, and
          be configured to serve domain *SRSGwEppDomCreate03Name* with correct
          DNSSEC records.

      -   *SRSGwEppDomCreate03Ns02* MUST exist in the EPP host database, and
          be configured to serve domain *SRSGwEppDomCreate03Name* with correct
          DNSSEC records.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Initial EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomCreate03Name*. The command MUST complete with result
              code 2303 (\"Object does not exist\").

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      2.  Initial EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomCreate03Name*. The command MUST complete with result
              code 2303 (\"Object does not exist\").

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      3.  EPP transformation

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create a domain create command with *SRSGwEppDomCreate03Name*.

              i.  Use period name from *SRSGwEppDomCreate03Period* and period
                  value from *SRSGwEppDomCreate03PeriodValue*.

              ii. Use name server 1 from *SRSGwEppDomCreate03Ns01* and name
                  server 2 from *SRSGwEppDomCreate03Ns02*.

              iii. Add one or more secDNS records with dsData or keyData or
                   both, depending on the value of
                   *SRSGwEppDomCreate03KeyType*. Use appropriate values from
                   *SRSGwEppDomCreate03DsKeyTag01*
                   *SRSGwEppDomCreate03DsAlg01*,
                   *SRSGwEppDomCreate03DsDigestType01*,
                   *SRSGwEppDomCreate03DsDigest01*,
                   *SRSGwEppDomCreate03KdFlags01*,
                   *SRSGwEppDomCreate03KdProtocol01*,
                   *SRSGwEppDomCreate03KdAlg01*,
                   *SRSGwEppDomCreate03KdPubKey01*.

              iv. If domain create requires extra extension and values, create
                  an extension part from *SRSGwEppDomCreate03Ext01Uri* and
                  fill in field name from *SRSGwEppDomCreate03Ext01Field01*
                  and values from *SRSGwEppDomCreate03Ext01Value01*.

              v.  The domain create command MUST complete with result code
                  1000 or 1001.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      4.  Final EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomCreate03Name*. The command MUST complete with result
              code 1000.

          c.  Temporarily save the result of the command.

          d.  Create a logout command. The logout command MUST complete with
              result code 1500.

      5.  Final EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomCreate03Name*. The command MUST complete with result
              code 1000.

          c.  Temporarily save the result of the command.

          d.  Create a logout command. The logout command MUST complete with
              result code 1500.

      6.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.
  SRSGWDomRenew01:
    Summary: Renew a domain and verify that TLD SRS is updated
    Description: |
      ## Objective

      This test verifies that a domain object renewed through the SRS GW EPP
      system is correctly synchronized with the TLD SRS EPP system.

      ## Inputs

      -   The data needed for EPP LOGIN and EPP INFO to the TLD SRS EPP system
          is found in section 38.2.

      -   The data needed for EPP LOGIN and EPP INFO to the SRS GW EPP system
          is found in section 39.2.

      -   The data needed for the EPP transformation in this test case is
          listed in the table below and is found in the srsgwepp.xml data
          file.

        ----------------------------------------------------------------------------
        Id                                Description                   Type
        --------------------------------- ----------------------------- ------------
        SRSGwEppDomRenew01Name            Domain name to renew          String

        SRSGwEppDomRenew01Period          Domain period type            Y/M

        SRSGwEppDomRenew01PeriodValue     Domain period value           Number

        SRSGwEppDomRenew01ExpDate         Domain current expiry date    String

        SRSGwEppDomRenew01Ext01Uri        Object URI for extension 01   String

        SRSGwEppDomRenew01Ext01Sl         Extension 01 schema location  String

        SRSGwEppDomRenew01Ext01ExtName    Extension 01 name             String

        SRSGwEppDomRenew01Ext01ExtValue   Extension 01 value for direct String
                                          text node

        SRSGwEppDomRenew01Ext01Field01    Extension 01 field name 01    String

        SRSGwEppDomRenew01Ext01Value01    Extension 01 field value 01   String

        ...                               Repeat for max y fields

        ...                               Repeat for max x extensions
        ----------------------------------------------------------------------------

      ## Outcome(s)

      -   The login step preceding both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1000.

      -   The logout step following both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1500.

      -   Initial EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      -   The EPP renew step MUST complete with result code 1000 or 1001.

      -   Final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      ## Environmental needs

      -   EPP test script

      -   IPv4Connectivity

      -   *SRSGwEppDomRenew01Name* domain MUST exist in the TLD domain
          database, and be ready for renewal

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Initial EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomRenew01Name*. The command MUST complete with result
              code 1000.

          c.  Temporarily save the result of the command.

          d.  Create a logout command. The logout command MUST complete with
              result code 1500.

      ```{=html}
      <!-- -->
      ```
      1.  Initial EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomRenew01Name*. The command MUST complete with result
              code 1000.

          c.  Temporarily save the result of the command.

          d.  Create a logout command. The logout command MUST complete with
              result code 1500.

      2.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.

      3.  EPP transformation

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create a domain renew command with *SRSGwEppDomRenew01Name*.

              i.  Use period name from *SRSGwEppDomRenew01Period* and period
                  value from *SRSGwEppDomRenew01PeriodValue*.

              ii. If domain renew requires extra extension and values, create
                  an extension part from *SRSGwEppDomRenew01Ext01Uri* and fill
                  in field name from *SRSGwEppDomRenewe01Ext01Field01* and
                  values from *SRSGwEppDomRenew01Ext01Value01*.

              iii. The domain renew command MUST complete with result code
                   1000 or 1001.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      4.  Final EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomRenew01Name*. The command MUST complete with result
              code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      5.  Final EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomRenew01Name*. The command MUST complete with result
              code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      6.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.
  SRSGWDomTransfer01:
    Summary: Request transfer of a domain and verify TLD SRS is updated
    Description: |
      ## Objective

      This test verifies that a transfer of a domain object requested through
      the SRS GW EPP system is correctly synchronized with the TLD SRS EPP
      system.

      ## Inputs

      -   The data needed for EPP LOGIN and EPP INFO to the TLD SRS EPP system
          is found in section 38.2.

      -   The data needed for EPP LOGIN and EPP INFO to the SRS GW EPP system
          is found in section 39.2.

      -   The data needed for the EPP transformation in this test case is
          listed in the table below and is found in the srsgwepp.xml data
          file.

        ------------------------------------------------------------------------------
        Id                                   Description                     Type
        ------------------------------------ ------------------------------- ---------
        SRSGwEppDomTransfer01Name            Domain name to transfer         String

        SRSGwEppDomTransfer01AddPeriod       Yes if the TLD support adding a Boolean
                                             period to transfer

        SRSGwEppDomTransfer01Period          Domain period type              Y/M

        SRSGwEppDomTransfer01PeriodValue     Domain period value             Number

        SRSGwEppDomTransfer01AuthInfo        Authorization info for domain,  String
                                             registrant or associated
                                             contacts

        SRSGwEppDomTransfer01AuthRoid        Roid for registrant or contact  String
                                             if
                                             SRSGwEppDomTransfer01AuthInfo
                                             is associated with registrant
                                             or contact object

        SRSGwEppDomTransfer01Ext01Uri        Extension 01 object URI         String

        SRSGwEppDomTransfer01Ext01Sl         Extension 01 schema location    String

        SRSGwEppDomTransfer01Ext01ExtName    Extension 01 name               String

        SRSGwEppDomTransfer01Ext01ExtValue   Extension 01 value for direct   String
                                             text node

        SRSGwEppDomTransfer01Ext01Field01    Extension 01 field name 01      String

        SRSGwEppDomTransfer01Ext01Value01    Extension 01 field value 01     String

        ...                                  Repeat for max y fields

        ...                                  Repeat for max x extensions
        ------------------------------------------------------------------------------

      ## Outcome(s)

      -   The login step preceding both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1000.

      -   The logout step following both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1500.

      -   Initial EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      -   The EPP transfer step MUST complete with result code 1000 or 1001.

      -   Final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *SRSGwEppDomTransfer01Name* domain MUST exist in the TLD domain
          database, and be available for transfer.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Initial EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomTransfer01Name*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      2.  Initial EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomTransfer01Name*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      3.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.

      4.  EPP transformation

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create a domain transfer command with
              *SRSGwEppDomTransfer01Name*.

              i.  Add an Op attribute in transfer command with the value
                  "request".

              ii. If *SRSGwEppDomTransfer01AddPeriod* is true, add period part
                  with Period name from *SRSGwEppDomTransfer01Period* and
                  period value from *SRSGwEppDomTransfer01PeriodValue*.

              iii. Add authinfo part with *SRSGwEppDomTransfer01AuthInfo*.

              iv. If *SRSGwEppDomTransfer01AuthRoid* is defined, add a roid
                  attribute to pw part with the value
                  *SRSGwEppDomTransfer01AuthRoid*.

              v.  If domain renew requires extra extension and values, create
                  an extension part from *SRSGwEppDomTransfer01Ext01Uri* and
                  *SRSGwEppDomTransfer01Ext01Sl* and fill in field name from
                  *SRSGwEppDomTransfer01Ext01Field01* and values from
                  *SRSGwEppDomTransfer01Ext01Value01*.

              vi. The domain transfer command MUST complete with result code
                  1000 or 1001.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      5.  Final EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomTransfer01Name*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      6.  Final EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomTransfer01Name*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      7.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.
  SRSGWDomTransfer02:
    Summary: Approve a domain transfer and verify TLD SRS is updated
    Description: |
      ## Objective

      This test verifies that a transfer of a domain object (if the TLD
      supports this operation via EPP) approved through the SRS GW EPP system
      is correctly synchronized with the TLD SRS EPP system.

      This test will only be run if the *SRSGwEppDomTransfer02Approve* is set
      to yes.

      ## Inputs

      -   The data needed for EPP LOGIN and EPP INFO to the TLD SRS EPP system
          is found in section 38.2.

      -   The data needed for EPP LOGIN and EPP INFO to the SRS GW EPP system
          is found in section 39.2.

      -   The data needed for the EPP transformation in this test case is
          listed in the table below and is found in the srsgwepp.xml data
          file.

        ------------------------------------------------------------------------------
        Id                                   Description                     Type
        ------------------------------------ ------------------------------- ---------
        SRSGwEppDomTransfer02Approve         Yes if the TLD supports the     Boolean
                                             approve operation

        SRSGwEppDomTransfer02Name            Domain name to transfer         String

        SRSGwEppDomTransfer02AddPeriod       Yes if the TLD support adding a Boolean
                                             period to transfer

        SRSGwEppDomTransfer02Period          Domain period type              Y/M

        SRSGwEppDomTransfer02PeriodValue     Domain period value             Number

        SRSGwEppDomTransfer02AuthInfo        Authorization info for domain,  String
                                             registrant or associated
                                             contacts if required

        SRSGwEppDomTransfer02AuthRoid        Roid for registrant or contact  String
                                             if
                                             SRSGwEppDomTransfer01AuthInfo
                                             is associated with registrant
                                             or contact object

        SRSGwEppDomTransfer02Ext01Uri        Extension 01 object URI         String

        SRSGwEppDomTransfer02Ext01Sl         Extension 01 schema location    String

        SRSGwEppDomTransfer02Ext01ExtName    Extension 01 name               String

        SRSGwEppDomTransfer02Ext01ExtValue   Extension 01 value for direct   String
                                             text node

        SRSGwEppDomTransfer02Ext01Field01    Extension 01 field name 01      String

        SRSGwEppDomTransfer02Ext01Value01    Extension 01 field value 01     String

        ...                                  Repeat for max y fields

        ...                                  Repeat for max x extensions
        ------------------------------------------------------------------------------

      ## Outcome(s)

      -   The login step preceding both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1000.

      -   The logout step following both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1500.

      -   Initial EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      -   The EPP transfer step MUST complete with result code 1000 or 1001.

      -   Final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *SRSGwEppDomTransfer02Name* domain MUST exist in the TLD domain
          database, and be available for transfer approve.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Initial EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomTransfer02Name*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      2.  Initial EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomTransfer02Name*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      3.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.

      4.  EPP transformation

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create a domain transfer command with
              *SRSGwEppDomTransfer02Name*.

              i.  Add an Op attribute in transfer command with the value
                  "approve".

              ii. If *SRSGwEppDomTransfer02AddPeriod* is true, add period part
                  with period name from *SRSGwEppDomTransfer02Period* and
                  period value from *SRSGwEppDomTransfer02PeriodValue.*

              iii. Add authinfo part with *SRSGwEppDomTransfer01AuthInfo*.

              iv. If *SRSGwEppDomTransfer02AuthRoid* is defined, add a roid
                  attribute to pw part with the value
                  *SRSGwEppDomTransfer02AuthRoid*.

              v.  If domain transfer requires extra extension and values,
                  create an extension part from
                  *SRSGwEppDomTransfer02Ext01Uri* and
                  *SRSGwEppDomTransfer02Ext01Sl* and fill in field name from
                  *SRSGwEppDomTransfer02Ext01Field01* and values from
                  *SRSGwEppDomTransfer02Ext01Value01*.

              vi. The domain transfer command MUST complete with result code
                  1000 or 1001.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      5.  Final EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomTransfer02Name*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      6.  Final EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomTransfer02Name*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      7.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.
  SRSGWDomDelete01:
    Summary: Delete a domain and verify TLD SRS is updated
    Description: |
      ## Objective

      This test verifies that a domain object deleted through the SRS GW EPP
      system is correctly synchronized with the TLD SRS EPP system.

      ## Inputs

      -   The data needed for EPP LOGIN and EPP INFO to the TLD SRS EPP system
          is found in section 38.2.

      -   The data needed for EPP LOGIN and EPP INFO to the SRS GW EPP system
          is found in section 39.2.

      -   The data needed for the EPP transformation in this test case is
          listed in the table below and is found in the srsgwepp.xml data
          file.

        -----------------------------------------------------------------------------
        Id                                 Description                   Type
        ---------------------------------- ----------------------------- ------------
        SRSGwEppDomDelete01Name            Domain name to delete         String

        SRSGwEppDomDelete01Ext01Uri        Extension 01 object URI       String

        SRSGwEppDomDelete01Ext01Sl         Extension 01 schema location  String

        SRSGwEppDomDelete01Ext01ExtName    Extension 01 name             String

        SRSGwEppDomDelete01Ext01ExtValue   Extension 01 value for direct String
                                           text node

        SRSGwEppDomDelete01Ext01Field01    Extension 01 field name 01    String

        SRSGwEppDomDelete01Ext01Value01    Extension 01 field value 01   String

        ...                                Repeat for max y fields

        ...                                Repeat for max x extensions
        -----------------------------------------------------------------------------

      ## Outcome(s)

      -   The login step preceding both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1000.

      -   The logout step following both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1500.

      -   Initial EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      -   The EPP delete step MUST complete with result code 1000 or 1001.

      -   If the EPP result code of the EPP transformation was 1001, then the
          final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must either both complete with result code 2303 or both complete
          with result code 1000 and return the same data.

      -   If the EPP result code of the EPP transformation was 1000, then the
          final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 2303.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *SRSGwEppDomDelete01Name* domain MUST exist in the TLD domain
          database, and be available for delete.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Initial EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomDelete01Name*. The command MUST complete with result
              code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      2.  Initial EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomDelete01Name*. The command MUST complete with result
              code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      3.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.

      4.  EPP transformation

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create a domain delete command with *SRSGwEppDomDelete01Name*.

              i.  If domain delete requires extra extension and values, create
                  an extension part from *SRSGwEppDomDelete01Ext01Uri* and
                  *SRSGwEppDomDelete01Ext01Sl* and fill in field name from
                  *SRSGwEppDomDelete01Ext01Field01* and values from
                  *SRSGwEppDomDelete01Ext01Value01*.

              ii. The domain delete command MUST complete with result code
                  1000 or 1001.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      5.  Final EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomDelete01Name*.

              i.  If the result code of the EPP transformation was 1000, then
                  the info command MUST complete with result code 2303.

              ii. If the result code of the EPP transformation was 1001, then
                  the info command MUST either complete with result code 2303
                  or 1000.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      6.  Final EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomDelete01Name*. The command MUST complete with the
              same result code the TLD SRS did.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.
  SRSGWConCreate01:
    Summary: Create a contact and verify that TLD SRS is updated
    Description: |
      ## Objective

      This test verifies that a contact object created through the SRS GW EPP
      system is correctly synchronized with the TLD SRS EPP system.

      ## Inputs

      -   The data needed for EPP LOGIN and EPP INFO to the TLD SRS EPP system
          is found in section 38.2.

      -   The data needed for EPP LOGIN and EPP INFO to the SRS GW EPP system
          is found in section 39.2.

      -   The data needed for the EPP transformation in this test case is
          listed in the table below and is found in the srsgwepp.xml data
          file.

        -----------------------------------------------------------------------------
        Id                                 Description                   Type
        ---------------------------------- ----------------------------- ------------
        SRSGwEppConCreate01Id              Contact ID to create          String

        SRSGwEppConCreate01PIntMand        Yes if PostalInfo type INT is Boolean
                                           mandatory

        SRSGwEppConCreate01PIntName        Contact PostalInfo Int Name   String

        SRSGwEppConCreate01PIntOrg         Contact PostalInfo Int Org    String

        SRSGwEppConCreate01PIntStreet1     Contact PostalInfo Int        String
                                           Street1

        SRSGwEppConCreate01PIntStreet2     Contact PostalInfo Int        String
                                           Street2, if mandatory

        SRSGwEppConCreate01PIntStreet3     Contact PostalInfo Int        String
                                           Street3, if mandatory

        SRSGwEppConCreate01PIntCity        Contact PostalInfo Int City   String

        SRSGwEppConCreate01PIntSp          Contact PostalInfo Int State  String
                                           or Province, if mandatory

        SRSGwEppConCreate01PIntPc          Contact PostalInfo Int        String
                                           Postcode, if mandatory

        SRSGwEppConCreate01PIntCc          Contact PostalInfo Int        String
                                           Country Code

        SRSGwEppConCreate01PLocMand        Yes if PostalInfo type LOC is Boolean
                                           mandatory

        SRSGwEppConCreate01PLocName        Contact PostalInfo Loc Name   String

        SRSGwEppConCreate01PLocOrg         Contact PostalInfo Loc Org    String

        SRSGwEppConCreate01PLocStreet1     Contact PostalInfo Loc        String
                                           Street1

        SRSGwEppConCreate01PLocStreet2     Contact PostalInfo Loc        String
                                           Street2, if mandatory

        SRSGwEppConCreate01PLocStreet3     Contact PostalInfo Loc        String
                                           Street3, if mandatory

        SRSGwEppConCreate01PLocCity        Contact PostalInfo Loc City   String

        SRSGwEppConCreate01PLocSp          Contact PostalInfo Loc State  String
                                           or Province, if mandatory

        SRSGwEppConCreate01PLocPc          Contact PostalInfo Loc        String
                                           Postcode, if mandatory

        SRSGwEppConCreate01PLocCc          Contact PostalInfo Loc        String
                                           Country Code

        SRSGwEppConCreate01Voice           Contact Voice telephone       String
                                           number, if mandatory

        SRSGwEppConCreate01Fax             Contact Fax telephone number, String
                                           if mandatory

        SRSGwEppConCreate01Email           Contact Email address         String

        SRSGwEppConCreate01Auth            Contact Auth Info, if         String
                                           mandatory

        SRSGwEppConCreate01Ext01Uri        Extension 01 object URI       String

        SRSGwEppConCreate01Ext01Sl         Extension 01 schema location  String

        SRSGwEppConCreate01Ext01ExtName    Extension 01 name             String

        SRSGwEppConCreate01Ext01ExtValue   Extension 01 value for direct String
                                           text node

        SRSGwEppConCreate01Ext01Field01    Extension 01 field name 01    String

        SRSGwEppConCreate01Ext01Value01    Extension 01 field value 01   String

        ...                                Repeat for max y fields

        ...                                Repeat for max x extensions
        -----------------------------------------------------------------------------

      ## Outcome(s)

      -   The login step preceding both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1000.

      -   The logout step following both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1500.

      -   Initial EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 2303.

      -   The EPP create step MUST complete with result code 1000 or 1001.

      -   Final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *SRSGwEppConCreate01Id* contact MUST NOT exist in the TLD contact
          database.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Initial EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for contact object
              *SRSGwEppConCreate01Id*. The command MUST complete with result
              code 2303.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      2.  Initial EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for contact object
              *SRSGwEppConCreate01Id*. The command MUST complete with result
              code 2303.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      3.  EPP transformation

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create a contact create command with *SRSGwEppConCreate01Id*.

              i.  If *SRSGwEppConCreate01PIntMand* is yes, create a Postal
                  Info type Int with appropriate fields from
                  *SRSGwEppConCreate01PIntName*, *SRSGwEppConCreate01PIntOrg*,
                  *SRSGwEppConCreate01PIntStreet1*,
                  *SRSGwEppConCreate01PIntStreet2*,
                  *SRSGwEppConCreate01PIntStreet3*,
                  *SRSGwEppConCreate01PIntCity*, *SRSGwEppConCreate01PIntSp*,
                  *SRSGwEppConCreate01PIntPc* and *SRSGwEppConCreate01PIntCc*.

              ii. If *SRSGwEppConCreate01PLocMand* is yes, create a Postal
                  Info type Loc with appropriate fields from
                  *SRSGwEppConCreate01PLocName*, *SRSGwEppConCreate01PLocOrg*,
                  *SRSGwEppConCreate01PLocStreet1*,
                  *SRSGwEppConCreate01PLocStreet2*,
                  *SRSGwEppConCreate01PLocStreet3*,
                  *SRSGwEppConCreate01PLocCity*, *SRSGwEppConCreate01PLocSp*,
                  *SRSGwEppConCreate01PLOcPc* and *SRSGwEppConCreate01PLocCc*.

              iii. Add *SRSGwEppConCreate01Voice*, *SRSGwEppConCreate01Fax*,
                   *SRSGwEppConCreate01Email* and *SRSGwEppConCreate01Auth*
                   fields.

              iv. If contact create requires extra extension and values,
                  create an extension part from *SRSGwEppConCreate01Ext01Uri*
                  and *SRSGwEppConCreate01Ext01Sl* and fill in field name from
                  *SRSGwEppConCreate01Ext01Field01* and values from
                  *SRSGwEppConCreate01Ext01Value01*.

              v.  The contact create command MUST complete with result code
                  1000 or 1001.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      4.  Final EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for contact object
              *SRSGwEppConCreate01Id*. The command MUST complete with result
              code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      5.  Final EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for contact object
              *SRSGwEppConCreate01Id*. The command MUST complete with result
              code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      6.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.
  SRSGWConDelete01:
    Summary: Delete a contact and verify that TLD SRS is updated
    Description: |
      ## Objective

      This test verifies that a contact object deleted through the SRS GW EPP
      system is correctly synchronized with the TLD SRS EPP system.

      ## Inputs

      -   The data needed for EPP LOGIN and EPP INFO to the TLD SRS EPP system
          is found in section 38.2.

      -   The data needed for EPP LOGIN and EPP INFO to the SRS GW EPP system
          is found in section 39.2.

      -   The data needed for the EPP transformation in this test case is
          listed in the table below and is found in the srsgwepp.xml data
          file.

        -----------------------------------------------------------------------------
        Id                                 Description                   Type
        ---------------------------------- ----------------------------- ------------
        SRSGwEppConDelete01Id              ContactID to delete           String

        SRSGwEppConDelete01Ext01Uri        Extension 01 object URI       String

        SRSGwEppConDelete01Ext01Sl         Extension 01 schema location  String

        SRSGwEppConDelete01Ext01ExtName    Extension 01 name             String

        SRSGwEppConDelete01Ext01ExtValue   Extension 01 value for direct String
                                           text node

        SRSGwEppConDelete01Ext01Field01    Extension 01 field name 01    String

        SRSGwEppConDelete01Ext01Value01    Extension 01 field value 01   String

        ...                                Repeat for max y fields

        ...                                Repeat for max x extensions
        -----------------------------------------------------------------------------

      ## Outcome(s)

      -   The login step preceding both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1000.

      -   The logout step following both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1500.

      -   Initial EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      -   The EPP delete step MUST complete with result code 1000 or 1001.

      -   If the EPP result code of the EPP transformation was 1001, then the
          final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must either both complete with result code 2303 or both complete
          with result code 1000 and return the same data.

      -   If the EPP result code of the EPP transformation was 1000, then the
          final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 2303.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *SRSGwEppConDelete01Id* domain MUST exist in the TLD domain
          database, and be available for delete.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Initial EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for contact object
              *SRSGwEppConDelete01Id*. The command MUST complete with result
              code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      2.  Initial EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for contact object
              *SRSGwEppConDelete01Id*. The command MUST complete with result
              code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      3.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.

      4.  EPP transformation

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create a contact delete command with *SRSGwEppConDelete01Id*.

              i.  If contact delete requires extra extension and values,
                  create an extension part from *SRSGwEppConDelete01Ext01Uri*
                  and *SRSGwEppConDelete01Ext01Sl* and fill in field name from
                  *SRSGwEppConDelete01Ext01Field01* and values from
                  *SRSGwEppConDelete01Ext01Value01*.

              ii. The contact delete command MUST complete with result code
                  1000 or 1001.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      5.  Final EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for contact object
              *SRSGwEppConDelete01Id*.

              i.  If the result code of the EPP transformation was 1000, then
                  the info command MUST complete with result code 2303.

              ii. If the result code of the EPP transformation was 1001, then
                  the info command MUST either complete with result code 2303
                  or 1000.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      6.  Final EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for contact object
              *SRSGwEppConDelete01Id*. The command MUST complete with the same
              result code the TLD SRS did.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.
  SRSGWHostDelete01:
    Summary: Delete a host and verify that TLD SRS is updated
    Description: |
      ## Objective

      This test verifies that deleting a Host Object through the SRS GW EPP
      system is correctly synchronized with the TLD SRS EPP system.

      If the TLD does not support Host Objects, this test will not be
      performed.

      ## Inputs

      -   The data needed for EPP LOGIN and EPP INFO to the TLD SRS EPP system
          is found in section 38.2.

      -   The data needed for EPP LOGIN and EPP INFO to the SRS GW EPP system
          is found in section 39.2.

      -   The data needed for the EPP transformation in this test case is
          listed in the table below and is found in the srsgwepp.xml data
          file.

        ------------------------------------------------------------------------------
        Id                                  Description                   Type
        ----------------------------------- ----------------------------- ------------
        SRSGwEppHostDelete01Name            Host name to delete           String

        SRSGwEppHostDelete01Ext01Uri        Extension 01 object URI       String

        SRSGwEppHostDelete01Ext01Sl         Extension 01 schema location  String

        SRSGwEppHostDelete01Ext01ExtName    Extension 01 name             String

        SRSGwEppHostDelete01Ext01ExtValue   Extension 01 value for direct String
                                            text node

        SRSGwEppHostDelete01Ext01Field01    Extension 01 field name 01    String

        SRSGwEppHostDelete01Ext01Value01    Extension 01 field value 01   String

        ...                                 Repeat for max y fields

        ...                                 Repeat for max x extensions
        ------------------------------------------------------------------------------

      ## Outcome(s)

      -   The login step preceding both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1000.

      -   The logout step following both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1500.

      -   Initial EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      -   The EPP delete step MUST complete with result code 1000 or 1001.

      -   Final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 2303.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *SRSGwEppHostDelete01Name* host MUST exist in the TLD domain
          database, and be available for delete.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Initial EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for host object
              *SRSGwEppHostDelete01Name*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      2.  Initial EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for host object
              *SRSGwEppHostDelete01Name*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      3.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.

      4.  EPP transformation

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create a contact delete command with *SRSGwEppHostDelete01Id*.

              i.  If contact delete requires extra extension and values,
                  create an extension part from *SRSGwEppHostDelete01Ext01Uri*
                  and *SRSGwEppHostDelete01Ext01Sl* and fill in field name
                  from *SRSGwEppHostDelete01Ext01Field01* and values from
                  *SRSGwEppHostDelete01Ext01Value01*.

              ii. The contact delete command MUST complete with result code
                  1000 or 1001.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      5.  Final EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for contact object
              *SRSGwEppHostDelete01Name*.

              i.  If the result code of the EPP transformation was 1000, then
                  the info command MUST complete with result code 2303.

              ii. If the result code of the EPP transformation was 1001, then
                  the info command MUST either complete with result code 2303
                  or 1000.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      6.  Final EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for contact object
              *SRSGwEppHostDelete01Name*. The command MUST complete with the
              same result code the TLD SRS did.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.
  SRSGWHostUpdate01:
    Summary: Update a host and verify that TLD SRS is updated
    Description: |
      ## Objective

      This test verifies that updating a Host Object through the SRS GW EPP
      system is correctly synchronized with the TLD SRS EPP system.

      If the TLD does not support Host Objects, this test will not be
      performed.

      ## Inputs

      -   The data needed for EPP LOGIN and EPP INFO to the TLD SRS EPP system
          is found in section 38.2.

      -   The data needed for EPP LOGIN and EPP INFO to the SRS GW EPP system
          is found in section 39.2.

      -   The data needed for the EPP transformation in this test case is
          listed in the table below and is found in the srsgwepp.xml data
          file.

        -----------------------------------------------------------------------------
        Id                                  Description                   Type
        ----------------------------------- ----------------------------- -----------
        SRSGwEppHostUpdate01Name            Host name to update           String

        SRSGwEppHostUpdate01Ipv4            IPv4 address to add           String

        SRSGwEppHostUpdate01Ext01Uri        Extension 01 object URI       String

        SRSGwEppHostUpdate01Ext01Sl         Extension 01 schema location  String

        SRSGwEppHostUpdate01Ext01ExtName    Extension 01 name             String

        SRSGwEppHostUpdate01Ext01ExtValue   Extension 01 value for direct String
                                            text node

        SRSGwEppHostUpdate01Ext01Field01    Extension 01 field name 01    String

        SRSGwEppHostUpdate01Ext01Value01    Extension 01 field value 01   String

        ...                                 Repeat for max y fields

        ...                                 Repeat for max x extensions
        -----------------------------------------------------------------------------

      ## Outcome(s)

      -   The login step preceding both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1000.

      -   The logout step following both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1500.

      -   Initial EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      -   The EPP update step MUST complete with result code 1000 or 1001.

      -   Final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *SRSGwEppHostUpdate01Name* host MUST exist in the TLD domain
          database, and be available for update.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Initial EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for host object
              *SRSGwEppHostUpdate01Name*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      2.  Initial EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for host object
              *SRSGwEppHostUpdate01Name*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      3.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.

      4.  EPP transformation

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create a host update command with *SRSGwEppHostUpdate01Name* and
              add IPv4 address *SRSGwEppHostUpdate01Ipv4*

              i.  If host update requires extra extension and values, create
                  an extension part from *SRSGwEppHostUpdate01Ext01Uri* and
                  *SRSGwEppHostUpdate01Ext01Sl* and fill in field name from
                  *SRSGwEppHostUpdate01Ext01Field01* and values from
                  *SRSGwEppHostUpdate01Ext01Value01*.

              ii. The host update command MUST complete with result code 1000.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      5.  Final EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for host object
              *SRSGwEppHostUpdate01Name*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      6.  Final EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for host object
              *SRSGwEppHostUpdate01Name*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      7.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.
  SRSGWConUpdate01:
    Summary: Update a contact and verify that TLD SRS is updated
    Description: |
      ## Objective

      This test verifies that updating a contact object through the SRS GW EPP
      system is correctly synchronized with the TLD SRS EPP system.

      ## Inputs

      -   The data needed for EPP LOGIN and EPP INFO to the TLD SRS EPP system
          is found in section 38.2.

      -   The data needed for EPP LOGIN and EPP INFO to the SRS GW EPP system
          is found in section 39.2.

      -   The data needed for the EPP transformation in this test case is
          listed in the table below and is found in the srsgwepp.xml data
          file.

        --------------------------------------------------------------------------------------------
        Id                                     Description                               Type
        -------------------------------------- ------------- --------------------------- -----------
        SRSGwEppContactUpdate01Id              Contact ID to                             String
                                               update

        SRSGwEppContactUpdate01Email                         Email address to set        String

        SRSGwEppContactUpdate01Ext01Uri        Extension 01                              String
                                               object URI

        SRSGwEppContactUpdate01Ext01Sl         Extension 01                              String
                                               schema
                                               location

        SRSGwEppContactUpdate01Ext01ExtName                  Extension 01 name           String

        SRSGwEppContactUpdate01Ext01ExtValue   Extension 01                              String
                                               value for
                                               direct text
                                               node

        SRSGwEppContactUpdate01Ext01Field01    Extension 01                              String
                                               field name 01

        SRSGwEppContactUpdate01Ext01Value01    Extension 01                              String
                                               field value
                                               01

        ...                                    Repeat for
                                               max y fields

        ...                                    Repeat for
                                               max x
                                               extensions
        --------------------------------------------------------------------------------------------

      ## Outcome(s)

      -   The login step preceding both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1000.

      -   The logout step following both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1500.

      -   Initial EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      -   The EPP update step MUST complete with result code 1000 or 1001.

      -   Final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *SRSGwEppContactUpdate01Id* contact MUST exist in the TLD domain
          database, and be available for update.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Initial EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for contact object
              *SRSGwEppContactUpdate01Id*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      2.  Initial EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for contact object
              *SRSGwEppContactUpdate01Id*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      3.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.

      4.  EPP transformation

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create a contact update command with *SRSGwEppContactUpdate01Id*
              and set *SRSGwEppContactUpdate01Email*

              i.  If contact update requires extra extension and values,
                  create an extension part from
                  *SRSGwEppContactUpdate01Ext01Uri* and
                  *SRSGwEppContactUpdate01Ext01Sl* and fill in field name from
                  *SRSGwEppContactUpdate01Ext01Field01* and values from
                  *SRSGwEppContactUpdate01Ext01Value01*.

              ii. The contact update command MUST complete with result code
                  1000.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      5.  Final EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for contact object
              *SRSGwEppContactUpdate01Id*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      6.  Final EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for contact object
              *SRSGwEppContactUpdate01Id*. The command MUST complete with
              result code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      7.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.
  SRSGWDomUpdate01:
    Summary: Add DNSSEC records to a domain, verify TLD SRS is updated
    Description: |
      ## Objective

      This test verifies that updating a domain object through the SRS GW EPP
      system is correctly synchronized with the TLD SRS EPP system.

      ## Inputs

      -   The data needed for EPP LOGIN and EPP INFO to the TLD SRS EPP system
          is found in section 38.2.

      -   The data needed for EPP LOGIN and EPP INFO to the SRS GW EPP system
          is found in section 39.2.

      -   The data needed for the EPP transformation in this test case is
          listed in the table below and is found in the srsgwepp.xml data
          file.

      +-----------------------------+----------------------------+---------+
      | Id                          | Description                | Type    |
      +=============================+============================+=========+
      | SRSGwEppDomUpdate01Name     | Domain name to update      | String  |
      +-----------------------------+----------------------------+---------+
      | SRSGwEppDomUpdate01Ext01Uri | Extension 01 object URI    | String  |
      +-----------------------------+----------------------------+---------+
      | SRSGwEppDomUpdate01Ext01Sl  | Extension 01 schema        | String  |
      |                             | location                   |         |
      +-----------------------------+----------------------------+---------+
      | SRSG                        | Extension 01 name          | String  |
      | wEppDomUpdate01Ext01ExtName |                            |         |
      +-----------------------------+----------------------------+---------+
      | SRSGw                       | Extension 01 value for     | String  |
      | EppDomUpdate01Ext01ExtValue | direct text node           |         |
      +-----------------------------+----------------------------+---------+
      | SRSG                        | Extension 01 field name 01 | String  |
      | wEppDomUpdate01Ext01Field01 |                            |         |
      +-----------------------------+----------------------------+---------+
      | SRSG                        | Extension 01 field value   | String  |
      | wEppDomUpdate01Ext01Value01 | 01                         |         |
      +-----------------------------+----------------------------+---------+
      | ...                         | Repeat for max y fields    |         |
      +-----------------------------+----------------------------+---------+
      | ...                         | Repeat for max x           |         |
      |                             | extensions                 |         |
      +-----------------------------+----------------------------+---------+
      | SRSGwEppDomUpdate01KeyType  | D for dsData specification | String  |
      |                             |                            |         |
      |                             | K for keyData              |         |
      |                             | specification              |         |
      |                             |                            |         |
      |                             | DK for dsData and keyData  |         |
      |                             | specification              |         |
      +-----------------------------+----------------------------+---------+
      | SR                          | Value for dsData 01 keytag | String  |
      | SGwEppDomUpdate01DsKeyTag01 |                            |         |
      +-----------------------------+----------------------------+---------+
      | SRSGwEppDomUpdate01DsAlg01  | Value for dsData 01 alg    | Number  |
      +-----------------------------+----------------------------+---------+
      | SRSGwE                      | Value for dsData 01 digest | Number  |
      | ppDomUpdate01DsDigestType01 | type                       |         |
      +-----------------------------+----------------------------+---------+
      | SR                          | Value for dsData 01 digest | String  |
      | SGwEppDomUpdate01DsDigest01 |                            |         |
      +-----------------------------+----------------------------+---------+
      | ...                         | Repeat for max x dsData    |         |
      |                             | records                    |         |
      +-----------------------------+----------------------------+---------+
      | S                           | Value for keyData 01 flags | Number  |
      | RSGwEppDomUpdate01KdFlags01 |                            |         |
      +-----------------------------+----------------------------+---------+
      | SRSG                        | Value for keyData 01       | Number  |
      | wEppDomUpdate01KdProtocol01 | protocol                   |         |
      +-----------------------------+----------------------------+---------+
      | SRSGwEppDomUpdate01KdAlg01  | Value for keyData 01 alg   | Number  |
      +-----------------------------+----------------------------+---------+
      | SR                          | Value for keyData 01       | String  |
      | SGwEppDomUpdate01KdPubKey01 | pubKey                     |         |
      +-----------------------------+----------------------------+---------+
      | ...                         | Repeat for max x keyData   |         |
      |                             | records                    |         |
      +-----------------------------+----------------------------+---------+

      ## Outcome(s)

      -   The login step preceding both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1000.

      -   The logout step following both the EPP INFO commands and the EPP
          transformation MUST complete with result code 1500.

      -   Initial EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      -   The EPP update step MUST complete with result code 1000 or 1001.

      -   Final EPP INFO steps to TLD SRS EPP system and SRS GW EPP system
          must both complete with result code 1000 and return the same data.

      ## Environmental needs

      -   EPP test script

      -   IPv4 connectivity

      -   *SRSGwEppDomUpdate01RegistrantId* MUST exist in TLD contact database

      -   *SRSGwEppDomUpdate01Ns01* MUST exist in TLD host database, and be
          configured to serve domain *SRSGwEppDomUpdate01Name* with correct
          DNSSEC records.

      -   *SRSGwEppDomUpdate01Ns02* MUST exist in TLD host database, and be
          configured to serve domain *SRSGwEppDomUpdate01Name* with correct
          DNSSEC records.

      ## Special procedural requirements

      Abort the test if any EPP operation takes longer than 30 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Initial EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomUpdate01Name*. The command MUST complete with result
              code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      2.  Initial EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomUpdate01Name*. The command MUST complete with result
              code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      3.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.

      4.  EPP transformation

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create a domain update command with *SRSGwEppDomUpdate01Name*.

              i.  Add one or more secDNS records with dsData or keyData or
                  both, depending on the value of
                  *SRSGwEppDomUpdate01KeyType*. Use appropriate values from
                  *SRSGwEppDomUpdate01DsKeyTag01*,
                  *SRSGwEppDomUpdate01DsAlg01*,
                  *SRSGwEppDomUpdate01DsDigestType01*,
                  *SRSGwEppDomUpdate01DsDigest01*,
                  *SRSGwEppDomUpdate01KdFlags01*,
                  *SRSGwEppDomUpdate01KdProtocol01*,
                  *SRSGwEppDomUpdate01KdAlg01*,
                  *SRSGwEppDomUpdate01kdPubKey01*.

              ii. If domain update requires extra extension and values, create
                  an extension part from *SRSGwEppDomUpdate01Ext01Uri* and
                  fill in field name from *SRSGwEppDomUpdate01Ext01Field01*
                  and values from *SRSGwEppDomUpdate01Ext01Value01*.

              iii. The domain update command MUST complete with result code
                   1000 or 1001.

      5.  Final EPP INFO to TLD SRS

          a.  Perform the EPP LOGIN by following the steps in section 38. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomUpdate01Name*. The command MUST complete with result
              code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      6.  Final EPP INFO to SRS GW

          a.  Perform the EPP LOGIN by following the steps in section 39. The
              login command MUST complete with result code 1000.

          b.  Create an info command for domain object
              *SRSGwEppDomUpdate01Name*. The command MUST complete with result
              code 1000.

              i.  Temporarily save the result of the command.

          c.  Create a logout command. The logout command MUST complete with
              result code 1500.

      7.  Compare the result of the two previous INFO commands

          a.  The result from the two previous INFO commands MUST be equal.

          b.  Transaction IDs MAY be different.

  IDNvalid00:
    Summary: IDN documentation validation
    Description: |
      ## Objective

      This test verifies that the IDN tables and documents listed in Exhibit A
      of the TLD Registry Agreement have all been submitted to PDT for testing
      and that no submitted IDN tables or documents are unlisted in the
      Registry Agreement.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------------
        Id                Description                            Type
        ----------------- -------------------------------------- --------------------
        TableList         A list of all script and language IDN  File, Registry
                          tables cited in the Exhibit A of the   Agreement.
                          Registry Agreement.

        PolicyStatement   The IDN policies declared by the       File, IDN
                          registry in section 4 of the IDN       Self-Certification
                          Self-Certification Document,           Document.
                          corresponding to TableList.

        EPPtags           A list of all IDN EPP extensions, as   File
                          well as language and script tags,
                          needed for the registration of an IDN
                          label.

        TestTable         The IDN table under scrutiny.          File or files.
        -----------------------------------------------------------------------------

      ## Outcome(s)

      The response to this test will be a pass/fail/non-applicable
      determination. If this test case ends with \"not applicable\", then no
      further test cases will be performed.

      ## Environmental needs

      -   Basic desktop.

      ## Special procedural requirements

      None.

      ## Intercase dependencies

      IDNvalid01 to extract "language" element from LGR IDN table, if any.

      ## Ordered description of steps to be taken to execute the test case

      1.  Determine whether the registry is authorized to support IDNs based
          on Exhibit A of the Registry Agreement, and if it is not, abort the
          remaining sequence of IDN tests.

      2.  Verify that every submitted TestTable corresponds to an item in
          TableList and that every item in TableList corresponds to a
          submitted TestTable.

      3.  Verify that the PolicyStatement in section 4 of the IDN
          Self-Certification Document correlates to TestTable(s) in a manner
          that unambiguously indicates:

          a.  How requests for registration of IDN labels will be processed.

          b.  How the Registry handles comingling of scripts.

          c.  How the Registry handles variants.

          d.  How the Registry handles contextual rules.

      4.  For the IDN tables listed in the response to Section 1 of the IDN
          Self-Certification Document, verify that the corresponding IDN
          tables are listed in Section 3 of that document, that every element
          of EPPtags corresponds to a specific TestTable and that there are no
          orphaned extensions or IDN tables.

      5.  Verify that all IDN tables have been submitted as TXT or XML (LGR)
          files and that any which include non-ASCII text are encoded in
          Unicode UTF-8.

      6.  For each IDN table in LGR format (RFC 7940), verify that the
          language or script stated in the "language" element matches the
          intended language and/or script from TableList.

      Criteria for N/A:

      -   Exhibit A of the Registry Agreement does not declare support for IDN
          labels (Step 1).

      Criteria for PASS:

      -   Each script or language listed in Exhibit A corresponds to a
          submitted IDN table and no submitted IDN table is unlisted (Step 2),

      -   PolicyStatement unambiguously indicates how IDN labels are processed
          (Step 3a-3d),

      -   all IDN tables are listed in the IDN Self-Certification Document
          Section 1 and 3; that all elements of EPPtags correspond to specific
          IDN tables; that there are no orphaned extensions or IDN tables
          (Step 4),

      -   all IDN tables are submitted as TXT in UTF-8 (Step 5).

      Criteria for FAIL:

      -   The conditions in Steps 2-5 are not met or if part of the
          information is unclear or missing.

      If this test fails, further testing will be suspended pending remedial
      action. If this is not undertaken within the prescribed time, the
      failure will be confirmed, none of the subsequent tests will be
      conducted, and all will fail by default.
  IDNvalid01:
    Summary: IDN Table validation
    Description: |
      ## Objective

      This test verifies that the format of an IDN table either conforms to
      RFC 4290, RFC 3743, or RFC 7940. The test is repeated for all IDN
      tables.

      ## Inputs

      The following information will be needed as input for this test case:

        ----------------------------------------------------------------------------------
        Id                        Description                         Type
        ------------------------- ----------------------------------- --------------------
        TestTable                 The IDN table under scrutiny.       File

        LocalTableFormat          Describes the IDN table format in   File, IDN
                                  Section 2 of the IDN                Self-Certification
                                  Self-Certification Document if it   Document
                                  does not comply with either of the
                                  reference RFCs.

        LocalTableJustification   Verifiable warrant in Section 2 of  File, IDN
                                  the IDN Self-Certification Document Self-Certification
                                  for using a local format instead of Document
                                  either of the reference RFCs.
        ----------------------------------------------------------------------------------

      None of the reference RFCs for text IDN table formats (RFC 4290 and RFC
      3743) specifies a rigorous enough format for TestTable to be
      automatically parsed for conformance, and there is no way to predict the
      details of an instance of LocalTableFormat. Manual examination of a IDN
      table is necessary in order to validate the format.

      An IDN table in LGR format (RFC 7940) has a machine-readable format that
      can be automatically checked for conformance.

      ## Outcome(s)

      The response to this test will be a pass/fail/warn determination.

      ## Environmental needs

      -   Basic desktop.

      ## Special procedural requirements

      The person running this test must understand the elements of an IDN
      table format, both as described in the reference RFCs, and in order to
      assess the sufficiency of a locally defined alternative and the
      justification for its use.

      ### Requirement of LGR IDN table

      An IDN table in LGR format must, besides what is stated in RFC, meet the
      following requirements:

      -   The Unicode version must be set in the "version element" in the
          metadata section.

      -   The Unicode version must be a valid Unicode version 5.2.0 or higher.

      -   All code points in the LGR must be included in the given Unicode
          version.

      -   The "validity-end" element (if present) in the metadata section must
          be in future time.

      -   The "validity-start" element in the metadata section must be in
          earlier in time than the "validity-end" element (if both are
          present).

      -   The "language" element in the metadata section must be present.

      -   All dispositions (\"Label Generation Ruleset Dispositions\") must be
          registered Standard Dispositions as defined in RFC 7940, section
          11.3 and in the IANA registry "Label Generation Ruleset (LGR)
          Dispositions",
          <https://www.iana.org/assignments/lgr-dispositions/lgr-dispositions.xhtml>.

      ## Intercase dependencies

      None.

      ## Ordered description of steps to be taken to execute the test case

      1.  Verify that the response to Section 2 of the IDN Self-Certification
          Document indicates whether the IDN table format used follows the
          guidelines of RFC 4290, RFC 3743 or RFC 7940.

      2.  If RFC 7940 IDN table is used, then all contextual rules and variant
          rules must be included in the "data" and "rules" elements of the LGR
          IDN table. Any information outside the LGR, or within the
          "description" element of the LGR IDN table, will be ignored if it
          can be included in the "data" and "rules" elements.

      3.  If the response to Section 2 of the IDN Self-Certification Document
          indicates that the IDN table is in RFC 4290 format verify that:

          a.  each code point in the IDN table appears in Unicode U+nnnn
              notation.

          b.  if the base character has any variants, the indication of its
              code point is followed by a VERTICAL LINE.

          c.  if the base character has more than one variant, the code points
              for the variants are separated by a COLON.

          d.  if the base character has a variant composed of a sequence of
              characters they are indicated with a HYPHEN MINUS between each
              code point.

          e.  comment lines in the IDN table are preceded with a NUMBER SIGN.

      4.  If the response to Section 2 of the IDN Self-Certification Document
          indicates that the IDN table is in RFC 3743 format verify that:

          a.  each code point in the IDN table appears without the Unicode U+
              prefix, or if the general exception permitting the use of the
              Unicode \"U+\" prefix is invoked, that each code point in the
              IDN table appears in correct U+nnnn notation.

          b.  if the valid code point has any variants, the columns are
              separated by a SEMICOLON.

          c.  if there are multiple preferred or character variants, they are
              separated by a COMMA.

          d.  if a variant is composed of a sequence of code points they are
              separated by a SPACE.

          e.  if references are indicated, the reference number is listed in
              PARENTHESIS directly after the code point it and that the source
              is included in the list in the beginning of the IDN table.

          f.  comments in the IDN table are preceded with a NUMBER SIGN.

          g.  that the version number and release date are indicated.

      5.  If the response to Section 2 of the IDN Self-Certification Document
          indicates that the IDN table is in RFC 7940 format verify that:

          a.  the IDN table is a well-formed XML document that conforms to the
              schema defined in Appendix D of RFC 7940,

          b.  the IDN table meets the requirements of RFC 7940 (besides
              conforming to the XML schema),

          c.  the IDN table meets the requirement stated in section
              "Requirement of LGR table" (7.6.1).

      Criteria for PASS:

      -   Section 2 of the IDN Self-Certification Document indicates the IDN
          table format used for the IDN table (Step 1 and 4),

      -   if the IDN table is in RFC 4290 format, that it conforms to those
          guidelines (steps under 3 above),

      -   if the IDN table is in RFC 3743 format, that it conforms to those
          guidelines (steps under 4 above),

      -   if the IDN table is in RFC 7940 format, that is conforms to its
          format and requirements (steps under 5 above).

      Criteria for WARN:

      -   Meets the PASS criteria, and

      -   Some variant relation has been found to be asymmetrical or
          intransitive.

      Criteria for FAIL:

      -   Section 2 of the IDN Self-Certification Document does not indicate
          the selected IDN table format was used,

      -   the conditions in Step 2-4 are not met,

      -   part of the information is unclear or missing.

      If this test fails, none of the subsequent tests will be conducted and
      all will fail by default.
  IDNvalid02:
    Summary: IDNA Code Point validation
    Description: |
      ## Objective

      This test verifies that the status of each tabulated code point is
      PROTOCOL VALID (PVALID) or CONTEXTUAL RULE REQUIRED (CONTEXTn) as
      defined in RFC 5892 when its algorithms are applied to an appropriate
      version of the Unicode Standard. The test is repeated for all IDN
      tables.

      The IDNA Derived Property (PVALID, CONTEXTO, CONTEXTJ, DISALLOWED or
      UNASSIGNED) can be found for each code point on
      <http://www.iana.org/assignments/idna-tables-6.3.0/idna-tables-6.3.0.xhtml>
      for Unicode version 6.3. For higher version of Unicode the IDNA
      properties can be calculated from the Unicode database by the algorithm
      found in IDNA2008.

      ## Inputs

      The following information will be needed as input for this test case:

        --------------------------------------------------------------------------
        Id                        Description                         Type
        ------------------------- ----------------------------------- ------------
        TestTable                 The IDN table under scrutiny.       File

        ExtendedTestTable         IDN table generated by Test Case    File
                                  IDNvalid02.

        AvailableCodepointTable   A tabular listing of all PVALID and File
                                  CONTEXTn code points in Unicode.
        --------------------------------------------------------------------------

      ## Outcome(s)

      The outcome of the Test Case is PASS or FAIL.

      ## Environmental needs

      -   Basic desktop.

      -   Text sorting and comparison utilities.

      ## Special procedural requirements

      None.

      ## Intercase dependencies

      IDNvalid01.

      ## Ordered description of steps to be taken to execute the test case

      For every code point in every ExtendedTestTable, extract the IDNA
      Derived Property value for that code point.

      1.  Examine ExtendedTestTable, and verify that each code point has one
          of the three derived IDNA property values PVALID, CONTEXTJ, or
          CONTEXTO.

      Criteria for PASS:

      -   Each code point in ExtendedTestTable has one of the three derived
          IDNA property values PVALID, CONTEXTJ, or CONTEXTO (Step 1).

      Criteria for FAIL:

      -   ExtendedTestTable includes one or more code points indicating IDNA
          property values other than PVALID, CONTEXTJ or CONTEXTO (Step 1).

      A warning will be issued if failure is not directly indicated but a
      qualifying remark is necessary. If this test fails, none of the
      subsequent tests will be conducted and all will fail by default.
  IDNvalid03:
    Summary: Contextual Rule validation
    Description: |
      ## Objective

      This test verifies that a tabulated code point that require contextual
      rules can only be used according to those rules. The test is repeated
      for all IDN tables. This concerns:

      1.  Code points with the IDN property CONTEXTJ or CONTEXTO can only be
          used according to the contextual rule given in RFC 5892.

      2.  The contextual prohibitions on mixing Arabic and European digits in
          right-to-left labels, and on digits at the start of such labels
          given in RFC 5893.

      3.  Combining marks (non-space, spacing or enclosing marks) can never
          start a label (RFC 5891).

      4.  Required contextual rules for Modifier Letter. More on Modifier
          Letters below.

      5.  Most COMMON and INHERITED code points are usually restricted to be
          used with certain explicit Unicode scripts (UAX#24 and
          ScriptExtensions.txt of the Unicode database).

      6.  Code points with restricted context (e.g. must not be initial)
          according to Unicode.

      7.  All strings must be in Normalization Form C (see
          <http://unicode.org/reports/tr15/#Norm_Forms>).

      8.  Additional contexual rules in relevant ICANN Second-Level LGR
          Reference table, not covered above, should be included where
          applicable.

      Each Modifier Letter (General Unicode category value Modifier_Letter,
      Lm) must be accompanied with a contextual rule restricting it to
      relevant positions or be accompanied with a statement that no such rule
      is needed for that Modifier Letter. If ICANN has published requirements
      on a certain Modifier Letter, those must be followed. Stricter rules are
      permitted. Each rule or non-rule should be justified with documentation
      showing the Modifier Letters use in the language in question (for
      language based IDN tables) or some language using that script (for
      script based IDN tables). If ICANN has published requirements or
      recommendation on contextual rules for a certain Modifier Letter, it is
      valid to refer to that document.

      For many languages Second-Level LGR Reference tables are available at
      <https://www.icann.org/resources/pages/second-level-lgr-2015-06-21-en>.
      Besides code point repertoire and variant rules, those IDN tables
      contain the expected contextual rules to meet both the IDNA 2008
      standards but also the security and stability requirements of IDN.
      Registries are welcome to use those as a reference both for LGR tables
      and IDN text tables.

      ## Inputs

      The following information will be needed as input for this test case:

        -------------------------------------------------------------------------------
        Id                    Description                        Type
        --------------------- ---------------------------------- ----------------------
        TestTable             The IDN table under scrutiny.      File

        ExtendedTestTable     Table generated by test            File
                              IDNvalid02.

        IDNAContextualRules   The contextual rules listed in RFC File, RFC 5892.
                              5892, Appendix A.

        BidiDigitRules        The contextual rules given in RFC  File, RFC 5893.
                              5893, Section 2.

        UnicodeContextRules   The contextual rules given in      Unicode (UAX#24 and
                              Unicode                            ScriptExtensions.txt
                                                                 of the Unicode
                                                                 database,
                                                                 Normalization Form C)

        PolicyStatement       The IDN policies submitted for     File, IDN
                              IDNvalid00.                        Self-Certification
                                                                 Document.
        -------------------------------------------------------------------------------

      ## Outcome(s)

      The response to this test will be a pass/fail/non-applicable/warn
      determination.

      ## Environmental needs

      -   Basic desktop.

      ## Special procedural requirements

      The person conducting this test must understand the application of the
      CONTEXTn rules in RFC 5892, the Bidi rule in RFC 5893, and Unicode.

      ## Intercase dependencies

      This test effectively extends into IDNvalid11.

      ## Ordered description of steps to be taken to execute the test case

      1.  Examine ExtendedTestTable. If the IDN property CONTEXTO or CONTEXTJ
          does not appear on any row in it, the IDN table does not contain
          code points that can form RTL labels, and the IDN table contains no
          other code points requiring contextual rules, end this test as
          non-applicable.

      2.  For every code point with the IDN properties CONTEXTO or CONTEXTJ,
          verify that the availability is restricted as required by RFC 5892
          (see Appendix A).

      3.  If the label is RTL as defined in RFC 5893:

          a.  if it contains any code point in the range 0030..0039, ensure
              that no code point is in the range 0660..0669, and vice versa,

          b.  if the literal component of the label consists of code points
              taken with the explicit script property value Arabic, ensure
              that no ARABIC DIGIT, EXTENDED ARABIC DIGIT, or European DIGIT
              is in the initial position.

      4.  For every code point in the General Unicode category Combining mark,
          verify that the availability is restricted to non-initial position.

      5.  For every code point in the General Unicode category Modifier
          Letter, verify that the availability is restricted by relevant
          contextual rule or accompanied with a statement that no rule is
          required.

      6.  For every code point in the General Unicode category Modifier Letter
          verify that supporting documentation of such use is provided; or if
          no contextual rule is given it is shown that unrestricted placement
          is permissible for that code point through supporting documentation.

      7.  For every code point with special property COMMON or INHERITED
          (except for HYPHEN-MINUS U+002D and ASCII digits 0030..0039) verify
          that it has the restrictions that the Unicode Standard prescribes,
          if any.

      8.  Verify that there exist contextual rules, if needed, to prevent any
          string to be registered unless it is in Normalization Form C.

      9.  Verify that applicable contextual rules found in relvevant ICANN
          Second-Level LGR Reference table are included in the IDN table.

      For every code point besides those mentioned above, verify if the
      Unicode standard prescribes any restrictions, and if so, that those are
      followed (e.g. U+0E40).

      Criteria for N/A:

      -   There are no code points in the IDN table with IDN properties
          CONTEXTO or CONTEXTJ, nor are there any other code points that
          require contextual rules.

      Criteria for PASS:

      -   All code points with IDN property CONTEXTO or CONTEXTJ in the IDN
          tables are assigned rules that restrict them as required by RFC 5892
          (step 2).

      -   The restrictions on digits in RTL labels required by RFC 5893 are
          observed (step 3).

      -   Other code points requiring contextual rules have appropriate rules
          (steps 4-6)

      Criteria for WARN

      -   The criteria for PASS are fulfilled except that the justification
          for the contextual rule(s) or absence of contextual rule(s) for any
          Modifier Letter is missing, incomplete or unable to be validated by
          the testing provider. The TC will end with a warning accompanied
          with a comment explaining the warning. A warning is a not a failure
          condition.

      Criteria for FAIL:

      -   There are code points with IDN property CONTEXTO or CONTEXTJ in one
          or more IDN tables that lack the rules required by RFC 5892 (step
          2).

      -   ARABIC-INDIC digits and European digits appear together in an RTL
          label.

      -   An RTL label begins with an ARABIC-INDIC DIGIT, or an EXTENDED
          ARABIC-INDIC DIGIT, or a European DIGIT.

      -   Combining mark appears in the IDN table, but without contextual
          rules restricting it from initial position.

      -   Modifier Letter appears in the IDN table, without contextual rule
          restricting its use or without statement that no contextual rules
          are needed.

      -   Modifier Letter appears in the IDN table that ICANN has published
          with a requirement for contextual rules on that Modifier Letter and
          the provided contextual rule does not meet the requirement.

      -   Code points with property COMMON or INHERITED appear in the IDN
          table without contextual rules that the Unicode standard requires.

      -   The code point repertoire and rules make it possible to construct a
          string not in Normalization Form C that would be accepted.

      -   Applicable contextual rule from relevant ICANN Second-Level LGR
          Reference table is missing.

      -   Other code point without proper restriction.

      A warning will be issued if failure is not directly indicated but a
      qualifying remark is necessary. If this test fails, none of the
      subsequent tests will be conducted and all will fail by default.
  IDNvalid04:
    Summary: IDN Script validation
    Description: |
      ## Objective

      This test verifies that the code point array in a script IDN table is
      restricted to a single explicit Unicode script property value as defined
      in the Unicode Standard Annex #24, that code points with the special
      script property values COMMON or INHERITED are correctly associated with
      the designated script, and that regardless of script property value, no
      code point is used in a manner alien to the designated script. The test
      is repeated for all IDN tables.

      ## Inputs

      The following information will be needed as input for this test case:

        --------------------------------------------------------------------------
        Id                        Description                         Type
        ------------------------- ----------------------------------- ------------
        TestTable                 The IDN table under scrutiny.       File

        ExtendedTestTable         Table generated by test IDNvalid02. File

        AvailableCodepointTable   A tabular listing of all PVALID and File
                                  CONTEXTn code points in Unicode,
                                  with separate columns indicating
                                  the IDN status and the Unicode
                                  script property value for the code
                                  point that keys every row. This
                                  file is provided internally.

        ScriptIntegrityPolicies   The script integrity policies       File
                                  declared by the registry.

        UAX#24                    Unicode Standard Annex #24; Unicode File
                                  Script Property.
        --------------------------------------------------------------------------

      ## Outcome(s)

      The response to this test will be a pass/fail/warning determination.

      ## Environmental needs

      -   Basic desktop.

      ## Special procedural requirements

      The person conducting this test must understand Unicode script
      properties designating specific scripts, as well as the values COMMON
      and INHERITED. These are described in UAX #24, which states that COMMON
      and INHERITED are assigned to code points that are used with more than
      one script but that this does not imply usability with all scripts. UAX
      #24 does not provide unequivocal guidance on how to apply such
      restrictions but does illustrate correct and incorrect use of those
      properties.

      The underlying principles are to be applied in a contextually
      appropriate manner. For the purpose of the IDN level of the RST
      framework this is taken to mean that any script identifier appearing in
      the Unicode character name given to a COMMON or INHERITED code point
      must be congruent with the identifier of the IDN table being tested. For
      example, a Cyrillic script IDN table may not include the code point
      named ARABIC FATHATAN, nor would that code point be permissible in a
      Danish language IDN table.

      Similar constraints apply to combining marks and modifier letters.
      Regardless of their script property values, these may not be randomly
      interspersed in a string. The appearance, for example, of U+0483
      (COMBINING CYRILLIC TITLO) must be restricted to contexts where it is
      appropriate, which do not include U+047D (CYRILLIC SMALL LETTER OMEGA
      WITH TITLO).

      The only code points with the COMMON script property that may be
      accepted in any IDN table are 0030..0039 DIGIT ZERO..DIGIT NINE, and
      U+002D HYPEN-MINUS. This is the digit and hyphen component of the basic
      ASCII LDH repertoire and will be referred to as \"DH\" in the following
      text. The full LDH repertoire (DH plus 0061..007A) will also be accepted
      if a script IDN table is primarily based on CJK Unified Ideographs or
      Hangul Syllables.

      Any other use of COMMON or INHERITED code points in a language IDN table
      will require justification as being necessary to support the established
      orthographic practice of that language.

      A script-based IDN table that indiscriminately includes all COMMON and
      INHERITED code points will fail.

      ## Intercase dependencies

      The outcome of this test may be contingent upon IDNvalid05. It also
      effectively extends into IDNvalid11.

      ## Ordered description of steps to be taken to execute the test case

      1.  Examine ExtendedTestTable. If the column indicating the script
          property value contains the same explicit script property value for
          every row in the IDN table and the IDN table is labeled as
          supporting the designated script, end the test with pass.

      2.  If the special script property value COMMON appears in the IDN table
          and the value INHERITED does not, verify that every COMMON code
          point is in the DH cluster.

      3.  If the explicit script property value is Han, Hangul, Hiragana or
          Katakana, and Latin code points are included in the IDN table,
          verify that they are in range 0061..007A and that IDNvalid05 is
          pass.

      4.  If a code point that is not in the DH cluster has the value COMMON
          or if any code points have the value INHERITED, verify that the
          conditions discussed in UAX#24 are met.

      Criteria for PASS:

      -   ExtendedTestTable indicates the same explicit Unicode script
          property value for every listed code point and the IDN table is
          correctly labeled as supporting that script (Step 1).

      -   If the special script property value COMMON appears in an IDN table
          and the value INHERITED does not, every code point is in the DH
          cluster (Step 2).

      -   If the explicit script property value is Han, Hangul, Hiragana or
          Katakana, and Latin code points in the range 0061..007A are included
          in the IDN table, IDNvalid05 is pass (Step 3).

      -   If the Unicode script property values COMMON or INHERITED appear,
          the conditions discussed in Section 10.6, above, are met (Step 4).

      Criteria for FAIL:

      -   The Unicode script property values COMMON or INHERITED appear, and
          the conditions discussed in Section 10.6, above, are not met (Step
          4).

      A warning will be issued if failure is not directly indicated but a
      qualifying remark is necessary.
  IDNvalid05:
    Summary: IDN Script Mixing Rule validation
    Description: |
      ## Objective

      This test verifies that an IDN table including code points with more
      than one script property value is associated with rules that enforce the
      constraints on script mixing specified in the IDN Guidelines. The test
      is repeated for all IDN tables.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------------
        Id                  Description                          Type
        ------------------- ------------------------------------ --------------------
        TestTable           The IDN table under scrutiny.        File

        ExtendedTestTable   Table generated by test IDNvalid02.  File

        PolicyStatement     The IDN policies submitted for       File, IDN
                            IDNvalid00.                          Self-Certification
                                                                 Document.
        -----------------------------------------------------------------------------

      ## Outcome(s)

      The response to this test will be a pass/fail/warning determination.

      ## Environmental needs

      -   Basic desktop.

      ## Special procedural requirements

      None.

      ## Intercase dependencies

      This test may determine the outcome of IDNvalid04. It also effectively
      extends into IDNvalid11.

      ## Ordered description of steps to be taken to execute the test case

      1.  Examine ExtendedTestTable. If the column indicating the Unicode
          script property contains only one explicit script designator and no
          COMMON or INHERITED code points, end this test with pass.

      2.  If that column contains one explicit script property value and
          COMMON or INHERITED code points are present, verify that they are
          appropriate to that script.

      3.  If that column contains more than one explicit script property
          value, verify that one of the following conditions is met:

          a.  The mixing of scripts in an IDN table is restricted to LDH code
              points with Hangul Syllables.

          b.  The mixing of scripts in an IDN table is restricted to LDH code
              points with Unified CJK Ideographs.

          c.  The mixing of scripts in an IDN table is restricted to LDH code
              points with Unified CJK Ideographs intermingled with Hiragana or
              Katakana.

          d.  PolicyStatement in Section 4 of the IDN Self-Certification
              Document explain and justify the conditions under which the
              intermingling of the indicated scripts is permitted.

      Criteria for PASS:

      -   The IDN table contains only code points with the same explicit
          script property value and no COMMON or INHERITED code points.

      -   The column indicating the Unicode script property of
          ExtendedTestTable contains only one explicit script property value
          and all listed COMMON or INHERITED code points are appropriate to
          that script (Step 2), or,

      -   The column indicating the Unicode script property of
          ExtendedTestTable contains more than one explicit script property
          value and one of the conditions in Step 3a-3d is met.

      Criteria for FAIL:

      -   The column indicating the Unicode script property of
          ExtendedTestTable contains only one explicit script property value
          but COMMON or INHERITED code points are incongruous with the
          explicitly designated script (Step 2).

      -   The column indicating the Unicode script property of
          ExtendedTestTable contains more than one explicit script property
          value and none of the conditions in Step 3a-3d is met.

      A warning will be issued if failure is not directly indicated but a
      qualifying remark is necessary.
  IDNvalid06:
    Summary: IDN Language validation
    Description: |
      ## Objective

      This test verifies that an IDN table associated with a language rather
      than a script is consistent with the script-based constraints in the
      preceding test cases, and that linguistic warrant is demonstrated in any
      policy statement permitting the intermingled use of multiple scripts in
      individual labels. The test is repeated for all IDN tables.

      For many languages Second-Level LGR Reference tables are available at
      <https://www.icann.org/resources/pages/second-level-lgr-2015-06-21-en>.
      When such an IDN table is available for the languages in question it is
      consulted to determine if the code points in the TestTable are
      consistent with the language use (even if the TestTable is in text
      format). If the TestTable contains code points beyond those in the
      relevant reference IDN table, those code points will be considered
      before this TC is run based on the evidence of use provided.

      ## Inputs

      The following information will be needed as input for this test case:

        ------------------------------------------------------------------------------------------------------------------
        Id                  Description                                                              Type
        ------------------- ------------------------------------------------------------------------ ---------------------
        TestTable           The IDN table under scrutiny.                                            File

        ExtendedTestTable   Table generated by test IDNvalid02.                                      File

        PolicyStatement     The IDN policies submitted for IDNvalid00.                               File, IDN
                                                                                                     Self-Certification
                                                                                                     Document.

        IDN Reference Table IDN table found at
                            <https://www.icann.org/resources/pages/second-level-lgr-2015-06-21-en>
        ------------------------------------------------------------------------------------------------------------------

      ## Outcome(s)

      The response to this test will be a pass/fail/non-applicable/warn
      determination.

      ## Environmental needs

      -   Basic desktop.

      ## Special procedural requirements

      The person conducting this test must be familiar with basic concepts of
      writing systems and have access to reference material about the code
      point repertoires associated with the languages figuring in the PDT.
      Special care is needed in situations where a language uses multiple
      scripts but only one of them appears in a label. For example, although
      the Japanese writing system includes both the Latin and Katakana
      scripts, in a label consisting exclusively of Latin code points, U+30FC
      (KATAKANA-HIRAGANA PROLONGED SOUND MARK) would not be permissible.

      ## Intercase dependencies

      None.

      ## Ordered description of steps to be taken to execute the test case

      1.  If TestTable is labeled as supporting a script rather than a
          language, end this test as non-applicable.

      2.  If TestTable supports a language, examine ExtendedTestTable and
          verify that:

          a.  one explicit script property value is indicated and it is
              appropriate to the writing system for the designated language,
              and that the supported repertoire is used for that writing
              system. If available, an IDN Reference Table will be used to
              evaluate the ExtendedTestTable.

          b.  more than one explicit script property value is indicated and
              the IDN table is declared to support a language with a writing
              system that uses all of those scripts, that PolicyStatement in
              Section 4 of the IDN Self-Certification Document provides
              verifiable warrant for that assertion.

      Criteria for N/A:

      -   If TestTable is labeled as supporting a script rather than a
          language, end this test as non-applicable (Step 1).

      Criteria for PASS:

      -   The code point repertoire in a language IDN table is appropriate to
          the writing system of the indicated language (Step 2a). Broad
          allowance will be made for documentable orthographic variation.

      -   The code point repertoire in a language IDN table is declared to
          support a language with a writing system that uses multiple scripts
          and PolicyStatement in Section 4 of the IDN Self-Certification
          Document provides verifiable warrant for that assertion (Step 2b).

      Criteria for FAIL:

      -   The code point repertoire in a language IDN table is not appropriate
          to the writing system of the indicated language (Step 2a) or the
          indiscriminate inclusion of additional code points from the
          script(s) used for that writing system.

      -   The code point repertoire in a language IDN table is declared to
          support language with a writing system that uses multiple scripts
          and PolicyStatement in Section 4 of the IDN Self-Certification
          Document does not provide verifiable warrant for that assertion
          (Step 2b).

      NOTE: the only writing system thus far figuring in the discussion of IDN
      repertoires that uses multiple scripts is Japanese, which intermingles
      elements of the Han, Hiragana, Katakana, and the Basic Latin scripts
      (\"a..z\"). As noted in IDNvalid04, the RST also accepts the Basic Latin
      repertoire together with Unified CJK Ideographs or Hangul Syllables
      without need for separate justification.

      A warning will be issued if failure is not directly indicated but a
      qualifying remark is necessary.
  IDNvalid07:
    Summary: Variant Code Point validation
    Description: |
      ## Objective

      This test verifies that policies for the processing of variant
      relationships between listed code points are described in sufficient
      detail, and that all code points listed in a submitted IDN table as
      having variant relationships are concordant with those policies. The
      test is repeated for all IDN tables.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------------
        Id                  Description                          Type
        ------------------- ------------------------------------ --------------------
        TestTable           The IDN table under scrutiny.        File

        VariantAlgorithms   The IDN policies submitted for       File, IDN
                            IDNvalid00 that describe the variant Self-Certification
                            generation algorithms used by the    Document
                            registry.

        VariantPolicies     The IDN policies submitted for       File, IDN
                            IDNvalid00 that describe the variant Self-Certification
                            management policies declared by the  Document
                            registry.

        GRsupport           The yes/no response to the question  File, IDN
                            in Section 1 of the Registry         Self-Certification
                            Operator\'s IDN Self-Certification   Document
                            Document regarding support for IDN
                            at the start of General
                            Registration.

        EPPtags             A list of all EPP extensions needed  File
                            to submit a request for the
                            registration of an IDN label.
        -----------------------------------------------------------------------------

      ## Outcome(s)

      The response to this test will be a pass/fail/non-applicable/warning
      determination.

      ## Environmental needs

      -   Basic desktop.

      -   EPP client.

      -   IPv4 or IPv6 connectivity.

      ## Special procedural requirements

      The person conducting this test must understand the concept of variant
      code points that ICANN applies to IDN repertoires and the associated
      registration policies. Further procedural constraints are discussed in
      Section 2.3.2 of this document. Special care needs to be taken with
      scripts that have single-code point and multiple-code point
      representations of the same character (i.e. both precomposed and
      combining forms, without the one canonically being replaced by the
      other). If both forms are included in an IDN table, variant policies
      must be provided to ensure that they cannot be separately delegated.

      ## Intercase dependencies

      None.

      ## Ordered description of steps to be taken to execute the test case

      1.  Examine TestTable. If there is no indication of variant rules of any
          code point in the IDN tables, end this Test Case as non-applicable.

      2.  If correlations between two code points are indicated ("variant
          relationships"), verify that

          a.  VariantPolicies in Section 4 of the IDN Self-Certification
              Document explains each such relationship and the constraints
              that attach to it, or VariantAlgorithms in Section 4 of the IDN
              Self-Certification Document describes the processing of each
              such relationship. If neither is available, end the test as
              failed.

          b.  VariantPolicies in Section 4 of the IDN Self-Certification
              Document describe how the Registry Operator activates variants
              and that it correlates with what is stated in Exhibit A of the
              TLD Registry Agreement regarding the activation of variants. If
              there are any discrepancies, issue a warning to the Registry
              Operator.

      3.  If GRsupport is negative, the remaining steps in this test are
          omitted. If GRsupport is positive, proceed with the test sequence
          but restrict it to the IDN tables that are explicitly listed in
          Section 1 of the IDN Self-Certification Document and are also listed
          in Exhibit A of the TLD Registry Agreement.

      4.  If there is any uncertainty about how variant management policies
          are applied to an IDN table in a regard that is significant to the
          pass/fail determination, construct a label including a code point
          that is expected to be replaced by another code point upon
          registration and submit an EPP request for it. If the request is
          accepted without any indication of that transformation having been
          applied, end the test as failed.

      5.  If there is similar uncertainty about the variant management process
          blocking the registration of a label in one variant form if a label
          in another variant form has already been registered, construct a
          second test label in a form that should cause such blocking, and
          submit an EPP request for it. A further test label in a form that is
          not expected to be blocked may also be submitted for registration.

      This EPP component of this test is only applicable to IDN tables that
      are listed both in Exhibit A of the Registry Agreement *and* Section 1
      of their IDN Self-Certification Document.

      Criteria for N/A:

      -   This test is not applicable to IDN tables that do not declare
          variant relationships between listed code points and where no such
          relationships are otherwise apparent (Step 1).

      Criteria for PASS:

      -   Any IDN table that indicates variant relationships between code
          points must be accompanied by documentation that clearly explains
          how those relationships are managed in the registry (Step 2).

      ```{=html}
      <!-- -->
      ```
      -   If EPP tests are conducted, the registry must accept EPP requests
          for the registration of labels so that the behavior expected on the
          basis of the documentation can be verified. EPP extensions that are
          required in this process is included in the documentation.

      -   If the registry accepts and rejects test labels in accordance with
          the anticipated behavior, or the documentation of variant management
          is sufficient without EPP testing (Step 4 and 5).

      Criteria for FAIL:

      -   The Section 4 of the IDN Self-Certification Document does not
          explain the variant management in sufficient detail to support the
          test (Step 2).

      -   Required EPP extensions are not included in the documentation.

      -   Expected EPP responses are not returned (Step 4 and 5).
  IDNvalid09:
    Summary: Variant Management Policy
    Description: |
      ## Objective

      This test verifies that the variant management as described in the
      policy is compliant with the regulation of variant management in the
      Registry Agreement for that TLD.

      ## Inputs

      The following information will be needed as input for this test case:

        ------------------------------------------------------------------------
        Id                Description                    Type
        ----------------- ------------------------------ -----------------------
        PolicyStatement   The IDN policies submitted for File, IDN
                          IDNvalid00.                    Self-Certification
                                                         Document.

        ExhibitA          Exhibit A of the Registry      File
                          Agreement between ICANN and
                          the Registry Operator for the
                          TLD tested.
        ------------------------------------------------------------------------

      ## Outcome(s)

      The response to this test will be a pass/fail/not applicable
      determination.

      ## Environmental needs

      -   Basic desktop.

      ## Special procedural requirements

      None.

      ## Intercase dependencies

      IDNvalid07 must be completed before this test case.

      ## Ordered description of steps to be taken to execute the test case

      1.  If IDNvalid07 has resulted in \"not applicable\" then end with N/A.

      2.  Examine PolicyStatement and determine what the policy for variant
          management is.

      3.  Examine ExhibitA and determine if the TLD is permitted to have any
          variant management.

      4.  Examine ExhibitA and determine if the TLD is permitted to activate
          any variants and what rules there are for activation.

      5.  Compare the results of step 3 and 4 with the result of step 2.

      6.  If the variant management in the PolicyStatement is compliant with
          the permissible variant management, end with PASS.

      7.  If the variant management in the PolicyStatement is NOT compliant
          with the permissible variant management, end with FAIL.

      Criteria for N/A:

      -   IDNvalid07 is N/A (Step 1).

      Criteria for PASS:

      -   PolicyStatement is compliant with ExhibitA (Step 6).

      Criteria for FAIL:

      -   PolicyStatement is not compliant with ExhibitA (Step 7).
  IDNvalid10:
    Summary: Basic IDN compliance
    Description: |
      ## Objective

      This test verifies that the registry system is compliant with basic IDN
      requirements by not accepting registration of neither IDN strings in
      U-label format with HYPHEN in position three and four nor non-IDN ASCII
      strings with HYPHEN in position three and four. It also verifies that an
      IDN string in U-label format is rejected if it has HYPHEN in initial or
      final position.

      ## Inputs

      The following information will be needed as input for this test case:

        ------------------------------------------------------------------------
        Id                Description                    Type
        ----------------- ------------------------------ -----------------------
        PolicyStatement   The IDN policies submitted for File, IDN
                          IDNvalid00.                    Self-Certification
                                                         Document.

        GRsupport         The yes/no response to the     File, IDN
                          question in Section 1 of the   Self-Certification
                          Registry Operator\'s           Document
                          Self-Certification Document
                          regarding support for IDN at
                          the start of General
                          Registration (see also
                          IDNvalid11).

        EPPtags           A list of all IDN EPP          File
                          extensions, such as language
                          and script tags, needed to
                          submit a request for the
                          registration of an IDN label.
        ------------------------------------------------------------------------

      ## Outcome(s)

      The response to this test will be a pass/fail.

      ## Environmental needs

      -   Basic desktop.

      -   EPP client.

      -   IPv4 or IPv6 connectivity.

      ## Special procedural requirements

      None.

      ## Intercase dependencies

      IDNvalid11.

      ## Ordered description of steps to be taken to execute the test case

      1.  Inspect PolicyStatement to determine if the TLD accepts registration
          of ASCII domains without any EPP/IDN extension. Unless it explicitly
          says that registration of ASCII domains are not supported, assume
          that it is.

      2.  The following test strings are to be registered without any EPPtag.

          a.  Construct TL91 as a unique, valid ASCII label and \"expect
              accept\". TL91 is skipped if ASCII domains are not registerable.

          b.  Construct TL92 as a unique, otherwise valid non-IDN ASCII label,
              but with HYPHEN in third and fourth positions and set \"expect
              reject\". TL92 is always included.

      3.  If GRsupport is negative, skip the following steps.

      4.  If GRsupport is positive, select one of the IDN tables that are
          explicitly listed in Section 1 of the IDN Self-Certification
          Document.

      5.  Determine the EPPtag used for the IDN table, if any.

      6.  The following test strings are to be registered as other IDN labels
          in IDNvalid11.

          a.  Construct TL93 as a unique, otherwise valid IDN label matching
              all other restrictions of the selected IDN table, but with
              HYPHEN in third and fourth positions of the U-label.

          b.  Construct TL94 as a unique, otherwise valid IDN label matching
              all other restrictions of the selected IDN table, but with
              HYPHEN in the initial position of the U-label.

          c.  Construct TL95 as a unique, otherwise valid IDN label matching
              all other restrictions of the selected IDN table, but with
              HYPHEN in the final position of the U-label.

      7.  Submit a request to register TL91 to TL95. This is done together
          with the test labels from IDNvalid11, if applicable.

      Criteria for PASS:

      -   Expected result is returned. All the following applies (only
          constructed labels are considered):

          a.  TL91 is accepted.

          b.  TL92 is rejected.

          c.  TL93 is rejected.

          d.  TL94 is rejected.

          e.  TL95 is rejected.

      Criteria for FAIL:

      -   Expected result is not returned. Any of the following applies (only
          constructed labels are considered):

          a.  TL91 is rejected.

          b.  TL92 is accepted.

          c.  TL93 is accepted.

          d.  TL94 is accepted.

          e.  TL95 is accepted.
  IDNvalid11:
    Summary: IDN online registry response validation
    Description: |
      ## Objective

      This test verifies that the online registry correctly processes test
      strings needed for preceding tests. The test is repeated for all IDN
      tables.

      ## Inputs

      The following information will be needed as input for this test case:

        ------------------------------------------------------------------------
        Id                Description                    Type
        ----------------- ------------------------------ -----------------------
        TestTable         The IDN table under scrutiny.  File

        PolicyStatement   The IDN policies submitted for File, IDN
                          IDNvalid00.                    Self-Certification
                                                         Document.

        GRsupport         The yes/no response to the     File, IDN
                          question in Section 1 of the   Self-Certification
                          Registry Operator\'s           Document
                          Self-Certification Document
                          regarding support for IDN at
                          the start of General
                          Registration.

        EPPtags           A list of all IDN EPP          File
                          extensions, such as language
                          and script tags, needed to
                          submit a request for the
                          registration of an IDN label.
        ------------------------------------------------------------------------

      ## Outcome(s)

      The response to this test will be a pass/fail/warning determination.

      ## Environmental needs

      -   Basic desktop.

      -   EPP client.

      -   IPv4 or IPv6 connectivity.

      ## Special procedural requirements

      None.

      ## Intercase dependencies

      This test is an effective extension of IDNvalid03, IDNvalid04, and
      IDNvalid05. It is, however, only applied to those IDN tables listed in
      Exhibit A of the TLD Registry Agreement that are also listed in their
      response to Section 1 of the corresponding IDN Self-Certification
      Document. If no IDN tables are listed in that section, this test is not
      applicable.

      Test labels constructed in this test case are registered together with
      the test labels constructed in test case IDNvalid10.

      ## Ordered description of steps to be taken to execute the test case

      1.  If GRsupport is negative, terminate this test as not applicable. If
          GRsupport is positive, proceed with the test sequence but restrict
          it to the IDN tables that are explicitly listed in Section 1 of the
          IDN Self-Certification Document and are also listed in Exhibit A of
          the TLD Registry Agreement.

      2.  Examine ExtendedTestTable, for every code point or group of code
          points that the execution of IDNvalid03 has shown to have contextual
          rules, construct three test labels including the code point with
          that property.

          a.  The first test label, TL1 will place the code point in the
              context required by the associated rule.

          b.  The second, TL2, will place the code point in a context that
              violates the rule.

          c.  The third, TL3, will include two instances of the code point, of
              which one will respect the contextual rule and the other will
              violate it, if applicable.

      3.  Examine ExtendedTestTable and construct three test labels or sets of
          labels:

          a.  The first, TL4 consists solely of listed code points.

          b.  The second, TL5, includes one code point that is not listed.

          c.  The third, TL6, includes at least one code point with an
              explicit script property value that both differs from any listed
              in the IDN table, and is not allowed in PolicyStatement.

      4.  Examine ExtendedTestTable and if it contains code points in both the
          range 0030..0039 and the range 0660..0669, and is an RTL label
          according to RFC 5893, construct a test label:

          a.  that includes code points from both ranges, TL7.

      5.  Examine ExtendedTest, and if it includes code points from any Arabic
          script block construct three test labels:

          a.  The first, TL8, begins with a code point in the range 0030..0039
              and is followed by code points with the explicit script property
              value Arabic.

          b.  The second, TL9, begins with a code point in the range
              0660..0699 and is followed by code points with the explicit
              script property value Arabic.

          c.  The third, TL10, begins with a code point in the range
              06F0..06F9 and is followed by code points with the explicit
              script property value Arabic.

      6.  Submit a request to register (use any elements of EPPtags that may
          be necessary) TL1 through TL10. Include applicable test strings from
          IDNvalid10.

      This test is only applicable to IDN tables that are listed both in
      Exhibit A of the TLD Registry Agreement *and* Section 1 of their IDN
      Self-Certification Document. Any EPP extensions required for the
      submission of a registration request must be included in the
      documentation.

      Criteria for N/A:

      -   GRsupport is negative (Step 1).

      Criteria for PASS:

      -   EPP extensions required for the submission of a registration request
          is included in the documentation.

      -   Expected result is returned (Step 4).

          a.  TL1 is accepted.

          b.  TL2 is rejected.

          c.  TL3 is rejected.

          d.  TL4 is accepted.

          e.  TL5 is rejected.

          f.  TL6 is rejected.

          g.  TL7 is rejected.

          h.  TL8 is rejected.

          i.  TL9 is rejected.

          j.  TL10 is rejected.

      -   The expected EPP result code is returned for each test label derived
          from a preceding test case.

      Criteria for FAIL:

      -   EPP extensions required for the submission of a registration request
          are not included in the documentation.

      -   Expected result is not returned (Step 4).

          a.  TL1 is rejected.

          b.  TL2 is accepted.

          c.  TL3 is accepted.

          d.  TL4 is rejected.

          e.  TL5 is accepted.

          f.  TL6 is accepted.

          g.  TL7 is accepted.

          h.  TL8 is accepted.

          i.  TL9 is accepted.

          j.  TL10 is accepted.

      -   The expected EPP result code is not returned for each test label
          derived from a preceding test case.

      A warning will be issued if failure is not directly indicated but a
      qualifying remark is necessary or if the response to the request
      indicates that IDN registration is not yet supported in the registry.
  IDNvalid12:
    Summary: Asymmetrical and intransitive variant rule verification
    Description: |
      ## Objective

      This test verifies that any asymmetrical or intransitive variant rules
      do note create any security or stability issues.

      Example of asymmetrical variant rules that create security and stability
      issues:

      -   Both *A* and *B* are code point that are permitted to be included in
          labels by an IDN table, and *A* is a variant of *B* but *B* is not a
          variant of *A*.

      This Test Case will verify that all discovered asymmetrical or
      intransitive variant rules can not create security or stability issues.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id               Description                    Type
        ---------------- ------------------------------ -----------------------
        TestTable        The IDN table under scrutiny.  File

        VariantRules     Result from IDNvalid01,        Data
                         whether the IDN table contains
                         variant rules that are
                         asymmetrical or intransitive.
        -----------------------------------------------------------------------

      ## Outcome(s)

      The response to this test will be a pass/fail determination.

      ## Environmental needs

      -   Basic desktop.

      ## Special procedural requirements

      None.

      ## Intercase dependencies

      This test is an effective extension of IDNvalid01. If that Test Case
      does not report of any IDN table containing any asymmetrical or
      intransitive variant rule then this Test Case is not applicable.

      ## Ordered description of steps to be taken to execute the test case

      1.  If VariantRules is negative (no asymmetry or intransitivity),
          terminate this test as not applicable.

      2.  Examine each asymmetrical or intransitive variant rule or rule set
          reported by IDNvalid01.

      3.  If a specific variant rule or rule set can create security or
          stability issues, then this Test Case will conclude with FAIL.

      Criteria for N/A:

      -   IDNvalid01 did not report any asymmetrical or intransitive variant
          rules.

      Criteria for PASS:

      -   No asymmetrical or intransitive variant rule or rule set will create
          security or stability issues.

      Criteria for FAIL:

      -   At least one asymmetrical or intransitive variant rule or rule set
          have been found to potentially create security or stability issue.
  IDNvalid13:
    Summary: Pre-composed vs. decomposed character equivalence verification
    Description: |
      ## Objective

      This Test Case verifies that the IDN table correctly handles cases where
      the same character can be represented either by a single code point
      representing a pre-composed glyph or by a sequence of code points
      representing a decomposed glyph. What this exactly means is illustrated
      in the table below.

      This Test Case does not cover cases where the decomposed glyph is
      defined by Unicode to be in Normalization Form D, since that is already
      covered by Test Case IDNvalid03.

      If an IDN table include all code points of the members of a
      pre-composed/decomposed pair, then this Test Case will verify that there
      are contextual rules that prevent both members to appear in the same
      context or that there are variant rules that handle those as "same".

        -----------------------------------------------------------------------------------------------------------------------------
        Pre-composed glyph                                                    Pre-composed code  Decomposed glyph Decomposed code
                                                                              point                               point sequence
        --------------------------------------------------------------------- ------------------ ---------------- -------------------
        [ځ]{dir="rtl"}                                                        0681               [حٔ]{dir="rtl"}   062D 0654

        ![mage of                                                             08A1               [بٔ]{dir="rtl"}   0628 0654
        U+08A1](media/image2.png){style="width:0.45276in;height:0.44488in"}

        ƚ                                                                     019A               l̵                006C 0335
        -----------------------------------------------------------------------------------------------------------------------------

      The pre-composed/decomposed pairs considered in this Test Case includes
      all such pairs listed in the table above, but is not limited to those.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id               Description                    Type
        ---------------- ------------------------------ -----------------------
        TestTable        The IDN table under scrutiny.  File

        VariantRules     Variant rules for the IDN      Data
                         table

        ContextRules     Contextual rules for the IDN   Data
                         table
        -----------------------------------------------------------------------

      ## Outcome(s)

      The response to this test will be a pass/fail determination.

      ## Environmental needs

      -   Basic desktop.

      ## Special procedural requirements

      None.

      ## Intercase dependencies

      None.

      ## Ordered description of steps to be taken to execute the test case

      1.  If none of the IDN tables contains all code points of
          pre-composed/decomposed pair, then this TC will end with N/A.

      2.  Inspect all such pairs in the IDN table.

      3.  If not all such pairs are controlled by contextual rules or variant
          rules, as described above, then this TC ends with FAIL.

      4.  If all such pairs are controlled, then it ends with PASS.

      Criteria for N/A:

      -   There are no pre-composed/decomposed pairs to verify.

      Criteria for PASS:

      -   All pre-composed/decomposed pairs are controlled by contextual or
          variant rules.

      Criteria for FAIL:

      -   At least one pre-composed/decomposed pair lacks necessary rules.

  WhoisCLI01:
    Summary: Verify the format of domain lookup responses
    Description: |
      ## Objective

      Multiple Domain Name Object queries will be performed over IPv4 and IPv6
      TCP connections on port 43. The objective is to verify the format of the
      responses of such queries.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        TLD                    The ASCII compatible name of the    String
                               TLD

        WhoisTestDomain        An existing domain name which has   String
                               Whois data

        DnsGlueRecord          IPv4 or IPv6 addresses for auth NS  String

        CharEncoding           Character encoding declaration      String

        EppRepID               EPP Repository Identifier           String
                               declaration
        -----------------------------------------------------------------------

      ## Outcome(s)

      The format of the responses MUST follow the specification outlined in
      section 23, \"Format Specification\", in this document and all responses
      must be identical.

      ## Environmental needs

      -   Whois client software that preserves line endings in the response,
          e.g. Netcat

      -   IPv4 connectivity

      -   IPv6 connectivity

      -   List of IP addresses (IPv4 and IPv6, respectively) from resolving
          \<whois.nic.TLD\> using the delegation data, where \<WhoisIP\> is
          one such address.

      -   \<CharEncoding\>, character encoding declaration from pdtwhois.xml
          file.

      -   \<EppRepID\>, EPP Repository Identifier declaration from
          pdtwhois.xml file

      ## Special procedural requirements

      A Whois query and its response MUST NOT take longer than 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Resolve IPv4 and IPv6 addresses of the host whois.nic.**\<TLD\>**
          using **\<DnsGlueRecord\>**. If multiple addresses are returned from
          lookup, all addresses are used.

      2.  Make a query from each test node using the client software, i.e. the
          same query is sent from each test node and to all IP addresses found
          (IPv4 and IPv6).\
          whois -h **\<WhoisIP\>** **\<WhoisTestDomain\>**

      3.  For each query executed repeat the following steps:

          a.  Verify that the Whois server returns a response.

          b.  Verify that the character encoding of the response matches
              \<CharEncoding\>.

          c.  Verify that the response is identical to all other responses.

          d.  Verify that the response is a \"Domain name reply\" as defined
              in section 23.

          e.  Verify that the response conforms to the format in the
              specification. *This verification includes, but is not limited
              to, verification of ROID format and registration of ROID Suffix,
              mandatory fields, field names, order of fields, status codes,
              and data format. See section* 23 *in this document for all
              details.*

          f.  Verify that the queried domain name exactly matches the name in
              the \"Domain Name\" field in the response.

          g.  Verify that the *ROID Suffix*, as defined in section 23, of the
              \"Domain ID\" field exactly matches \<EppRepID\>.

      Criteria for PASS:

      -   The Whois output is encoded in ASCII, and

      -   The Whois service is available on IPv4 and IPv6, and

      -   All verifications (steps 3a-g) are successful.

      Criteria for WARN:

      -   The Whois output is not encoded in ASCII, and

      -   The Whois output was successfully converted to UTF-8, and

      -   All other criteria for PASS are successful.

      Criteria for FAIL:

      -   The encoding of the Whois output cannot be converted to UTF-8, or

      -   At least one other criteria for PASS is unsuccessful.
  WhoisCLI02:
    Summary: Verify the format of registrar lookup responses
    Description: |
      ## Objective

      Multiple Registrar Object queries will be performed over IPv4 and IPv6
      TCP connections on port 43. The objective is to verify the format of the
      responses of such queries.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        TLD                    The ASCII compatible name of the    String
                               TLD

        WhoisTestRegistrar     An existing registrar which has     String
                               Whois data

        DnsGlueRecord          IPv4 or IPv6 addresses for auth NS  String

        CharEncoding           Character encoding of Whois output  String
        -----------------------------------------------------------------------

      ## Outcome(s)

      The format of the responses MUST follow the specification outlined in
      section 23, \"Format Specification\", in this document and all responses
      must be identical.

      ## Environmental needs

      -   Whois client software that preserves line endings in the response,
          e.g. Netcat

      -   IPv4 connectivity

      -   IPv6 connectivity

      -   List of IP addresses (IPv4 and IPv6, respectively) from resolving
          \<whois.nic.TLD\> using the delegation data, where \<WhoisIP\> is
          one such address.

      -   \<CharEncoding\>, character encoding declaration from pdtwhois.xml
          file.

      ## Special procedural requirements

      A Whois query and its response MUST NOT take longer time than 10
      seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Resolve IPv4 and IPv6 addresses of the host whois.nic.\<TLD\> using
          \<DnsGlueRecord\>. If multiple addresses are returned from lookup,
          all addresses are used.

      2.  Make a query from each test node using the client software, i.e. the
          same query is sent from each test node and to all IP addresses found
          (IPv4 and IPv6).\
          whois -h **\<WhoisIP\>** **\< WhoisTestRegistrar \>**

      3.  For each query executed repeat the following steps:

          a.  Verify that the Whois server returns a response.

          b.  Verify that the character encoding of the response matches
              \<CharEncoding\>.

          c.  Verify that the response is identical to all other responses.

          d.  Verify that the response is a \"Registrar reply\" as defined in
              section 23.

          e.  Verify that the response conforms to the format in the
              specification. *This verification includes, but is not limited
              to, verification of ROID format and registration of ROID Suffix,
              mandatory fields, field names, order of fields, status codes,
              and data format. See section* 23 *in this document for all
              details.*

          f.  Verify that the queried registrar name matches the name in all
              \"Registrar Name\" fields in the response. The match may be a
              substring match.

      Criteria for PASS:

      -   The Whois output is encoded in ASCII, and

      -   The Whois service is available on IPv4 and IPv6, and

      -   All verifications (steps 3a-f) are successful.

      Criteria for WARN:

      -   The Whois output is not encoded in ASCII, and

      -   The Whois output was successfully converted to UTF-8, and

      -   All other criteria for PASS are successful.

      Criteria for FAIL:

      -   The encoding of the Whois output cannot be converted to UTF-8, or

      -   At least one other criteria for PASS is unsuccessful.
  WhoisCLI03:
    Summary: Verify the format of nameserver lookup responses
    Description: |
      ## Objective

      Multiple Name Server Object queries will be performed over IPv4 and IPv6
      TCP connections on port 43. The objective is to verify the format of the
      responses of such queries.

      ## Inputs

      The following information will be needed as input for this test case:

        --------------------------------------------------------------------------
        Id                        Description                         Type
        ------------------------- ----------------------------------- ------------
        TLD                       The ASCII compatible name of the    String
                                  TLD

        WhoisTestNameServerName   The domain name of an existing name String
                                  server which has Whois data

        WhoisTestNameServerIP     The IP address of an existing name  String
                                  server which has Whois data

        DnsGlueRecord             IPv4 or IPv6 addresses for auth NS  String

        CharEncoding              Character encoding of Whois output  String
        --------------------------------------------------------------------------

      ## Outcome(s)

      The format of the responses MUST follow the specification outlined in
      section 23, \"Format Specification\", in this document and all responses
      must be identical.

      ## Environmental needs

      -   Whois client software that preserves line endings in the response,
          e.g. Netcat

      -   IPv4 connectivity

      -   IPv6 connectivity

      -   List of IP addresses (IPv4 and IPv6, respectively) from resolving
          \<whois.nic.TLD\> using the delegation data, where \<WhoisIP\> is
          one such address.

      -   \<CharEncoding\>, character encoding declaration from pdtwhois.xml
          file.

      ## Special procedural requirements

      Abort the test if any Whois query takes longer than 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Resolve IPv4 and IPv6 addresses of the host whois.nic.\<TLD\> using
          \<DnsGlueRecord\>. If multiple addresses are returned from lookup,
          all addresses are used.

      2.  Make two queries from each test node using the client software, i.e.
          the same two queries are sent from each test node and to all IP
          addresses found (IPv4 and IPv6).\
          whois -h **\<WhoisIP\>** \"nameserver
          **\<WhoisTestNameServerName\>**\"**\
          ** whois -h **\<WhoisIP\>** "nameserver
          **\<WhoisTestNameServerIP\>**"

      3.  Verify that the Whois server returns responses to the two queries. A
          response means at least some text is returned.

      4.  Both queries (WhoisTestNameServerName or WhoisTestNameServerIP) for
          all queried Whois servers MUST give a response that matches the
          following steps and requirements.

          a.  Verify that the character encoding of the responses match
              \<CharEncoding\>.

          b.  Verify that the response is identical to all other responses to
              the same query.

          c.  Verify that the response is a \"Name server reply type 1\" or
              \"Name server reply type 2\" as defined in section 23.

          d.  Verify that response conforms to the format in the
              specification. *This verification includes, but is not limited
              to, verification of ROID format and registration of ROID Suffix,
              mandatory fields, field names, order of fields, status codes,
              and data format. See section* 23 *in this document for all
              details.*

          e.  If the response is \"Name server reply type 1\" and the query is
              for WhoisTestNameServerName do the following step:

              i.  Verify that the \"Server Name\" field field exactly matches
                  WhoisTestNameServerName in all returned Name Server objects.

          f.  If the response is \"Name server reply type 1\" and the query is
              for WhoisTestNameServerIP do the following step:

              i.  If the \"IP Address\" field is present, verify that at least
                  one such field exactly matches WhoisTestNameServerIP.

              ii. Repeat the previous verification in every Name Server
                  objects in the response.

          g.  If the response is \"Name server reply type 2\" do the following
              step:

              i.  Extract the ROID from the first \"Roid Line\" as defined in
                  the format specification.

              ii. Make a new whois query, now using the extracted ROID in the
                  query string (\"roid \<ROID\>\").

              iii. Verify that the new response is a \"Name server reply type
                   1\" as defined in section 23.

              iv. Verify that the new response conforms to the format in the
                  specification.

              v.  Verify the response using step e or f above.

      Criteria for PASS:

      -   The Whois outputs are encoded in ASCII, and

      -   The Whois service is available on IPv4 and IPv6, and

      -   All verifications (under steps 3 and 4a-g) are successful.

      Criteria for WARN:

      -   The Whois outputs are not encoded in ASCII, and

      -   The Whois output was successfully converted to UTF-8, and

      -   All other criteria for PASS are successful.

      Criteria for FAIL:

      -   The encoding of the Whois output cannot be converted to UTF-8, or

      -   At least one other criteria for PASS is unsuccessful.
  WhoisWeb01:
    Summary: Verify IPv4 connectivity of Whois Web service
    Description: |
      ## Objective

      The automated test makes HTTP and HTTPS connections over IPv4 from all
      nodes and verifies that there is a successful connection. The test does
      not validate the certificate for the HTTPS connection.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        TLD                    The ASCII compatible name of the    String
                               TLD

        DnsGlueRecord          IPv4 or IPv6 addresses for auth NS  String
        -----------------------------------------------------------------------

      ## Outcome(s)

      The Whois service MUST be available on HTTP over IPv4.

      ## Environmental needs

      -   Whois test script

      -   IPv4 connectivity

      -   \<WhoisIPv4\> from resolving \<whois.nic.TLD\> using the delegation
          data.

      ## Special procedural requirements

      Connect time must not exceed 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Resolve the IPv4 addresses of the host whois.nic.**\<TLD\>** using
          **\<DnsGlueRecord\>**. If multiple addresses are returned from
          lookup, all addresses are used. \<WhoisIPv4\> is one such address

      2.  Repeat the following steps from each test node for every IPv4
          address:

          a.  Make an IPv4 HTTP connection to whois.nic.**\<TLD\>**
              (**\<WhoisIPv4\>**). Redirection is allowed but the end HTTP
              response MUST be 200.

          b.  Make an IPv4 HTTPS connection to whois.nic.**\<TLD\>**
              (**\<WhoisIPv4\>**). Redirection is allowed but the end HTTP
              response SHOULD be 200.

          c.  If the HTTP connection returns a referral to HTTPS, then that
              referral and any subsequent referrals MUST return an HTTP status
              response 200.

      3.  To pass the test, every IPv4 address must pass.

      Criteria for PASS:

      -   The web HTTP Whois page and the web HTTPS Whois page can be reached
          using IPv4 only, and

      -   the HTTP status code is 200 for both, and

      -   the criteria are met from all test nodes, and

      -   the criteria are met for every IPv4 address.

      Criteria for WARN:

      -   The web HTTP Whois page can be reached using IPv4 only, and

      -   the HTTP status code is 200 for the HTTP page, and

      -   the web HTTPS Whois page cannot be reached or cannot be reached
          using IPv4 only, or

      -   the HTTP status code is not 200 for the HTTPS page.

      -   Failure of HTTPS on one IPv4 address is enough to get WARN.

      Criteria for FAIL:

      -   The web HTTP Whois page cannot be reached or cannot be reached using
          IPv4 only, or

      -   the HTTP status code is not 200 for the HTTP page.

      -   Failure of HTTP on one IPv4 address is enough to get FAIL.
  WhoisWeb02:
    Summary: Verify IPv6 connectivity of Whois Web service
    Description: |
      ## Objective

      The automated test makes HTTP and HTTPS connections over IPv6 from all
      nodes and verifies that there is a successful connection. The test does
      not validate the certificate for the HTTPS connection.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        TLD                    The ASCII compatible name of the    String
                               TLD

        DnsGlueRecord          IPv4 or IPv6 addresses for auth NS  String
        -----------------------------------------------------------------------

      ## Outcome(s)

      The Whois service MUST be available on HTTP over IPv6.

      ## Environmental needs

      -   Whois test script

      -   IPv6 connectivity

      -   \<WhoisIPv6\> from resolving \<whois.nic.TLD\> using the delegation
          data.

      ## Special procedural requirements

      Connect time must not exceed 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Resolve the IPv6 addresses of the host whois.nic.\<TLD\> using
          \<DnsGlueRecord\>. If multiple addresses are returned from lookup,
          all addresses are used. \<WhoisIPv6\> is one such address

      2.  Repeat the following steps from each test node for every IPv6
          address:

          a.  Make an IPv6 HTTP connection to whois.nic.**\<TLD\>**
              (**\<WhoisIPv6\>**). Redirection is allowed but the end HTTP
              response MUST be 200.

          b.  Make an IPv6 HTTPS connection to whois.nic.**\<TLD\>**
              (**\<WhoisIPv6\>**). Redirection is allowed but the end HTTP
              response SHOULD be 200.

          c.  If the HTTP connection returns a referral to HTTPS, then that
              referral and any subsequent referrals MUST return an HTTP status
              response 200.

      3.  To pass the test, every IPv6 address must pass.

      Criteria for PASS:

      -   The web HTTP Whois page and the web HTTPS Whois page can be reached
          using IPv6 only, and

      -   the HTTP status code is 200 for both, and

      -   the criteria are met from all test nodes, and

      -   the criteria are met for every IPv6 address.

      Criteria for WARN:

      -   The web HTTP Whois page can be reached using IPv6 only, and

      -   the HTTP status code is 200 for the HTTP page, and

      -   the web HTTPS Whois page cannot be reached or cannot be reached
          using IPv6 only, or

      -   the HTTP status code is not 200 for the HTTPS page.

      -   Failure of HTTPS on one IPv6 address is enough to get WARN.

      Criteria for FAIL:

      -   The web HTTP Whois page cannot be reached or cannot be reached using
          IPv6 only, or

      -   the HTTP status code is not 200 for the HTTP page.

      -   Failure of HTTP on one IPv6 address is enough to get FAIL.
  WhoisWeb03:
    Summary: Manual query for domain name
    Description: |
      ## Objective

      A manual query for a known domain name will be performed on the Whois
      IPv4 website. The objective is to verify the format of the response.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        TLD                    The ASCII compatible name of the    String
                               TLD

        WhoisTestDomain        An existing domain name which has   String
                               Whois data

        DnsGlueRecord          IPv4 or IPv6 addresses for auth NS  String

        EppRepID               EPP Repository Identifier           String
                               declaration
        -----------------------------------------------------------------------

      ## Outcome(s)

      The format of the responses MUST follow the specification outlined in
      section 23, \"Format Specification\", in this document and the
      communication MUST be over IPv4.

      ## Environmental needs

      -   Web browser

      -   IPv4 connectivity

      -   \<WhoisIPv4\> from resolving \<whois.nic.TLD\> using the delegation
          data.

      -   \<EppRepID\>, EPP Repository Identifier declaration from
          pdtwhois.xml file

      ## Special procedural requirements

      Lookup time must not exceed 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Resolve the IPv4 addresses of the host whois.nic.**\<TLD\>** using
          **\<DnsGlueRecord\>**. If multiple addresses are returned from
          lookup, one address is used.

      2.  Browse to http://whois.nic.**\<TLD\>**.

      3.  Make a query for the domain **\<WhoisTestDomain\>**.

      4.  Copy the Whois response from the web page and paste it into a text
          file.

      5.  Verify that the Whois response matches the format specification
          given in section 23. *This verification includes, but is not limited
          to, verification of ROID format and registration of ROID Suffix,
          mandatory fields, field names, order of fields, status codes, and
          data format. See section* 23 *in this document for all details.*

      6.  Verify that the response is a \"Domain name reply\" as defined in
          the format specification.

      7.  Verify that the queried domain name exactly matches the name in the
          \"Domain Name\" field in the response.

      8.  Verify that the *ROID Suffix*, as defined in specification in the
          Whois TP, of the \"Domain ID\" field exactly matches \<EppRepID\>.

      Criteria for PASS:

      -   All verifications (steps 5-8) are successful.

      Criteria for FAIL:

      -   At least one criteria for PASS is unsuccessful.
  WhoisWeb04:
    Summary: Manual query for registrar
    Description: |
      ## Objective

      A manual query for a known registrar will be performed on the Whois IPv4
      website. The objective is to verify the format of the response.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        TLD                    The ASCII compatible name of the    String
                               TLD

        WhoisTestRegistrar     An existing registrar which has     String
                               Whois data

        DnsGlueRecord          IPv4 or IPv6 addresses for auth NS  String
        -----------------------------------------------------------------------

      ## Outcome(s)

      The format of the responses MUST follow the specification outlined in
      section 23, \"Format Specification\", in this document and the
      communication MUST be over IPv4.

      ## Environmental needs

      -   Web browser

      -   IPv4 connectivity

      -   \<WhoisIPv4\> from resolving \<whois.nic.TLD\> using the delegation
          data.

      ## Special procedural requirements

      Lookup time must not exceed 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Resolve the IPv4 addresses of the host whois.nic.\<TLD\> using
          \<DnsGlueRecord\>. If multiple addresses are returned from lookup,
          one address is used.

      2.  Browse to http://whois.nic.**\<TLD\>**.

      3.  Make a query for the registrar **\<WhoisTestRegistrar\>**.

      4.  Copy the Whois response from the web page and paste it into a text
          file.

      5.  Verify that the Whois response matches the format specification in
          section 23. *This verification includes, but is not limited to,
          verification of ROID format and registration of ROID Suffix,
          mandatory fields, field names, order of fields, status codes, and
          data format. See section 23 in this document for all details.*

      6.  Verify that the response is a \"Registrar reply\" as defined in the
          format specification.

      7.  Verify that the queried registrar name matches the name in all
          \"Registrar Name\" fields in the response. The match may be a
          substring match.

      Criteria for PASS:

      -   All verifications (steps 5-7) are successful.

      Criteria for FAIL:

      -   At least one criteria for PASS is unsuccessful.
  WhoisWeb05:
    Summary: Manual query for name server
    Description: |
      ## Objective

      A manual query for a known name server will be performed on the Whois
      IPv4 website. The objective is to verify the format of the response.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------------------------------
        Id                                    Description                                  Type
        ------------------------- ----------- ----------------------------------- -------- ------------
        TLD                                   The ASCII compatible name of the             String
                                              TLD

        WhoisTestNameServerName               The domain name of an existing name          String
                                              server which has Whois data

        WhoisTestNameServerIP                 The IP address of an existing name           String
                                              server which has Whois data

        DnsGlueRecord             IPv4 or                                         String
                                  IPv6
                                  addresses
                                  for auth NS
        -----------------------------------------------------------------------------------------------

      ## Outcome(s)

      The format of the responses MUST follow the specification outlined in
      section 23, \"Format Specification\", in this document and the
      communication MUST be over IPv4.

      ## Environmental needs

      -   Web browser

      -   IPv4 connectivity

      -   \<WhoisIPv4\> from resolving \<whois.nic.TLD\> using the delegation
          data.

      ## Special procedural requirements

      Lookup time must not exceed 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Resolve the IPv4 addresses of the host whois.nic.\<TLD\> using
          \<DnsGlueRecord\>. If multiple addresses are returned from lookup,
          one address is used.

      2.  Browse to http://whois.nic.**\<TLD\>**.

      3.  Make a query for the name server using the hostname
          **\<WhoisTestNameServerName\>** and the IP
          **\<WhoisTestNameServerIP\>**, respectively. At least one of them
          MUST give a response with Whois data.

      4.  Verify that both queries give some response.

      5.  Copy the Whois response from the web page and paste it into a text
          file.

      6.  Verify that the Whois response matches the format specification
          given in section 23. *This verification includes, but is not limited
          to, verification of ROID format and registration of ROID Suffix,
          mandatory fields, field names, order of fields, status codes, and
          data format. See section 23 in this document for all details.*

      7.  Verify that the response is a \"Name server reply type 1\" or \"Name
          server reply type 2\" as defined in the format specification.

      8.  If the response is \"Name server reply type 1\" do the following
          step:

          a.  Verify that the \"Server Name\" field or the \"IP Address\"
              field exactly matches the query string from step 3 above.

      9.  If the response is \"Name server reply type 2\" do the following
          step:

          a.  Extract the ROID from the first \"Roid Line\" as defined in the
              format specification.

          b.  Make a new whois query, now using the extracted ROID as the
              query string.

          c.  Copy the Whois response from the web page and paste it into a
              text file.

          d.  Verify that the new response is a \"Name server reply type 1\"
              as defined in the format specification.

          e.  Verify that the \"Server Name\" field or the \"IP Address\"
              field in the new response exactly matches the query string from
              step 3 above.

      Criteria for PASS:

      -   All verifications (steps 4 and 6-9, as applicable) are successful.

      Criteria for FAIL:

      -   At least one criteria for PASS is unsuccessful.
  WhoisWeb09:
    Summary: Manual Query over IPv6
    Description: |
      ## Objective

      A manual query for a known domain name will be performed on the Whois
      IPv6 website. The objective is to verify that the Whois service is
      reachable and responds over IPv6.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        TLD                    The ASCII compatible name of the    String
                               TLD

        WhoisTestDomain        An existing domain name which has   String
                               Whois data

        DnsGlueRecord          IPv4 or IPv6 addresses for auth NS  String
        -----------------------------------------------------------------------

      ## Outcome(s)

      The Whois service MUST be reachable over IPv6 and it MUST return a valid
      response.

      ## Environmental needs

      -   Web browser

      -   IPv6 connectivity

      -   \<WhoisIPv6\> from resolving \<whois.nic.TLD\> using the delegation
          data.

      ## Special procedural requirements

      Lookup time must not exceed 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Resolve the IPv6 addresses of the host whois.nic.\<TLD\> using
          \<DnsGlueRecord\>. If multiple addresses are returned from lookup,
          one address is used.

      2.  Browse to http://whois.nic.**\<TLD\>**.

      3.  Verify that all communication is done over IPv6 and that no
          intermediate step is done over IPv4.

      4.  Make a query for the domain **\<WhoisTestDomain\>**.

      5.  The queried domain name MUST be present in the response. Beyond
          that, the response content and format will not be verified.

      Criteria for PASS:

      -   All verifications (steps 3 and 5) are successful.

      Criteria for FAIL:

      -   At least one verification (step 3 or 5) is unsuccessful.
  WhoisSearch00:
    Summary: Verify if Whois Search is supported
    Description: |
      ## Objective

      The objective is to verify if the Registry Operator is contractually
      obligated to support searchable Whois service. If the RO will support
      searchable Whois, instructions must be provided on how to use the
      searchable Whois service.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        RegAgree               The Registry Agreement for the      Document
                               specific gTLD

        SearchWhoisDoc         URL to a manual for searchable      String
                               whois for the specific gTLD
        -----------------------------------------------------------------------

      ## Outcome(s)

      -   If searchable Whois is required by the Registry Agreement for the
          specific gTLD then remainder of the test cases must be performed,
          and the Registry Operator must provide instructions on how to use
          searchable Whois service.

      -   If the Registry Agreement does not require support for searchable
          Whois no further tests will be performed.

      ## Environmental needs

      -   Web browser

      ## Special procedural requirements

      Lookup time must not exceed 10 seconds.

      ## Ordered description of steps to be taken to execute the test case

      1.  Identify support for searchable Whois within Registry Agreement.
          Expected location is Exhibit A. Determine if support for searchable
          Whois is required by contract.\
          If not, the test will end and the result of this test case and the
          following test cases are N/A.

      2.  If it exists continue:

          a.  Browse to the web page where information on how to use
              searchable Whois is located.

          b.  Information must be presented in English.

          c.  Make a note on any visible information regarding how to use
              searchable Whois.

          d.  If the solution for searching is self-explanatory then no
              separate information is needed.

      Criteria for N/A:

      -   Searchable Whois is not required by Exhibit A.

      Criteria for PASS:

      -   Searchable Whois is required by Exhibit A, and

      -   enough information on how to use searchable Whois is available, and

      -   the information is in English, and

      -   the information is comprehensible and complete.

      Criteria for FAIL:

      -   Searchable Whois is required by Exhibit A but is not available, or

      -   no information on how to use searchable Whois is available, or

      -   the information is not in English, or

      -   the information is incomplete or not comprehensible.
  WhoisSearch01:
    Summary: Verify abuse protection
    Description: |
      ## Objective

      The objective is to verify the abuse protection.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        TLD                    The ASCII compatible name of the    String
                               TLD

        WhoisCredentials       Optional credentials. E.g. username String
                               and password for accessing the
                               Whois service

        DnsGlueRecord          IPv4 or IPv6 addresses for auth NS  String
        -----------------------------------------------------------------------

      ## Outcome(s)

      Abuse protection MUST exist for the Whois service.

      ## Environmental needs

      -   Web browser

      -   IPv4 connectivity

      -   \<WhoisIPv4\> from resolving \<whois.nic.TLD\> using the delegation
          data.

      ## Special procedural requirements

      Whois query response time must not exceed 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Resolve IP addresses of the host whois.nic.**\<TLD\>** using
          **\<DnsGlueRecord\>**. This result will also be used for subsequent
          tests.

      2.  Make sure that whois.nic.**\<TLD\>** resolves to **\<WhoisIPv4\>**.

      3.  Browse to http://whois.nic.**\<TLD\>**

      4.  Make a note on any visible abuse protection.

      5.  Access the service with **\<WhoisCredentials\>**, if required.

      Criteria for N/A:

      -   Searchable Whois is not required by Exhibit A.

      Criteria for PASS:

      -   Abuse protection is used.

      Criteria for FAIL:

      -   No abuse protection can be detected.
  WhoisSearch02:
    Summary: Partial Match capabilities
    Description: |
      ## Objective

      Manual search queries will be performed on the Whois IPv4 website. The
      objective is to verify the partial match capabilities.

      ## Inputs

      -   Information on webpage in English on how to use the Searchable
          Whois.

      -   The following information will be needed as input for this test
          case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        TLD                    The ASCII compatible name of the    String
                               TLD

        WhoisCredentials       Optional credentials. E.g. username String
                               and password for accessing the
                               Whois service

        WhoisTestDomain        An existing domain which has Whois  String
                               data
        -----------------------------------------------------------------------

      ## Outcome(s)

      The Whois service MUST offer partial match capabilities.

      ## Environmental needs

      -   Web browser

      -   IPv4 connectivity

      -   \<WhoisIPv4\> from resolving \<whois.nic.TLD\> using the delegation
          data.

      ## Special procedural requirements

      Whois query response time must not exceed 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Make sure that whois.nic.**\<TLD\>** resolves to **\<WhoisIPv4\>**.

      2.  Browse to http://whois.nic.**\<TLD\>**

      3.  Access the service with **\<WhoisCredentials\>**, if required.

      4.  For the following tests, use data from previous domain query. If the
          data field or fields have been redacted based on
          **Temp-Spec-for-gTLD-data**, the test is skipped.

          a.  Perform a partial match search based on domain name.

          b.  Perform a partial match search based on contact name unless
              redacted.

          c.  Perform a partial match search based on registrant name unless
              redacted.

          d.  Perform a partial match search based on contact postal address
              (e.g. street, city, state, or province) unless redacted.

          e.  Perform a partial match search based on registrant postal
              address (e.g. street, city, state, or province) unless redacted.

      5.  The search results MUST include the domain name(s) matching the
          search criteria.

      Criteria for N/A:

      -   Searchable Whois is not required by Exhibit A.

      Criteria for PASS:

      -   A partial match search based on domain name was successfully
          completed, and

      -   a partial match search based on contact name was successfully
          completed or skipped, and

      -   a partial match search based on registrant name was successfully
          completed or skipped, and

      -   a partial match search based on contact postal address was
          successfully completed or skipped, and

      -   a partial match search based on registrant postal address was
          successfully completed or skipped, and

      -   all search results included the domain name(s) matching the search
          criteria.

      Criteria for FAIL:

      -   Any search query failed to complete, or

      -   Any search result failed to include the domain name(s) matching the
          search criteria.
  WhoisSearch03:
    Summary: Exact Match search
    Description: |
      ## Objective

      Manual search queries will be performed on the Whois IPv4 website. The
      objective is to verify the exact-match capabilities.

      ## Inputs

      -   Information on webpage in English on how to use the Searchable
          Whois.

      -   The following information will be needed as input for this test
          case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        TLD                    The ASCII compatible name of the    String
                               TLD

        WhoisCredentials       Optional credentials. E.g. username String
                               and password for accessing the
                               Whois service

        WhoisTestDomain        An existing domain which has Whois  String
                               data
        -----------------------------------------------------------------------

      ## Outcome(s)

      The Whois service MUST offer exact-match capabilities.

      ## Environmental needs

      -   Web browser

      -   IPv4 connectivity

      -   \<WhoisIPv4\> from resolving \<whois.nic.TLD\> using the delegation
          data.

      ## Special procedural requirements

      Whois query response time must not exceed 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Make sure that whois.nic.**\<TLD\>** resolves to **\<WhoisIPv4\>**.

      2.  Browse to http://whois.nic.**\<TLD\>**

      3.  Access the service with **\<WhoisCredentials\>**, if required.

      4.  Perform an exact-match search based on registrar id. Use data from a
          previous domain query.

      5.  Perform an exact-match search based on name server name. Use data
          from a previous domain query.

      6.  The search results MUST include the domain name(s) matching the
          search criteria.

      Criteria for N/A:

      -   Searchable Whois is not required by Exhibit A.

      Criteria for PASS:

      -   An exact match search based on registrar id was successfully
          completed, and

      -   an exact match search based on name server name was successfully
          completed, and

      -   all search results included the domain name(s) matching the search
          criteria.

      Criteria for FAIL:

      -   Any search query failed to complete, or

      -   Any search result failed to include the domain name(s) matching the
          search criteria.
  WhoisSearch04:
    Summary: Boolean Search capabilities
    Description: |
      ## Objective

      Manual search queries will be performed on the Whois IPv4 website. The
      objective is to verify the Boolean search capabilities.

      ## Inputs

      -   Information on webpage in English on how to use the Searchable
          Whois.

      -   The following information will be needed as input for this test
          case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        TLD                    The ASCII compatible name of the    String
                               TLD

        WhoisCredentials       Optional credentials. E.g. username String
                               and password for accessing the
                               Whois service

        WhoisTestDomain        An existing domain name which has   String
                               Whois data
        -----------------------------------------------------------------------

      ## Outcome(s)

      The Whois service MUST offer Boolean search capabilities.

      ## Environmental needs

      -   Web browser

      -   IPv4 connectivity

      -   \<WhoisIPv4\> from resolving \<whois.nic.TLD\> using the delegation
          data.

      ## Special procedural requirements

      Whois query response time must not exceed 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Make sure that whois.nic.**\<TLD\>** resolves to **\<WhoisIPv4\>**.

      2.  Browse to http://whois.nic.**\<TLD\>**

      3.  Access the service with **\<WhoisCredentials\>**, if required.

      4.  Perform a Boolean search using AND based on data from a previous
          domain query.

      5.  Perform a Boolean search using OR based on data from a previous
          domain query.

      6.  Perform a Boolean search using NOT based on data from a previous
          domain query.

      7.  The search results MUST include the domain name(s) matching the
          search criteria.

      Criteria for N/A:

      -   Searchable Whois is not required by Exhibit A.

      Criteria for PASS:

      -   A Boolean search using AND was successfully completed, and

      -   a Boolean search using OR was successfully completed, and

      -   a Boolean search using NOT was successfully completed, and

      -   all search results included the domain name(s) matching the search
          criteria.

      Criteria for FAIL:

      -   Any search query failed to complete, or

      -   Any search result failed to include the domain name(s) matching the
          search criteria.
  WhoisSearch09:
    Summary: Search over IPv6
    Description: |
      ## Objective

      A manual search query will be performed on the Whois IPv6 website. The
      objective is to verify that the search is reachable and responds over
      IPv6.

      ## Inputs

      -   Information on webpage in English on how to use the Searchable
          Whois.

      -   The following information will be needed as input for this test
          case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        TLD                    The ASCII compatible name of the    String
                               TLD

        WhoisCredentials       Optional credentials. E.g. username String
                               and password for accessing the
                               Whois service

        WhoisTestDomain        An existing domain name which has   String
                               Whois data
        -----------------------------------------------------------------------

      ## Outcome(s)

      The Whois service MUST be reachable over IPv6 and it MUST return a valid
      response.

      ## Environmental needs

      -   Web browser

      -   IPv6 connectivity

      -   \<WhoisIPv6\> from resolving \<whois.nic.TLD\> using the delegation
          data.

      ## Special procedure requirements

      Whois query response time must not exceed 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Make sure that whois.nic.**\<TLD\>** resolves to **\<WhoisIPv6\>**.

      2.  Browse to http://whois.nic.**\<TLD\>**

      3.  Access the service with **\<WhoisCredentials\>**, if required.

      4.  Verify that all communication is done over IPv6 and that no
          intermediate step is done over IPv4.

      5.  Perform a search. Use the data from a previous domain query.

      6.  The search result MUST be successful.

      Criteria for N/A:

      -   Searchable Whois is not required by Exhibit A.

      Criteria for PASS:

      -   All communication is done over IPv6, and

      -   the search was successfully completed.

      Criteria for FAIL:

      -   Some communication is done over IPv4, or

      -   the search did not successfully complete, or

      -   the search result did not include the domain name matching the
          search criteria.
  SRSGWWhoisCLI01:
    Summary: Verify consistency for domain name objects
    Description: |
      ## Objective

      Multiple Domain Name Object queries will be performed over IPv4 and IPv6
      TCP connections on port 43 (see section 1.6 for information on the
      availability of IPv6 connectivity in the local area test nodes). The
      objective is to verify the format of the responses of such queries and
      to verify that the TLD SRS Whois server gives the same response as the
      SRS GW Whois server.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        TLD                    The ASCII compatible name of the    String
                               TLD

        WhoisTestDomain        An existing domain name which has   String
                               Whois data

        CharEncoding           Character encoding declaration      String

        EppRepID               EPP Repository Identifier           String
                               declaration

        TLDSRSWhoisIPv4        The IPv4 address or addresses to    String
                               the TLD SRS Whois server

        TLDSRSWhoisIPv6        The IPv6 address or addresses to    String
                               the TLD SRS Whois server

        SRSGwWhoisIPv4         The IPv4 address or addresses to    String
                               the SRS GW Whois server

        SRSGwWhoisIPv6         The IPv6 address or addresses to    String
                               the SRS GW Whois server
        -----------------------------------------------------------------------

      ## Outcome(s)

      The format of the responses MUST follow the specification outlined in
      section 23, \"Format Specification\", and all responses must be
      identical.

      ## Environmental needs

      -   Whois client software that preserves line endings in the response,
          e.g. Netcat

      -   IPv4 connectivity

      -   IPv6 connectivity (if available)

      -   List of IP addresses (IPv4 and IPv6, respectively) from resolving
          \<whois.nic.TLD\> using the delegation data, where \<WhoisIP\> is
          one such address.

      -   \<CharEncoding\>, character encoding declaration from pdtwhois.xml
          file.

      -   \<EppRepID\>, EPP Repository Identifier declaration from
          pdtwhois.xml file

      -   Test node outside the country of the SRS GW \<TestNodeA\> to be used
          to test TLD SRS Whois server from.

      -   Test node inside the country of the SRS GW \<TestNodeB\> to be used
          to test SRS GW Whois server from.

      ## Special procedural requirements

      A Whois query and its response MUST NOT take longer than 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Make queries from TestNodeA to the TLD SRS Whois server using the
          client software, i.e. to all IP addresses found.\
          whois -h **\<WhoisIP\>** **\<WhoisTestDomain\>**

      2.  Make queries from TestNodeB to the SRS GW Whois server using the
          client software, i.e. to all IP addresses submitted.\
          whois -h **\<WhoisIP\>** **\<WhoisTestDomain\>**

      3.  For each query executed repeat the following steps:

          a.  Verify that the Whois server returns a response.

          b.  Verify that the character encoding of the response matches
              \<CharEncoding\>.

          c.  Verify that the response is identical to all other responses.

          d.  Verify that the response is a \"Domain name reply\" as defined
              in the Whois TP.

          e.  Verify that the response conforms to the format in the
              specification in the Whois TP. *This verification includes, but
              is not limited to, verification of ROID format and registration
              of ROID Suffix, mandatory fields, field names, order of fields,
              status codes, and data format. See section 23 for all details.*

          f.  Verify that the queried domain name exactly matches the name in
              the \"Domain Name\" field in the response.

          g.  Verify that the *ROID Suffix*, as defined in specification, of
              the \"Domain ID\" field exactly matches \<EppRepID\>.

      Criteria for PASS:

      -   The Whois output is encoded in ASCII, and

      -   The Whois service is available on IPv4 (always) and IPv6 (if IPv6
          connectivity is available in the local area test node), and

      -   All verifications (steps 3a-g) are successful.

      Criteria for WARN:

      -   The Whois output is not encoded in ASCII, and

      -   The Whois output was successfully converted to UTF-8, and

      -   All other criteria for PASS are successful.

      Criteria for FAIL:

      -   The encoding of the Whois output cannot be converted to UTF-8, or

      -   At least one other criteria for PASS is unsuccessful.
  SRSGWWhoisCLI02:
    Summary: Verify consistency for registrar objects
    Description: |
      ## Objective

      Multiple Registrar Object queries will be performed over IPv4 and IPv6
      TCP connections on port 43 (see section 1.6 for information on the
      availability of IPv6 connectivity in the local area test nodes). The
      objective is to verify the format of the responses of such queries and
      to verify that the TLD SRS Whois server gives the same response as the
      SRS GW Whois server.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------
        Id                     Description                         Type
        ---------------------- ----------------------------------- ------------
        TLD                    The ASCII compatible name of the    String
                               TLD

        WhoisTestRegistrar     An existing registrar which has     String
                               Whois data

        CharEncoding           Character encoding of Whois output  String

        TLDSRSWhoisIPv4        The IPv4 address or addresses to    String
                               the TLD SRS Whois server

        TLDSRSWhoisIPv6        The IPv6 address or addresses to    String
                               the TLD SRS Whois server

        SRSGwWhoisIPv4         The IPv4 address or addresses to    String
                               the SRS GW Whois server

        SRSGwWhoisIPv6         The IPv6 address or addresses to    String
                               the SRS GW Whois server
        -----------------------------------------------------------------------

      ## Outcome(s)

      The format of the responses MUST follow the specification outlined in
      section 23, \"Format Specification\", and all responses must be
      identical.

      ## Environmental needs

      -   Whois client software that preserves line endings in the response,
          e.g. Netcat

      -   IPv4 connectivity

      -   IPv6 connectivity (if available)

      -   List of IP addresses (IPv4 and IPv6, respectively) from resolving
          \<whois.nic.TLD\> using the delegation data, where \<WhoisIP\> is
          one such address.

      -   \<CharEncoding\>, character encoding declaration from pdtwhois.xml
          file.

      -   Test node outside the country of the SRS GW \<TestNodeA\> to be used
          to test TLD SRS Whois server from.

      -   Test node inside the country of the SRS GW \<TestNodeB\> to be used
          to test SRS GW Whois server from.

      ## Special procedural requirements

      A Whois query and its response MUST NOT take longer time than 10
      seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Make queries from TestNodeA to the TLD SRS Whois server using the
          client software, i.e. to all IP addresses found.\
          whois -h **\<WhoisIP\>** **\< WhoisTestRegistrar \>**

      2.  Make queries from TestNodeB to the SRS GW Whois server using the
          client software, i.e. to all IP addresses submitted.\
          whois -h **\<WhoisIP\>** **\< WhoisTestRegistrar \>**

      3.  For each query executed repeat the following steps:

          a.  Verify that the Whois server returns a response.

          b.  Verify that the character encoding of the response matches
              \<CharEncoding\>.

          c.  Verify that the response is identical to all other responses.

          d.  Verify that the response is a \"Registrar reply \" as defined in
              the Whois TP.

          e.  Verify that the response conforms to the format in the
              specification. *This verification includes, but is not limited
              to, verification of ROID format and registration of ROID Suffix,
              mandatory fields, field names, order of fields, status codes,
              and data format. See section 23 for all details.*

          f.  Verify that the queried registrar name matches the name in all
              \"Registrar Name\" fields in the response. The match may be a
              substring match.

      Criteria for PASS:

      -   The Whois output is encoded in ASCII, and

      -   The Whois service is available on IPv4 (always) and IPv6 (if IPv6
          connectivity is available in the local area test node), and

      -   All verifications (steps 3a-f) are successful.

      Criteria for WARN:

      -   The Whois output is not encoded in ASCII, and

      -   The Whois output was successfully converted to UTF-8, and

      -   All other criteria for PASS are successful.

      Criteria for FAIL:

      -   The encoding of the Whois output cannot be converted to UTF-8, or

      -   At least one other criteria for PASS is unsuccessful.
  SRSGWWhoisCLI03:
    Summary: Verify consistency for name server objects
    Description: |
      ## Objective

      Multiple Name Server Object queries will be performed over IPv4 and IPv6
      TCP connections on port 43 (see section 1.6 for information on the
      availability of IPv6 connectivity in the local area test nodes). The
      objective is to verify the format of the responses of such queries and
      to verify that the TLD SRS Whois server gives the same response as the
      SRS GW Whois server.

      ## Inputs

      The following information will be needed as input for this test case:

        -----------------------------------------------------------------------------------------------
        Id                                    Description                                  Type
        ------------------------- ----------- ----------------------------------- -------- ------------
        TLD                                   The ASCII compatible name of the             String
                                              TLD

        WhoisTestNameServerName               The domain name of an existing name          String
                                              server which has Whois data

        WhoisTestNameServerIP                 The IP address of an existing name           String
                                              server which has Whois data

        CharEncoding                          Character encoding of Whois output           String

        TLDSRSWhoisIPv4           The IPv4                                        String
                                  address or
                                  addresses
                                  to the TLD
                                  SRS Whois
                                  server

        TLDSRSWhoisIPv6           The IPv6                                        String
                                  address or
                                  addresses
                                  to the TLD
                                  SRS Whois
                                  server

        SRSGwWhoisIPv4            The IPv4                                        String
                                  address or
                                  addresses
                                  to the SRS
                                  GW Whois
                                  server

        SRSGwWhoisIPv6            The IPv6                                        String
                                  address or
                                  addresses
                                  to the SRS
                                  GW Whois
                                  server
        -----------------------------------------------------------------------------------------------

      ## Outcome(s)

      The format of the responses MUST follow the specification outlined in
      section 23, \"Format Specification\", and all responses must be
      identical.

      ## Environmental needs

      -   Whois client software that preserves line endings in the response,
          e.g. Netcat

      -   IPv4 connectivity

      -   IPv6 connectivity (if available)

      -   List of IP addresses (IPv4 and IPv6, respectively) from resolving
          \<whois.nic.TLD\> using the delegation data, where \<WhoisIP\> is
          one such address.

      -   \<CharEncoding\>, character encoding declaration from pdtwhois.xml
          file.

      -   Test node outside the country of the SRS GW \<TestNodeA\> to be used
          to test TLD SRS Whois server from.

      -   Test node inside the country of the SRS GW \<TestNodeB\> to be used
          to test SRS GW Whois server from.

      ## Special procedural requirements

      Abort the test if any Whois query takes longer than 10 seconds.

      ## Intercase dependencies

      This test has no intercase dependencies.

      ## Ordered description of steps to be taken to execute the test case

      1.  Make two queries from TestNodeA to the TLD SRS Whois server using
          the client software, i.e. to all IP addresses found.\
          whois -h **\<WhoisIP\>** \"nameserver
          **\<WhoisTestNameServerName\>**\"**\
          ** whois -h **\<WhoisIP\>** "nameserver
          **\<WhoisTestNameServerIP\>**"

      2.  Make two queries from TestNodeB to the SRS GW Whois server using the
          client software, i.e. to all IP addresses submitted.\
          whois -h **\<WhoisIP\>** \"nameserver
          **\<WhoisTestNameServerName\>**\"**\
          ** whois -h **\<WhoisIP\>** "nameserver
          **\<WhoisTestNameServerIP\>**"

      3.  Verify that the Whois server returns responses to the two queries. A
          response means at least some text is returned.

      4.  Both queries (WhoisTestNameServerName or WhoisTestNameServerIP) for
          all queried Whois servers MUST give a response that matches the
          following steps and requirements.

          a.  Verify that the character encoding of the responses match
              \<CharEncoding\>.

          b.  Verify that the response is identical to all other responses to
              the same query.

          c.  Verify that the response is a \"Name server reply type 1\" or
              \"Name server reply type 2\" as defined in the format
              specification.

          d.  Verify that response conforms to the format in the
              specification. *This verification includes, but is not limited
              to, verification of ROID format and registration of ROID Suffix,
              mandatory fields, field names, order of fields, status codes,
              and data format. See section 23 for all details.*

          e.  If the response is \"Name server reply type 1\" and the query is
              for WhoisTestNameServerName do the following step:

              i.  Verify that the \"Server Name\" field field exactly matches
                  WhoisTestNameServerName in all returned Name Server objects.

          f.  If the response is \"Name server reply type 1\" and the query is
              for WhoisTestNameServerIP do the following step:

              i.  If the \"IP Address\" field field is present, verify that at
                  least one such field exactly matches WhoisTestNameServerIP.

              ii. Repeat the previous verification for every Name Server
                  object in the response.

          g.  If the response is \"Name server reply type 2\" do the following
              step:

              i.  Extract the ROID from the first \"Roid Line\" as defined in
                  the format specification.

              ii. Make a new whois query, now using the extracted ROID in the
                  query string (\"roid \<ROID\>\").

              iii. Verify that the new response is a \"Name server reply type
                   1\" as defined in the format specification.

              iv. Verify that the new response conforms to the format in the
                  specification.

              v.  Verify the response using step e or f above.

      Criteria for PASS:

      -   The Whois outputs are encoded in ASCII, and

      -   The Whois service is available on IPv4 (always) and IPv6 (if IPv6
          connectivity is available in the local area test node), and

      -   All verifications (under steps 3 and 4a-g) are successful.

      Criteria for WARN:

      -   The Whois outputs are not encoded in ASCII, and

      -   The Whois output was successfully converted to UTF-8, and

      -   All other criteria for PASS are successful.

      Criteria for FAIL:

      -   The encoding of the Whois output cannot be converted to UTF-8, or

      -   At least one other criteria for PASS is unsuccessful.
