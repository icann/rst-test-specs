---
RST-Test-Plan-Schema-Version: 1.6.1
Version: 3.0.257
Last-Updated: 2024-01-18
Contact:
  Name: GDS Technical Services
  Organization: Internet Corporation for Assigned Names and Numbers (ICANN)
  Email: rst@icann.org

Preamble: |
  This file describes each test [plan](#test-plans), [suite](#test-suites) and
  [case](#test-cases) in the RST system, as well as the
  [input parameters](#input-parameters) required for each, relevant
  [resources](#resources), any inter-case dependencies, and the
  [errors](#errors) that might occur during testing.
  
  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
  "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in [RFC
  2119](https://www.rfc-editor.org/rfc/rfc2119.html) when, and only when, they
  appear in all capitals, as shown here.
  
  # 2.1. Test plans
  
  An individual *Test Plan* addresses a particular scenario (for example, RSP
  evaluation or Pre-Delegation Testing). Each plan consists of one or more *test
  suites*, which in turn include one or more *test cases*.
  
  ## 2.1.1. Test plan types
  
  There are two types of test plan described in this document:
  
  * **Business as usual** plans, which are used as part of the lifecycle of a
  gTLD (Pre-Delegion Test, RSP/DNS RSP change Test, IDN Test, SRS Gateway
  Test)
  * **RSP evaluation** plans, which are used as part of the RSP evaluation
  program.
  
  # 2.2. Test suites
  
  A *Test Suite* is a collection of *test cases* with a common theme or subject
  matter, for example, Authoritative DNS or Registry Data Escrow.
  
  # 2.3. Test cases
  
  A *Test Case* describes a process for determining the conformance or
  acceptability of a certain element of the system.
  
  A test case consists of a *test procedure* which accepts zero or more **input
  parameters**, and generates one or more **test results**.
  
  ## 2.3.1. Input parameters
  
  All test cases require some information about the subject of the test, for
  example, service hostnames, credentials, and functional parameters. These
  *input parameters* may be shared across multiple test cases.
  
  ## 2.3.2. Test environments
  
  Each test plan indicates whether the test is to be carried out in the
  production environment, or whether a test, staging or OT&E environment may be
  used. In general, test plans which are designed for "business as usual" use
  during the lifecycle of a TLD **MUST** be carried out in the production
  registry infrastructure, while RSP evaluation tests **MAY** be carried out in
  test, staging or OT&E environments.
  
  ## 2.3.3. Test results
  
  Test cases will generate one or more *test results*. Test results indicate the
  outcome of the test and other relevant information.
  
  ## 2.3.4. General pass/fail criteria
  
  In general, for a test to pass, **all** the test cases specified in the test
  suite(s) for the test plan **MUST** pass: if *any* fail, then the test as a
  whole will fail.
  
  A test case will fail if it produces one or more [errors](#errors) with the
  `ERROR` or `CRITICAL` severities.
  
  ## 2.3.5. Error severity levels
  
  The supported severity levels are a subset of the values defined in RFC 5424.
  
  2. `WARNING` - an issue which does not prevent the test from *passing*, but
   which may benefit from further investigation.
  1. `ERROR` - an issue which prevents the test case from *passing*, but does not
   prevent the test case from *continuing*. A test case may produce multiple
   `ERROR` results.
  2. `CRITICAL` - an issue which prevents the test case from continuing any
   further. A test case will only produce a single `CRITICAL` result and it
   will always be the last result in the log.
  
  ## 2.3.6. Common errors
  
  For each test case, various errors and critical errors are defined which will
  be used to signal why that the case might have failed.
  
  In addition to these, there are a number of errors which any test case may
  produce, which are:
  
  * [TBA]
  
  # 2.4. Key acronyms and terms
  
  RST
  : Registry System Testing. This system.
  
  PDT
  : Pre-Delegation Test. A test carried out prior to the delegation of a new TLD
  into the DNS root zone.
  
  RSP
  : Registry Service Provider. A specialist provider of critical registry
  services.
  
  DNS
  : Domain Name System. The internet's system of globally unique identifiers.
  
  TLD
  : Top-level domain. The highest level of the DNS namespace hierarchy.
  
  gTLD
  : generic top-level domain.
  
  DNSSEC
  : DNS Security Extensions. DNSSEC is described in [BCP
  237](https://www.rfc-editor.org/info/bcp237).
  
  EPP
  : Extensible Provisioning Protocol. The protocol used by registrars to create
  and manage domain name registrations in an SRS. EPP is defined in [STD
  69](https://www.rfc-editor.org/info/std69).
  
  SRS
  : Shared Registry System. A TLD registry in which registrations are managed
  by one or more registrars, using EPP.
  
  RDDS
  : Registration Data Directory Services. A service to provide access to
  data about domain registrations to third parties.
  
  RDAP
  : Registration Data Access Protocol. The protocol used to deliver the RDDS.
  RDAP is defined in [STD 95](https://www.rfc-editor.org/info/std95).
  
  RDE
  : Registry Data Escrow. A system whereby the registration data stored in a
  Shared Registry System is backed up to a trusted third party. RDE is defined
  in [RFC 8909](https://www.rfc-editor.org/info/rfc8909) and [RFC
  9022](https://www.rfc-editor.org/info/rfc9022).
  
  IDN
  : Internationalized Domain Name. A domain name that contains characters not in
  the ASCII character set. The technical specification for IDNs may be found in
  [RFC 5890](https://www.rfc-editor.org/info/rfc5890). All gTLDs must comply
  with ICANN's [IDN
  Guidelines](https://www.icann.org/resources/pages/implementation-guidelines-2012-02-25-en).
  
  LGR
  : Label Generation Ruleset. The rules by which IDNs are validated. LGRs are
  described in [RFC 7940](https://www.rfc-editor.org/info/rfc7940).
  
  RO
  : Registry Operator. The entity to which ICANN has granted the right to
  operate a gTLD.
  
  RA
  : Registry Agreement. The contract between a Registry Operator and ICANN. The
  base Registry Agreement may be reviewed at
  <https://www.icann.org/en/registry-agreements/base-agreement>.
  
  KSK
  : Key Signing Key. A cryptographic key which acts as the Secure Entry Point
  for a DNS zone, and which signs a DNS zone's ZSKs. A digest of this key is
  published in the parent zone (ie. the root zone for a TLD).
  
  ZSK
  : Zone Signing Key. A cryptographic key which signs a DNS zone's resource
  records.
  
  CSK
  : Combined Signing Key. A cryptographic key used as **both** a KSK and a ZSK.
  
  RPMs
  : Rights Protection Mechanisms, intended to discourage or prevent registration
  of domain names that violate or abuse another partyâ€™s legal rights. These
  **MUST** include (but are not limited to): (1) Sunrise Periods, and (2)
  Trademark Claims Periods (see [Specification 7 of the Registry
  Agreement](https://itp.cdn.icann.org/en/files/registry-agreements/base-registry-agreement-30-04-2023-en.html#specification7)).
  
  TMCH
  : Trademark Clearinghouse. The system established by ICANN to maintain a
  database of validated and registered trademarks which is used to enforce
  Rights Protection Mechanisms (RPMs) in gTLDs. The functional specifications of
  the TMCH are defined in [RFC 9361](https://www.rfc-editor.org/info/rfc9361).
  
  SLA
  : Service Level Agreement. The registry performance specifications laid out in
  [Specification 10 of the Registry
  Agreement](https://itp.cdn.icann.org/en/files/registry-agreements/base-registry-agreement-30-04-2023-en.html#specification10).
  
  RRI
  : Registration Reporting Interfaces. The interfaces provided by ICANN to
  contracted parties including Registry Operators to fulfill and monitor their
  applicable reporting requirements, including per-registrar transaction
  reports; registry functions activity reports; data escrow deposits reports and
  data escrow deposits notifications. For registry operators, the relevant
  interfaces are defined in [draft-lozano-icann-registry-interfaces](https://datatracker.ietf.org/doc/html/draft-lozano-icann-registry-interfaces).

Test-Plans:
  
  
  
  StandardPreDelegationTest:
    Order: 1
    Name: Pre-Delegation Test
    Description: |
      The purpose of the Pre-Delegation Test is to verify that the applicant has
      met its commitment to establish registry operations in accordance with the
      technical and operational criteria described in the gTLD Applicant Guidebook
      (AGB). Each applicant will be required to complete PDT as a prerequisite to
      delegation into the root zone.
  
      The Pre-Delegation Test covers all critical registry services and IDNs, and
      therefore uses all standard test suites.
  
      **Note on test environment:** this is a "business as usual" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardDNS
      - StandardDNSSEC
      - StandardEPP
      - StandardRDAP
      - StandardIDN
      - StandardRDE
      - StandardIntegrationTest
  
  StandardRSPChangeTest:
    Order: 2
    Name: RSP Change Test
    Description: |
      A Registry Operator may apply to ICANN to change a Material Subcontracting
      Arrangement (MSA) and appoint a new Registry Services Provider. Before
      this change can be approved, the new RSP **MUST** complete Registry System
      Testing to ensure their systems comply with the technical and operational
      requirements of the Registry Agreement.
  
      The RSP Change Test covers all critical registry services and IDNs, and
      therefore uses all test standard suites.
  
      **Note on test environment:** this is a "business as usual" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardDNS
      - StandardDNSSEC
      - StandardEPP
      - StandardIDN
      - StandardRDAP
      - StandardRDE
      - StandardIntegrationTest
  
  DNSRSPChangeTest:
    Order: 3
    Name: DNS RSP Change Test
    Description: |
      A Registry Operator may apply to ICANN to change a Material Subcontracting
      Arrangement (MSA) and appoint a new provider of authoritative DNS services
      instead of or in addition to any existing provider(s).
  
      Before this change can be approved, the new DNS provider **MUST** complete
      testing to ensure their systems comply with the technical and operational
      requirements of the Registry Agreement.
  
      The DNS RSP Change Test uses the DNS test suite only.
  
      **Note on test environment:** this is a "business as usual" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardDNS
      - StandardDNSSEC
  
  StandardIDNTest:
    Order: 4
    Name: Standard IDN Test
    Description: |
      A Registry Operator may apply to ICANN to amend its Registry Agreement
      to offer new scripts and/or languages for Internationalized Domain Names.
  
      The purpose of an IDN RST test is to verify that the Registry Operatorâ€™s
      registry system handles IDN registrations in accordance with the
      submitted policy statements and IDN tables.
  
      The IDN Test uses the IDN test suite only.
  
      **Note on test environment:** this is a "business as usual" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardIDN
  
  RSPEvaluationIDNTest:
    Order: 5
    Name: IDN Test (RSP Evaluation)
    Description: |
      This test plan is identical to the Standard IDN Test, but is intended
      solely for use in the RSP evaluation program.
  
      **Note on test environment:** this is a "business as usual" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardIDN
  
  SRSGatewayTest:
    Order: 6
    Name: SRS Gateway Test
    Description: |
      An SRS Gateway service is a Shared Registry System implementation that acts
      as a proxy between a subset of Registrars and the Registry. It uses a local
      cache to speed up EPP query commands, but forwards all EPP transform
      commands to the primary registry system. TLD registries need to deploy a
      proxy setup in order to operate in certain markets worldwide.
  
      The purpose of an SRS Gateway Test is to verify that the Registry Operatorâ€™s
      proxy setup operates in accordance with the technical and operational
      criteria for EPP systems described in the gTLD Applicant Guidebook (AGB).
      Furthermore, it **MUST** keep its own database synchronized with that of the
      TLD registry.
  
      The SRS Gateway Test Change Test uses the SRS gateway test suite only.
  
      **Note on test environment:** this is a "business as usual" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardSRSGateway
      - SRSGatewayIntegrationTest
  
  MainRSPEvaluationTest:
    Order: 7
    Name: Main RSP Evaluation Test
    Description: |
      The Main RSP is responsible for the creation and maintenance of domain name
      registrations in a Shared Registration System (SRS). This encompasses the
      lifecycle of a domain name registration using domain registrars and
      protocols such as the Extensible Provisioning Protocol (EPP) and adherence
      to policies regarding the use and transparency domain name registrations
      through reporting, the Registration Data Access Protocol (RDAP), and other
      mechanisms.
  
      **Note on test environment:** this test is designed to be used as part of the RSP evaluation program. Therefore, input parameters **MAY** be provided the relate to a test, staging or OT&E environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardEPP
      - MinimumRPMs
      - StandardRDAP
      - StandardRDE
  
  DNSRSPEvaluationTest:
    Order: 8
    Name: DNS RSP Evaluation Test
    Description: |
      DNS RSPs provide primary or secondary authoritative DNS services. Therefore,
      this test plan only covers the DNS area.
  
      RSPs wishing to offer DNSSEC services in addition to authoritative DNS will
      also be evaluated using the DNSSEC RSP Evaluation Test below.
  
      **Note on test environment:** this test is designed to be used as part of the RSP evaluation program. Therefore, input parameters **MAY** be provided the relate to a test, staging or OT&E environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardDNS
  
  DNSSECRSPEvaluationTest:
    Order: 9
    Name: DNSSEC RSP Evaluation Test
    Description: |
      DNSSEC RSPs provide signing of TLD zone files as a service. They do not
      provide primary or secondary authoritative DNS services.
  
      RSPs wishing to offer DNSSEC services in addition to authoritative DNS will
      also be evaluated using the DNSSEC RSP Evaluation Test below.
  
      **Note on test environment:** this test is designed to be used as part of the RSP evaluation program. Therefore, input parameters **MAY** be provided the relate to a test, staging or OT&E environment.
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardDNSSEC
      - DNSSECOperations
  
  SRSGatewayRSPTest:
    Order: 10
    Name: SRS Gateway RSP Evaluation Test
    Description: |
      SRS Gateway RSPs provide a proxy between a subset of Registrars and the
      Registry. It uses a local cache to speed up EPP query commands, but forwards
      all EPP transform commands to the primary registry system. TLD registries
      need to deploy a proxy setup in order to operate in certain markets
      worldwide.
  
      The [SRS Gateway test suite](#Test-Suite-StandardSRSGateway) requires access
      to a primary registry system that is logically independent of the SRS
      Gateway system, and details of the primary registry system are required as
      input parameters.
  
      RSPs wishing to offer SRS gateway services **MUST** identify such a primary
      registry system, which **MUST** be independent of the SRS gateway system,
      and **MAY** be operated by a third party.
  
      **Note on test environment:** this test is designed to be used as part of the RSP evaluation program. Therefore, input parameters **MAY** be provided the relate to a test, staging or OT&E environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardSRSGateway

Test-Suites:
  
  
  
  
  StandardDNS:
    Order: 1
    Name: Authoritative DNS Service
    Description: |
      The DNS test suite validates the authoritative DNS services for the TLD
      or RSP.
  
      The DNS test suite is derived from the test plans in version
      **v2023.1.4
        ** of [Zonemaster](https://github.com/zonemaster). Test
      case IDs from this document can be mapped to the Zonemaster test IDs by
      removing the `dns-` prefix.
  
      Since Zonemaster is designed to perform testing of domain names anywhere in the DNS hierarchy, not all Zonemaster tests are applicable for TLDs and may not be listed in the test suites in this document.
  
      # Testing of Anycast networks using multiple vantage points
  
      In order to test anycast networks without requiring RSPs to provide the
      unicast adresses of their nodes, tests carried out over the network will
      be performed from multiple vantage points. All vantage points **MUST**
      receive the same response in order for the tests to pass.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
  
      Unless stated otherwise, the pass/fail criteria for the test cases in this suite are the same as those defined in the Zonemaster documentation: that is, if Zonemaster reports that a test case has an `ERROR` or `CRITICAL` result, then the corresponding test case in this suite will fail. `INFO`, `NOTICE` and `WARNING` results will not result in a failed test case. Error codes in this suite are prefixed with `ZM_` which map onto the message tags used by Zonemaster.
    Test-Cases: ^dns-
    Input-Parameters:
      - dns.nameservers
    Resources:
  
  StandardDNSSEC:
    Order: 2
    Name: DNS Security Extensions (DNSSEC)
    Description: |
      The DNSSEC test suite validates the DNSSEC signing service for the TLD or
      RSP.
  
      The DNSSEC test suite is derived from the test plans in version
      **v2023.1.4
        ** of [Zonemaster](https://github.com/zonemaster). Test
      case IDs from this document can be mapped to the Zonemaster test IDs by
      removing the hyphen-minus.
  
      Since Zonemaster is designed to perform testing of domain names anywhere in the DNS hierarchy, not all Zonemaster tests are applicable for TLDs and may not be listed in the test suites in this document.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
  
      Unless stated otherwise, the pass/fail criteria for the test cases in this suite are the same as those defined in the Zonemaster documentation: that is, if Zonemaster reports that a test case has an `ERROR` or `CRITICAL` result, then the corresponding test case in this suite will fail. `INFO`, `NOTICE` and `WARNING` results will not result in a failed test case. Error codes in this suite are prefixed with `ZM_` which map onto the message tags used by Zonemaster.
    Test-Cases: ^dnssec-
    Input-Parameters:
      - dns.nameservers
      - dnssec.dsRecords
  
  StandardRDAP:
    Order: 3
    Name: Registration Data Access Protocol (RDAP)
    Description: |
      The RDAP test suite validates the RDAP service of the TLD or RSP.
  
      The RDAP test suite is derived from the test specification of the [RDAP
      Conformance Tool](https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf).
      As with the DNS and DNSSEC tests, the test IDs can be mapped to the test
      IDs in this document by removing the `rdap-NN-` prefix.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^rdap-
    Input-Parameters:
      - rdap.baseURLs
      - rdap.testDomains
      - rdap.testEntities
      - rdap.testNameservers
  
  StandardEPP:
    Order: 4
    Name: Extensible Provisioning Protocol (EPP)
    Description: |
      The EPP test suite validates the EPP service of the TLD or RSP. It verifies
      that the EPP server properly implements the query and transform commands
      specified for domain names (and optionally host and contact objects) and the
      mandatory extensions.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^epp-
    Input-Parameters:
      - general.minimalPublicDataSet
      - epp.clid01
      - epp.pwd01
      - epp.serverIssuedClientCertificate01
      - epp.clid02
      - epp.pwd02
      - epp.serverIssuedClientCertificate02
      - epp.hostModel
      - epp.hostName
      - epp.registeredNames
    Resources:
      - epp.clientACL
      - epp.clientCSR
      - epp.clientCertificate
    Errors:
      - EPP_DNS_RESOLUTION_ERROR
      - EPP_SERVICE_PORT_UNREACHABLE
      - EPP_TLS_CONNECTION_ERROR
      - EPP_LOGIN_ERROR
      - EPP_XML_PARSE_ERROR
      - EPP_GENERIC_COMMAND_ERROR
      - EPP_UNEXPECTED_COMMAND_SUCCESS
      - EPP_UNEXPECTED_COMMAND_FAILURE
      - EPP_SCHEMA_VALIDATION_ERROR
      - EPP_OBJECT_SHOULD_EXIST
      - EPP_OBJECT_SHOULD_NOT_EXIST
  
  StandardRDE:
    Order: 5
    Name: Registry Data Escrow (RDE)
    Description: |
      The RDE test suite validates Registry Data Escrow deposits generated for
      the TLD or RSP. These deposits **MUST** comply with the specifications in
      the Registry Agreement and with RFC 8909 and RFC 9022.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^rde-
    Input-Parameters:
      - rde.depositFile
    Errors:
      - RDE_XML_PARSE_ERROR
      - RDE_SCHEMA_VALIDATION_ERROR
  
  StandardIDN:
    Order: 6
    Name: Internationalized Domain Names (IDN)
    Description: |
      The RDE test suite validates the IDN table(s) for a TLD or RSP, including
      compliance with specifications for variant labels at the top- or second-
      level, and conformance with the IDN Guidelines.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^idn-
    Input-Parameters:
      - epp.hostName
      - epp.clid01
      - epp.pwd01
      - epp.serverIssuedClientCertificate01
      - epp.serverIssuedClientCertificate02
      - epp.clid02
      - epp.pwd02
    Resources:
      - epp.clientACL
      - epp.clientCSR
      - epp.clientCertificate
    Errors:
      - IDN_VARIANT_SERVER_ACCEPTS_VARIANT_CREATE_FROM_INCORRECT_REGISTRAR
      - IDN_VARIANT_SERVER_ACCEPTS_VARIANT_CREATE_WITH_INCORRECT_REGISTRANT
  
  StandardSRSGateway:
    Order: 7
    Name: SRS Gateway
    Description: |
      The SRS Gateway test suite validates the conformance of the Gateway registry
      infrastructure of a TLD or RSP, and the synchronisation between primary and
      gateway systems.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^srsgw-
    Input-Parameters:
      - epp.hostName
      - epp.clid01
      - epp.pwd01
      - epp.serverIssuedClientCertificate01
      - epp.clid02
      - epp.pwd02
      - epp.serverIssuedClientCertificate02
      - srsgw.eppHostName
      - srsgw.serverIssuedClientCertificate01
      - srsgw.eppClid01
      - srsgw.eppPwd01
      - srsgw.eppClid02
      - srsgw.eppPwd02
      - srsgw.serverIssuedClientCertificate02
      - srsgw.rdapBaseURLs
      - rdap.baseURLs
    Resources:
      - epp.clientACL
      - epp.clientCSR
      - epp.clientCertificate
    Errors:
      - EPP_DNS_RESOLUTION_ERROR
      - EPP_SERVICE_PORT_UNREACHABLE
      - EPP_TLS_CONNECTION_ERROR
      - EPP_LOGIN_ERROR
      - EPP_XML_PARSE_ERROR
      - EPP_GENERIC_COMMAND_ERROR
      - EPP_UNEXPECTED_COMMAND_SUCCESS
      - EPP_UNEXPECTED_COMMAND_FAILURE
      - EPP_SCHEMA_VALIDATION_ERROR
      - EPP_OBJECT_SHOULD_EXIST
      - EPP_OBJECT_SHOULD_NOT_EXIST
      - SRSGW_EPP_DNS_RESOLUTION_ERROR
      - SRSGW_EPP_SERVICE_PORT_UNREACHABLE
      - SRSGW_EPP_TLS_CONNECTION_ERROR
      - SRSGW_EPP_LOGIN_ERROR
      - SRSGW_EPP_XML_PARSE_ERROR
      - SRSGW_EPP_GENERIC_COMMAND_ERROR
      - SRSGW_EPP_UNEXPECTED_COMMAND_SUCCESS
      - SRSGW_EPP_UNEXPECTED_COMMAND_FAILURE
      - SRSGW_EPP_SCHEMA_VALIDATION_ERROR
      - SRSGW_EPP_OBJECT_SHOULD_EXIST
      - SRSGW_EPP_OBJECT_SHOULD_NOT_EXIST
  
  DNSSECOperations:
    Order: 8
    Name: DNSSEC Operations
    Description: |
      This test suite verifies the ability of an RSP to carry out standard DNSSEC
      operational procedures while maintaining a chain of trust to the parent
      zone.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^dnssecOps
    Input-Parameters:
      - dnssecOps.nameservers
      - dnssecOps.primaryServer
      - dnssecOps.tsigKey
    Errors:
      - DNSSEC_OPS_XFR_FAILED
    Resources:
      - dnssecOps.xfrACL
  
  MinimumRPMs:
    Order: 9
    Name: Minimum Rights Protection Mechanisms (RPMs)
    Description: |
      This test suite verifies an RSP's support for the minimum Rights Protection
      Mechanisms (RPMs), and the Launch Extension (RFC 8334).
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^minimumRPMs-
    Input-Parameters:
      - epp.hostName
      - epp.serverIssuedClientCertificate01
      - epp.clid01
      - epp.pwd01
      - epp.clid02
      - epp.pwd02
      - epp.serverIssuedClientCertificate02
      - minimumRPMS.sunriseModels
      - minimumRPMS.sunriseTLD
      - minimumRPMS.claimsTLD
  
  StandardIntegrationTest:
    Order: 10
    Name: Standard Integration Test
    Description: |
      This test suite verifies that the critical registry services of the TLD are
      properly integrated and functioning within the requirements of the Service
      Level Agreement.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^integration-

Resources:
  rde.encryptionKey:
    Description: |
      RDE deposit files **MUST** be encrypted using OpenPGP (RFC 4880). The PGP
      key that **MUST** be used to encrypt the escrow deposit file may be found
      at this URL.
    URL: https://rst.icann.org/v2/resources/rde.encryptionKey.asc
  
  epp.clientCertificate:
    Description: |
      RFC 5734 requires servers to perform authentication of clients by means of
      a client certificate. Operators **MUST** configure their systems to permit
      the test client to connect using the certificate found at this URL.
    URL: https://rst.icann.org/v2/resources/epp.clientCertificate.pem
  
  epp.clientCSR:
    Description: |
      For servers that operate a private CA, this CSR may be used to issue a
      client certificate. This certificate must then be provided in the
      `epp.clientCertificate` input parameter.
  
  epp.clientACL:
    Description: |
      A list of IPv4 and IPv6 address(es) from which client connections to the
      operator's EPP server will be made. The list is a plain text file with
      each IP address on a separate line.
    URL: https://rst.icann.org/v2/resources/epp.clientACL.txt
  
  integration.rdeSFTPPublicKey:
    Description: |
      The SSH public key that will be used to authenticate connections to the
      operator's SFTP server.
    URL: https://rst.icann.org/v2/resources/integration.rdeSFTPPublicKey.pem
  
  integration.rdeSFTPACL:
    Description: |
      A list of IPv4 and IPv6 address(es) from which client connections to the
      operator's SFTP server will be made. The list is a plain text file with
      each IP address on a separate line.
    URL: https://rst.icann.org/v2/resources/integration.rdeSFTPACL.txt
  
  epp.tlsCertificateStore:
    Description: |
      A PEM-formatted file containing the CA certificates trusted by Mozilla.
      For more information, see <https://curl.se/docs/caextract.html>.
  
      EPP servers **MUST** use a certificate that has a chain of trust to one of
      the CAs present in this file.
    URL: https://rst.icann.org/v2/resources/epp.tlsCertificateStore.pem
  
  dnssecOps.xfrACL:
    Description: |
      A list of IPv4 and IPv6 address(es) from which zone file transfers to
      primary DNS servers will be made. The list is a plain text file with
      each IP address on a separate line.
    URL: https://rst.icann.org/v2/resources/dnssecOps.xfrACL.txt

Test-Cases:
  dns-address01:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Address-TP/address01.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      In order for the domain and its resources to be accessible,
      authoritative name servers must have addresses in the routable public
      addressing space.
  
      IANA is responsible for global coordination of the IP addressing system.
      Aside its address allocation activities, it maintains reserved address
      ranges for special uses. These ranges can be categorized into three
      types : [Special purpose IPv4
      addresses](https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xml),
      [Special purpose IPv6
      addresses](https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xml)
      and [Multicast reserved
      addresses](https://www.iana.org/assignments/multicast-addresses/multicast-addresses.xml).
    Errors:
    - ZM_DNS_ADDRESS01_FAILED
    Maturity: BETA
    Summary: Name server address must be globally routable
  
  dns-address02:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Address-TP/address02.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      Some anti-spam techniques use reverse DNS lookup to allow incoming
      traffic. In order to prevent name servers to be blocked or blacklisted,
      DNS administrators should publish PTR records associated to name server
      addresses.
  
      \[technical reference to be found\]
    Errors:
    - ZM_DNS_ADDRESS02_FAILED
    Maturity: BETA
    Summary: Reverse DNS entry exists for name server IP address
  
  dns-address03:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Address-TP/address03.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      Some anti-spam techniques use reverse DNS lookup to allow incoming
      traffic. In order to prevent name servers to be blocked or blacklisted,
      DNS administrators should publish PTR records associated with the name
      server addresses.
  
      Moreover, as mentioned in paragraph 2.1 of [RFC
      1912](https://datatracker.ietf.org/doc/html/rfc1912) when a PTR record
      exists, it must match the host name.
    Errors:
    - ZM_DNS_ADDRESS03_FAILED
    Maturity: BETA
    Summary: Reverse DNS entry matches name server name
  
  dns-connectivity01:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity01.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      UDP is the fundamental protocol to reach a general purpose name server
      hosting a zone, "DNS servers MUST be able to service UDP \[...\]" ([RFC
      1123](https://www.rfc-editor.org/rfc/rfc1123), section 6.1.3.2, page
      75), also restated in [RFC
      7766](https://www.rfc-editor.org/rfc/rfc7766#section-5), section 5.
  
      This Test Case will verify if the name servers of *Child Zone* are
      reachable over UDP. The name servers tested are both those in the
      delegation of *Child Zone* and those in the NS records in the *Child
      Zone* itself.
  
      Most Zonemaster Test Cases will query the name servers in the delegation
      or the name servers appointed by the NS records in the zone for the NS
      or SOA record, or both. It is crucial that problems are reported, but
      instead of letting several Test Cases report the same problems found,
      most Test Cases assume that this test case is run. Only this Test Case
      will report problems found in the following areas over UDP:
  
      -   Name Server not responding to a query without EDNS.
      -   Name Server not including SOA record of *Child Zone* in the answer
          section in the response on a SOA query for *Child Zone*.
      -   Name Server not including NS record of *Child Zone* in the answer
          section in the response on an NS query for *Child Zone*.
      -   Name Server not setting the AA flag in a response with SOA or NS in
          answer section.
      -   Name Server responding with unexpected [RCODE
          Name](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6)
          (any except "NoError") on query for SOA or NS for *Child Zone*.
  
      In addition, this test case will output a message if transport over IPv4
      or IPv6 has been disabled.
    Errors:
    - ZM_CN01_MISSING_NS_RECORD_UDP
    - ZM_CN01_SOA_RECORD_NOT_AA_UDP
    - ZM_CN01_NO_RESPONSE_UDP
    - ZM_CN01_WRONG_SOA_RECORD_UDP
    - ZM_CN01_NO_RESPONSE_NS_QUERY_UDP
    - ZM_CN01_UNEXPECTED_RCODE_SOA_QUERY_UDP
    - ZM_CN01_NS_RECORD_NOT_AA_UDP
    - ZM_CN01_UNEXPECTED_RCODE_NS_QUERY_UDP
    - ZM_CN01_MISSING_SOA_RECORD_UDP
    - ZM_CN01_WRONG_NS_RECORD_UDP
    - ZM_CN01_NO_RESPONSE_SOA_QUERY_UDP
    Maturity: BETA
    Summary: UDP connectivity to name servers
  
  dns-connectivity02:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity02.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      TCP is a protocol to reach a general purpose name server hosting a zone,
      "All general-purpose DNS implementations MUST support \[...\] TCP
      transport" ([RFC
      7766](https://www.rfc-editor.org/rfc/rfc7766#section-5), section 5).
  
      This Test Case will verify if the name servers of *Child Zone* are
      reachable over TCP. The name servers tested are both those in the
      delegation of *Child Zone* and those in the NS records in the *Child
      Zone* itself.
  
      This Test Case will mimic the tests done by
      [Connectivity01](https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity01.md),
      but over TCP instead:
  
      -   Name Server responding to a query.
      -   Name Server including SOA record of *Child Zone* in the answer
          section in the response on a SOA query for *Child Zone*.
      -   Name Server including NS record of *Child Zone* in the answer
          section in the response on an NS query for *Child Zone*.
      -   Name Server setting the AA flag in a response with SOA or NS in
          answer section.
      -   Name Server responding with expected [RCODE
          Name](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6)
          ("NoError") on query for SOA or NS for *Child Zone*.
    Errors:
    - ZM_CN02_MISSING_NS_RECORD_TCP
    - ZM_CN02_SOA_RECORD_NOT_AA_TCP
    - ZM_CN02_NO_RESPONSE_TCP
    - ZM_CN02_WRONG_SOA_RECORD_TCP
    - ZM_CN02_NO_RESPONSE_NS_QUERY_TCP
    - ZM_CN02_UNEXPECTED_RCODE_SOA_QUERY_TCP
    - ZM_CN02_NS_RECORD_NOT_AA_TCP
    - ZM_CN02_UNEXPECTED_RCODE_NS_QUERY_TCP
    - ZM_CN02_MISSING_SOA_RECORD_TCP
    - ZM_CN02_WRONG_NS_RECORD_TCP
    - ZM_CN02_NO_RESPONSE_SOA_QUERY_TCP
    Maturity: BETA
    Summary: TCP connectivity to name servers
  
  dns-connectivity03:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity03.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      The objective in this test is to verify that all IP addresses of the
      domain's authoritative name servers are announced from different ASNs
      (autonomous system number). See [RFC
      1930](https://datatracker.ietf.org/doc/html/rfc1930) and
      [Wikipedia](https://en.wikipedia.org/wiki/Autonomous_system_(Internet))
      for an explanation of AS (autonomous system).
  
      This test is done separately on IPv4 and IPv6, and both must match the
      criterion.
  
      [RFC 2182](https://datatracker.ietf.org/doc/html/rfc2182#section-3.1),
      section 3.1, clearly specifies that distinct authoritative name servers
      for a child domain should be placed in different topological and
      geographical locations. The objective is to minimise the likelihood of a
      single failure disabling all of them.
    Errors:
    - ZM_EMPTY_ASN_SET
    - ZM_IPV4_ONE_ASN
    - ZM_ERROR_ASN_DATABASE
    - ZM_IPV6_ONE_ASN
    Maturity: BETA
    Summary: AS Diversity
  
  dns-consistency02:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency02.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      All authoritative name servers must serve the same SOA record for the
      tested domain (section 4.2.1 of [RFC
      1034](https://datatracker.ietf.org/doc/html/rfc1034)). As per section
      3.3.13 of [RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035), the
      RNAME field in the SOA RDATA refers to the administrative contact. An
      inconsistency in the administrative contact for the domain might result
      in operational failures being reported to different persons.
  
      The objective of this test is to verify that the administrative contact
      is consistent between different authoritative name servers.
    Errors:
    - ZM_NO_RESPONSE
    - ZM_MULTIPLE_SOA_RNAMES
    - ZM_NO_RESPONSE_SOA_QUERY
    Maturity: BETA
    Summary: SOA RNAME consistency
  
  dns-consistency03:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency03.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      All SOA record timer fields must be consistent across all authoritative
      name servers. An inconsistency in these fields might result in
      operational inconsistencies for the designated zone.
  
      There are other test cases that provide consistency tests for the other
      SOA fields:
  
      -   [CONSISTENCY02](https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency02.md)
          (RNAME)
      -   [CONSISTENCY06](https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency06.md)
          (MNAME)
    Errors:
    - ZM_NO_RESPONSE
    - ZM_MULTIPLE_SOA_TIME_PARAMETER_SET
    - ZM_NO_RESPONSE_SOA_QUERY
    Maturity: BETA
    Summary: SOA timers consistency
  
  dns-consistency04:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency04.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      All authoritative name servers must serve the same NS record set for the
      tested domain, child zone ([RFC
      1034](https://datatracker.ietf.org/doc/html/rfc1034), section 4.2.2).
      Any inconsistencies in NS records described in [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035), section 3.3.11,
      might result in operational failures.
  
      The objective of this test is to verify that the NS records are
      consistent between all authoritative name servers of the child zone.
  
      Two NS RR sets are considered to be equal if both sets have the same
      number of NS records, and for each NS record in one of the sets there is
      exactly one NS record with identical owner name, class, TTL and RDATA in
      the other NS set.
    Errors:
    - ZM_NO_RESPONSE
    - ZM_MULTIPLE_NS_SET
    - ZM_NO_RESPONSE_NS_QUERY
    Maturity: BETA
    Summary: Name server NS consistency
  
  dns-consistency05:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency05.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      For name servers that have IP addresses listed as glue, the IP addresses
      must match the authoritative A and AAAA records for that host. This is
      an IANA [name server
      requirement](https://www.iana.org/help/nameserver-requirements).
  
      The objective of this test is to verify that the [glue
      records](https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency05.md#terminology)
      in the delegation are consistent with authoritative data.
    Errors:
    - ZM_CHILD_NS_FAILED
    - ZM_OUT_OF_BAILIWICK_ADDR_MISMATCH
    - ZM_CHILD_ZONE_LAME
    - ZM_EXTRA_ADDRESS_CHILD
    - ZM_NO_RESPONSE
    - ZM_IN_BAILIWICK_ADDR_MISMATCH
    Maturity: BETA
    Summary: Consistency between glue and authoritative data
  
  dns-consistency06:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency06.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      All authoritative name servers must serve the same SOA record (section
      4.2.1) of [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1035) for
      the tested domain. As per section 3.3.13 of [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035) the MNAME field in
      the SOA RDATA refers to the name of "the name server that was the
      original or primary source of data for this zone". Inconsistency in
      MNAME of the domain might result in operational failures for
      applications that uses MNAME.
    Errors:
    - ZM_NO_RESPONSE
    - ZM_MULTIPLE_SOA_MNAMES
    - ZM_NO_RESPONSE_SOA_QUERY
    Maturity: BETA
    Summary: SOA MNAME consistency
  
  dns-delegation01:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation01.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      Section 4.1 of [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034)
      specifies that there must be a minimum of two name servers for a domain.
      This test is done to verify this condition.
  
      The RFC ([RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034))
      predates IPv6. Since IPv4 and IPv6 work as separate networks, this test
      case has been extended to test for two name servers that resolve into
      IPv4 addresses and IPv6 addresses respectively.
  
      Both [RFC 3901](https://datatracker.ietf.org/doc/html/rfc3901) (section
      3) and [RFC 4472](https://datatracker.ietf.org/doc/html/rfc4472)
      (section 1.3) states that a domain (zone) should be available over IPv4
      for the time being. Therefore, it is by the default level in this test
      case considered to be more problematic not being available over IPv4
      than not being available over IPv6.
    Errors:
    - ZM_NOT_ENOUGH_IPV4_NS_CHILD
    - ZM_NO_IPV4_NS_CHILD
    - ZM_NOT_ENOUGH_NS_CHILD
    - ZM_NO_IPV6_NS_CHILD
    - ZM_NOT_ENOUGH_IPV6_NS_CHILD
    - ZM_NO_IPV4_NS_DEL
    - ZM_NOT_ENOUGH_NS_DEL
    - ZM_NO_IPV6_NS_DEL
    - ZM_NOT_ENOUGH_IPV4_NS_DEL
    - ZM_NOT_ENOUGH_IPV6_NS_DEL
    Maturity: BETA
    Summary: Minimum number of name servers
  
  dns-delegation02:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation02.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      If the domain's name servers use several different names, they can all
      be using the same IP address. This may be due to a configuration error,
      or a workaround for a certain policy restriction. This test case checks
      that the name servers used do not reuse the same IP addresses.
  
      Section 4.1 of [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034)
      says at least two name servers must be used for a delegation.
    Errors:
    - ZM_DEL_NS_SAME_IP
    - ZM_CHILD_NS_SAME_IP
    Maturity: BETA
    Summary: Name servers must have distinct IP addresses
  
  dns-delegation03:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation03.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      The Domain Name System defaults to using UDP for queries and answers
      with a DNS payload limit of 512 octets (bytes). Larger replies cause an
      initial truncation indication leading to a subsequent handling via TCP
      with substantially higher overhead. EDNS0 is used to allow for larger
      UDP responses thus reducing the need for use of TCP.
  
      But [IANA](https://www.iana.org/help/nameserver-requirements) still
      maintains that referrals from the parent zone name servers must fit into
      a non-EDNS0 UDP DNS packet.
    Errors:
    - ZM_REFERRAL_SIZE_TOO_LARGE
    Maturity: BETA
    Summary: No truncation of referrals
  
  dns-delegation04:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation04.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      Subsection 6.1 of [RFC
      2181](https://datatracker.ietf.org/doc/html/rfc2181) specifies that the
      nameservers must answer authoritatively for the domain. Answers to
      queries to the name servers for the designated zone must have the "AA"
      bit set.
    Errors:
    - ZM_DNS_DELEGATION04_FAILED
    Maturity: BETA
    Summary: Name server is authoritative
  
  dns-delegation05:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation05.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      Name servers for a zone are defined in NS records. An NS record points
      at a name, i.e. the RDATA for an NS record is a domain name. That name
      is the name of the name server. [RFC
      2181](https://datatracker.ietf.org/doc/html/rfc2181#section-10.3),
      section 10.3, states that the name of the name server must not itself
      point at a CNAME.
  
      The objective of this test is to verify that name servers of the tested
      domain (zone) do not point at CNAME records.
    Errors:
    - ZM_NO_RESPONSE
    - ZM_NS_IS_CNAME
    - ZM_UNEXPECTED_RCODE
    Maturity: BETA
    Summary: Name server must not point at CNAME alias
  
  dns-delegation07:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation07.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      If the list of name servers for a domain obtained from its parent are
      not found in its its child zone, then it leads to an inconsistency
      (section 2.3 of
      [RIPE-114](https://www.ripe.net/publications/docs/ripe-114))
    Errors:
    - ZM_DNS_DELEGATION07_FAILED
    Maturity: BETA
    Summary: Parent glue name records present in child
  
  dns-nameserver01:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver01.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      To ensure consistency in DNS, an authoritative name server should not be
      configured to do recursive lookups. Also, open recursive resolvers are
      considered bad internet practice due to their capability of assisting in
      large scale DDoS attacks. The introduction to [RFC
      5358](https://datatracker.ietf.org/doc/html/rfc5358) elaborates on
      mixing recursor and authoritative functionality, and the issue is
      further elaborated by [D.J.
      Bernstein](https://cr.yp.to/djbdns/separation.html).
  
      Section 2.5 of [RFC 2870](https://datatracker.ietf.org/doc/html/rfc2870)
      have very specific requirement on disabling recursion functionality on
      root name servers.
    Errors:
    - ZM_NO_RESPONSE
    - ZM_IS_A_RECURSOR
    Maturity: BETA
    Summary: A name server should not be a recursor
  
  dns-nameserver02:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver02.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      EDNS(0) is a mechanism to announce capabilities of a DNS implementation,
      and is now basically required by any new functionality in DNS such as
      DNSSEC. EDNS(0) is standardized in [RFC
      6891](https://datatracker.ietf.org/doc/html/rfc6891).
  
      This test case checks that all name servers has the capability to do
      EDNS(0) or if not, correctly replies to queries containing EDNS (OPT
      record).
  
      Servers not supporting EDNS(0) must return FORMERR ([RFC 6891, section
      7](https://datatracker.ietf.org/doc/html/rfc6891#section-7)):
  
      > Responders that choose not to implement the protocol extensions
      > defined in this document MUST respond with a return code (RCODE) of
      > FORMERR to messages containing an OPT record in the additional section
      > and MUST NOT include an OPT record in the response.
  
      Servers supporting EDNS(0) must reply with EDNS(0) ([RFC 6891, section
      6.1.1](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.1)):
  
      > If an OPT record is present in a received request, compliant
      > responders MUST include an OPT record in their respective responses.
  
      To eliminating the risk of falsely classifying the server as not
      supporting EDNS due e.g. firewall issues, the UDP buffer size is set to
      512 bytes (octets).
    Errors:
    - ZM_NO_RESPONSE
    - ZM_EDNS_VERSION_ERROR
    - ZM_BREAKS_ON_EDNS
    - ZM_NS_ERROR
    - ZM_NO_EDNS_SUPPORT
    - ZM_EDNS_RESPONSE_WITHOUT_EDNS
    Maturity: BETA
    Summary: Test of EDNS0 support
  
  dns-nameserver04:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver04.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      Responses from the authoritative name servers must contain same source
      IP address as the destination IP address of the initial query. This has
      been clarified in section 4 of [RFC
      2181](https://datatracker.ietf.org/doc/html/rfc2181#section-4).
    Errors:
    - ZM_DNS_NAMESERVER04_FAILED
    Maturity: BETA
    Summary: Same source address
  
  dns-nameserver05:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver05.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      Older implementations of authoritative name servers have shown different
      misbehaviours trying to answer queries for AAAA records, as described in
      [RFC 4074](https://datatracker.ietf.org/doc/html/rfc4074). This test
      case is intended to find out if the name server authoritative for the
      domain shows any of these behaviours.
    Errors:
    - ZM_AAAA_BAD_RDATA
    - ZM_NO_RESPONSE
    - ZM_AAAA_UNEXPECTED_RCODE
    - ZM_AAAA_QUERY_DROPPED
    - ZM_A_UNEXPECTED_RCODE
    Maturity: BETA
    Summary: Behaviour against AAAA query
  
  dns-nameserver06:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver06.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      All name servers names listed for a delegation must be resolvable in
      DNS. If they are not resolvable using DNS this is a sign of
      misconfiguration, and raises the risk of unreachability for the domain.
      It could also lower the performance for any resolver trying to resolve
      the name.
  
      The objective of this test is to resolve the domain using all the listed
      name servers used in the delegation. More information about resolver
      behavior is in section 7 of [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035).
    Errors:
    - ZM_DNS_NAMESERVER06_FAILED
    Maturity: BETA
    Summary: NS can be resolved
  
  dns-nameserver08:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver08.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      The DNS standards require that nameservers treat names with case
      insensitivity. That is, the names example.com and EXAMPLE.COM should
      resolve to the same IP address. However, in the response, most
      nameservers echo back the name as it appeared in the request, preserving
      the original case.
  
      Therefore, another way to add entropy to requests is to randomly vary
      the case of letters in domain names queried. This technique, also known
      as "0x20" because bit 0x20 is used to set the case of of US-ASCII
      letters, was first proposed in the [IETF internet
      draft](https://datatracker.ietf.org/doc/html/draft-vixie-dnsext-dns0x20-00)
      Use of Bit 0x20 in DNS Labels to Improve Transaction Identity. With this
      technique, the nameserver response must match not only the query name,
      but the case of every letter in the name string; for example,
      wWw.eXaMpLe.CoM or WwW.ExamPLe.COm. This may add little or no entropy to
      queries for the top-level and root domains, but it's effective for most
      hostnames.
    Errors:
    - ZM_DNS_NAMESERVER08_FAILED
    Maturity: BETA
    Summary: Testing QNAME case insensitivity
  
  dns-nameserver09:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver09.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      There has been cases where the nameservers respond with complete
      case-sensitivity (in violation of the DNS standards): that is, they
      match the exact case of the name in the response; but return different
      results for equivalent names with different cases in the request
      (typically NXDOMAIN).
    Errors:
    - ZM_DNS_NAMESERVER09_FAILED
    Maturity: BETA
    Summary: Testing QNAME case sensitivity
  
  dns-nameserver10:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver10.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      EDNS ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891)) is a
      mechanism to announce capabilities of a DNS implementation, and is
      required by new functionality in DNS such as DNSSEC ([RFC
      4033](https://datatracker.ietf.org/doc/html/rfc4033#section-3), section
      3).
  
      [RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.3),
      section 6.1.3, states that if a nameserver has implemented EDNS but has
      not implemented the version level of the request, then it MUST respond
      with RCODE "BADVERS". Only version "0" has been defined for EDNS.
  
      Note that RCODE "BADVERS" is an extended RCODE which is calculated from
      the combination of the normal RCODE field in the DNS package header
      ([RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035#section-4.1.1),
      section 4.1.1) and the OPT record EXTENDED-RCODE field ([RFC
      6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.3),
      section 6.1.3). Also see [IANA RCODE
      Registry](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6).
    Errors:
    - ZM_N10_NO_RESPONSE_EDNS1_QUERY
    - ZM_N10_EDNS_RESPONSE_ERROR
    - ZM_N10_UNEXPECTED_RCODE
    Maturity: BETA
    Summary: Test for undefined EDNS version
  
  dns-nameserver11:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver11.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      EDNS is a mechanism to announce capabilities of a DNS implementation,
      and is now basically required by any new functionality in DNS such as
      DNSSEC ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891)).
  
      [RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.2),
      section 6.1.2, states that any OPTION-CODE values not understood by a
      responder or requestor MUST be ignored. Unknown OPTION-CODE values must
      be processed as though the OPTION-CODE was not even there.
  
      In this test case, we will query with an unknown EDNS OPTION-CODE and
      expect that the OPTION-CODE is not present in the response for the
      query.
    Errors:
    - ZM_N11_NO_EDNS
    - ZM_N11_UNEXPECTED_RCODE
    - ZM_N11_RETURNS_UNKNOWN_OPTION_CODE
    - ZM_N11_UNSET_AA
    - ZM_N11_NO_RESPONSE
    - ZM_N11_UNEXPECTED_ANSWER_SECTION
    Maturity: BETA
    Summary: Test for unknown EDNS OPTION-CODE
  
  dns-nameserver12:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver12.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      EDNS is a mechanism to announce capabilities of a dns implementation,
      and is now basically required by any new functionality in dns such as
      DNSSEC ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891)).
  
      [RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.4),
      section 6.1.4, states that "Z" flag bits must be set to zero by senders
      and ignored by receiver.
  
      [IANA](https://www.iana.org/) lists the flags in the [EDNS Header
      Flags](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-13)
      assignment list.
  
      In this test case, the query will have an unknown EDNS flag set, i.e.
      one of the Z flag bits set to "1", and it is expected that all "Z" bits
      to be clear in the response (set to "0").
    Errors:
    - ZM_NO_RESPONSE
    - ZM_NS_ERROR
    - ZM_NO_EDNS_SUPPORT
    - ZM_Z_FLAGS_NOTCLEAR
    Maturity: BETA
    Summary: Test for unknown EDNS flags
  
  dns-nameserver13:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver13.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      EDNS is a mechanism to announce capabilities of a DNS implementation,
      and is now basically required by any new functionality in DNS such as
      DNSSEC ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891)).
  
      [RFC 6891, section
      7](https://datatracker.ietf.org/doc/html/rfc6891#section-7) states that
      an OPT record must be included in a truncated response, if the query
      includes an OPT pseudo record.
  
      This Test Case will try to verify that if the response to a query with
      an OPT record is truncated, then the response will contain an OPT
      record.
  
      To trigger a truncated response, the OPT pseudo record 'DO' bit is set
      and the buffer size is limited to 512 bytes. If the zone is not signed
      with DNSSEC, the response will probably not be truncated anyway.
    Errors:
    - ZM_NO_RESPONSE
    - ZM_NS_ERROR
    - ZM_NO_EDNS_SUPPORT
    - ZM_MISSING_OPT_IN_TRUNCATED
    Maturity: BETA
    Summary: Test for truncated response on EDNS query
  
  dns-nameserver14:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver14.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      This test case actually combines the test options in test cases
      [NAMESERVER10](https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver10.md)
      and
      [NAMESERVER11](https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver11.md).
    Errors:
    - ZM_NO_RESPONSE
    - ZM_UNSUPPORTED_EDNS_VER
    - ZM_NS_ERROR
    - ZM_NO_EDNS_SUPPORT
    - ZM_UNKNOWN_OPTION_CODE
    Maturity: BETA
    Summary: Test for unknown version with unknown OPTION-CODE
  
  dns-syntax05:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax05.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      The SOA RNAME field does not allow the '@' characters to be used for
      describing a mailbox. The first dot ('.') is thus translated into the
      '@' character. This is a common mistake. The rules are defined in [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035).
    Errors:
    - ZM_DNS_SYNTAX05_FAILED
    Maturity: BETA
    Summary: Misuse of '@' character in the SOA RNAME field
  
  dns-syntax06:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax06.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      The SOA RNAME field is a mailbox address. The SOA RNAME field is defined
      in [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035#section-3.3.13),
      section 3.3.13 and in [RFC
      1912](https://datatracker.ietf.org/doc/html/rfc1912#section-2.2),
      section 2.2. The RNAME field should follow the rules of an e-mail
      address also defined in [RFC
      5322](https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1),
      section 3.4.1.
    Errors:
    - ZM_NO_RESPONSE
    - ZM_RNAME_MAIL_DOMAIN_LOCALHOST
    - ZM_RNAME_RFC822_INVALID
    - ZM_RNAME_MAIL_ILLEGAL_CNAME
    - ZM_NO_RESPONSE_SOA_QUERY
    - ZM_RNAME_MAIL_DOMAIN_INVALID
    Maturity: BETA
    Summary: No illegal characters in the SOA RNAME field
  
  dns-syntax07:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax07.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      The SOA MNAME field is a hostname. Hostnames are valid according to the
      rules defined in [RFC
      952](https://datatracker.ietf.org/doc/html/rfc952), in section 2.1 in
      [RFC 1123](https://datatracker.ietf.org/doc/html/rfc1123#section-2.1),
      section 11 in [RFC
      2182](https://datatracker.ietf.org/doc/html/rfc2181#section-11) and
      section 2 and 5 in [RFC
      3696](https://datatracker.ietf.org/doc/html/rfc3696#section-2). Newer
      RFCs may override some rules defined in earlier documents.
    Errors:
    - ZM_DNS_SYNTAX07_FAILED
    Maturity: BETA
    Summary: No illegal characters in the SOA MNAME field
  
  dns-zone07:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone07.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      Any NS type record should not be a CNAME. The SOA MNAME should in this
      respect not be a CNAME.
  
      Quote from 2.4 in [RFC
      1912](https://datatracker.ietf.org/doc/html/rfc1912):
  
      > Having NS records pointing to a CNAME is bad and may conflict badly
      > with current BIND servers.
  
      The SOA MNAME field is described in section 3.3.13 in [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035).
  
      The [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)
      recommendation for the minimum value 2 days, but the negative caching is
      now the norm. DNSCheck has a recommended value of between 300 seconds (5
      minutes) and 86400 seconds (1 day).
    Errors:
    - ZM_DNS_ZONE07_FAILED
    Maturity: BETA
    Summary: SOA master is not an alias
  
  dns-zone10:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone10.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      The SOA record is crucial for the DNS zone and "exactly one SOA RR
      should be present at the top of the zone" ([RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035#section-5.2),
      section 5.2). This test case will verify that the zone of the domain to
      be tested return exactly one SOA record.
    Errors:
    - ZM_MULTIPLE_SOA
    - ZM_NO_SOA_IN_RESPONSE
    - ZM_NO_RESPONSE
    - ZM_WRONG_SOA
    Maturity: BETA
    Summary: No multiple SOA records
  
  dnssec-01:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec01.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      The list of allowed Digest Algorithms in a DS record published by the
      parent is specified by [RFC
      8624](https://datatracker.ietf.org/doc/html/rfc8624#section-3.3),
      section 3.3, and is published in the [IANA
      registry](https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xml)
      of *DS RR Type Digest Algorithms*. No DS Digest Algorithm values, other
      than those specified in the RFC and allocated by IANA, should be used in
      public DNS.
  
      If [RFC 8624](https://datatracker.ietf.org/doc/html/rfc8624#section-3.3)
      and the [IANA
      registry](https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xml)
      disagree on the same DS digest algorithm, the RFC takes precedence until
      the registry has a been updated with a reference to the RFC.
  
      The table of algorithms below is for reference only and is copied from
      [IANA
      registry](https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xml).
      It is here to make it easier to read the steps when symbolic names are
      given. This is only an excerpt from the table. The full table is
      available at the IANA registry.
  
        Algorithm number   Algorithm (or description)
        ------------------ ----------------------------
        0                  (Reserved)
        1                  SHA-1
        2                  SHA-256
        3                  GOST R 34.11-94
        4                  SHA-384
        5-255              (Unassigned)
  
      This test case will verify that the Zonemaster implementation has
      support for the DS digest algorithm of the DS record found, and if not
      output a message tag. If the support is missing other test cases will
      not be able to verify that DS record.
    Errors:
    - ZM_DS01_DS_ALGO_DEPRECATED
    - ZM_DS01_DS_ALGO_NOT_DS
    - ZM_DS01_DS_ALGO_2_MISSING
    - ZM_DS01_DS_ALGO_RESERVED
    Maturity: BETA
    Summary: Legal values for the DS hash digest algorithm
  
  dnssec-02:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec02.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      DNS delegations from a parent to a child are secured with DNSSEC by
      publishing one or several Delegation Signer (DS) records in the parent
      zone, along with the NS records for the delegation.
  
      For the secure delegation to work, at least one DS record must match a
      DNSKEY record in the child zone ([RFC
      4035](https://datatracker.ietf.org/doc/html/rfc4035#section-5), section
      5). Each DS record should match a DNSKEY record in the child zone. More
      than one DS may match the same DNSKEY. The DNSKEY that the DS record
      refer to must be used to sign the DNSKEY RRset in the child zone ([RFC
      4035](https://datatracker.ietf.org/doc/html/rfc4035#section-5), section
      5).
  
      The DNSKEY record that the DS record refer to must have bit 7 ("Zone Key
      flag") set in the DNSKEY RR Flags ([RFC
      4034](https://datatracker.ietf.org/doc/html/rfc4034#section-5.2),
      section 5.2).
  
      Bit 15 ("Secure Entry Point flag") on a DNSKEY record signals that it is
      meant to be a KSK and pointed out by a DS record. It is noted if the
      DNSKEY record that the DS points at does not have that flag set ([RFC
      4034](https://datatracker.ietf.org/doc/html/rfc4034#section-2.1.1),
      section 2.1.1).
    Errors:
    - ZM_DS02_DNSKEY_NOT_FOR_ZONE_SIGNING
    - ZM_DS02_NO_MATCHING_DNSKEY_RRSIG
    - ZM_DS02_DNSKEY_NOT_SIGNED_BY_ANY_DS
    - ZM_DS02_NO_VALID_DNSKEY_FOR_ANY_DS
    - ZM_DS02_DNSKEY_NOT_SEP
    - ZM_DS02_NO_MATCH_DS_DNSKEY
    - ZM_DS02_NO_DNSKEY_FOR_DS
    - ZM_DS02_RRSIG_NOT_VALID_BY_DNSKEY
    Maturity: BETA
    Summary: DS must match a valid DNSKEY in the child zone
  
  dnssec-03:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec03.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      For an authoritative name server an increased number of NSEC3 iterations
      have a negative impact on performance.
  
      Section 10.3 in [RFC
      5155](https://datatracker.ietf.org/doc/html/rfc5155#section-10.3) sets a
      maximum number of iterations depending on the DNSSEC key size -
      regardless of which algorithm is used.
  
      > A zone owner MUST NOT use a value higher than shown in the table below
      > for iterations for the given key size. A resolver MAY treat a response
      > with a higher value as insecure, after the validator has verified that
      > the signature over the NSEC3 RR is correct.
  
        Key Size   Iterations
        ---------- ------------
        1024       150
        2048       500
        4096       2,500
  
      Section 5.3.2 in [RFC
      6781](https://datatracker.ietf.org/doc/html/rfc6781#section-5.3.2)
      describes the consequences for an authoritative name server in more
      detail, and references the [NSEC Hash
      Performance](https://www.nlnetlabs.nl/downloads/publications/nsec3_hash_performance.pdf)
      study from NLNet Labs.
  
      > Choosing a value of 100 iterations is deemed to be a sufficiently
      > costly, yet not excessive, value: In the worst-case scenario, the
      > performance of name servers would be halved, regardless of key size.
    Errors:
    - ZM_DNSSEC_03_FAILED
    Maturity: BETA
    Summary: Check for too many NSEC3 iterations
  
  dnssec-04:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec04.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      Having RRSIG signature lifetimes last for too long opens up for DNS
      replay attacks. Having too short RRSIG signature lifetimes is likely to
      have a major operational impact if the master name server is down for
      that long.
  
      There is no clear recommendation of the exact validity periods to use
      with DNSSEC. Shorter validity than 12 hours until expiration will give a
      serious operational problem just in case of temporary network problems,
      and longer than 180 days will create wide open holes for replay attacks.
  
      The considerations are described in
      [RFC6781](https://datatracker.ietf.org/doc/html/rfc6781).
    Errors:
    - ZM_DNSSEC_04_FAILED
    Maturity: BETA
    Summary: Check for too short or too long RRSIG lifetimes
  
  dnssec-05:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec05.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      A domain name (zone) should only use DNSKEY algorithms that are
      specified by [RFC
      8624](https://www.rfc-editor.org/rfc/rfc8624.html#section-3.1), section
      3.1 and the [IANA
      registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml)
      of *DNSSEC Algorithm Numbers* to be used for DNSSEC signing. A public
      domain name (zone) should not use private algorithms.
  
      If [RFC 8624](https://www.rfc-editor.org/rfc/rfc8624.html#section-3.1)
      and [IANA
      registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml)
      disagree on the same algorithm, the RFC takes precedence until the
      registry has a been updated with a reference to the RFC.
  
      The table of algorithms below is for reference only and is copied from
      [IANA
      registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml).
      It is here to make it easier to read the steps when symbolic names are
      given. This is only an excerpt from the table. The full table is
      available at [IANA
      registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml).
  
        Algorithm number   Algorithm (or description)
        ------------------ --------------------------------
        0                  (Delete DS)
        1                  RSA/MD5
        2                  Diffie-Hellman
        3                  DSA/SHA1
        4                  (Reserved)
        5                  RSA/SHA-1
        6                  DSA-NSEC3-SHA1
        7                  RSASHA1-NSEC3-SHA1
        8                  RSA/SHA-256
        9                  (Reserved)
        10                 RSA/SHA-512
        11                 (Reserved)
        12                 GOST R 34.10-2001
        13                 ECDSA Curve P-256 with SHA-256
        14                 ECDSA Curve P-384 with SHA-384
        15                 Ed25519
        16                 Ed448
        17-122             (Unassigned)
        123-251            (Reserved)
        252                (Indirect Keys)
        253                (Private algorithm)
        254                (Private algorithm OID)
        255                (Reserved)
    Errors:
    - ZM_NO_RESPONSE
    - ZM_ALGORITHM_UNASSIGNED
    - ZM_ALGORITHM_DEPRECATED
    - ZM_ALGORITHM_PRIVATE
    - ZM_NO_RESPONSE_DNSKEY
    - ZM_ALGORITHM_NOT_RECOMMENDED
    - ZM_ALGORITHM_RESERVED
    - ZM_ALGORITHM_NOT_ZONE_SIGN
    Maturity: BETA
    Summary: Check for invalid DNSKEY algorithms
  
  dnssec-06:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec06.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      In order for an authoritative name server to be DNSSEC compliant, it
      must serve DNSSEC signatures (RRSIG) as additional data in a DNS answer.
      This additional processing is described in section 3.1 of [RFC
      4035](https://datatracker.ietf.org/doc/html/rfc4035#section-3.1).
    Errors:
    - ZM_DNSSEC_06_FAILED
    Maturity: BETA
    Summary: Verify DNSSEC additional processing
  
  dnssec-08:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec08.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      A DNSSEC signed zone should have a DNSKEY RRset in the zone apex ([RFC
      4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.1),
      section 2.1) and that RRset should be signed by a key that matches one
      of the records in the DNSKEY RRset ([RFC
      4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.2),
      section 2.2).
  
      This test case will verify if the *Child Zone* meets that requirement.
    Errors:
    - ZM_DS08_DNSKEY_RRSIG_EXPIRED
    - ZM_DS08_RRSIG_NOT_VALID_BY_DNSKEY
    - ZM_DS08_MISSING_RRSIG_IN_RESPONSE
    - ZM_DS08_DNSKEY_RRSIG_NOT_YET_VALID
    - ZM_DS08_NO_MATCHING_DNSKEY
    Maturity: BETA
    Summary: Valid RRSIG for DNSKEY
  
  dnssec-09:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec09.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      If the zone is signed, the SOA RR should be signed with a valid RRSIG
      using a DNSKEY from the DNSKEY RR set. This is described in [RFC
      4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.2),
      section 2.2.
  
      This test case will verify if the *Child Zone* meets that requirement.
    Errors:
    - ZM_DS09_MISSING_RRSIG_IN_RESPONSE
    - ZM_DS09_SOA_RRSIG_NOT_YET_VALID
    - ZM_DS09_RRSIG_NOT_VALID_BY_DNSKEY
    - ZM_DS09_NO_MATCHING_DNSKEY
    - ZM_DS09_SOA_RRSIG_EXPIRED
    Maturity: BETA
    Summary: RRSIG(SOA) must be valid and created by a valid DNSKEY
  
  dnssec-10:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec10.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      When DNSSEC is enabled, NSEC or NSEC3 records provide a secure denial of
      existence for records not present in the zone. This test case verifies
      that correct NSEC or NSEC3 records with valid signatures are returned
      for a query for an non-existent name.
  
      Furthermore, it is verified that the name servers for the zone are
      consistent about NSEC and NSEC3, i.e. either all servers should use NSEC
      or all servers should use NSEC3. It is never permitted to serve both
      NSEC and NSEC3 for the same zone.
  
      The use of the NSEC RR type is described in [RFC
      4035](https://datatracker.ietf.org/doc/html/rfc4035#section-3.1.3),
      section 3.1.3, and the description of the NSEC RR itself is in [RFC
      4034](https://datatracker.ietf.org/doc/html/rfc4034#section-4), section
      4.
  
      The description of the NSEC3 RR is in [RFC
      5155](https://datatracker.ietf.org/doc/html/rfc5155#section-3), section
      3, and its use in the DNS response is described in [RFC
      5155](https://datatracker.ietf.org/doc/html/rfc5155#section-7.2),
      section 7.2.
    Errors:
    - ZM_DS10_ANSWER_VERIFY_ERROR
    - ZM_DS10_NON_EXISTENT_RESPONSE_ERROR
    - ZM_DS10_NAME_NOT_COVERED_BY_NSEC
    - ZM_DS10_NSEC_RRSIG_VERIFY_ERROR
    - ZM_DS10_MISSING_NSEC_NSEC3
    - ZM_DS10_NSEC3_RRSIG_VERIFY_ERROR
    - ZM_DS10_NAME_NOT_COVERED_BY_NSEC3
    - ZM_DS10_UNSIGNED_ANSWER
    - ZM_DS10_INCONSISTENT_NSEC_NSEC3
    - ZM_DS10_NSEC3_MISSING_SIGNATURE
    - ZM_DS10_MIXED_NSEC_NSEC3
    - ZM_DS10_NSEC_MISSING_SIGNATURE
    Maturity: BETA
    Summary: Zone contains NSEC or NSEC3 records
  
  dnssec-12:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec12.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      The objectives for this Test Case has yet to be defined. This is a
      placeholder for a complete defintion of the Test Case. The Test Case is
      not yet implemented.
  
      Test for DNSSEC Algorithm Completeness (DS-\>DNSKEY-\>RRSIG)
  
      See issues [#588](https://github.com/zonemaster/zonemaster/issues/588),
      [#528](https://github.com/zonemaster/zonemaster/issues/528),
      [#529](https://github.com/zonemaster/zonemaster/issues/529) and
      [#231](https://github.com/zonemaster/zonemaster/issues/231).
    Errors:
    - ZM_DNSSEC_12_FAILED
    Maturity: BETA
    Summary: Test for DNSSEC Algorithm Completeness
  
  dnssec-13:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec13.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      From [RFC
      6840](https://datatracker.ietf.org/doc/html/rfc6840#section-5.11),
      section 5.11:
  
      > The DS RRset and DNSKEY RRset are used to signal which algorithms are
      > used to sign a zone. \[...\] The zone MUST also be signed with each
      > algorithm (though not each key) present in the DNSKEY RRset. \[...\]
  
      To verify that the whole zone is signed with all algorithms require
      access to the complete zone, which is generally not possible for public
      zones. This test case is limited to three RRsets that must be present in
      a signed zone, the SOA RRset, the NS RRset and the DNSKEY RRset.
  
      This test case will verify that for each DNSKEY algorithm, there is a
      RRSIG of that algorithm for the three selected RRsets.
    Errors:
    - ZM_DS13_ALGO_NOT_SIGNED_DNSKEY
    - ZM_DS13_ALGO_NOT_SIGNED_SOA
    - ZM_DS13_ALGO_NOT_SIGNED_NS
    Maturity: BETA
    Summary: All DNSKEY algorithms used to sign the zone
  
  dnssec-14:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec14.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      The DNSKEYs based on RSA have different minimum and maximum key sizes,
      which must be followed. This test case will validate the keys size of
      such keys. RSA based algorithms that are deprecated or else not suitable
      for DNSKEY ([RFC
      8624](https://www.rfc-editor.org/rfc/rfc8624.html#section-3.1) and [IANA
      registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml))
      are just ignored. See test case
      [DNSSEC05](https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec05.md)
      for test of algorithm.
  
      The table 1 below specify the maximum and minimum key size,
      respectively. Algorithm number can be found in [IANA
      registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml).
  
      Table 1: Minimum and maximum RSA key sizes in bits
  
        Algorithm   Min size   Max size   Reference
        ----------- ---------- ---------- ---------------------------------------------------------------------
        5           512        4096       [RFC 3110](https://datatracker.ietf.org/doc/html/rfc3110)
        7           512        4096       [RFC 5155](https://datatracker.ietf.org/doc/html/rfc5155)
        8           512        4096       [RFC 5702](https://datatracker.ietf.org/doc/html/rfc5702#section-2)
        10          1024       4096       [RFC 5702](https://datatracker.ietf.org/doc/html/rfc5702#section-2)
  
      It is also recommended that an RSA based algorithm has a key length of
      at least 2048 bit as stated in [NIST SP 800-57 Part 1
      Rev. 4](https://csrc.nist.gov/publications/detail/sp/800-57-part-1/rev-4/archive/2016-01-28),
      table 2 on page 53 in section 5.6.1 and table 4 on page 55 in section
      5.6.2.
  
      This test case verifies that RSA DNSKEYs follows the stated key lengths
      from the RFCs and also the NIST recommended shortest key length.
    Errors:
    - ZM_NO_RESPONSE
    - ZM_DNSKEY_TOO_LARGE_FOR_ALGO
    - ZM_DNSKEY_SMALLER_THAN_REC
    - ZM_NO_RESPONSE_DNSKEY
    - ZM_DNSKEY_TOO_SMALL_FOR_ALGO
    Maturity: BETA
    Summary: Check for valid RSA DNSKEY key size
  
  dnssec-15:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec15.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      CDS and CDNSKEY record types are defined in [RFC
      7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC
      8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types
      are optional in a zone. The objective of this test case is to verify
      that they are correctly set-up, if included in the zone.
  
      If a CDS record is included in the zone, the corresponding CDNSKEY
      record should also be included ([RFC
      7344](https://datatracker.ietf.org/doc/html/rfc7344#section-4), section
      4).
  
      The CDS and CDNSKEY RRsets should be consistent between all name servers
      for the zone in question.
  
      If there are both CDS RRs and CDNSKEY RRs in the zone they must match in
      content ([RFC
      7344](https://datatracker.ietf.org/doc/html/rfc7344#section-4), section
      4). It means that both must be derived from the same DNSKEY or both
      being "delete" CDS and CDNSKEY.
    Errors:
    - ZM_DS15_INCONSISTENT_CDNSKEY
    - ZM_DS15_MISMATCH_CDS_CDNSKEY
    - ZM_DS15_INCONSISTENT_CDS
    Maturity: BETA
    Summary: Existence of CDS and CDNSKEY
  
  dnssec-16:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec16.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      CDS and CDNSKEY record types are defined in [RFC
      7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC
      8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types
      are optional in a zone. The objective of this test case is to verify
      that the CDS RRset is valid. This test case is only relevant if the zone
      has at least one CDS record. For tests of the CDNSKEY, see test case
      [DNSSEC17](https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec17.md).
    Errors:
    - ZM_DS16_CDS_INVALID_RRSIG
    - ZM_DS16_CDS_UNSIGNED
    - ZM_DS16_CDS_NOT_SIGNED_BY_CDS
    - ZM_DS16_DNSKEY_NOT_SIGNED_BY_CDS
    - ZM_DS16_CDS_MATCHES_NON_ZONE_DNSKEY
    - ZM_DS16_CDS_WITHOUT_DNSKEY
    - ZM_DS16_CDS_SIGNED_BY_UNKNOWN_DNSKEY
    - ZM_DS16_MIXED_DELETE_CDS
    - ZM_DS16_CDS_MATCHES_NON_SEP_DNSKEY
    - ZM_DS16_CDS_MATCHES_NO_DNSKEY
    Maturity: BETA
    Summary: Validate CDS
  
  dnssec-17:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec17.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      CDS and CDNSKEY record types are defined in [RFC
      7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC
      8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types
      are optional in a zone. The objective of this test case is to verify
      that the CDNSKEY RRset is valid. This test case is only relevant if the
      zone has at least one CDNSKEY record. For tests of the CDS, see test
      case
      [DNSSEC16](https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec16.md).
    Errors:
    - ZM_DS17_CDNSKEY_INVALID_RRSIG
    - ZM_DS17_CDNSKEY_UNSIGNED
    - ZM_DS17_CDNSKEY_NOT_SIGNED_BY_CDNSKEY
    - ZM_DS17_DNSKEY_NOT_SIGNED_BY_CDNSKEY
    - ZM_DS17_CDNSKEY_IS_NON_ZONE
    - ZM_DS17_CDNSKEY_WITHOUT_DNSKEY
    - ZM_DS17_CDNSKEY_SIGNED_BY_UNKNOWN_DNSKEY
    - ZM_DS17_MIXED_DELETE_CDNSKEY
    - ZM_DS17_CDNSKEY_IS_NON_SEP
    - ZM_DS17_CDNSKEY_MATCHES_NO_DNSKEY
    Maturity: BETA
    Summary: Validate CDNSKEY
  
  dnssec-18:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec18.md>.
      Some of the information below may not be applicable to the RST system.
  
      # Objective
  
      CDS and CDNSKEY record types are defined in [RFC
      7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC
      8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types
      are optional in a zone. The objective of this test case is to verify
      that there is a correct chain of trust from DS, in the parent zone to
      the CDS and CDNSKEY RRsets ([RFC
      7344](https://datatracker.ietf.org/doc/html/rfc7344#section-4.1),
      section 4.1).
  
      As stated in [RFC
      4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.4),
      section 2.4: \> A DS RR SHOULD point to a DNSKEY RR that is present in
      the child's \> apex DNSKEY RRset, and the child's apex DNSKEY RRset
      SHOULD be \> signed by the corresponding private key."
  
      This Test case is only relevant if \* The *Child Zone* has either CDS or
      CDNSKEY record or both, and \* The parent zone has a DS RRset for the
      *Child Zone*.
    Errors:
    - ZM_DS18_NO_MATCH_CDS_RRSIG_DS
    - ZM_DS18_NO_MATCH_CDNSKEY_RRSIG_DS
    Maturity: BETA
    Summary: Validate trust from DS to CDS and CDNSKEY
  
  dns-zz-idna2008-compliance:
    Summary: IDNA2008 compliance check
    Maturity: ALPHA
    Description: |
      In addition to the other tests case in this suite, which come from
      Zonemaster, this test case exists to confirm that all DNS host names which
      appear in resource records at the TLD apex conform to the IDNA2008
      specifications.
  
      The names that appear in the `MNAME` and `RNAME` fields of the TLD `SOA`
      record **MUST** be comprised solely of (a) ASCII-only labels or (b) IDN
      labels that conform to the requirements of IDNA2008.
    Errors:
      - DNS_IDNA2008_INVALID_MNAME
      - DNS_IDNA2008_INVALID_RNAME
  dnssec-91:
    Summary: Permitted signing algorithms
    Maturity: BETA
    Description: |
      In addition to the requirements outlined in `dnssec-05`, this test imposes
      an additional requirement on the signing algorithms used to sign zones,
      specifically, the algorithm number **MUST NOT** be lower than 8.
    Input-Parameters:
    Errors:
      - DNSSEC_DNS_QUERY_ERROR
      - DNSSEC_INVALID_SIGNING_ALGORITHM
    Dependencies:
      - dnssec-05
  dnssec-92:
    Summary: Permitted DS record hash algorithm(s)
    Maturity: BETA
    Description: |
      The DS record(s) submitted in the `dnssec.dsRecords` input parameters will
      be validated. Algorithm 1 (SHA-1) **MUST NOT** be used.
    Input-Parameters:
    Errors:
      - DNSSEC_DNS_QUERY_ERROR
      - DNSSEC_INVALID_DIGEST_ALGORITHM
  dnssecOps01-ZSKRollover:
    Summary: ZSK rollover
    Description: |
      This test case verifies the RSP's ability to perform a ZSK rollover (as
      described in [Section 4.1.1 of
      RFC 6781](https://datatracker.ietf.org/doc/html/rfc6781#section-4.1.1) for
      a zone.
  
      If the value of the `dnssecOps.csk` input parameter is `true`, then this
      test will be skipped.
  
      The system will monitor the zone specified in the `dnssec.zskRolloverZone`
      input parameter. The domain may be present anywhere in the DNS hierarchy
      (that is, it does not need to be a TLD), but **MUST** have a secure chain of
      trust up to the root zone, so that it can be validated using the root zone
      trust anchor.
  
      The zone **MUST** contain at least 10,000 delegations, where a delegation is
      considered to be one or more `NS` records with owner names that are below
      the zone's origin. If NSEC3 is used for secure denial of existence, the
      opt-out flag `MUST NOT` be set *(that is, an `RRSIG` record should be
      present for all `NS` rrsets, irrespective of whether a corresponding `DS`
      record is published)*.
  
      Monitoring will be carried out using `SOA` queries sent to multiple
      validating DNS resolvers, and by validating the result of a a zone transfer
      from the server specified in the `dnssecOps.primaryServer` input parameter.
  
      During the test period (currently defined as 48 hours) the operator
      **MUST** successfully carry out a ZSK rollover for the domain, where the
      Zone Signing Key is replaced, without disrupting the chain of trust.
  
      To simplify testing, applicants may wish to provision the zone such that it
      is configured with short TTLs and a short ZSK lifetime, so that a ZSK
      rollover is guaranteed to occur within the 48 test period.
    Input-Parameters:
      - dnssecOps.csk
      - dnssecOps.zskRolloverZone
    Errors:
      - DNSSEC_OPS_ZSK_ROLLOVER_CHAIN_OF_TRUST_BROKEN
      - DNSSEC_OPS_ZSK_ROLLOVER_NOT_COMPLETED
    
  dnssecOps02-KSKRollover:
    Summary: KSK rollover
    Description: |
      This test case verifies the RSP's ability to perform a CSK/KSK rollover
      (as described in [Sections 4.1.2 and 4.13 of
      RFC 6781](https://datatracker.ietf.org/doc/html/rfc6781#section-4.1.2) for
      a zone.
  
      The system will monitor the zone specified in the `dnssec.zskRolloverZone`
      input parameter. The domain may be present anywhere in the DNS hierarchy
      (that is, it does not need to be a TLD), but **MUST** have a secure chain of
      trust up to the root zone, so that it can be validated using the root zone
      trust anchor.
  
      The zone **MUST** contain at least 10,000 delegations, where a delegation is
      considered to be one or more `NS` records with owner names that are below
      the zone's origin. If NSEC3 is used for secure denial of existence, the
      opt-out flag `MUST NOT` be set *(that is, an `RRSIG` record should be
      present for all `NS` rrsets, irrespective of whether a corresponding `DS`
      record is published)*.
  
      Monitoring will be carried out using `SOA` queries sent to multiple
      validating DNS resolvers, and by validating the result of a a zone transfer
      from the server specified in the `dnssecOps.primaryServer` input parameter.
  
      During the test period (currently defined as 48 hours) the operator
      **MUST** successfully carry out a KSK rollover for the domain, where the
      Key Signing Key is replaced, and the DS record in the parent zone is
      updated, without disrupting the chain of trust.
    Input-Parameters:
      - dnssecOps.kskRolloverZone
    Errors:
      - DNSSEC_OPS_KSK_ROLLOVER_CHAIN_OF_TRUST_BROKEN
      - DNSSEC_OPS_KSK_ROLLOVER_NOT_COMPLETED
  
  dnssecOps03-AlgorithmRollover:
    Summary: algorithm rollover
    Description: |
      This test case verifies the RSP's ability to perform an algorithm rollover
      (as described in [Section 4.1.4 of
      RFC 6781](https://datatracker.ietf.org/doc/html/rfc6781#section-4.1.2) for
      a zone.
  
      The system will monitor the zone specified in the `dnssec.zskRolloverZone`
      input parameter. The domain may be present anywhere in the DNS hierarchy
      (that is, it does not need to be a TLD), but **MUST** have a secure chain of
      trust up to the root zone, so that it can be validated using the root zone
      trust anchor.
  
      The zone **MUST** contain at least 10,000 delegations, where a delegation is
      considered to be one or more `NS` records with owner names that are below
      the zone's origin. If NSEC3 is used for secure denial of existence, the
      opt-out flag `MUST NOT` be set *(that is, an `RRSIG` record should be
      present for all `NS` rrsets, irrespective of whether a corresponding `DS`
      record is published)*.
  
      Monitoring will be carried out using `SOA` queries sent to multiple
      validating DNS resolvers, and by validating the result of a a zone transfer
      from the server specified in the `dnssecOps.primaryServer` input parameter.
  
      During the test period (currently defined as 48 hours) the operator
      **MUST** successfully carry out an algorithm rollover for the domain
      (including an update to the DS record in the parent zone), where the
      algorithm used to secure the domain is changed, without disrupting the
      chain of trust.
  
      Note that the specific algorithms being rolled to and from are not
      significant (although they **MUST** be present in the IANA registry); it
      is not required that the new algorithm be more "secure" than the original
      algorithm; only that they are different. So a rollover from algorithm 13
      (`ECDSAP256SHA256`) to algorithm 8 (`RSASHA256`) will be accepted as well
      as a rollover from `RSASHA256` to `ECDSAP256SHA256`.
    Input-Parameters:
      - dnssecOps.algorithmRolloverZone
    Errors:
      - DNSSEC_OPS_ALGORITHM_ROLLOVER_CHAIN_OF_TRUST_BROKEN
      - DNSSEC_OPS_ALGORITHM_ROLLOVER_NOT_COMPLETED
      - DNSSEC_OPS_INVALID_ALGORITHM
  rde-01:
    Summary: validate deposit filename format
    Maturity: BETA
    Description: |
      * The deposit filename **MUST** conform to the format specified in the RA.
      * The type of the deposit **MUST** be `FULL`.
      * The TLD in the filename **MUST** be present in the list of TLDs
        associated with the test.
    Errors:
      - RDE_INVALID_FILENAME
  rde-02:
    Summary: validate signature over deposit file
    Maturity: BETA
    Description: |
      The PGP signature **MUST** be valid for the deposit file and the RSP's
      key.
    Input-Parameters:
      - rde.publicKey
      - rde.signatureFile
    Errors:
      - RDE_INVALID_SIGNATURE
  rde-03:
    Summary: decrypt deposit file(s)
    Maturity: BETA
    Description: |
      It **MUST** be possible to decrypt the deposit file using the RST key. The
      PGP public key for which the deposit **MUST** be encrypted may be found in
      the URL specified by the `rde.encryptionKey` resource.
    Resources:
      - rde.encryptionKey
    Errors:
      - RDE_DECRYPTION_FAILED
  rde-04:
    Summary: validate XML/CSV
    Maturity: BETA
    Description: |
      * XML deposit files **MUST** be well-formed and validate against the XML
        schema.
      * CSV files **MUST** conform to RFC 4180.
      * Deposits **MUST NOT** contain a mix of XML and CSV files for the deposit
        contents.
    Errors:
      - RDE_INVALID_XML
      - RDE_INVALID_CSV
      - RDE_MIXED_TYPES
  rde-05:
    Summary: validate object types
    Maturity: BETA
    Description: |
      The header object **MUST** reference the correct object XML namespace
      URIs.
  
      The correct URIs is determined by the `general.minimalPublicDataSet` and
      `epp.hostModel` input parameters.
  
      * if the `general.minimalPublicDataSet` input parameter is `true`, then the
        contact URI **MUST** be present. If the value is `false`, then it **MUST
        NOT** be present.
  
      * if the `epp.hostModel` input parameter is `true`, then the host URI
        **MUST** be present. If the value is `false`, then it **MUST NOT** be
        present.
  
      All expected URIs **MUST** be present in the header, and the header **MUST
      NOT** contain any unexpected URIs.
    Errors:
      - RDE_UNEXPECTED_OBJECT_URI
      - RDE_MISSING_OBJECT_URI
  
  rde-06:
    Summary: validate object counts
    Maturity: BETA
    Description: |
      The number of each type of object **MUST** match the number of objects
      actually present in the deposit file.
    Errors:
      - RDE_OBJECT_COUNT_MISMATCH
  
  rde-07:
    Summary: validate domain objects
    Maturity: BETA
    Description: |
      Domain objects (whether CSV or XML) **MUST** have the required object
      properties, and the values of those object properties **MUST** be
      well-formed.
  
      The required properties are:
  
      * `<domain:name>`
      * `<domain:roid>` (which **MUST** have a repository ID registered with
        IANA)
      * at least one `<domain:status>` element
      * `<domain:registrant>` (if `general.minimalPublicDataSet` is `false`)
      * `<domain:clID>` (sponsoring registrar ID)
      * `<domain:crDate>` (creation date)
      * `<domain:exDate>` (expiry date)
  
      Contact, host and registrar objects (including optional objects such as
      admin and tech contacts) which are referenced in domain objects **MUST**
      be present in the deposit.
    Errors:
      - RDE_DOMAIN_HAS_MISSING_NAME
      - RDE_DOMAIN_HAS_INVALID_NAME
      - RDE_DOMAIN_HAS_MISSING_ROID
      - RDE_DOMAIN_HAS_INVALID_ROID
      - RDE_DOMAIN_HAS_MISSING_STATUS
      - RDE_DOMAIN_HAS_INVALID_STATUS
      - RDE_DOMAIN_HAS_MISSING_REGISTRANT
      - RDE_DOMAIN_HAS_INVALID_REGISTRANT
      - RDE_DOMAIN_HAS_MISSING_CLID
      - RDE_DOMAIN_HAS_INVALID_CLID
      - RDE_DOMAIN_HAS_MISSING_CRDATE
      - RDE_DOMAIN_HAS_INVALID_CRDATE
      - RDE_DOMAIN_HAS_MISSING_EXDATE
      - RDE_DOMAIN_HAS_INVALID_EXDATE
  
  rde-08:
    Summary: validate host objects (if applicable)
    Maturity: BETA
    Description: |
      Host objects (whether CSV or XML) **MUST** have the required object
      properties, and the values of those object properties **MUST** be
      well-formed.
  
      The required properties are:
  
      * `<host:name>`
      * `<host:roid>` (which **MUST** have a repository ID registered with
        IANA)
      * at least one `<domain:status>` element
      * one or more `<addr>` elements (if the host name is subordinate to
        the TLD)
      * `<host:clID>` (sponsoring registrar ID)
  
      If the applicant uses the host attribute model, then this test will be
      skipped.
  
      Registrar objects which are referenced in host objects **MUST**
      be present in the deposit.
    Errors:
      - RDE_HOST_HAS_MISSING_NAME
      - RDE_HOST_HAS_INVALID_NAME
      - RDE_HOST_HAS_MISSING_ROID
      - RDE_HOST_HAS_INVALID_ROID
      - RDE_HOST_HAS_MISSING_STATUS
      - RDE_HOST_HAS_INVALID_STATUS
      - RDE_HOST_HAS_MISSING_IP_ADDRESS
      - RDE_HOST_HAS_INVALID_IP_ADDRESS
      - RDE_HOST_HAS_MISSING_CLID
      - RDE_HOST_HAS_INVALID_CLID
  
  rde-09:
    Summary: validate contact objects (if applicable)
    Maturity: BETA
    Description: |
      Contact objects (whether CSV or XML) **MUST** have the required object
      properties, and the values of those object properties **MUST** be
      well-formed.
  
      If the value of the `general.minimalPublicDataSet` input parameter is
      `true`, then this test will be skipped.
  
      * The value of the `<contact:id>` element **MUST** be unique in the deposit
      * The value of the `<contact:roid>` **MUST** have a repository ID registered
        with IANA
      * The object **MUST NOT** have two `<rdeContact:postalInfo>` elements with
        the same `type` attribute
      * The value of the `<contact:cc>` element **MUST** contain a value on the
        ISO-3166-alpha-2 list
      * The value of the `<contact:email>` element **MUST** be a valid mailbox
  
      Registrar objects which are referenced in contact objects **MUST** be
      present in the deposit.
    Errors:
      - RDE_CONTACT_HAS_NON_UNIQUE_ID
      - RDE_CONTACT_HAS_INVALID_ROID
      - RDE_CONTACT_HAS_MULTIPLE_POSTALINFO_TYPES
      - RDE_CONTACT_HAS_INVALID_CC
      - RDE_CONTACT_HAS_INVALID_EMAIL
      - RDE_CONTACT_HAS_UNKNOWN_CLID
      - RDE_CONTACT_HAS_UNKNOWN_CRRR
      - RDE_CONTACT_HAS_UNKNOWN_UPRR
      - RDE_CONTACT_HAS_UNKNOWN_RERR
      - RDE_CONTACT_HAS_UNKNOWN_ACRR
  rde-10:
    Summary: validate registrar objects
    Maturity: BETA
    Description: |
      Registrar objects (whether CSV or XML) **MUST** have the required object
      properties, and the values of those object properties **MUST** be
      well-formed.
  
      The required properties are:
  
      * `<rdeRegistrar:id>`
      * `<rdeRegistrar:name>`
      * `<rdeRegistrar:gurid>` (IANA ID)
    Errors:
      - RDE_REGISTRAR_HAS_MISSING_ID
      - RDE_REGISTRAR_HAS_INVALID_ID
      - RDE_REGISTRAR_HAS_MISSING_NAME
      - RDE_REGISTRAR_HAS_INVALID_NAME
      - RDE_REGISTRAR_HAS_MISSING_GURID
      - RDE_REGISTRAR_HAS_INVALID_GURID
  rde-11:
    Summary: validate IDN table objects (if applicable)
    Maturity: BETA
    Description: |
      IDN table objects (whether CSV or XML) **MUST** have the required object
      properties, and the values of those object properties **MUST** be
      well-formed.
  
      All IDN table objects present in the deposit **MUST** correspond to IDN
      tables approved for the TLD, and all approved tables **MUST** have a
      corresponding object in the deposit.
    Errors:
      - RDE_IDN_OBJECT_INVALID
      - RDE_IDN_OBJECT_MISSING
      - RDE_IDN_OBJECT_UNEXPECTED
  rde-12:
    Summary: validate NNDN objects
    Maturity: BETA
    Description: |
      NNDN table objects (whether CSV or XML) **MUST** have the required object
      properties, and the values of those object properties **MUST** be
      well-formed.
  
      The `aName` property of NNDN objects **MUST NOT** match the `name`
      property of a domain object.
    Errors:
      - RDE_NNDN_CONFLICTS_WITH_DOMAIN
  
  rde-13:
    Summary: validate EPP parameters object
    Maturity: BETA
    Description: |
      The EPP Parameters object **MUST** match the `<greeting>` element provided
      as an input parameter.
  
      A test case in the EPP Test Suite will confirm that this also matches what
      is returned when a client connects to the EPP server.
    Input-Parameters:
      - epp.greeting
    Errors:
      - RDE_GREETING_DOES_NOT_MATCH
  rde-14:
    Summary: validate policy object (if applicable)
    Maturity: BETA
    Description: |
      The object policies included in the `<rdePolicy:policy>` object **MUST**
      conform to the Registration Data Policy and the applicable data model.
  
      * If the `general.minimalPublicDataSet` input parameter is `true`, then
        contact objects **MUST NOT** be present in the deposit.
      * If the `epp.hostModel` input parameter is `attributes`, then
        host objects **MUST NOT** be present in the deposit.
    Errors:
      - RDE_POLICY_OBJECT_MISSING
      - RDE_POLICY_OBJECT_INVALID
      - RDE_POLICY_OBJECT_MISSING_OBJECTS
      - RDE_POLICY_OBJECT_UNEXPECTED_OBJECTS
  epp-01:
    Summary: Service connectivity test
    Description: |
      This test confirms that the EPP service is reachable from the probe
      servers.
  
      1. At least one `A` record **MUST** be published in the DNS for the EPP
         hostname, to allow IPv4-only hosts to connect to the EPP service.
      2. At least one `AAAA` record **SHOULD** be published in the DNS for the
         EPP hostname, to allow IPv6-only hosts to connect to the EPP service.
      3. EPP is associated with TCP port 700. All IPv4/IPv6 addresses published
         in the DNS for the EPP hostname **MUST** accept TCP connections on this
         port. Since the EPP specification requires IP-based access control, the
         RSP **MUST** configure their firewall to allow access from the IP
         addresses listed in the `epp.clientACL` resource.
      4. EPP uses TLS to secure the channel between client and server. All
         service ports **MUST** support TLSv1.2 and optionally any subsequent
         protocol published by the IETF.
      5. TLSv1.1 and all previous versions have known security issues and **MUST
         NOT** be supported by any service ports.
      6. To ensure that the connection can be trusted, all service ports
         **MUST** present a certificate issued by a trusted CA, such as those
         supported by major browsers.
      7. All TLS certificates **MUST NOT** have expired, and **MUST** be
         presented wth any required intermediate certificates.
      8. The EPP server name **MUST** match at least one `subjectAltName` field
         in all presented certificates (either exact match or wildcard).
      9. Service ports **MUST** use at least one of the ciphers recommended in
         RFC 9325 (or any successor document).
    Input-Parameters:
    Resources:
      - epp.tlsCertificateStore
    Errors:
      - EPP_MISSING_A_RECORDS
      - EPP_MISSING_AAAA_RECORDS
      - EPP_TLS_REQUIRED_PROTOCOL_NOT_SUPPORTED
      - EPP_TLS_FORBIDDEN_PROTOCOL_SUPPORTED
      - EPP_TLS_UNTRUSTED_CERTIFICATE
      - EPP_TLS_EXPIRED_CERTIFICATE
      - EPP_TLS_CERTIFICATE_CHAIN_MISSING
      - EPP_TLS_CERTIFICATE_HOSTNAME_MISMATCH
      - EPP_TLS_BAD_CIPHER
  epp-02:
    Summary: Protocol conformance test
    Description: |
      Once a connection is established, all service ports **MUST** send a
      valid `<greeting>` frame to the client.
  
      1. The `<svID>` element in the `<greeting>` **MUST** identify the EPP
         server.
      2. The `<svDate>` element in the `<greeting>` **MUST** specify a time
         within 30 seconds of the current date and time as received from the NTP
         network.
      3. The `<version>` element in the <greeting> **MUST** be exactly `1.0`.
      4. All `<lang>` element(s) in the `<greeting>` **MUST** contain valid
         language codes. At least `en` **MUST** be included.
      5. All `<objURI>` element(s) in the `<greeting>` **MUST** contain XML
         namespace URIs that are appropriate. The only mandatory URI that
         **MUST** be present is the domain namespace URI. The host and contact
         namespace URIs may be required depending on the `epp.hostModel` and
         `general.minimalPublicDataSet` parameters.
      6. All `<extURI>` element(s) in the `<greeting>` **MUST** contain XML
         namespace URIs that have been registered in the IANA registry, and that
         the mandatory extensions are also included.
      7. `<extURI>` elements containing the following XML namespaces **MUST** be
         present in the `<greeting>`:
           * `urn:ietf:params:xml:ns:secDNS-1.1`
           * `urn:ietf:params:xml:ns:launch-1.0`
           * `urn:ietf:params:xml:ns:rgp-1.0`
           # these may become mandatory in the future:
           # * `urn:ietf:params:xml:ns:epp:loginSec-1.0`
           # * `urn:ietf:params:xml:ns:epp:secure-authinfo-transfer-1.0`
      8. With the exception of the `<svDate>` element, all values in the
         `<greeting>` **MUST** match those found in the `epp.greeting` input
         parameter.
    Input-Parameters:
      - epp.greeting
    Errors:
      - EPP_NO_GREETING_RECEIVED
      - EPP_GREETING_SVID_INVALID
      - EPP_GREETING_SVDATE_INVALID
      - EPP_GREETING_VERSION_INVALID
      - EPP_GREETING_INVALID_LANG
      - EPP_GREETING_UNEXPECTED_OBJURI
      - EPP_GREETING_MISSING_OBJURI
      - EPP_GREETING_UNEXPECTED_EXTURI
      - EPP_GREETING_MISSING_EXTURI
      - EPP_GREETING_RECOMMENDED_EXTENSION_MISSING
      - EPP_GREETING_DOES_NOT_MATCH
    Input-Parameters:
    Dependencies:
  epp-03:
    Summary: Authentication test
    Description: |
      The EPP server **MUST** return a `1000` result in response to a `<login>`
      command.
  
      The client will use the object and extension XML namespaces from the
      server's `<greeting>` as part of the `<login>` command.
  
      If the server supports the Login Security Extension (see RFC 8807) then
      this will be used by the client.
    Input-Parameters:
    Resources:
    Errors:
  epp-04:
    Summary: domain <check> command test
    Description: |
      The client will perform a series of `<check>` commands and will validate
      the `avail` attribute of the `<domain:name>` elements in the server
      response, as follows:
  
      * syntactically invalid domain name: `avail` attribute **MUST** be `0`
        or `false`.
      * valid but registered domain name: `avail` attribute **MUST** be `0` or
        `false`.
      * syntactically valid, unregistered domain name: `avail` attribute
        **MUST** be `1` or `true`. The domain name will be generated using
        random characters.
  
      A "syntactically valid" domain name is one that complies with the format
      specified in RFC 1123 (this test case does not consider IDN names).
  
      These checks will be carried out for each TLD in the TLD set.
    Dependencies:
      - epp-03
    Errors:
      - EPP_DOMAIN_CHECK_VALID_DOMAIN_INCORRECT_AVAIL
      - EPP_DOMAIN_CHECK_INVALID_DOMAIN_INCORRECT_AVAIL
      - EPP_DOMAIN_CHECK_REGISTERED_DOMAIN_INCORRECT_AVAIL
  epp-05:
    Summary: host <check> command test (if applicable)
    Description: |
      If the EPP server supports host objects, this test will perform a series
      of `<check>` commands and will validate the `avail` attribute of the
      `<host:name>` elements in the server response, as follows:
      * syntactically invalid hostname: `avail` attribute **MUST** be `0` or
        `false`.
      * valid but registered hostname: `avail` attribute **MUST** be `0` or
        `false`.
      * syntactically valid and unregistered hostname: `avail` attribute
        **MUST** be `1` or `true`. The hostname will be generated using random
        characters.
  
      A "syntactically valid" hostname is one that complies with the format
      specified in RFC 1123 (this test case does not consider IDN names).
    Input-Parameters:
      - epp.registeredNameservers
    Dependencies:
      - epp-04
    Errors:
      - EPP_HOST_CHECK_VALID_HOST_INCORRECT_AVAIL
      - EPP_HOST_CHECK_INVALID_HOST_INCORRECT_AVAIL
      - EPP_HOST_CHECK_REGISTERED_HOST_INCORRECT_AVAIL
  epp-06:
    Summary: contact <check> command test (if applicable for the registry type)
    Description: |
      If the EPP server supports contact objects, this test will perform a
      series of `<check>` commands and will validate the `avail` attribute of
      the `<contact:id>` elements in the server response, as follows:
      * syntactically invalid ID: `avail` attribute **MUST** be `0` or
        `false`.
      * valid but registered ID: `avail` attribute **MUST** be `0` or
        `false`.
      * valid and unregistered ID: `avail` attribute **MUST** be `1` or
        `true`. The ID will be generated using random characters.
    Input-Parameters:
      - epp.registeredContacts
    Dependencies:
      - epp-05
    Errors:
      - EPP_CONTACT_CHECK_VALID_CONTACT_ID_INCORRECT_AVAIL
      - EPP_CONTACT_CHECK_INVALID_CONTACT_ID_INCORRECT_AVAIL
      - EPP_CONTACT_CHECK_REGISTERED_CONTACT_ID_INCORRECT_AVAIL
  epp-07:
    Summary: contact <create> command test (if applicable for the registry type)
    Description: |
      This test attempts to create a number of contact objects, and validates
      the server's response. For example, the test will expect that the server
      will reject a command that creates an object with missing or invalid
      properties, but will accept a command to create an object with valid
      properties. Property values will be randomly generated but will contain
      realistic values. No personal information will be transmitted as part
      of this test.
  
      If the `general.minimalPublicDataSet` input parameter is `true`, this
      test will be skipped.
  
      The test will confirm that the server checks and validates the values of
      the following elements:
  
      * `<contact:id>`
      * `<contact:status>`
      * `<contact:postalInfo>` element(s)
      * `<contact:name>` element
      * `<contact:cc>` element
      * `<contact:voice>`
      * `<contact:email>`
  
      * The server **MUST NOT** accept a `<contact:id>` element that
        contains a value that is not a valid `clIDType` value;
      * The server **MUST NOT** accept a `<contact:status>` element that
        contains a status code not defined in RFC 5733;
      * The server **MUST NOT** accept a `<contact:postalInfo>` element that
        contains a `type` attribute that is neither `int` nor `loc`;
      * The server **MUST NOT** accept a `<contact:cc>` element that contains a
        value that is not a valid ISO 3166-1 alpha-2 code;
      * The server **MUST NOT** accept a `<contact:voice>` element that contains
        a value that does not conform to the format described in Section 2.5 of
        RFC5733;
      * The server **MUST NOT** accept a `<contact:email>` element that contains
        a value that does not conform to the format specified in RFC 5322.
  
      Once objects have been created, the client will then perform `<info>`
      commands to verify that the server has correctly stored the provided
      values.
    Dependencies:
      - epp-06
    Errors:
      - EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_ID
      - EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_STATUS
      - EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE
      - EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_CC
      - EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_VOICE
      - EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_EMAIL
      - EPP_CONTACT_CREATE_INFO_RESPONSE_NOT_1000
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL
  epp-08:
    Summary: Contact object access control (if applicable)
    Description: |
      This test will confirm that EPP clients are unable to perform `<info>`
      commands on objects that they do not sponsor.
  
      If the `general.minimalPublicDataSet` input parameter is `true`, this
      test will be skipped.
  
      The client will connect using a set of alternate credentials and will
      submit `<info>` and `<update>` commands on the contact objects created in
      `epp-08`. The server **MUST** respond with a 2201 "authorization error"
      response.
    Dependencies:
      - epp-07
    Errors:
      - EPP_CONTACT_INFO_RESPONSE_NOT_2201
      - EPP_CONTACT_UPDATE_RESPONSE_NOT_2201
  epp-09:
    Summary: contact <update> command test (if applicable for the registry type)
    Description: |
      This test will perform `<update>` commands on the objects created during
      `epp-07` and will confirm that the server correctly rejects invalid
      commands (which would specify invalid property values) and accepts valid
      commands.
  
      If the `general.minimalPublicDataSet` input parameter is `true`, this
      test will be skipped.
  
      The test will confirm that the server checks and validates `<update>`
      commands which transform the values of the following elements:
  
      * `<contact:status>`
      * `<contact:postalInfo>` elements (both `int` and `loc`)
          * `<contact:name>`
          * `<contact:org>`
          * `<contact:addr>` elements
            * `<contact:street>` element(s)
            * `<contact:city>` element
            * `<contact:sp>` element
            * `<contact:pc>` element
            * `<contact:cc>` element
      * `<contact:voice>`
      * `<contact:email>`
  
      Once objects have been updated, the client will then perform `<info>`
      commands to verify that the server has correctly stored the provided
      values.
    Dependencies:
      - epp-08
    Errors:
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STATUS
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_ORG
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STREET
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CITY
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_SP
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_PC
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CC
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_VOICE
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_EMAIL
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_NOT_1000
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL
  epp-10:
    Summary: contact <delete> command test (if applicable for the registry type)
    Description: |
      This test will perform `<delete>` commands on the objects created during
      `epp-22` and will confirm that the server accepts the `<delete>` command
      with a `1xxx` response code.
  
      If the `general.minimalPublicDataSet` input parameter is `true`, this
      test will be skipped.
  
      Once the `<delete>` commands have been submitted, the client will perform
      `<info>` commands to confirm that the objects have actually been removed
      from the repository. If the response to the previous `<delete>` command
      was 1001, this step will be skipped.
    Input-Parameters:
    Dependencies:
      - epp-09
    Errors:
      - EPP_CONTACT_DELETE_RESPONSE_NOT_1000_OR_1001
      - EPP_CONTACT_DELETE_OBJECT_STILL_EXISTS
  epp-11:
    Summary: host <create> command test (if applicable)
    Description: |
      This test attempts to create a number of host objects, and validates
      the server's response. For example, the test will expect that the server
      will reject a command that creates an object with missing or invalid
      properties, but will accept a command to create an object with valid
      properties. Property values will be randomly generated but will contain
      realistic values. No personal information will be transmitted as part
      of this test.
  
      If the `epp.hostModel` input parameter is `attributes`, this test will
      be skipped.
  
      The test will confirm that the server checks and validates the values of
      the following elements:
  
      * `<host:name>` (both in- and out-of-bailiwick, for each TLD in the TLD
        set)
      * `<host:status>`
      * `<host:addr>` elements (both IPv4 and IPv6)
  
      If the `epp.hostModel` input parameter is `attributes`, this test will
      be skipped.
  
      The client will then perform `<info>` commands on the objects successfully
      created to confirm that the server has correctly stored the provided
      values.
    Errors:
      - EPP_HOST_CREATE_SERVER_ACCEPTS_INVALID_HOSTNAME
      - EPP_HOST_CREATE_SERVER_ACCEPTS_INVALID_IPV4_ADDRESS
      - EPP_HOST_CREATE_SERVER_ACCEPTS_INVALID_IPv6_ADDRESS
      - EPP_HOST_CREATE_SERVER_ACCEPTS_INVALID_STATUS_CODE
      - EPP_HOST_CREATE_INFO_RESPONSE_OBJECT_DOES_NOT_EXIST
      - EPP_HOST_CREATE_INFO_RESPONSE_MISSING_OBJECT_PROPERTIES
  epp-12:
    Summary: host object access control (if applicable)
    Description: |
      This test will confirm that EPP clients are unable to perform `<info>`
      commands on objects that they do not sponsor.
  
      If the `epp.hostModel` input parameter is `attributes`, this test will
      be skipped.
  
      The client will connect using a set of alternate credentials and will
      submit `<update>` commands on the contact objects created in `epp-11`. The
      server **MUST** respond with a 2201 "authorization error" response.
    Dependencies:
      - epp-11
    Errors:
      - EPP_HOST_UPDATE_AUTHZ_ERROR
  epp-13:
    Summary: host <update> command test (if applicable)
    Description: |
      This test will perform `<update>` commands on the objects created during
      `epp-11` and will confirm that the server correctly rejects invalid
      commands (which would specify invalid property values) and accepts valid
      commands.
  
      If the `epp.hostModel` input parameter is `attributes`, this test will
      be skipped.
  
      The test will confirm that the server checks and validates `<update>`
      commands which transform the values of the following elements:
  
      * `<host:status>`
      * `<host:addr>` elements (both IPv4 and IPv6)
  
      Note: the server's ability to support host renames is checked in a later
      test.
  
      The client will then perform `<info>` commands on the objects successfully
      updated to confirm that the server has correctly stored the updated
      values.
    Dependencies:
      - epp-11
    Errors:
      - EPP_HOST_UPDATE_SERVER_ACCEPTS_INVALID_HOSTNAME
      - EPP_HOST_UPDATE_SERVER_ACCEPTS_INVALID_IPV4_ADDRESS
      - EPP_HOST_UPDATE_SERVER_ACCEPTS_INVALID_IPv6_ADDRESS
      - EPP_HOST_UPDATE_SERVER_ACCEPTS_INVALID_STATUS_CODE
      - EPP_HOST_UPDATE_INFO_RESPONSE_OBJECT_DOES_NOT_EXIST
      - EPP_HOST_UPDATE_INFO_RESPONSE_MISSING_OBJECT_PROPERTIES
  epp-14:
    Summary: domain <create> command test
    Description: |
      This test performs a series domain `<create>` commands, using pseudo-
      random ASCII domain names under each TLD in the TLD set. If the
      `general.minimalPublicDataSet` input parameter is `false`, then a contact
      object (containing pseudo-random contact information) will be created
      beforehand and used as the registrant. If the `epp.hostModel` parameter is
      `objects`, then two host objects with pseudo-random names will be created
      and used as the nameservers (otherwise the names will be provided as
      attributes).
  
      The client will perform several `<create>` commands, each of which will
      test certain aspects of the server's processing of those commands, for
      example:
  
      * to confirm that the server does not accept invalid values for object
        properties (such as domain name, registration period, registant ID,
        nameservers, and DS record parameters). Examples:
          * invalid domain
          * invalid period (1-10 years)
          * invalid host attributes (if applicable)
          * host attributes with subordinate names and missing glue (if
            applicable)
          * invalid DS/keyData record parameters (keyTag, algorithm, digest type,
            and malformed digest)
      * to confirm that the server does not accept commands which reference
        non-existent host/contact objects (if applicable)
      * to confirm that the server rejects a `<create>` command which
        specifies a registrant contact (where the
        `general.minimalPublicDataSet` input parameter is `true`)
      * to confirm that the server rejects a `<create>` command which does not
        specify a registrant contact (where the
        `general.minimalPublicDataSet`) input parameter is `false`
      * to confirm that the server rejects a `<create>` command containing
        host objects when the `epp.hostModel` parameter is `attributes`
      * to confirm that the server rejects a `<create>` command containing
        host attributes when the `epp.hostModel` parameter is `objects`
      * to confirm that the the server which implements RFC 9154 accepts a
        `<create>` command without an authInfo command.
  
      Both registrar IDs (those specified in the `epp.clid01` and `epp.clid02`
      input parameters) will be used to create domains.
  
      Once the `<create>` commands have been processed, the client will then
      perform `<info>` commands to confirm that:
  
      * the `<roid>` element is valid and contains a repository ID registered
        with IANA;
      * the `<crDate>` and `<exDate>` elements are present and valid;
      * the `<crID>` and `<clID>` elements match the client ID used to create
        the domain.
      * DNSSEC information provided in the `<create>` command is present and
        correct.
    Input-Parameters:
      - epp.secDNSInterfaces
    Dependencies:
      - epp-03
    Errors:
      - EPP_DOMAIN_CREATE_SERVER_ACCEPTS_INVALID_DOMAIN_NAME
      - EPP_DOMAIN_CREATE_SERVER_ACCEPTS_INVALID_PERIOD
      - EPP_DOMAIN_CREATE_SERVER_ACCEPTS_INVALID_HOST_ATTRIBUTES
      - EPP_DOMAIN_CREATE_SERVER_ACCEPTS_HOST_ATTRIBUTES_WITHOUT_GLUE
      - EPP_DOMAIN_CREATE_SERVER_ACCEPTS_INVALID_HOST_ATTRIBUTE
      - EPP_DOMAIN_CREATE_SERVER_ACCEPTS_INVALID_DNSSEC_DATA
      - EPP_DOMAIN_CREATE_SERVER_ACCEPTS_NON_EXISTENT_CONTACT_OBJECT
      - EPP_DOMAIN_CREATE_SERVER_ACCEPTS_NON_EXISTENT_HOST_OBJECT
      - EPP_DOMAIN_CREATE_SERVER_ACCEPTS_REGISTRANT_FOR_THIN_REGISTRY
      - EPP_DOMAIN_CREATE_SERVER_ACCEPTS_NO_REGISTRANT_FOR_THICK_REGISTRY
      - EPP_DOMAIN_CREATE_SERVER_ACCEPTS_HOST_ATTRIBUTES
      - EPP_DOMAIN_CREATE_SERVER_ACCEPTS_HOST_OBJECTS
      - EPP_DOMAIN_CREATE_SERVER_ACCEPTS_AUTHINFO
      - EPP_DOMAIN_CREATE_INFO_RESPONSE_INVALID_ROID
      - EPP_DOMAIN_CREATE_INFO_RESPONSE_MISSING_OBJECT_PROPERTIES
  epp-15:
    Summary: Registry object integrity test
    Description: |
      This test confirms that the EPP server will refuse a request to delete a
      linked object.
  
      If the `epp.hostModel` input parameter is `attributes`, **and** the
      `general.minimalPublicDataSet` input parameter is `true`, then this test
      will be skipped.
  
      The client will submit `<delete>` commands for any contact and host
      objects created during `epp-14`. The server **MUST** respond with a `2305`
      "Object association prohibits operation" error.
    Dependencies:
      - epp-14
    Errors:
      - EPP_INTEGRITY_SERVER_ACCEPTS_DELETE_FOR_LINKED_CONTACT_OBJECT
      - EPP_INTEGRITY_SERVER_ACCEPTS_DELETE_FOR_LINKED_HOST_OBJECT
  epp-16:
    Summary: domain <update> command test
    Description: |
      This test will confirm that the client is able to perform an `<update>`
      command on the domain names created in `epp-14`, including:
  
      * adding and removing client-assigned status codes
      * adding and removing nameservers (whether objects or attributes)
      * changing registrant object (if applicable)
      * adding and remove DNSSEC information
  
      The client will also confirm that it cannot perform an `<update>` command
      on a domain sponsored by another registrar, and that the server responds
      with a `2201` authorization error.
  
      Once the `<update>` commands have been processed, the client will then
      perform `<info>` commands to confirm that the changes have been correctly
      stored by the server.
    Input-Parameters:
    Dependencies:
      - epp-14
    Errors:
      - EPP_DOMAIN_UPDATE_INFO_RESPONSE_UNEXPECTED_STATUS_CODE
      - EPP_DOMAIN_UPDATE_INFO_RESPONSE_MISSING_STATUS_CODE
      - EPP_DOMAIN_UPDATE_INFO_RESPONSE_UNEXPECTED_HOST_OBJECT
      - EPP_DOMAIN_UPDATE_INFO_RESPONSE_MISSING_HOST_OBJECT
      - EPP_DOMAIN_UPDATE_INFO_RESPONSE_UNEXPECTED_HOST_ATTRIBUTE
      - EPP_DOMAIN_UPDATE_INFO_RESPONSE_MISSING_HOST_ATTRIBUTE
      - EPP_DOMAIN_UPDATE_INFO_RESPONSE_UNEXPECTED_REGISTRANT
      - EPP_DOMAIN_UPDATE_INFO_RESPONSE_MISSING_REGISTRANT
      - EPP_DOMAIN_UPDATE_INFO_RESPONSE_UNEXPECTED_DNSSEC_DATA
      - EPP_DOMAIN_UPDATE_INFO_RESPONSE_MISSING_DNSSEC_DATA
  epp-16:
    Summary: domain <renew> command test
    Description: |
      This test will confirm that the client is able to renew domain names. The
      client will submit a number of `<renew>` commands for the domains created in
      `epp-14`.
  
      * Following a succesful `<renew>` command, the expiry date of the domain
        **MUST** have been increased by the period specified by the client;
      * The domain **MUST** have an RGP status of `renewPeriod`;
      * The server **MUST** reject a `<renew>` command if it would result in
        the expiry date being more than 10 years into the future.
  
      The client will issue the `<renew>` commands and then perform `<info>`
      commands to ensure that the expiry date and RGP status of the domain are
      set correctly.
    Dependencies:
      - epp-14
    Errors:
      - EPP_RENEW_SERVER_ACCEPTS_INVALID_PERIOD
      - EPP_RENEW_SERVER_ACCEPTS_INVALID_CURRENT_EXPIRY_DATE
      - EPP_RENEW_INFO_RESPONSE_UNEXPECTED_EXPIRY_DATE
      - EPP_RENEW_INFO_RESPONSE_MISSING_OR_INVALID_RGP_STATUS
  
  epp-17:
    Summary: domain <transfer> command test
    Description: |
      This test will confirm that the client is able to initiate a domain
      transfer.
  
      The client will perform an `<update>` command to set the authInfo code for
      the test domain (taken from the set created in `epp-14`) to a
      randomly-determined value. If the server implements RFC 9154, it **MUST**
      reject the `<update>` command if the authInfo code is insufficently
      secure.
  
      Then, using a second set of credentials, the client will connect to the
      EPP server and authenticate, submit `<transfer>` commands, and validate
      the responses.
  
      This test will confirm that:
  
      * the server rejects a `<transfer>` command with an invalid authInfo code
      * the server rejects a command which would extend the domain's validity
        period more than 10 years into the future
      * the server accepts a `<transfer>` command with a valid authInfo code
        and period.
  
      The client will use an `<info>` command to ensure that the
      `pendingTransfer` status code is added to the domain after a successul
      transfer request.
  
      Once the transfer request has been accepted, the sponsoring client will
      wait for a message to be received on the server's message queue, and will
      then approve the transfer. This message **MUST** be received within 120
      seconds of the transfer request.
  
      Once the gaining registrar has also received a message on the queue, the
      client will use an `<info>` command to confirm that:
  
      * the domain is now under the sponsorship of the gaining registrar
      * the authInfo code has been reset by the server (if the server supports
        RFC 9154).
  
      This message **MUST** be received within 120 seconds of the transfer
      approval.
    Dependencies:
      - epp-14
    Errors:
      - EPP_TRANSFER_SERVER_ACCEPTS_INSECURE_AUTHINFO
      - EPP_TRANSFER_SERVER_ACCEPTS_INCORRECT_AUTHINFO
      - EPP_TRANSFER_SERVER_ACCEPTS_INVALID_PERIOD
      - EPP_TRANSFER_INFO_RESPONSE_MISSING_OR_INVALID_STATUS_CODE
      - EPP_TRANSFER_LOSING_REGISTRAR_NO_MESSAGE_RECEIVED
      - EPP_TRANSFER_GAINING_REGISTRAR_NO_MESSAGE_RECEIVED
      - EPP_TRANSFER_INFO_RESPONSE_UNEXPECTED_EXPIRY_DATE
      - EPP_TRANSFER_INFO_RESPONSE_MISSING_OR_INVALID_RGP_STATUS
      - EPP_TRANSFER_INFO_RESPONSE_AUTHINFO_NOT_RESET
  
  epp-18:
    Summary: domain <transfer> rejection test
    Description:
      This test confirms that the server behaves correctly if the sponsoring
      registrar of a domain rejects a transfer request.
  
      The test procedure matches that of `epp-17`, but the transfer request will
      be rejected rather than approved. An `<info>` command will be used to
      confirm that the domain name remains under the sponsorship of the original
      registrar.
    Dependencies:
      - epp-14
    Errors:
      - EPP_TRANSFER_SERVER_PROCESSED_REJECTED_TRANSFER
  
  epp-19:
    Summary: domain <delete> command test
    Description: |
      This test will perform `<delete>` commands on the objects created during
      `epp-14` and will confirm that the server accepts the `<delete>` command
      with a `1xxx` response code.
  
      Once the `<delete>` commands have been processed, the client will perform
      `<info>` commands on the deleted to object to confirm that:
  
      * if the server responded to the `<delete>` command with a `1000`
        response, then the domain no longer exists
      * if the server responded to the `<delete>` command with a `1001`
        response, then the domain has the `pendingDelete` status and the
        `redemptionPeriod` RGP status.
    Dependencies:
      - epp-14
    Errors:
      - EPP_DOMAIN_DELETE_INFO_RESPONSE_OBJECT_STILL_EXISTS
      - EPP_DOMAIN_DELETE_INFO_RESPONSE_OBJECT_NOT_PENDING_DELETE
      - EPP_DOMAIN_DELETE_INFO_RESPONSE_RGP_STATUS_NOT_PENDING_DELETE
  
  epp-20:
    Summary: domain restore test
    Description: |
      This test will perform RGP restore operations on the objects deleted
      during `epp-19`, in order to confirm the correct operation of the server's
      implementation of RFC 3915.
  
      Once the restore request has been procssed, the client will perform
      `<info>` commands on the deleted to object to confirm that the domain no
      longer has the `pendingDelete` status and RGP status.
    Input-Parameters:
      - epp.restoreReportRequired
    Dependencies:
      - epp-19
    Errors:
      - EPP_RESTORE_DOMAIN_STILL_PENDINGDELETE
  
  epp-21:
    Summary: host rename test (if applicable)
    Description: |
      This tests verifies the server's support for host rename operations.
  
      If the `epp.hostModel` input parameter is `attributes`, this test will
      be skipped.
  
      The client will perform `<update>` commands on the objects created during
      `epp-11` and will confirm that the server correctly accepts or rejects the
      commands, for example:
  
      * an `<update>` command which specifies a syntatically invalid host name
        is rejected;
      * an `<update>` command which places the object out-of-bailiwick is
        accepted;
      * an `<update>` command which places the object within a non-existent
        domain is rejected;
      * an `<update>` command which places the object within a domain sponsored
        by another registrar is rejected. The domain name(s) provided in the
        `epp.registeredNames` parameter will be used for this test.
      * an `<update>` command which places the object within a domain sponsored
        by the test client is accepted. A domain created during the `epp-14`
        test case will be used as the new parent domain.
  
      The client will then perform `<info>` commands on the objects successfully
      updated, to confirm that the server has correctly stored the updated
      values.
    Dependencies:
      - epp-14
      - epp-11
    Errors:
      - EPP_HOST_RENAME_SERVER_ACCEPTS_INVALID_HOSTNAME
      - EPP_HOST_RENAME_SERVER_REJECTS_OUT_OF_BAILIWICK_NAME
      - EPP_HOST_RENAME_SERVER_ACCEPTS_RENAME_TO_NONEXISTENT_DOMAIN
      - EPP_HOST_RENAME_SERVER_ACCEPTS_RENAME_TO_ANOTHER_REGISTRARS_DOMAIN
      - EPP_HOST_RENAME_SERVER_UNEXPECTEDLY_REJECTS_RENAME
  
  epp-22:
    Summary: host <delete> command test (if applicable)
    Description: |
      This test will perform `<delete>` commands on the objects created during
      `epp-11` and will confirm that the server accepts the `<delete>` command
      with a `1xxx` response code.
  
      If the `epp.hostModel` input parameter is `attributes`, this test will
      be skipped.
  
      Once the `<delete>` commands have been submitted, if a `1000` response was
      received from the server, the client will perform `<check>` and `<info>`
      commands to confirm that the objects have been deleted.
    Dependencies:
      - epp-21
    Errors:
      - EPP_HOST_DELETE_INFO_RESPONSE_OBJECT_STILL_EXISTS
  rdap-01-domainCaseFoldingValidation:
    Summary: Domain label case folding validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-02-domainNameValidation:
    Summary: Domain Name validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-03-ipv4Validation:
    Summary: IPv4 address validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-04-ipv6Validation:
    Summary: IPv6 address validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-05-stdRdapAsEventActorValidation:
    Summary: asEventActor Validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-06-stdRdapConformanceValidation:
    Summary: RDAP Conformance validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-07-stdRdapDomainLookupValidation:
    Summary: Domain Lookup Validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-08-stdRdapEntitiesValidation:
    Summary: Entities validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-09-stdRdapEntityLookupValidation:
    Summary: Entity lookup validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-10-stdRdapErrorResponseBodyValidation:
    Summary: Error Response Body 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-11-stdRdapEventsValidation:
    Summary: Events Validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-12-stdRdapHelpValidation:
    Summary: Help validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-13-stdRdapIpAddressesValidation:
    Summary: IP Addresses Validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-14-stdRdapLanguageIdentifierValidation:
    Summary: Language Identifier Validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-15-stdRdapLdhNameValidation:
    Summary: LDH name 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-16-stdRdapLinksValidation:
    Summary: Links validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-17-stdRdapNameserverLookupValidation:
    Summary: Nameserver lookup validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-18-stdRdapNameserversSearchValidation:
    Summary: Nameservers search validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-19-stdRdapNoticesRemarksValidation:
    Summary: Notices and Remarks Validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-20-stdRdapPort43WhoisServerValidation:
    Summary: Port 43 WHOIS Server 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-21-stdRdapPublicIdsValidation:
    Summary: Public IDs validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-22-stdRdapRolesValidation:
    Summary: Roles validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-23-stdRdapSecureDnsValidation:
    Summary: Secure DNS validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-24-stdRdapStatusValidation:
    Summary: Status validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-25-stdRdapUnicodeNameValidation:
    Summary: Unicode name 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-26-stdRdapVariantsValidation:
    Summary: Variants validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  rdap-27-webUriValidation:
    Summary: Web URI validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
        <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  
  minimumRPMs-01:
    Summary: Claims <check> command test
    Description: |
      This test is used to confirm the conformance of the EPP server's
      implementation of the Claims Check Form, as described in Section
      3.1.1 of RFC 8334.
  
      For this test, it is assumed that the EPP server has been configured to
      use data (specifically the Domain Name Label List, as described in Section
      5.3.3.1 of RFC 9361) from the TMCH test environment.
  
      The client will connect to the EPP server using the provided credentials
      and will then perform a series of `<check>` commands, using the Launch
      extension to specify a value of `claims` for the `type` attribute of the
      `<launch:check>` element and the `<launch:phase>` element. It will then
      confirm that the server returns an appropriate response:
  
      * a `<check>` response for a domain that is present on the DNL contains
        the correct `<launch:claimKey>` element;
      * a `<check>` response for a domain that is NOT present on the DNL
        does not contain a `<launch:claimKey>` element.
    Errors:
      - RPMS_MISSING_CLAIMS_KEY
      - RPMS_UNEXPECTED_CLAIMS_KEY
  minimumRPMs-02:
    Summary: |
      Sunrise domain/launch application <create> command test
    Description: |
      This test is used to confirm the conformance of the EPP server's
      implementation of the Sunrise Create Form, as described in Section
      3.3.1 of RFC 8334.
  
      For this test, it is assumed that the EPP server has been configured to
      use data (specifically the Domain Name Label List, as described in Section
      5.3.3.1 of RFC 9361) from the TMCH test environment.
  
      The client will connect to the EPP server and will submit `<create>`
      commands, using domain names and SMD files present in the TMCH test
      environment.
  
      If the server supports Start Date sunrises, the fully-qualified domain
      name will be constructed using a label from the SMD file and the
      `minimumRPMS.sunriseTLD` input parameter. If the domain is not already
      present in the registry, the Server **MUST** respond with a `1000` or `1001`
      result code, however, if the client receives a `2302` "object exists" result
      code, it will retry with a different domain name, until a `1000` or `1001`
      response is received.
  
      If the server supports End Date sunrises, the fully-qualified domain
      name will be constructed using a label from the SMD file and the
      `minimumRPMS.sunriseTLD` input parameter. The Server **MUST** respond with
      a `1000` or `1001` result code, and create a launch application.
  
      Once the `<create>` commands have been processed, the client will then
      perform `<info>` commands to confirm that the domains or launch applications
      have been created and that the submitted object properties have been
      correctly stored.
  
      The client will also confirm that the server rejects attempts to:
  
      1. create a domain using an invalid SMD;
      2. create a domain using a revoked SMD;
      3. create a domain using an SMD signed by a revoked certificate.
    Errors:
      - RPMS_SUNRISE_CREATE_UNEXPECTED_FAILURE_USING_VALID_SMD
      - RPMS_SUNRISE_CREATE_UNEXPECTED_SUCCESS_USING_INVALID_SMD
      - RPMS_SUNRISE_CREATE_UNEXPECTED_SUCCESS_USING_REVOKED_SMD
      - RPMS_SUNRISE_CREATE_UNEXPECTED_SUCCESS_USING_SMD_WITH_REVOKED_SIGNATURE
      - RPMS_SUNRISE_CREATE_INFO_OBJECT_DOES_NOT_EXIST
      - RPMS_SUNRISE_CREATE_INFO_OBJECT_IS_HAS_MISSING_OR_INVALID_PROPERTIES
  
  minimumRPMs-03:
    Summary: Trademark claims domain <create> command test
    Description: |
      This test is used to confirm the conformance of the EPP server's
      implementation of the Claims Create Form, as described in Section
      3.3.2 of RFC 8334.
  
      For this test, it is assumed that the EPP server has been configured to
      use data (specifically the Domain Name Label List, as described in Section
      5.3.3.1 of RFC 9361) from the TMCH test environment.
  
      The client will connect to the EPP server and will submit `<create>`
      commands, using domain names present in the TMCH test environment.
  
      The domain name will be constructed using a label from the DNL, and the
      `minimumRPMS.claimsTLD` input parameter. The client will perform a
      Trademark Claims `<check>` command beforehand to obtain the claim key, and
      will then synthesise a trademark claims acknowledgement. The server
      **MUST** respond with a `1000` or `1001` response.
  
      Once the `<create>` commands have been processed, the client will then
      perform `<info>` commands to confirm that the domains have been created and
      that the submitted object properties have been correctly stored.
  
      The client will also confirm that the server rejects attempts to:
  
      1. create a domain using an invalid claim key;
      2. create a domain using an expired claim key;
      3. create a domain using an acceptance datetime more than 48 hours in the
        past.
    Errors:
      - RPMS_TRADEMARK_CREATE_UNEXPECTED_FAILURE_USING_VALID_CLAIM_KEY
      - RPMS_TRADEMARK_CREATE_UNEXPECTED_SUCCESS_USING_INVALID_CLAIM_KEY
      - RPMS_TRADEMARK_CREATE_UNEXPECTED_SUCCESS_USING_INVALID_ACCEPTANCE_DATE
      - RPMS_TRADEMARK_CREATE_INFO_OBJECT_DOES_NOT_EXIST
      - RPMS_TRADEMARK_CREATE_INFO_OBJECT_IS_HAS_MISSING_OR_INVALID_PROPERTIES
  srsgw-01:
    Summary: IPv4 and IPv6 connectivity
    Maturity: BETA
    Description: |
      This test confirms that the SRS Gateway EPP system is reachable over IPv4
      and IPv6.
  
      The SRS Gateway EPP server host name will be resolved to obtain its
      IPv4 and IPv6 addresses. The client will then attempt to connect to TCP
      port 700 on these addresses and log in using the provided credentials.
  
  srsgw-02:
    Summary: Host <create> synchronization (if applicable)
    Maturity: BETA
    Description: |
      This test confirms that host objects created in the SRS Gateway EPP system
      are correctly synchronized with the primary registry system.
  
      If the value of the `epp.hostModel` input parameter is `attributes`, then
      this test will be skipped.
  
      The client will connect to the SRS Gateway EPP system, authenticate, and
      submit a `<create>` command for a pseudo-randomly generated host name.
      IP address information will be provided if required. The server **MUST**
      respond with a 1000 or 1001 response. The client will then perform an
      `<info>` command and will capture the response.
  
      It will then connect to the primary EPP system, authenticate, and perform
      an `<info>` command for the object created in the first step. If the
      server responds with a 2303 response, it will wait for 30 seconds and
      retry. The server **MUST** respond to the first or second `<info>` command
      with a 1000 response.
  
      The two `<info>` responses will then be compared and **MUST** be
      identical.
    Errors:
      - SRSGW_HOST_CREATE_FAILED
      - SRSGW_HOST_CREATE_OBJECT_NOT_FOUND_WITHIN_DEADLINE
      - SRSGW_HOST_CREATE_OBJECT_HAS_MISSING_OR_INVALID_PROPERTIES
  
  srsgw-03:
    Summary: Contact <create> synchronization (if applicable)
    Maturity: BETA
    Description: |
      This test confirms that contact objects created in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      If the value of the `general.minimalPublicDataSet` input parameter is
      `true`, then this test will be skipped.
  
      The client will connect to the SRS Gateway EPP system, authenticate, and
      submit a `<create>` command for a pseudo-randomly generated contact
      object. The client will then perform an `<info>` command and will capture
      the response.
  
      It will then connect to the primary EPP system, authenticate, and perform
      an `<info>` command for the object created in the first step. If the
      server responds with a 2303 response, it will wait for 30 seconds and
      retry. The server **MUST** respond to the first or second `<info>` command
      with a 1000 response.
  
      The two `<info>` responses will then be compared and **MUST** be
      identical.
    Errors:
      - SRSGW_CONTACT_CREATE_FAILED
      - SRSGW_CONTACT_CREATE_OBJECT_NOT_FOUND_WITHIN_DEADLINE
      - SRSGW_CONTACT_CREATE_OBJECT_HAS_MISSING_OR_INVALID_PROPERTIES
  
  srsgw-04:
    Summary: Domain <create> synchronization
    Maturity: BETA
    Description: |
      This test confirms that domain objects created in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      The client will connect to the SRS Gateway EPP system, authenticate, and
      submit `<create>` commands for a pseudo-randomly generated domain names.
      Contact and nameserver objects created in `srsgw-02` and `srsgw-03` will
      be used if required. The server **MUST** respond with 1000 or 1001
      responses. The client will then perform `<info>` commands and will capture
      the responses.
  
      It will then connect to the primary EPP system, authenticate, and perform
      `<info>` commands for the domains created in the first step. If the
      server responds with a 2303 response, it will wait for 30 seconds and
      retry. The server **MUST** respond to the first or second `<info>` command
      with a 1000 response.
  
      The pairs of `<info>` responses will then be compared and **MUST** be
      identical.
    Dependencies:
      - srsgw-02
      - srsgw-03
    Errors:
      - SRSGW_DOMAIN_CREATE_FAILED
      - SRSGW_DOMAIN_CREATE_OBJECT_NOT_FOUND_WITHIN_DEADLINE
      - SRSGW_DOMAIN_CREATE_OBJECT_HAS_MISSING_OR_INVALID_PROPERTIES
  
  srsgw-05:
    Summary: Domain <renew> synchronisation
    Maturity: BETA
    Description: |
      This test confirms that the expiry dates of domain objects renewed in the
      SRS Gateway EPP system are correctly synchronized with the primary
      registry system.
  
      The client will connect to the SRS Gateway EPP system, authenticate, and
      submit a `<renew>` command for the domain created in `srsgw-04`. The
      server **MUST** respond with a 1000 or 1001 response. The client will then
      perform an `<info>` command and will capture the response.
  
      It will then connect to the primary EPP system, authenticate, and perform
      an `<info>` command for the domain renewed in the first step.
      The server **MUST** respond with a 1000 response.
  
      The `<exDate>` element of the two `<info>` responses will then be compared
      and **MUST** be identical.
    Dependencies:
      - srsgw-04
    Errors:
      - SRSGW_DOMAIN_RENEW_FAILED
      - SRSGW_DOMAIN_RENEW_OBJECT_NOT_UPDATED_WITHIN_DEADLINE
      - SRSGW_DOMAIN_RENEW_OBJECT_HAS_INVALID_EXDATE
  
  srsgw-06:
    Summary: Domain <transfer> synchronisation
    Maturity: BETA
    Description: |
      This test confirms that transfer requests submitted in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      The client will connect to the SRS Gateway EPP system, authenticate, and
      perform an `<update>` command to specify an authInfo code for the domain
      created in `srsgw-04`. The server **MUST** respond with a 1000 or 1001
      response.
  
      It will then reconnect to the SRS Gateway EPP system using the credentials
      of a second registrar account and submit a `<transfer op="request">`
      command using the authInfo command set for the domain in the first step.
      The server **MUST** respond with a 1000 or 1001 response.
  
      It will then connect to the primary EPP system, authenticate, and perform
      an `<info>` command for the domain. The server **MUST** respond with a
      1000 response.
  
      * if the response to the `<transfer op="request">` command was 1000, then
        the `<domain:clID>` element **MUST** contain the value of the
        `srsgw.eppClid01` input parameter.
      * if the response to the `<transfer op="request">` command was 1001, then
        the domain **MUST** have the `pendingTransfer` status.
    Dependencies:
      - srsgw-05
    Errors:
      - SRSGW_DOMAIN_TRANSFER_REQUEST_FAILED
      - SRSGW_DOMAIN_TRANSFER_REQUEST_OBJECT_NOT_UPDATED_WITHIN_DEADLINE
      - SRSGW_DOMAIN_TRANSFER_REQUEST_OBJECT_HAS_INCORRECT_CLID
      - SRSGW_DOMAIN_TRANSFER_REQUEST_OBJECT_NOT_PENDING_TRANSFER
  
  srsgw-07:
    Summary: Domain <transfer> approval synchronisation
    Maturity: BETA
    Description: |
      This test confirms that transfer request approvals submitted in the SRS
      Gateway EPP system are correctly synchronized with the primary registry
      system.
  
      If the response to the `<transfer op="request">` command performed in
      `srsgw-07` was 1000, then this test will be skipped.
  
      The client will connect to the SRS Gateway EPP system, authenticate, and
      perform an `<transfer op="approve">` command for the domain for which a
      transfer was requested in `srsgw-04`. The server **MUST** respond with a
      1000 or 1001 response.
  
      It will then connect to the primary EPP system, authenticate, and perform
      an `<info>` command for the domain. The server **MUST** respond with a
      1000 response. The `<domain:clID>` element **MUST** contain the value of
      the  `srsgw.eppClid01` input parameter.
    Dependencies:
      - srsgw-06
    Errors:
      - SRSGW_DOMAIN_TRANSFER_APPROVAL_FAILED
      - SRSGW_DOMAIN_TRANSFER_APPROVAL_OBJECT_NOT_UPDATED_WITHIN_DEADLINE
      - SRSGW_DOMAIN_TRANSFER_APPROVAL_OBJECT_HAS_INCORRECT_CLID
      - SRSGW_DOMAIN_TRANSFER_APPROVAL_OBJECT_STILL_PENDING_TRANSFER
  
  srsgw-08:
    Summary: Domain <delete> synchronisation
    Maturity: BETA
    Description: |
      This test confirms that domain objects deleted in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      The client will connect to the SRS Gateway EPP system, authenticate using
      the credentials provided in `epp.clid02` and `epp.pwd02`, and
      submit a `<delete>` command for the domain transferred in `srsgw-07`.
      If the value of the `general.gracePeriodsSupported` input parameter is
      `false`, the server **MUST** respond with a 1000 response. Otherwise it
      **MUST** respond with a 1001 response.
  
      It will then connect to the primary EPP system, authenticate, and perform
      an `<info>` command for the domain renewed in the first step.
  
      The domain object **MUST** have the `pendingDelete` status and have an RGP
      status of `pendingDeleteRestorable`.
    Dependencies:
      - srsgw-07
    Errors:
      - SRSGW_DOMAIN_DELETE_FAILED
      - SRSGW_DOMAIN_DELETE_DOMAIN_NOT_PENDINGDELETE
      - SRSGW_DOMAIN_DELETE_RGP_STATUS_NOT_PENDINGDELETERESTORABLE
  
  srsgw-09:
    Summary: Host <update> synchronization (if applicable)
    Maturity: BETA
    Description: |
      This test confirms that host objects updated in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      If the value of the `epp.hostModel` input parameter is `attributes`, then
      this test will be skipped.
  
      The test client will connect to the SRS Gateway EPP server and perform
      `<update>` commands on the objects created in `srsgw-02`, specifically
      to add and remove status codes and IP addresses. It will then perform
      `<info>` commands on those objects.
  
      The client will then connect to the primary registry EPP server and
      perform `<info>` commands for those objects.
  
      The two sets of `<info>` responses **MUST** be identical.
    Dependencies:
      - srsgw-02
  
  srsgw-10:
    Summary: Host <delete> synchronization (if applicable)
    Maturity: BETA
    Description: |
      This test confirms that host objects deleted in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      If the value of the `epp.hostModel` input parameter is `attributes`, then
      this test will be skipped.
  
      The test client will connect to the SRS Gateway EPP server and perform
      `<delete>` commands on objects created in `srsgw-02`. The server **MUST**
      respond with a 1000 response.
  
      The client will then connect to the primary registry EPP server and
      perform `<info>` commands for those objects. The server **MUST**
      respond with a 2303 "object does not exist" response.
    Dependencies:
      - srsgw-09
  
  srsgw-11:
    Summary: Contact <update> synchronization (if applicable)
    Maturity: BETA
    Description: |
      This test confirms that contact objects updated in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      If the value of the `general.minimalPublicDataSet` input parameter is
      `true`, then this test will be skipped.
  
      The test client will connect to the SRS Gateway EPP server and perform
      `<update>` commands on the objects created in `srsgw-03`. It will then
      perform `<info>` commands on those objects.
  
      The client will then connect to the primary registry EPP server and
      perform `<info>` commands for those objects.
  
      The two sets of `<info>` responses **MUST** be identical.
    Dependencies:
      - srsgw-03
  
  srsgw-12:
    Summary: Contact <delete> synchronization (if applicable)
    Maturity: BETA
    Description: |
      This test confirms that contact objects delete in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      If the value of the `general.minimalPublicDataSet` input parameter is
      `true`, then this test will be skipped.
  
      The test client will connect to the SRS Gateway EPP server and perform
      `<delete>` commands on objects created in `srsgw-03`. The server **MUST**
      respond with a 1000 response.
  
      The client will then connect to the primary registry EPP server and
      perform `<info>` commands for those objects. The server **MUST**
      respond with a 2303 "object does not exist" response.
    Dependencies:
      - srsgw-11
  
  srsgw-13:
    Summary: Domain RDAP synchronization
    Maturity: BETA
    Description: |
      This test confirms that the SRS Gateway's RDAP service provides responses
      to domain lookups that match those of the primary registry RDAP server.
  
      The test system will perform RDAP queries for some of the objects created
      in `srsgw-04` against both the primary registry RDAP server and the SRS
      Gateway RDAP server. After canonicalisation, the responses from each
      server **MUST** be identical.
    Dependencies:
      - srsgw-04
  
  srsgw-14:
    Summary: Nameserver RDAP synchronization
    Maturity: BETA
    Description: |
      This test confirms that the SRS Gateway's RDAP service provides responses
      to domain lookups that match those of the primary registry RDAP server.
  
      If the value of the `epp.hostModel` input parameter is `attributes`, then
      this test will be skipped.
  
      The test system will perform RDAP queries for some of the objects created
      in `srsgw-02` against both the primary registry RDAP server and the SRS
      Gateway RDAP server. After canonicalisation, the JSON responses from each
      server **MUST** be identical.
    Dependencies:
      - srsgw-02
  
  srsgw-15:
    Summary: Registrar RDAP synchronization
    Maturity: BETA
    Description: |
      This test confirms that the SRS Gateway's RDAP service provides responses
      to registrar (entity) lookups that match those of the primary registry
      RDAP server.
  
      The test system will perform RDAP queries for some of the objects created
      in `srsgw-04` against the primary registry RDAP server in order to obtain
      the `handle` property of the entity with the `registrar` role. It will
      then construct two URLs using this value and the values of the
      `rdap.baseURLs` and `srsgw.rdapBaseURLs` input parameters. It will then
      retrieve those URLs.
  
      After canonicalisation, the JSON responses from each server **MUST** be
      identical.
    Dependencies:
      - srsgw-02
  idn-01:
    Summary: Label validation test
    Maturity: BETA
    Description: |
      This test confirms that the EPP server correctly accepts or rejects domain
      `<create>` commands for valid and invalid IDN labels, respectively.
  
      If there are no IDN tables supported under any of the TLDs associated with
      the test, then this test will be skipped.
  
      For each supported IDN table, the test client will perform a series of
      `<create>` commands using a pre-defined catalogue of test labels. If
      required, the client will create any contact object(s) needed.
  
      The server **MUST** reject all `<create>` commands for invalid labels and
      **MUST** accept all `<create>` commands for valid labels.
    Errors:
      - IDN_SERVER_ACCEPTS_INVALID_LABEL
      - IDN_SERVER_REJECTS_VALID_LABEL
  idn-02:
    Summary: Level 1 variant handling test
    Maturity: BETA
    Description: |
      This test confirms the EPP server's conformance with the Level 1 variant
      support (no support for variant activation, all variants are blocked).
  
      If there are no IDN tables for which Level 1 support is claimed, this
      test will be skipped.
  
      For each supported IDN table, the test client will perform a series of
      `<create>` commands using a pre-defined catalogue of test labels. If
      required, the client will create any contact object(s) needed.
  
      The client will then submit `<create>` commands for one or more labels
      that are variants of the names created in the first step. The server
      **MUST** reject these commands.
    Errors:
      - IDN_VARIANT_LABEL_NOT_BLOCKED
  idn-03:
    Summary: Level 2 variant handling test
    Maturity: BETA
    Description: |
      This test confirms the EPP server's conformance with the Level 2 variant
      support (variants are supported within the same TLD).
  
      If there are no IDN tables for which Level 2 support is claimed, this
      test will be skipped.
  
      For each supported IDN table, the test client will perform a series of
      `<create>` commands using a pre-defined catalogue of test labels. If
      required, the client will create any contact object(s) needed.
  
      The client will then submit `<create>` commands for one or more labels
      that are variants of the names created in the first step. Some of these
      commands will be made using the same registrar account as the first step,
      while some will be made using alternate credentials. If the value of the
      `general.minimalPublicDataSet` input parameter is `false`, then some
      commands will also use a different registrant contact.
  
      The server **MUST** reject `<create>` commands where the (a) registrar is
      different from that of the primary label or (b) the registrant (if
      applicable) is different.
  idn-04:
    Summary: Level 3 variant handling test
    Maturity: BETA
    Description: |
      This test confirms the EPP server's conformance with the Level 3 variant
      support (variants are supported within variant TLD(s)).
  
      If there are no IDN tables for which Level 3 support is claimed, this
      test will be skipped.
  
      For each supported IDN table, the test client will perform a series of
      `<create>` commands using a pre-defined catalogue of test labels. If
      required, the client will create any contact object(s) needed.
  
      The client will then submit `<create>` commands for one or more labels
      that are variants (at both second- and top-level) of the names created in
      the first step. Some of these commands will be made using the same
      registrar account as the first step, while some will be made using
      alternate credentials. If the value of the `general.minimalPublicDataSet`
      input parameter is `false`, then some commands will also use a different
      registrant contact.
  
      The server **MUST** reject `<create>` commands where the (a) registrar is
      different from that of the primary label or (b) the registrant (if
      applicable) is different.
  integration-01:
    Summary: EPP -> RDAP Integration Test
    Maturity: BETA
    Description: |
      This test confirms that the EPP and RDAP systems are properly integrated,
      that is, that transform commands performed on objects in the EPP system
      are reflected in the RDAP system within the Service Level Requirement of
      the SLA.
  
      The test system will perform RDAP queries to confirm that the RDAP server
      provides responses for the domains created in `epp-14`, and host objects
      created in `epp-11` (if applicable). The RDAP server **MUST** provide a 200
      response within 1 hour of the object's `<crDate>` element.
    Input-Parameters:
      - epp.hostModel
      - rdap.baseURLs
    Dependencies:
      - epp-14
      - epp-11
    Errors:
      - INTEGRATION_RDAP_REQUEST_FAILED
      - INTEGRATION_DOMAIN_NOT_PRESENT_IN_RDAP
  integration-02:
    Summary: EPP -> DNS Integration Test
    Maturity: BETA
    Description: |
      This test confirms that the EPP and DNS systems are properly integrated,
      that is, that transform commands performed on objects in the EPP system
      are reflected in the RDAP system within the Service Level Requirement of
      the SLA.
  
      The test system will perform DNS queries to confirm that the DNS servers
      provides responses for the domain names created in `epp-14`. All DNS
      servers **MUST** provide the correct DNS response within 1 hour of the
      object's `<crDate>` element.
    Input-Parameters:
      - dns.nameservers
    Dependencies:
      - epp-14
    Errors:
      - INTEGRATION_DNS_QUERY_FAILED
      - INTEGRATION_DOMAIN_NOT_PRESENT_IN_DNS
      - INTEGRATION_DNS_ANSWER_IS_INCORRECT
  integration-03:
    Summary: EPP -> RDE Integration Test
    Maturity: BETA
    Description: |
      This test confirms that the EPP and RDE systems are properly integrated,
      that is, that objects created in the EPP system are reflected in a valid
      RDE deposit file within the Service Level Requirement of the SLA.
  
      The test system will periodically connect to the SFTP server specified by
      the `integration.rdeSFTPHostname` input parameter, using the username
      specified in the `integration.rdeSFTPUsername` input parameter and the SSH
      key in the `integration.rdeSFTPPublicKey` resource, and look for .ryde
      files in the directory specified by the `integration.rdeSFTPDirectory`
      input parameter. Note that operators **MUST** ensure that the IP addresses
      listed in the `integration.rdeSFTPACL` resource have been added to the
      Access Control List for the SFTP server (if any).
  
      All objects created in the `epp-14` and `epp-11` (if applicable) tests
      **MUST** be found within a valid RDE deposit file (that is, the deposit
      passes all the tests in the RDE test suite) within 24 hours of each
      object's `<crDate>` element.
  
      Furthermore, for each deposit found in the directory, the corresponding
      RDE report (as described in [Section 2.1 of
      draft-lozano-icann-registry-interfaces](https://datatracker.ietf.org/doc/html/draft-lozano-icann-registry-interfaces#section-2))
      **MUST** be recieved on the test RRI environment before 23:59:59 UTC on
      the date specified in the Watermark element of the deposit file.
  
      To facilitate submission of RDE reports, the RRI test environment will be
      configured to accept submissions for the TLDs associated with the test
      from clients using the same TLSA DNS hostnames that are configured for the
      test.
    Resources:
      - integration.rdeSFTPPublicKey
      - integration.rdeSFTPACL
    Input-Parameters:
      - integration.rdeSFTPHostname
      - integration.rdeSFTPDirectory
      - integration.rdeSFTPUsername
      - integration.rriACL
    Dependencies:
      - epp-14
      - epp-11
    Errors:
      - INTEGRATION_RDE_SFTP_SERVER_UNREACHABLE
      - INTEGRATION_RDE_SFTP_SERVER_AUTHENTICATION_ERROR
      - INTEGRATION_RDE_MISSING_OBJECTS
      - INTEGRATION_RDE_DEADLINE_MISSED

Input-Parameters:
  general.minimalPublicDataSet:
    Description: |
      if true, then the registry only supports the minimum public data set, and
      does not collect registrant and/or technical contact information from
      registrars.
    Type: boolean
    Example: true
  dns.nameservers:
    Description: |
      The set of nameservers that will be authoritative for the TLD(s).
  
      This input parameter is an object where the object properties are the
      TLD names, and the values are objects. For these objects, the properties
      are the nameserver names, and the values are arrays of IPv4 and IPv6
      addresses.
  
      There **MUST** be at least two nameservers, and at least two nameservers
      **MUST** have at least one IPv6 address.
  
      All DNS server names **MUST** comply with the requirements for valid
      hostnames described in RFC 1123, section 2.1. Additionally, all IDN labels
      in those hostnames **MUST** comply with IDNA2008.
    Type: object
    Example: {"example":{"ns1.example.com":["192.0.2.1","2001:DB8::53:1"],"ns2.example.com":["192.0.2.2","2001:DB8::53:2"]}}
    Schema:
      type: object
      patternProperties:
        ^[a-z]+[a-z0-9\.]*[a-z]\$:
          type: array
          items:
            type: string
            format:
              - ipv4
              - ipv6
  dnssec.dsRecords:
    Description: |
      The DS record(s) that may be used to validate the DNSSEC signature for the
      TLD(s). This input parameter is an object where the object properties are
      the TLD names and the values are arrays of objects representing DS
      records.
  
      There **MUST** be an entry for every TLD in the TLD set and there **MUST**
      be at least one DS record for each TLD.
    Type: object
    Example: {"example":[{"keyTag":12345,"alg":8,"digestType":2,"digest":"E2D3...5766"}]}
  dnssecOps.nameservers:
    Description: |
      The set of nameservers that will be authoritative for the zones used in the
      DNSSEC operations test suite.
  
      This input parameter is an object where the object properties are the
      zone names, and the values are objects. For these objects, the properties
      are the nameserver names, and the values are arrays of IPv4 and IPv6
      addresses.
    Type: object
    Example: {"example":{"ns1.example.com":["192.0.2.1","2001:DB8::53:1"],"ns2.example.com":["192.0.2.2","2001:DB8::53:2"]}}
    Schema:
      type: object
      patternProperties:
        ^[a-z]+[a-z0-9\.]*[a-z]\$:
          type: array
          items:
            type: string
            format:
              - ipv4
              - ipv6
  
  dnssecOps.primaryServer:
    Description: The primary nameserver from which zones can be transferred.
    Type: string
    Example: 192.0.2.1
    Schema:
      type: string
      format:
        - ipv4
        - ipv6
  
  dnssecOps.tsigKey:
    Description: The TSIG key which should be used to perform zone transfers.
    Type: object
    Example: {"name": "rst-tsig-01", "algorithm": "hmac-sha256", "secret": "NQO...xQ="}
    Schema:
      type: object
      properties:
        name:
          type: string
        algorithm:
          type: string
        secret:
          type: string
  
  dnssecOps.csk:
    Description: |
      A boolean indicating whether the RSP uses a Combined Signing Key (CSK,
      also referred to as a "Single Type Signing Scheme") instead of a split
      KSK/ZSK configuration.
    Type: boolean
    Example: false
  
  dnssecOps.zskRolloverZone:
    Description: |
      The domain name which will be monitored for the occurrence of a ZSK
      rollover.
    Type: string
    Example: example.com
  
  dnssecOps.kskRolloverZone:
    Description: |
      The domain name which will be monitored for the occurrence of a KSK
      rollover.
    Type: string
    Example: example.com
  
  dnssecOps.algorithmRolloverZone:
    Description: |
      The domain name which will be monitored for the occurrence of an algorithm
      rollover.
    Type: string
    Example: example.com
  rde.depositFile:
    Description: |
      an RDE deposit file. The TLD to which the deposit relates **MUST** match
      one of the TLDs that are associated with the test object.
    Type: file
    Example: example_20231004_FULL_S1_R0.ryde
  rde.signatureFile:
    Description: an ASCII-armoured OpenPGP signature covering the deposit file
    Type: file
    Example: example_20231004_FULL_S1_R0.sig
  rde.publicKey:
    Description: a PGP public key block
    Type: file
    Example: rsp-rde-signing-key.asc
  epp.hostName:
    Description: |
      The fully-qualified domain name of the EPP server.
  
      The server name **MUST** comply with the requirements for valid
      hostnames described in RFC 1123, section 2.1. Additionally, all IDN labels
      in the server name **MUST** comply with IDNA2008.
    Type: string
    Example: epp.rsp.tech
    Schema:
      type: string
      format: hostname
  epp.greeting:
    Description: |
      an XML instance which contains a copy of the server's `<greeting>`.
    Type: string
    Example: |
      <?xml version="1.0" encoding="UTF-8" standalone="no"?>
      <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
        <greeting>
          <svID>EPP server</svID>
          <svDate>2024-06-08T22:00:00.0Z</svDate>
          <svcMenu>
            <version>1.0</version>
            <lang>en</lang>
            <objURI>urn:ietf:params:xml:ns:domain-1.0</objURI>
            <svcExtension>
              <extURI>urn:ietf:params:xml:ns:rgp-1.0</extURI>
              <extURI>urn:ietf:params:xml:ns:secDNS-1.1</extURI>
              <extURI>urn:ietf:params:xml:ns:launch-1.0</extURI>
            </svcExtension>
          </svcMenu>
          <dcp>
            <access><all/></access>
            <statement>
              <purpose><admin/><prov/></purpose>
              <recipient><ours/><public/></recipient>
              <retention><stated/></retention>
            </statement>
          </dcp>
        </greeting>
      </epp>
  epp.clid01:
    Description: the username used to log in to the EPP server
    Type: string
    Example: clid-01
  epp.pwd01:
    Description: the password used to log in to the EPP server
    Type: string
    Example: foo2bar
  epp.serverIssuedClientCertificate01:
    Description: |
      If the EPP server uses a private CA to issue client certificates, then
      a certificate generated using the CSR provided in the `epp.clientCSR` may
      be provided using this parameter. This certificate will only be used in
      conjunction with the `epp.clid01` and `epp.pwd01` credentials. If the
      server will accept ICANN's own client certificate, this parameter
      **SHOULD** be empty.
    Type: string
    Example: rst_test_client_cert.pem
  epp.serverIssuedClientCertificate02:
    Description: |
      If the EPP server uses a private CA to issue client certificates, then
      a certificate generated using the CSR provided in the `epp.clientCSR` may
      be provided using this parameter. This certificate will only be used in
      conjunction with the `epp.clid02` and `epp.pwd02` credentials. If the
      server will accept ICANN's own client certificate, this parameter
      **SHOULD** be empty.
    Type: string
    Example: rst_test_client_cert.pem
  epp.clid02:
    Description: the username used for transfer tests
    Type: string
    Example: clid-02
  epp.pwd02:
    Description: the password used for transfer tests
    Type: string
    Example: foo3bar
  epp.hostModel:
    Description: |
      The host model supported by the EPP server. The possible values for this
      parameter are:
        * `objects`
        * `attributes`
    Type: string
    Example: objects
    Schema:
      type: string
      enum:
        - objects
        - attributes
  epp.secDNSInterfaces:
    Description: |
      Which of the interfaces defined in Section 4 of RFC 5910 the server
      supports (either `dsData` or `keyData`).
    Type: string
    Example: dsData
    Schema:
      type: string
      enum:
        - dsData
        - keyData
  epp.registeredNames:
    Description: |
      An array of domain names that exist in the EPP server and which are
      therefore unavailable for registration. The domains **MUST NOT** be under
      the sponsorship of the `epp.clid01` or `epp.clid02` registrars. The array
      **MUST** contain one member for each TLD in the TLD set.
    Type: array
    Example: ["example.example1", "example.example2"]
    Schema:
      type: array
      items:
        type: string
        format: hostname
  epp.registeredNameservers:
    Description: |
      An array of host objects that exist in the EPP server and which are
      therefore unavailable for registration.
  
      If the value of `epp.hostModel` is `objects`, this array **MUST** contain
      one member for each TLD in the TLD set. However, if it is `attributes`,
      the array **MUST** be empty.
    Type: array
    Example: ["ns1.example.com", "ns2.example.org"]
    Schema:
      type: array
      items:
        type: string
        format: hostname
  epp.registeredContacts:
    Description: |
      An array of contact IDs that exist in the EPP server and which are
      therefore unavailable for registration.
  
      If the value of `general.minimalPublicDataSet` is `false`, this array
      **MUST** contain one member for each TLD in the TLD set. However, if it is
      `false`, the array **MUST** be empty.
    Type: array
    Example: ["abc123", "def321"]
    Schema:
      type: array
      items:
        type: string
  epp.restoreReportRequired:
    Description: |
      Whether the server requires submission of a restore report when a client
      attempts to restore a domain.
  
      If the value of `general.gracePeriodsSupported` is `false`, then this
      input parameter is ignored.
    Type: boolean
    Example: false
    Schema:
      type: boolean
  rdap.baseURLs:
    Descrption: |
      The RDAP base URL(s) for the TLD(s). This input parameter is an object,
      where the object properties are the TLD names, and the values are strings
      containing the base URL. The URL **MUST** use the `https:` scheme and
      **MUST** end with a slash ("/").
  
      The host name component of each URL **MUST** comply with the requirements
      for valid hostnames described in RFC 1123, section 2.1. Additionally, all
      IDN labels in the host name **MUST** comply with IDNA2008.
    Type: object
    Example: {"example": "https://rdap.example.com/example/"}
    Schema:
      type: object
      patternProperties:
        ^[a-z][a-\0-9-]*[a-z]\$:
            type: string
            format: url
  rdap.testDomains:
    Description: |
      The domain(s) that will be queried to validate domain responses. This
      input parameter is an object, where the object properties are the TLD
      names and the values domain names.
    Type: object
    Example: {"example": "example.example"}
    Schema:
      type: object
      patternProperties:
        ^[a-z][a-\0-9-]*[a-z]\$:
            type: string
            format: hostname
  rdap.testEntities:
    Description: |
      The entities(s) that will be queried to validate entity responses. This
      input parameter is an object, where the object properties are the TLD
      names and the values entity handles.
    Type: object
    Example: {"example": "9999"}
    Schema:
      type: object
      patternProperties:
        ^[a-z][a-\0-9-]*[a-z]\$:
            type: string
  rdap.testNameservers:
    Description: |
      The nameservers(s) that will be queried to validate nameserver responses.
      This input parameter is an object, where the object properties are the TLD
      names and the values host names.
    Type: object
    Example: {"example": "ns1.example.com"}
    Schema:
      type: object
      patternProperties:
        ^[a-z][a-\0-9-]*[a-z]\$:
            type: string
            format: hostname
  minimumRPMS.sunriseModels:
    Description: |
      The sunrise models supported by the EPP server. The possible values for
      this parameter are:
        * `start-date`
        * `end-date`
        * `both`
    Type: string
    Example: start-date
  minimumRPMS.sunriseTLD:
    Description: |
      A TLD, or other registry-class zone, which has been configured to be in
      perpetual sunrise.
    Type: string
    Example: tmclaims.rsp.tech
  minimumRPMS.claimsTLD:
    Description: |
      A TLD, or other registry-class zone, which has been configured to be in
      perpetual trademark claims.
    Type: string
    Example: tmclaims.rsp.tech
  srsgw.eppHostName:
    Description: the fully-qualified domain name of the SRS Gateway EPP server
    Type: string
    Example: epp.rsp.tech
  srsgw.eppClid01:
    Description: the username used to log in to the SRS Gateway EPP server
    Type: string
    Example: clid-01
  srsgw.eppPwd01:
    Description: the password used to log in to the SRS Gateway EPP server
    Type: string
    Example: foo2bar
  srsgw.serverIssuedClientCertificate01:
    Description: |
      If the EPP server uses a private CA to issue client certificates, then
      a certificate generated using the CSR provided in the `epp.clientCSR` may
      be provided using this parameter. This certificate will only be used in
      conjunction with the `srsgw.eppClid01` and `srsgw.eppPwd01` credentials.
      If the server will accept ICANN's own client certificate, this parameter
      **SHOULD** be empty.
    Type: string
    Example:
  srsgw.serverIssuedClientCertificate02:
    Description: |
      If the EPP server uses a private CA to issue client certificates, then
      a certificate generated using the CSR provided in the `epp.clientCSR` may
      be provided using this parameter. This certificate will only be used in
      conjunction with the `srsgw.eppClid02` and `srsgw.eppPwd02` credentials.
      If the server will accept ICANN's own client certificate, this parameter
      **SHOULD** be empty.
    Type: string
    Example:
  srsgw.eppClid02:
    Description: the username used for transfer tests
    Type: string
    Example: clid-02
  srsgw.eppPwd02:
    Description: the password used for transfer tests
    Type: string
    Example: foo3bar
  srsgw.rdapBaseURLs:
    Description: |
      The RDAP base URL(s) for the TLD(s). This input parameter is an object,
      where the object properties are the TLD names and the values are strings
      containing the base URL. The URL **MUST** end with a slash ("/").
    Type: object
    Example: {"example": "https://rdap.example.com/example/"}
  # there are no inputs for the IDN test suite, as they are all provided in the test object.
  integration.rdeSFTPHostname:
    Description: The hostname of the operator's SFTP server.
    Type: string
    Example: sftp.rsp.tech
  integration.rdeSFTPDirectory:
    Description: |
      The directory on the SFTP server where deposit files may be found.
    Type: string
    Example: /path/to/deposits
  integration.rdeSFTPUsername:
    Description: The username that can be used to connect to the SFTP server.
    Type: string
    Example: icann
  integration.rriACL:
    Description: |
      An array of IP addresses from which requests to the RRI will be sent.
    Type: array
    Example: ["192.0.2.1", "2001:DB8::22:1"]

Errors:
  ZM_AAAA_BAD_RDATA:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_AAAA_QUERY_DROPPED:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_AAAA_UNEXPECTED_RCODE:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_ALGORITHM_DEPRECATED:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_ALGORITHM_NOT_RECOMMENDED:
    Description: '*Not available.*'
    Severity: WARNING
  
  ZM_ALGORITHM_NOT_ZONE_SIGN:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_ALGORITHM_PRIVATE:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_ALGORITHM_RESERVED:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_ALGORITHM_UNASSIGNED:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_A_UNEXPECTED_RCODE:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_BREAKS_ON_EDNS:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_CHILD_NS_FAILED:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_CHILD_NS_SAME_IP:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_CHILD_ZONE_LAME:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_CN01_MISSING_NS_RECORD_UDP:
    Description: |
      Nameserver {ns} reponds to a NS query with no NS records in the answer
      section over UDP.
    Severity: ERROR
  
  ZM_CN01_MISSING_SOA_RECORD_UDP:
    Description: |
      Nameserver {ns} reponds to a SOA query with no SOA records in the answer
      section over UDP.
    Severity: ERROR
  
  ZM_CN01_NO_RESPONSE_NS_QUERY_UDP:
    Description: |
      Nameserver {ns} does not respond to NS queries over UDP.
    Severity: ERROR
  
  ZM_CN01_NO_RESPONSE_SOA_QUERY_UDP:
    Description: |
      Nameserver {ns} does not respond to SOA queries over UDP.
    Severity: ERROR
  
  ZM_CN01_NO_RESPONSE_UDP:
    Description: |
      Nameserver {ns} does not respond to any queries over UDP.
    Severity: ERROR
  
  ZM_CN01_NS_RECORD_NOT_AA_UDP:
    Description: |
      Nameserver {ns} does not give an authoritative response on an NS query
      over UDP.
    Severity: ERROR
  
  ZM_CN01_SOA_RECORD_NOT_AA_UDP:
    Description: |
      Nameserver {ns} does not give an authoritative response on an SOA query
      over UDP.
    Severity: ERROR
  
  ZM_CN01_UNEXPECTED_RCODE_NS_QUERY_UDP:
    Description: |
      Nameserver {ns} responds with an unexpected RCODE ({rcode}) on an NS
      query over UDP.
    Severity: ERROR
  
  ZM_CN01_UNEXPECTED_RCODE_SOA_QUERY_UDP:
    Description: |
      Nameserver {ns} responds with an unexpected RCODE ({rcode}) on an SOA
      query over UDP.
    Severity: ERROR
  
  ZM_CN01_WRONG_NS_RECORD_UDP:
    Description: |
      Nameserver {ns} responds with a wrong owner name ({domain_found} instead
      of {domain_expected}) on NS queries over UDP.
    Severity: ERROR
  
  ZM_CN01_WRONG_SOA_RECORD_UDP:
    Description: |
      Nameserver {ns} responds with a wrong owner name ({domain_found} instead
      of {domain_expected}) on SOA queries over UDP.
    Severity: ERROR
  
  ZM_CN02_MISSING_NS_RECORD_TCP:
    Description: |
      Nameserver {ns} reponds to a NS query with no NS records in the answer
      section over TCP.
    Severity: ERROR
  
  ZM_CN02_MISSING_SOA_RECORD_TCP:
    Description: |
      Nameserver {ns} reponds to a SOA query with no SOA records in the answer
      section over TCP.
    Severity: ERROR
  
  ZM_CN02_NO_RESPONSE_NS_QUERY_TCP:
    Description: |
      Nameserver {ns} does not respond to NS queries over TCP.
    Severity: ERROR
  
  ZM_CN02_NO_RESPONSE_SOA_QUERY_TCP:
    Description: |
      Nameserver {ns} does not respond to SOA queries over TCP.
    Severity: ERROR
  
  ZM_CN02_NO_RESPONSE_TCP:
    Description: |
      Nameserver {ns} does not respond to any queries over TCP.
    Severity: ERROR
  
  ZM_CN02_NS_RECORD_NOT_AA_TCP:
    Description: |
      Nameserver {ns} does not give an authoritative response on an NS query
      over TCP.
    Severity: ERROR
  
  ZM_CN02_SOA_RECORD_NOT_AA_TCP:
    Description: |
      Nameserver {ns} does not give an authoritative response on an SOA query
      over TCP.
    Severity: ERROR
  
  ZM_CN02_UNEXPECTED_RCODE_NS_QUERY_TCP:
    Description: |
      Nameserver {ns} responds with an unexpected RCODE ({rcode}) on an NS
      query over TCP.
    Severity: ERROR
  
  ZM_CN02_UNEXPECTED_RCODE_SOA_QUERY_TCP:
    Description: |
      Nameserver {ns} responds with an unexpected RCODE ({rcode}) on an SOA
      query over TCP.
    Severity: ERROR
  
  ZM_CN02_WRONG_NS_RECORD_TCP:
    Description: |
      Nameserver {ns} responds with a wrong owner name ({domain_found} instead
      of {domain_expected}) on NS queries over TCP.
    Severity: ERROR
  
  ZM_CN02_WRONG_SOA_RECORD_TCP:
    Description: |
      Nameserver {ns} responds with a wrong owner name ({domain_found} instead
      of {domain_expected}) on SOA queries over TCP.
    Severity: ERROR
  
  ZM_DEL_NS_SAME_IP:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_DNSKEY_SMALLER_THAN_REC:
    Description: '*Not available.*'
    Severity: WARNING
  
  ZM_DNSKEY_TOO_LARGE_FOR_ALGO:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_DNSKEY_TOO_SMALL_FOR_ALGO:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_DNSSEC_03_FAILED:
    Description: The `dnssec-03` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNSSEC_04_FAILED:
    Description: The `dnssec-04` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNSSEC_06_FAILED:
    Description: The `dnssec-06` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNSSEC_12_FAILED:
    Description: The `dnssec-12` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNS_ADDRESS01_FAILED:
    Description: The `dns-address01` test case failed, but no further information is
      available. Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNS_ADDRESS02_FAILED:
    Description: The `dns-address02` test case failed, but no further information is
      available. Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNS_ADDRESS03_FAILED:
    Description: The `dns-address03` test case failed, but no further information is
      available. Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNS_DELEGATION04_FAILED:
    Description: The `dns-delegation04` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNS_DELEGATION07_FAILED:
    Description: The `dns-delegation07` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNS_NAMESERVER04_FAILED:
    Description: The `dns-nameserver04` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNS_NAMESERVER06_FAILED:
    Description: The `dns-nameserver06` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNS_NAMESERVER08_FAILED:
    Description: The `dns-nameserver08` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNS_NAMESERVER09_FAILED:
    Description: The `dns-nameserver09` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNS_SYNTAX05_FAILED:
    Description: The `dns-syntax05` test case failed, but no further information is
      available. Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNS_SYNTAX07_FAILED:
    Description: The `dns-syntax07` test case failed, but no further information is
      available. Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DNS_ZONE07_FAILED:
    Description: The `dns-zone07` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR
  
  ZM_DS01_DS_ALGO_2_MISSING:
    Description: |
      DS created with algo 2 (SHA-256) is missing.
    Severity: ERROR
  
  ZM_DS01_DS_ALGO_DEPRECATED:
    Description: |
      The DS digest algorithm is deprecated.
    Severity: ERROR
  
  ZM_DS01_DS_ALGO_NOT_DS:
    Description: |
      The DS digest algorithm is not for DS.
    Severity: ERROR
  
  ZM_DS01_DS_ALGO_RESERVED:
    Description: |
      No DS digest algorithm defined for the digest code.
    Severity: ERROR
  
  ZM_DS02_DNSKEY_NOT_FOR_ZONE_SIGNING:
    Description: |
      Flags field of DNSKEY record with tag {keytag} does not have ZONE bit
      set although DS with same tag is present in parent. Fetched from the
      nameservers with IP addresses "{ns_ip_list}".
    Severity: ERROR
  
  ZM_DS02_DNSKEY_NOT_SEP:
    Description: |
      Flags field of DNSKEY record with tag {keytag} does not have SEP bit set
      although DS with same tag is present in parent. Fetched from the
      nameservers with IP addresses "{ns_ip_list}".
    Severity: ERROR
  
  ZM_DS02_DNSKEY_NOT_SIGNED_BY_ANY_DS:
    Description: |
      The DNSKEY RRset has not been signed by any DNSKEY matched by a DS
      record. Fetched from the nameservers with IP addresses "{ns_ip_list}".
    Severity: ERROR
  
  ZM_DS02_NO_DNSKEY_FOR_DS:
    Description: |
      The DNSKEY record with tag {keytag} that the DS refers to does not exist
      in the DNSKEY RRset. Fetched from the nameservers with IP
      "{ns_ip_list}".
    Severity: ERROR
  
  ZM_DS02_NO_MATCHING_DNSKEY_RRSIG:
    Description: |
      The DNSKEY RRset is not signed by the DNSKEY with tag {keytag} that the
      DS record refers to. Fetched from the nameservers with IP
      "{ns_ip_list}".
    Severity: ERROR
  
  ZM_DS02_NO_MATCH_DS_DNSKEY:
    Description: |
      The DS record does not match the DNSKEY with tag {keytag} by algorithm
      or digest. Fetched from the nameservers with IP "{ns_ip_list}".
    Severity: ERROR
  
  ZM_DS02_NO_VALID_DNSKEY_FOR_ANY_DS:
    Description: |
      There is no valid DNSKEY matched by any of the DS records. Fetched from
      the nameservers with IP addresses "{ns_ip_list}".
    Severity: ERROR
  
  ZM_DS02_RRSIG_NOT_VALID_BY_DNSKEY:
    Description: |
      The DNSKEY RRset is signed with an RRSIG with tag {keytag} which cannot
      be validated by the matching DNSKEY. Fetched from the nameservers with
      IP addresses "{ns_ip_list}".
    Severity: ERROR
  
  ZM_DS08_DNSKEY_RRSIG_EXPIRED:
    Description: |
      DNSKEY RRset is signed with an RRSIG that has expired.
    Severity: ERROR
  
  ZM_DS08_DNSKEY_RRSIG_NOT_YET_VALID:
    Description: |
      DNSKEY RRset is signed with a not yet valid RRSIG.
    Severity: ERROR
  
  ZM_DS08_MISSING_RRSIG_IN_RESPONSE:
    Description: |
      DNSKEY is unsigned which is against expectation.
    Severity: ERROR
  
  ZM_DS08_NO_MATCHING_DNSKEY:
    Description: |
      DNSKEY RRset is signed with an RRSIG that does not match any DNSKEY.
    Severity: ERROR
  
  ZM_DS08_RRSIG_NOT_VALID_BY_DNSKEY:
    Description: |
      DNSKEY RRset is signed with an RRSIG that cannot be validated by the
      matching DNSKEY.
    Severity: ERROR
  
  ZM_DS09_MISSING_RRSIG_IN_RESPONSE:
    Description: |
      SOA is unsigned which is against expectation
    Severity: ERROR
  
  ZM_DS09_NO_MATCHING_DNSKEY:
    Description: |
      SOA is signed with an RRSIG that does not match any DNSKEY
    Severity: ERROR
  
  ZM_DS09_RRSIG_NOT_VALID_BY_DNSKEY:
    Description: |
      SOA is signed with an RRSIG that cannot be validated by the matching
      DNSKEY
    Severity: ERROR
  
  ZM_DS09_SOA_RRSIG_EXPIRED:
    Description: |
      SOA is signed with an RRSIG that has expired
    Severity: ERROR
  
  ZM_DS09_SOA_RRSIG_NOT_YET_VALID:
    Description: |
      SOA is signed with a not yet valid RRSIG
    Severity: ERROR
  
  ZM_DS10_ANSWER_VERIFY_ERROR:
    Description: |
      RRSIG on record or records in answer section cannot be verified.
    Severity: ERROR
  
  ZM_DS10_INCONSISTENT_NSEC_NSEC3:
    Description: |
      Some servers return NSEC, others return NSEC3.
    Severity: ERROR
  
  ZM_DS10_MISSING_NSEC_NSEC3:
    Description: |
      Missing expected NSEC or NSEC3 in a signed zone.
    Severity: ERROR
  
  ZM_DS10_MIXED_NSEC_NSEC3:
    Description: |
      Both NSEC and NSEC3 are returned from the same server.
    Severity: ERROR
  
  ZM_DS10_NAME_NOT_COVERED_BY_NSEC:
    Description: |
      The non-existent name is not correctly covered by the NSEC records.
    Severity: ERROR
  
  ZM_DS10_NAME_NOT_COVERED_BY_NSEC3:
    Description: |
      The non-existent name is not correctly covered by the NSEC3 records.
    Severity: ERROR
  
  ZM_DS10_NON_EXISTENT_RESPONSE_ERROR:
    Description: |
      No or error in response of an expected non-existent name.
    Severity: ERROR
  
  ZM_DS10_NSEC3_MISSING_SIGNATURE:
    Description: |
      Missing signatures for NSEC3 record or records.
    Severity: ERROR
  
  ZM_DS10_NSEC3_RRSIG_VERIFY_ERROR:
    Description: |
      The signature or signatures on the NSEC3 record or records cannot be
      correctly verfied.
    Severity: ERROR
  
  ZM_DS10_NSEC_MISSING_SIGNATURE:
    Description: |
      Missing signatures for NSEC record or records.
    Severity: ERROR
  
  ZM_DS10_NSEC_RRSIG_VERIFY_ERROR:
    Description: |
      The signature or signatures on the NSEC record or records cannot be
      correctly verfied.
    Severity: ERROR
  
  ZM_DS10_UNSIGNED_ANSWER:
    Description: |
      RRSIG is missing for record or records in the answer section.
    Severity: ERROR
  
  ZM_DS13_ALGO_NOT_SIGNED_DNSKEY:
    Description: |
      The DNSKEY RRset is not signed with an algorithm present in the DNSKEY
      RRset
    Severity: ERROR
  
  ZM_DS13_ALGO_NOT_SIGNED_NS:
    Description: |
      The NS RRset is not signed with an algorithm present in the DNSKEY RRset
    Severity: ERROR
  
  ZM_DS13_ALGO_NOT_SIGNED_SOA:
    Description: |
      The SOA RRset is not signed with an algorithm present in the DNSKEY
      RRset
    Severity: ERROR
  
  ZM_DS15_INCONSISTENT_CDNSKEY:
    Description: |
      All servers do not have the same CDNSKEY RRset.
    Severity: ERROR
  
  ZM_DS15_INCONSISTENT_CDS:
    Description: |
      All servers do not have the same CDS RRset.
    Severity: ERROR
  
  ZM_DS15_MISMATCH_CDS_CDNSKEY:
    Description: |
      Both CDS and CDNSKEY RRsets are found but they do not match.
    Severity: ERROR
  
  ZM_DS16_CDS_INVALID_RRSIG:
    Description: |
      CDS RRset is signed with an invalid RRSIG.
    Severity: ERROR
  
  ZM_DS16_CDS_MATCHES_NON_SEP_DNSKEY:
    Description: |
      CDS record matches a DNSKEY with SEP bit (bit 15) unset.
    Severity: ERROR
  
  ZM_DS16_CDS_MATCHES_NON_ZONE_DNSKEY:
    Description: |
      CDS record matches a DNSKEY with zone bit (bit 7) unset.
    Severity: ERROR
  
  ZM_DS16_CDS_MATCHES_NO_DNSKEY:
    Description: |
      CDS record does not match any DNSKEY in DNSKEY RRset.
    Severity: ERROR
  
  ZM_DS16_CDS_NOT_SIGNED_BY_CDS:
    Description: |
      CDS RRset is not signed by the key that the CDS record points to.
    Severity: ERROR
  
  ZM_DS16_CDS_SIGNED_BY_UNKNOWN_DNSKEY:
    Description: |
      CDS RRset is signed by a key not in DNSKEY RRset.
    Severity: ERROR
  
  ZM_DS16_CDS_UNSIGNED:
    Description: "CDS RRset is unsigned.\n"
    Severity: ERROR
  
  ZM_DS16_CDS_WITHOUT_DNSKEY:
    Description: |
      CDS RRset exists, but there is no DNSKEY RRset.
    Severity: ERROR
  
  ZM_DS16_DNSKEY_NOT_SIGNED_BY_CDS:
    Description: |
      DNSKEY RRset is not signed by the key or keys that the CDS records point
      to.
    Severity: ERROR
  
  ZM_DS16_MIXED_DELETE_CDS:
    Description: |
      "Delete" CDS record is mixed with normal CDS record.
    Severity: ERROR
  
  ZM_DS17_CDNSKEY_INVALID_RRSIG:
    Description: |
      CDNSKEY RRset signed with an invalid RRSIG.
    Severity: ERROR
  
  ZM_DS17_CDNSKEY_IS_NON_SEP:
    Description: |
      CDNSKEY record has the SEP bit (bit 15) unset.
    Severity: ERROR
  
  ZM_DS17_CDNSKEY_IS_NON_ZONE:
    Description: |
      CDNSKEY record has the zone bit (bit 7) unset.
    Severity: ERROR
  
  ZM_DS17_CDNSKEY_MATCHES_NO_DNSKEY:
    Description: |
      CDNSKEY record does not match any DNSKEY in DNSKEY RRset.
    Severity: ERROR
  
  ZM_DS17_CDNSKEY_NOT_SIGNED_BY_CDNSKEY:
    Description: |
      CDNSKEY RRset is not signed by the key that the CDNSKEY record points
      to.
    Severity: ERROR
  
  ZM_DS17_CDNSKEY_SIGNED_BY_UNKNOWN_DNSKEY:
    Description: |
      CDNSKEY RRset is signed by a key not in DNSKEY RRset.
    Severity: ERROR
  
  ZM_DS17_CDNSKEY_UNSIGNED:
    Description: "CDNSKEY RRset is unsigned.\n"
    Severity: ERROR
  
  ZM_DS17_CDNSKEY_WITHOUT_DNSKEY:
    Description: |
      CDNSKEY RRset exists, but there is no DNSKEY RRset.
    Severity: ERROR
  
  ZM_DS17_DNSKEY_NOT_SIGNED_BY_CDNSKEY:
    Description: |
      DNSKEY RRset is not signed by the key or keys that the CDNSKEY records
      point to.
    Severity: ERROR
  
  ZM_DS17_MIXED_DELETE_CDNSKEY:
    Description: |
      "Delete" CDNSKEY record is mixed with normal CDNSKEY record.
    Severity: ERROR
  
  ZM_DS18_NO_MATCH_CDNSKEY_RRSIG_DS:
    Description: |
      CDNSKEY RRset is not signed with a DNSKEY record that a DS record points
      to.
    Severity: ERROR
  
  ZM_DS18_NO_MATCH_CDS_RRSIG_DS:
    Description: |
      The CDS RRset is not signed with a DNSKEY record that a DS record points
      to.
    Severity: ERROR
  
  ZM_EDNS_RESPONSE_WITHOUT_EDNS:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_EDNS_VERSION_ERROR:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_EMPTY_ASN_SET:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_ERROR_ASN_DATABASE:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_EXTRA_ADDRESS_CHILD:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_IN_BAILIWICK_ADDR_MISMATCH:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_IPV4_ONE_ASN:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_IPV6_ONE_ASN:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_IS_A_RECURSOR:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_MISSING_OPT_IN_TRUNCATED:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_MULTIPLE_NS_SET:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_MULTIPLE_SOA:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_MULTIPLE_SOA_MNAMES:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_MULTIPLE_SOA_RNAMES:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_MULTIPLE_SOA_TIME_PARAMETER_SET:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_N10_EDNS_RESPONSE_ERROR:
    Description: |
      Expected RCODE value when EDNS ver=1, but error in response.
    Severity: ERROR
  
  ZM_N10_NO_RESPONSE_EDNS1_QUERY:
    Description: |
      Response when EDNS ver=0, but not when 1.
    Severity: ERROR
  
  ZM_N10_UNEXPECTED_RCODE:
    Description: |
      Unexpected RCODE value when EDNS ver=1.
    Severity: ERROR
  
  ZM_N11_NO_EDNS:
    Description: |
      The DNS response, on query with unknown EDNS option-code, does not
      contain any EDNS from name servers "{ns_ip_list}".
    Severity: ERROR
  
  ZM_N11_NO_RESPONSE:
    Description: |
      There is no response on query with unknown EDNS option-code from name
      servers "{ns_ip_list}".
    Severity: ERROR
  
  ZM_N11_RETURNS_UNKNOWN_OPTION_CODE:
    Description: |
      The DNS response, on query with unknown EDNS option-code, contains an
      unknown EDNS option-code from name servers "{ns_ip_list}".
    Severity: ERROR
  
  ZM_N11_UNEXPECTED_ANSWER_SECTION:
    Description: |
      The DNS response, on query with unknown EDNS option-code, does not
      contain the expected SOA record in the answer section from name servers
      "{ns_ip_list}".
    Severity: ERROR
  
  ZM_N11_UNEXPECTED_RCODE:
    Description: |
      The DNS response, on query with unknown EDNS option-code, has unexpected
      RCODE name "{rcode}" from name servers "{ns_ip_list}".
    Severity: ERROR
  
  ZM_N11_UNSET_AA:
    Description: |
      The DNS response, on query with unknown EDNS option-code, is
      unexpectedly not authoritative from name servers "{ns_ip_list}".
    Severity: ERROR
  
  ZM_NOT_ENOUGH_IPV4_NS_CHILD:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NOT_ENOUGH_IPV4_NS_DEL:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NOT_ENOUGH_IPV6_NS_CHILD:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NOT_ENOUGH_IPV6_NS_DEL:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NOT_ENOUGH_NS_CHILD:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NOT_ENOUGH_NS_DEL:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NO_EDNS_SUPPORT:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NO_IPV4_NS_CHILD:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NO_IPV4_NS_DEL:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NO_IPV6_NS_CHILD:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NO_IPV6_NS_DEL:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NO_RESPONSE:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NO_RESPONSE_DNSKEY:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NO_RESPONSE_NS_QUERY:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NO_RESPONSE_SOA_QUERY:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NO_SOA_IN_RESPONSE:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NS_ERROR:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_NS_IS_CNAME:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_OUT_OF_BAILIWICK_ADDR_MISMATCH:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_REFERRAL_SIZE_TOO_LARGE:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_RNAME_MAIL_DOMAIN_INVALID:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_RNAME_MAIL_DOMAIN_LOCALHOST:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_RNAME_MAIL_ILLEGAL_CNAME:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_RNAME_RFC822_INVALID:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_UNEXPECTED_RCODE:
    Description: '*Not available.*'
    Severity: WARNING
  
  ZM_UNKNOWN_OPTION_CODE:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_UNSUPPORTED_EDNS_VER:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_WRONG_SOA:
    Description: '*Not available.*'
    Severity: ERROR
  
  ZM_Z_FLAGS_NOTCLEAR:
    Description: '*Not available.*'
    Severity: ERROR
  
  DNS_IDNA2008_INVALID_MNAME:
    Severity: ERROR
    Description: TBA.
  
  DNS_IDNA2008_INVALID_RNAME:
    Severity: ERROR
    Description: TBA.
  
  DNSSEC_DNS_QUERY_ERROR:
    Severity: ERROR
    Description: An error occurred while performing DNS query(s).
  DNSSEC_INVALID_SIGNING_ALGORITHM:
    Severity: ERROR
    Description: An invalid algorithm is used to sign the zone.
  DNSSEC_INVALID_DIGEST_ALGORITHM:
    Severity: ERROR
    Description: An invalid algorithm is used in the provided DS record(s).
  DNSSEC_OPS_ALGORITHM_ROLLOVER_CHAIN_OF_TRUST_BROKEN:
    Severity: ERROR
    Description: TBA.
  
  DNSSEC_OPS_ALGORITHM_ROLLOVER_NOT_COMPLETED:
    Severity: ERROR
    Description: TBA.
  
  DNSSEC_OPS_KSK_ROLLOVER_CHAIN_OF_TRUST_BROKEN:
    Severity: ERROR
    Description: TBA.
  
  DNSSEC_OPS_KSK_ROLLOVER_NOT_COMPLETED:
    Severity: ERROR
    Description: TBA.
  
  DNSSEC_OPS_ZSK_ROLLOVER_CHAIN_OF_TRUST_BROKEN:
    Severity: ERROR
    Description: TBA.
  
  DNSSEC_OPS_ZSK_ROLLOVER_NOT_COMPLETED:
    Severity: ERROR
    Description: TBA.
  
  DNSSEC_OPS_INVALID_ALGORITHM:
    Severity: ERROR
    Description: TBA.
  
  DNSSEC_OPS_XFR_FAILED:
    Severity: ERROR
    Description: TBA.
  RDE_CONTACT_HAS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  RDE_CONTACT_HAS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  RDE_CONTACT_HAS_INVALID_ROID:
    Severity: ERROR
    Description: TBA.
  
  RDE_CONTACT_HAS_MULTIPLE_POSTALINFO_TYPES:
    Severity: ERROR
    Description: TBA.
  
  RDE_CONTACT_HAS_NON_UNIQUE_ID:
    Severity: ERROR
    Description: TBA.
  
  RDE_CONTACT_HAS_UNKNOWN_ACRR:
    Severity: ERROR
    Description: TBA.
  
  RDE_CONTACT_HAS_UNKNOWN_CLID:
    Severity: ERROR
    Description: TBA.
  
  RDE_CONTACT_HAS_UNKNOWN_CRRR:
    Severity: ERROR
    Description: TBA.
  
  RDE_CONTACT_HAS_UNKNOWN_RERR:
    Severity: ERROR
    Description: TBA.
  
  RDE_CONTACT_HAS_UNKNOWN_UPRR:
    Severity: ERROR
    Description: TBA.
  
  RDE_DECRYPTION_FAILED:
    Severity: ERROR
    Description: TBA.
  
  RDE_DOMAIN_HAS_INVALID_CLID:
    Severity: ERROR
    Description: TBA.
  
  RDE_DOMAIN_HAS_INVALID_CRDATE:
    Severity: ERROR
    Description: TBA.
  
  RDE_DOMAIN_HAS_INVALID_EXDATE:
    Severity: ERROR
    Description: TBA.
  
  RDE_DOMAIN_HAS_INVALID_NAME:
    Severity: ERROR
    Description: TBA.
  
  RDE_DOMAIN_HAS_INVALID_REGISTRANT:
    Severity: ERROR
    Description: TBA.
  
  RDE_DOMAIN_HAS_INVALID_ROID:
    Severity: ERROR
    Description: TBA.
  
  RDE_DOMAIN_HAS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  RDE_DOMAIN_HAS_MISSING_CLID:
    Severity: ERROR
    Description: TBA.
  
  RDE_DOMAIN_HAS_MISSING_CRDATE:
    Severity: ERROR
    Description: TBA.
  
  RDE_DOMAIN_HAS_MISSING_EXDATE:
    Severity: ERROR
    Description: TBA.
  
  RDE_DOMAIN_HAS_MISSING_NAME:
    Severity: ERROR
    Description: TBA.
  
  RDE_DOMAIN_HAS_MISSING_REGISTRANT:
    Severity: ERROR
    Description: TBA.
  
  RDE_DOMAIN_HAS_MISSING_ROID:
    Severity: ERROR
    Description: TBA.
  
  RDE_DOMAIN_HAS_MISSING_STATUS:
    Severity: ERROR
    Description: TBA.
  
  RDE_GREETING_DOES_NOT_MATCH:
    Severity: ERROR
    Description: TBA.
  
  RDE_HOST_HAS_INVALID_CLID:
    Severity: ERROR
    Description: TBA.
  
  RDE_HOST_HAS_INVALID_IP_ADDRESS:
    Severity: ERROR
    Description: TBA.
  
  RDE_HOST_HAS_INVALID_NAME:
    Severity: ERROR
    Description: TBA.
  
  RDE_HOST_HAS_INVALID_ROID:
    Severity: ERROR
    Description: TBA.
  
  RDE_HOST_HAS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  RDE_HOST_HAS_MISSING_CLID:
    Severity: ERROR
    Description: TBA.
  
  RDE_HOST_HAS_MISSING_IP_ADDRESS:
    Severity: ERROR
    Description: TBA.
  
  RDE_HOST_HAS_MISSING_NAME:
    Severity: ERROR
    Description: TBA.
  
  RDE_HOST_HAS_MISSING_ROID:
    Severity: ERROR
    Description: TBA.
  
  RDE_HOST_HAS_MISSING_STATUS:
    Severity: ERROR
    Description: TBA.
  
  RDE_IDN_OBJECT_INVALID:
    Severity: ERROR
    Description: TBA.
  
  RDE_IDN_OBJECT_MISSING:
    Severity: ERROR
    Description: TBA.
  
  RDE_IDN_OBJECT_UNEXPECTED:
    Severity: ERROR
    Description: TBA.
  
  RDE_INVALID_CSV:
    Severity: ERROR
    Description: TBA.
  
  RDE_INVALID_FILENAME:
    Severity: ERROR
    Description: TBA.
  
  RDE_INVALID_SIGNATURE:
    Severity: ERROR
    Description: TBA.
  
  RDE_INVALID_XML:
    Severity: ERROR
    Description: TBA.
  
  RDE_MISSING_OBJECT_URI:
    Severity: ERROR
    Description: TBA.
  
  RDE_MIXED_TYPES:
    Severity: ERROR
    Description: TBA.
  
  RDE_NNDN_CONFLICTS_WITH_DOMAIN:
    Severity: ERROR
    Description: TBA.
  
  RDE_OBJECT_COUNT_MISMATCH:
    Severity: ERROR
    Description: TBA.
  
  RDE_POLICY_OBJECT_INVALID:
    Severity: ERROR
    Description: TBA.
  
  RDE_POLICY_OBJECT_MISSING:
    Severity: ERROR
    Description: TBA.
  
  RDE_POLICY_OBJECT_MISSING_OBJECTS:
    Severity: ERROR
    Description: TBA.
  
  RDE_POLICY_OBJECT_UNEXPECTED_OBJECTS:
    Severity: ERROR
    Description: TBA.
  
  RDE_REGISTRAR_HAS_INVALID_GURID:
    Severity: ERROR
    Description: TBA.
  
  RDE_REGISTRAR_HAS_INVALID_ID:
    Severity: ERROR
    Description: TBA.
  
  RDE_REGISTRAR_HAS_INVALID_NAME:
    Severity: ERROR
    Description: TBA.
  
  RDE_REGISTRAR_HAS_MISSING_GURID:
    Severity: ERROR
    Description: TBA.
  
  RDE_REGISTRAR_HAS_MISSING_ID:
    Severity: ERROR
    Description: TBA.
  
  RDE_REGISTRAR_HAS_MISSING_NAME:
    Severity: ERROR
    Description: TBA.
  
  RDE_SCHEMA_VALIDATION_ERROR:
    Severity: ERROR
    Description: TBA.
  
  RDE_UNEXPECTED_OBJECT_URI:
    Severity: ERROR
    Description: TBA.
  
  RDE_XML_PARSE_ERROR:
    Severity: ERROR
    Description: TBA.
  
  EPP_SERVICE_PORT_UNREACHABLE:
    Severity: ERROR
    Description: The client was unable to successfully connect to the EPP serer.
  EPP_LOGIN_ERROR:
    Severity: ERROR
    Description: |
      The client was unable to successfullt authenticate with the EPP server.
  EPP_GENERIC_COMMAND_ERROR:
    Severity: ERROR
    Description: The client received a 2400 error from the server.
  EPP_SCHEMA_VALIDATION_ERROR:
    Severity: ERROR
    Description: The response from the server failed schema validation.
  
  EPP_DNS_RESOLUTION_ERROR:
    Severity: ERROR
    Description: |
      There was an error while performing a DNS query for the EPP server hostname.
  
  EPP_MISSING_A_RECORDS:
    Severity: ERROR
    Description: No `A` record(s) were found for the EPP server hostname.
  
  EPP_MISSING_AAAA_RECORDS:
    Severity: WARNING
    Description: No `AAAA` record(s) were found for the EPP server hostname.
  
  EPP_SERVICE_PORT_UNREACHABLE:
    Severity: ERROR
    Description: The EPP service port (tcp/700) could not be connected to.
  
  EPP_TLS_CONNECTION_ERROR:
    Severity: ERROR
    Description: |
      There was an error during the TLS handshake while connecting to the EPP
      server.
  
  EPP_TLS_REQUIRED_PROTOCOL_NOT_SUPPORTED:
    Severity: ERROR
    Description: The EPP server does not implement a required protocol.
  
  EPP_TLS_FORBIDDEN_PROTOCOL_SUPPORTED:
    Severity: ERROR
    Description: The EPP server implements a forbidden protocol.
  
  EPP_TLS_UNTRUSTED_CERTIFICATE:
    Severity: ERROR
    Description: |
      The TLS certificate presented by the EPP server is not issued by a trusted
      Certificate Authority.
  
  EPP_TLS_EXPIRED_CERTIFICATE:
    Severity: ERROR
    Description: The TLS certificate presented by the EPP server has expired.
  
  EPP_TLS_CERTIFICATE_CHAIN_MISSING:
    Severity: ERROR
    Description: One or more intermediate certificates are missing.
  
  EPP_TLS_CERTIFICATE_HOSTNAME_MISMATCH:
    Severity: ERROR
    Description: |
      The hostname in the TLS certificate does not match the EPP server hostname.
  
  EPP_TLS_BAD_CIPHER:
    Severity: ERROR
    Description: |
      The server uses an encryption cipher not recommended in RFC 9325.
  
  EPP_NO_GREETING_RECEIVED:
    Severity: ERROR
    Description: No `<greeting>` was received after successful connection.
  
  EPP_GREETING_SVID_INVALID:
    Severity: ERROR
    Description: The value of the `<svID>` element in the `<greeting>` is invalid.
  
  EPP_GREETING_SVDATE_INVALID:
    Severity: ERROR
    Description: |
      The value of the `<svDate>` element in the `<greeting>` is invalid.
  
  EPP_GREETING_VERSION_INVALID:
    Severity: ERROR
    Description: |
      The value of the `<version>` element in the `<greeting>` is invalid.
  
  EPP_GREETING_INVALID_LANG:
    Severity: ERROR
    Description: |
      The value of one or more of the `<lang>` elements in the `<greeting>` are
      invalid.
  
  EPP_GREETING_UNEXPECTED_OBJURI:
    Severity: ERROR
    Description: |
      One or more of the `<objURI>` elements in the `<greeting>` contain invalid
      namespace URIs.
  
  EPP_GREETING_MISSING_OBJURI:
    Severity: ERROR
    Description: A mandatory object namespace URI is missing.
  
  EPP_GREETING_UNEXPECTED_EXTURI:
    Severity: ERROR
    Description: |
      One or more of the `<extRI>` elements in the `<greeting>` contain invalid
      namespace URIs.
  
  EPP_GREETING_MISSING_EXTURI:
    Severity: ERROR
    Description: A mandatory extension namespace URI is missing.
  
  EPP_XML_PARSE_ERROR:
    Severity: ERROR
    Description: The XML response from the server could not be parsed.
  
  EPP_GREETING_RECOMMENDED_EXTENSION_MISSING:
    Severity: WARNING
    Description: |
      The server does not include the namespace URI of a recommended extension
      in an `<extURI>` element of the `<greeting>` frame.
  
  EPP_DOMAIN_CHECK_VALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: |
      The server responded to a `<check>` command with an unexpected value in one
      or more of the `avail` attributes.
  
  EPP_DOMAIN_CHECK_INVALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: |
      The server responded to a `<check>` command with an unexpected value in one
      or more of the `avail` attributes.
  
  EPP_DOMAIN_CHECK_REGISTERED_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: |
      The server responded to a `<check>` command with an unexpected value in one
      or more of the `avail` attributes.
  
  EPP_HOST_CHECK_VALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: |
      The server responded to a `<check>` command with an unexpected value in one
      or more of the `avail` attributes.
  
  EPP_HOST_CHECK_INVALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: |
      The server responded to a `<check>` command with an unexpected value in one
      or more of the `avail` attributes.
  
  EPP_HOST_CHECK_REGISTERED_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: |
      The server responded to a `<check>` command with an unexpected value in one
      or more of the `avail` attributes.
  
  EPP_CONTACT_CHECK_VALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: |
      The server responded to a `<check>` command with an unexpected value in one
      or more of the `avail` attributes.
  
  EPP_CONTACT_CHECK_INVALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: |
      The server responded to a `<check>` command with an unexpected value in one
      or more of the `avail` attributes.
  
  EPP_CONTACT_CHECK_REGISTERED_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: |
      The server responded to a `<check>` command with an unexpected value in one
      or more of the `avail` attributes.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_INFO_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_RESPONSE_NOT_1000_OR_1001:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_OBJECT_STILL_EXISTS:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_VALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_INVALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_REGISTERED_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_VALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_INVALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_REGISTERED_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_VALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_INVALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_REGISTERED_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_INFO_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_RESPONSE_NOT_1000_OR_1001:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_OBJECT_STILL_EXISTS:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_VALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_INVALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_REGISTERED_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_VALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_INVALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_REGISTERED_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_VALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_INVALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_REGISTERED_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_INFO_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_RESPONSE_NOT_1000_OR_1001:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_OBJECT_STILL_EXISTS:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_VALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_INVALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_REGISTERED_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_VALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_INVALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_REGISTERED_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_VALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_INVALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_REGISTERED_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_INFO_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_RESPONSE_NOT_1000_OR_1001:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_OBJECT_STILL_EXISTS:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_VALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_INVALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_REGISTERED_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_VALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_INVALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_REGISTERED_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_VALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_INVALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_REGISTERED_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_INFO_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_RESPONSE_NOT_1000_OR_1001:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_OBJECT_STILL_EXISTS:
    Severity: ERROR
    Description: TBA.
  
  EPP_UNEXPECTED_COMMAND_SUCCESS:
    Severity: ERROR
    Description: TBA
  
  EPP_UNEXPECTED_COMMAND_FAILURE:
    Severity: ERROR
    Description: TBA
  
  EPP_OBJECT_SHOULD_EXIST:
    Severity: ERROR
    Description: TBA
  
  EPP_OBJECT_SHOULD_NOT_EXIST:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_CREATE_SERVER_ACCEPTS_INVALID_HOSTNAME:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_CREATE_SERVER_ACCEPTS_INVALID_IPV4_ADDRESS:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_CREATE_SERVER_ACCEPTS_INVALID_IPv6_ADDRESS:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_CREATE_SERVER_ACCEPTS_INVALID_STATUS_CODE:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_CREATE_INFO_RESPONSE_OBJECT_DOES_NOT_EXIST:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_CREATE_INFO_RESPONSE_MISSING_OBJECT_PROPERTIES:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_UPDATE_AUTHZ_ERROR:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_UPDATE_SERVER_ACCEPTS_INVALID_HOSTNAME:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_UPDATE_SERVER_ACCEPTS_INVALID_IPV4_ADDRESS:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_UPDATE_SERVER_ACCEPTS_INVALID_IPv6_ADDRESS:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_UPDATE_SERVER_ACCEPTS_INVALID_STATUS_CODE:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_UPDATE_INFO_RESPONSE_OBJECT_DOES_NOT_EXIST:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_UPDATE_INFO_RESPONSE_MISSING_OBJECT_PROPERTIES:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_SERVER_ACCEPTS_INVALID_DOMAIN_NAME:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_SERVER_ACCEPTS_INVALID_PERIOD:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_SERVER_ACCEPTS_INVALID_HOST_ATTRIBUTES:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_SERVER_ACCEPTS_HOST_ATTRIBUTES_WITHOUT_GLUE:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_SERVER_ACCEPTS_INVALID_HOST_ATTRIBUTE:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_SERVER_ACCEPTS_INVALID_DNSSEC_DATA:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_SERVER_ACCEPTS_NON_EXISTENT_CONTACT_OBJECT:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_SERVER_ACCEPTS_NON_EXISTENT_HOST_OBJECT:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_SERVER_ACCEPTS_REGISTRANT_FOR_THIN_REGISTRY:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_SERVER_ACCEPTS_NO_REGISTRANT_FOR_THICK_REGISTRY:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_SERVER_ACCEPTS_HOST_ATTRIBUTES:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_SERVER_ACCEPTS_HOST_OBJECTS:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_SERVER_ACCEPTS_AUTHINFO:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_INFO_RESPONSE_INVALID_ROID:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_CREATE_INFO_RESPONSE_MISSING_OBJECT_PROPERTIES:
    Severity: ERROR
    Description: TBA
  
  EPP_INTEGRITY_SERVER_ACCEPTS_DELETE_FOR_LINKED_CONTACT_OBJECT:
    Severity: ERROR
    Description: TBA
  
  EPP_INTEGRITY_SERVER_ACCEPTS_DELETE_FOR_LINKED_HOST_OBJECT:
    Severity: ERROR
    Description: TBA
  
  EPP_RENEW_SERVER_ACCEPTS_INVALID_PERIOD:
    Severity: ERROR
    Description: TBA
  
  EPP_RENEW_SERVER_ACCEPTS_INVALID_CURRENT_EXPIRY_DATE:
    Severity: ERROR
    Description: TBA
  
  EPP_RENEW_INFO_RESPONSE_UNEXPECTED_EXPIRY_DATE:
    Severity: ERROR
    Description: TBA
  
  EPP_RENEW_INFO_RESPONSE_MISSING_OR_INVALID_RGP_STATUS:
    Severity: ERROR
    Description: TBA
  
  EPP_TRANSFER_SERVER_ACCEPTS_INSECURE_AUTHINFO:
    Severity: ERROR
    Description: TBA
  
  EPP_TRANSFER_SERVER_ACCEPTS_INCORRECT_AUTHINFO:
    Severity: ERROR
    Description: TBA
  
  EPP_TRANSFER_SERVER_ACCEPTS_INVALID_PERIOD:
    Severity: ERROR
    Description: TBA
  
  EPP_TRANSFER_INFO_RESPONSE_MISSING_OR_INVALID_STATUS_CODE:
    Severity: ERROR
    Description: TBA
  
  EPP_TRANSFER_LOSING_REGISTRAR_NO_MESSAGE_RECEIVED:
    Severity: ERROR
    Description: TBA
  
  EPP_TRANSFER_GAINING_REGISTRAR_NO_MESSAGE_RECEIVED:
    Severity: ERROR
    Description: TBA
  
  EPP_TRANSFER_INFO_RESPONSE_UNEXPECTED_EXPIRY_DATE:
    Severity: ERROR
    Description: TBA
  
  EPP_TRANSFER_INFO_RESPONSE_MISSING_OR_INVALID_RGP_STATUS:
    Severity: ERROR
    Description: TBA
  
  EPP_TRANSFER_INFO_RESPONSE_AUTHINFO_NOT_RESET:
    Severity: ERROR
    Description: TBA
  
  EPP_TRANSFER_SERVER_PROCESSED_REJECTED_TRANSFER:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_DELETE_INFO_RESPONSE_OBJECT_STILL_EXISTS:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_DELETE_INFO_RESPONSE_OBJECT_NOT_PENDING_DELETE:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_DELETE_INFO_RESPONSE_RGP_STATUS_NOT_PENDING_DELETE:
    Severity: ERROR
    Description: TBA
  
  EPP_RESTORE_DOMAIN_STILL_PENDINGDELETE:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_RENAME_SERVER_ACCEPTS_INVALID_HOSTNAME:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_RENAME_SERVER_REJECTS_OUT_OF_BAILIWICK_NAME:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_RENAME_SERVER_ACCEPTS_RENAME_TO_NONEXISTENT_DOMAIN:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_RENAME_SERVER_ACCEPTS_RENAME_TO_ANOTHER_REGISTRARS_DOMAIN:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_RENAME_SERVER_UNEXPECTEDLY_REJECTS_RENAME:
    Severity: ERROR
    Description: TBA
  
  EPP_DOMAIN_DELETE_INFO_RESPONSE_OBJECT_STILL_EXISTS:
    Severity: ERROR
    Description: TBA
  
  EPP_HOST_DELETE_INFO_RESPONSE_OBJECT_STILL_EXISTS:
    Severity: ERROR
    Description: TBA
  
  EPP_GREETING_DOES_NOT_MATCH:
    Severity: ERROR
    Description: TBA
  RPMS_MISSING_CLAIMS_KEY:
    Severity: ERROR
    Description: TBA.
  
  RPMS_SUNRISE_CREATE_INFO_OBJECT_DOES_NOT_EXIST:
    Severity: ERROR
    Description: TBA.
  
  RPMS_SUNRISE_CREATE_INFO_OBJECT_IS_HAS_MISSING_OR_INVALID_PROPERTIES:
    Severity: ERROR
    Description: TBA.
  
  RPMS_SUNRISE_CREATE_UNEXPECTED_FAILURE_USING_VALID_SMD:
    Severity: ERROR
    Description: TBA.
  
  RPMS_SUNRISE_CREATE_UNEXPECTED_SUCCESS_USING_INVALID_SMD:
    Severity: ERROR
    Description: TBA.
  
  RPMS_SUNRISE_CREATE_UNEXPECTED_SUCCESS_USING_REVOKED_SMD:
    Severity: ERROR
    Description: TBA.
  
  RPMS_SUNRISE_CREATE_UNEXPECTED_SUCCESS_USING_SMD_WITH_REVOKED_SIGNATURE:
    Severity: ERROR
    Description: TBA.
  
  RPMS_TRADEMARK_CREATE_INFO_OBJECT_DOES_NOT_EXIST:
    Severity: ERROR
    Description: TBA.
  
  RPMS_TRADEMARK_CREATE_INFO_OBJECT_IS_HAS_MISSING_OR_INVALID_PROPERTIES:
    Severity: ERROR
    Description: TBA.
  
  RPMS_TRADEMARK_CREATE_UNEXPECTED_FAILURE_USING_VALID_CLAIM_KEY:
    Severity: ERROR
    Description: TBA.
  
  RPMS_TRADEMARK_CREATE_UNEXPECTED_SUCCESS_USING_INVALID_ACCEPTANCE_DATE:
    Severity: ERROR
    Description: TBA.
  
  RPMS_TRADEMARK_CREATE_UNEXPECTED_SUCCESS_USING_INVALID_CLAIM_KEY:
    Severity: ERROR
    Description: TBA.
  
  RPMS_UNEXPECTED_CLAIMS_KEY:
    Severity: ERROR
    Description: TBA.
  SRSGW_CONTACT_CREATE_FAILED:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_CONTACT_CREATE_OBJECT_HAS_MISSING_OR_INVALID_PROPERTIES:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_CONTACT_CREATE_OBJECT_NOT_FOUND_WITHIN_DEADLINE:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_CREATE_FAILED:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_CREATE_OBJECT_HAS_MISSING_OR_INVALID_PROPERTIES:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_CREATE_OBJECT_NOT_FOUND_WITHIN_DEADLINE:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_DELETE_DOMAIN_NOT_PENDINGDELETE:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_DELETE_FAILED:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_DELETE_RGP_STATUS_NOT_PENDINGDELETERESTORABLE:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_RENEW_FAILED:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_RENEW_OBJECT_HAS_INVALID_EXDATE:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_RENEW_OBJECT_NOT_UPDATED_WITHIN_DEADLINE:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_TRANSFER_APPROVAL_FAILED:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_TRANSFER_APPROVAL_OBJECT_HAS_INCORRECT_CLID:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_TRANSFER_APPROVAL_OBJECT_NOT_UPDATED_WITHIN_DEADLINE:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_TRANSFER_APPROVAL_OBJECT_STILL_PENDING_TRANSFER:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_TRANSFER_REQUEST_FAILED:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_TRANSFER_REQUEST_OBJECT_HAS_INCORRECT_CLID:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_TRANSFER_REQUEST_OBJECT_NOT_PENDING_TRANSFER:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_DOMAIN_TRANSFER_REQUEST_OBJECT_NOT_UPDATED_WITHIN_DEADLINE:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_EPP_DNS_RESOLUTION_ERROR:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_EPP_GENERIC_COMMAND_ERROR:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_EPP_LOGIN_ERROR:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_EPP_OBJECT_SHOULD_EXIST:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_EPP_OBJECT_SHOULD_NOT_EXIST:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_EPP_SCHEMA_VALIDATION_ERROR:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_EPP_SERVICE_PORT_UNREACHABLE:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_EPP_TLS_CONNECTION_ERROR:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_EPP_UNEXPECTED_COMMAND_FAILURE:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_EPP_UNEXPECTED_COMMAND_SUCCESS:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_EPP_XML_PARSE_ERROR:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_HOST_CREATE_FAILED:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_HOST_CREATE_OBJECT_HAS_MISSING_OR_INVALID_PROPERTIES:
    Severity: ERROR
    Description: TBA.
  
  SRSGW_HOST_CREATE_OBJECT_NOT_FOUND_WITHIN_DEADLINE:
    Severity: ERROR
    Description: TBA.
  IDN_SERVER_ACCEPTS_INVALID_LABEL:
    Severity: ERROR
    Description: TBA.
  
  IDN_SERVER_REJECTS_VALID_LABEL:
    Severity: ERROR
    Description: TBA.
  
  IDN_VARIANT_LABEL_NOT_BLOCKED:
    Severity: ERROR
    Description: TBA.
  
  IDN_VARIANT_SERVER_ACCEPTS_VARIANT_CREATE_FROM_INCORRECT_REGISTRAR:
    Severity: ERROR
    Description: TBA.
  
  IDN_VARIANT_SERVER_ACCEPTS_VARIANT_CREATE_WITH_INCORRECT_REGISTRANT:
    Severity: ERROR
    Description: TBA.
  INTEGRATION_DNS_ANSWER_IS_INCORRECT:
    Severity: ERROR
    Description: TBA.
  
  INTEGRATION_DNS_QUERY_FAILED:
    Severity: ERROR
    Description: TBA.
  
  INTEGRATION_DOMAIN_NOT_PRESENT_IN_DNS:
    Severity: ERROR
    Description: TBA.
  
  INTEGRATION_DOMAIN_NOT_PRESENT_IN_RDAP:
    Severity: ERROR
    Description: TBA.
  
  INTEGRATION_RDAP_REQUEST_FAILED:
    Severity: ERROR
    Description: TBA.
  
  INTEGRATION_RDE_DEADLINE_MISSED:
    Severity: ERROR
    Description: TBA.
  
  INTEGRATION_RDE_MISSING_OBJECTS:
    Severity: ERROR
    Description: TBA.
  
  INTEGRATION_RDE_SFTP_SERVER_AUTHENTICATION_ERROR:
    Severity: ERROR
    Description: TBA.
  
  INTEGRATION_RDE_SFTP_SERVER_UNREACHABLE:
    Severity: ERROR
    Description: TBA.
