---
RST-Test-Plan-Schema-Version: 1.6.0
Version: 3.0.200
Last-Updated: 2024-01-04
Contact:
  Name: GDS Technical Services
  Organization: Internet Corporation for Assigned Names and Numbers (ICANN)
  Email: rst@icann.org

Preamble: |
  This file describes each test [plan](#test-plans), [suite](#test-suites) and
  [case](#test-cases) in the RST system, as well as the
  [input parameters](#input-parameters) required for each, relevant
  [resources](#resources), any inter-case dependencies, and the
  [errors](#errors) that might occur during testing.
  
  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
  "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in [RFC
  2119](https://www.rfc-editor.org/rfc/rfc2119.html) when, and only when, they
  appear in all capitals, as shown here.
  
  # 2.1. Test plans
  
  An individual *Test Plan* addresses a particular scenario (for example, RSP
  evaluation or Pre-Delegation Testing). Each plan consists of one or more *test
  suites*, which in turn include one or more *test cases*.
  
  ## 2.1.1. Test plan types
  
  There are two types of test plan described in this document:
  
  * **Business as usual** plans, which are used as part of the lifecycle of a
  gTLD (Pre-Delegion Test, RSP/DNS RSP change Test, IDN Test, SRS Gateway
  Test)
  * **RSP evaluation** plans, which are used as part of the RSP evaluation
  program.
  
  # 2.2. Test suites
  
  A *Test Suite* is a collection of *test cases* with a common theme or subject
  matter, for example, Authoritative DNS or Registry Data Escrow.
  
  # 2.3. Test cases
  
  A *Test Case* describes a process for determining the conformance or
  acceptability of a certain element of the system.
  
  A test case consists of a *test procedure* which accepts zero or more **input
  parameters**, and generates one or more **test results**.
  
  ## 2.3.1. Input parameters
  
  All test cases require some information about the subject of the test, for
  example, service hostnames, credentials, and functional parameters. These
  *input parameters* may be shared across multiple test cases.
  
  ## 2.3.2. Test environments
  
  Each test plan indicates whether the test is to be carried out in the
  production environment, or whether a test, staging or OT&E environment may be
  used. In general, test plans which are designed for "business as usual" use
  during the lifecycle of a TLD **MUST** be carried out in the production
  registry infrastructure, while RSP evaluation tests **MAY** be carried out in
  test, staging or OT&E environments.
  
  ## 2.3.3. Test results
  
  Test cases will generate one or more *test results*. Test results indicate the
  outcome of the test and other relevant information.
  
  ## 2.3.4. General pass/fail criteria
  
  In general, for a test to pass, **all** the test cases specified in the test
  suite(s) for the test plan **MUST** pass: if *any* fail, then the test as a
  whole will fail.
  
  A test case will fail if it produces one or more [errors](#errors) with the
  `ERROR` or `CRITICAL` severities.
  
  ## 2.3.5. Error severity levels
  
  1. `INFO` - an informational message.
  1. `NOTICE` - a normal but significant condition.
  2. `WARNING` - an issue which does not prevent the test from *passing*, but
   which may benefit from further investigation.
  1. `ERROR` - an issue which prevents the test from *passing*, but does not
   prevent the test from *continuing*. A test may produce multiple `ERROR`
   results.
  2. `CRITICAL` - an issue which prevents the test from continuing any
   further. A test will only produce a single `CRITICAL` result and it
   will always be the last result in the log.
  
  ## 2.3.6. Common errors
  
  For each test case, various errors and critical errors are defined which will
  be used to signal why that the case might have failed.
  
  In addition to these, there are a number of errors which any test case may
  produce, which are:
  
  * [TBA]
  
  # 2.4. Key acronyms and terms
  
  RST
  : Registry System Testing. This system.
  
  PDT
  : Pre-Delegation Test. A test carried out prior to the delegation of a new TLD
  into the DNS root zone.
  
  RSP
  : Registry Service Provider. A specialist provider of critical registry
  services.
  
  DNS
  : Domain Name System. The internet's system of globally unique identifiers.
  
  TLD
  : Top-level domain. The highest level of the DNS namespace hierarchy.
  
  gTLD
  : generic top-level domain.
  
  DNSSEC
  : DNS Security Extensions. DNSSEC is described in [BCP
  237](https://www.rfc-editor.org/info/bcp237).
  
  EPP
  : Extensible Provisioning Protocol. The protocol used by registrars to create
  and manage domain name registrations in an SRS. EPP is defined in [STD
  69](https://www.rfc-editor.org/info/std69).
  
  SRS
  : Shared Registry System. A TLD registry in which registrations are managed
  by one or more registrars, using EPP.
  
  RDDS
  : Registration Data Directory Services. A service to provide access to
  data about domain registrations to third parties.
  
  RDAP
  : Registration Data Access Protocol. The protocol used to deliver the RDDS.
  RDAP is defined in [STD 95](https://www.rfc-editor.org/info/std95).
  
  RDE
  : Registry Data Escrow. A system whereby the registration data stored in a
  Shared Registry System is backed up to a trusted third party. RDE is defined
  in [RFC 8909](https://www.rfc-editor.org/info/rfc8909) and [RFC
  9022](https://www.rfc-editor.org/info/rfc9022).
  
  IDN
  : Internationalized Domain Name. A domain name that contains characters not in
  the ASCII character set. The technical specification for IDNs may be found in
  [RFC 5890](https://www.rfc-editor.org/info/rfc5890). All gTLDs must comply
  with ICANN's [IDN
  Guidelines](https://www.icann.org/resources/pages/implementation-guidelines-2012-02-25-en).
  
  LGR
  : Label Generation Ruleset. The rules by which IDNs are validated. LGRs are
  described in [RFC 7940](https://www.rfc-editor.org/info/rfc7940).
  
  RO
  : Registry Operator. The entity to which ICANN has granted the right to
  operate a gTLD.
  
  RA
  : Registry Agreement. The contract between a Registry Operator and ICANN. The
  base Registry Agreement may be reviewed at
  <https://www.icann.org/en/registry-agreements/base-agreement>.
  
  KSK
  : Key Signing Key. A cryptographic key which acts as the Secure Entry Point
  for a DNS zone, and which signs a DNS zone's ZSKs. A digest of this key is
  published in the parent zone (ie. the root zone for a TLD).
  
  ZSK
  : Zone Signing Key. A cryptographic key which signs a DNS zone's resource
  records.
  
  CSK
  : Combined Signing Key. A cryptographic key used as **both** a KSK and a ZSK.
  
  RPMs
  : Rights Protection Mechanisms, intended to discourage or prevent registration
  of domain names that violate or abuse another partyâ€™s legal rights. These
  **MUST** include (but are not limited to): (1) Sunrise Periods, and (2)
  Trademark Claims Periods (see [Specification 7 of the Registry
  Agreement](https://itp.cdn.icann.org/en/files/registry-agreements/base-registry-agreement-30-04-2023-en.html#specification7)).
  
  TMCH
  : Trademark Clearinghouse. The system established by ICANN to maintain a
  database of validated and registered trademarks which is used to enforce
  Rights Protection Mechanisms (RPMs) in gTLDs. The functional specifications of
  the TMCH are defined in [RFC 9361](https://www.rfc-editor.org/info/rfc9361).
  
  SLA
  : Service Level Agreement. The registry performance specifications laid out in
  [Specification 10 of the Registry
  Agreement](https://itp.cdn.icann.org/en/files/registry-agreements/base-registry-agreement-30-04-2023-en.html#specification10).
  
  RRI
  : Registration Reporting Interfaces. The interfaces provided by ICANN to
  contracted parties including Registry Operators to fulfill and monitor their
  applicable reporting requirements, including per-registrar transaction
  reports; registry functions activity reports; data escrow deposits reports and
  data escrow deposits notifications. For registry operators, the relevant
  interfaces are defined in [draft-lozano-icann-registry-interfaces](https://datatracker.ietf.org/doc/html/draft-lozano-icann-registry-interfaces).

Test-Plans:
  StandardPreDelegationTest:
    Order: 1
    Name: Pre-Delegation Test
    Description: |
      The purpose of the Pre-Delegation Test is to verify that the applicant has
      met its commitment to establish registry operations in accordance with the
      technical and operational criteria described in the gTLD Applicant
      Guidebook (AGB). Each applicant will be required to complete PDT as a
      prerequisite to delegation into the root zone.
  
      The Pre-Delegation Test covers all critical registry services and IDNs,
      and therefore uses all test suites.
  
      **Note on test environment:** this is a "business as usual" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardDNS
      - StandardDNSSEC
      - StandardEPP
      - StandardRDAP
      - StandardIDN
      - StandardRDE
      - StandardIntegrationTest
  
  StandardRSPChangeTest:
    Order: 2
    Name: RSP Change Test
    Description: |
      A Registry Operator may apply to ICANN to change a Material Subcontracting
      Arrangement (MSA) and appoint a new Registry Services Provider. Before
      this change can be approved, the new RSP **MUST** complete Registry System
      Testing to ensure their systems comply with the technical and operational
      requirements of the Registry Agreement.
  
      The RSP Change Test covers all critical registry services and IDNs, and
      therefore uses all test suites.
  
      **Note on test environment:** this is a "business as usual" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardDNS
      - StandardDNSSEC
      - StandardEPP
      - StandardIDN
      - StandardRDAP
      - StandardRDE
      - StandardIntegrationTest
  
  DNSRSPChangeTest:
    Order: 3
    Name: DNS RSP Change Test
    Description: |
      A Registry Operator may apply to ICANN to change a Material Subcontracting
      Arrangement (MSA) and appoint a new provider of authoritative DNS services
      instead of or in addition to any existing provider(s).
  
      Before this change can be approved, the new DNS provider **MUST** complete
      testing to ensure their systems comply with the technical and operational
      requirements of the Registry Agreement.
  
      The DNS RSP Change Test uses the DNS test suite only.
  
      **Note on test environment:** this is a "business as usual" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardDNS
      - StandardDNSSEC
  
  StandardIDNTest:
    Order: 4
    Name: Standard IDN Test
    Description: |
      A Registry Operator may apply to ICANN to amend its Registry Agreement
      to offer new scripts and/or languages for Internationalized Domain Names.
  
      The purpose of an IDN RST test is to verify that the Registry Operatorâ€™s
      registry system handles IDN registrations in accordance with the
      submitted policy statements and IDN tables.
  
      The IDN Test uses the IDN test suite only.
  
      **Note on test environment:** this is a "business as usual" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardIDN
  
  RSPEvaluationIDNTest:
    Order: 5
    Name: IDN Test (RSP Evaluation)
    Description: |
      This test plan is identical to the Standard IDN Test, but is intended
      solely for use by the RSP evaluation program.
  
      **Note on test environment:** this is a "business as usual" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardIDN
  
  SRSGatewayTest:
    Order: 6
    Name: SRS Gateway Test
    Description: |
      An SRS Gateway service is a Shared Registry System implementation that
      acts as a proxy between a subset of Registrars and the Registry. It uses
      a local cache to speed up EPP query commands, but forwards all EPP
      transform commands to the primary registry system. TLD registries need to
      deploy a proxy setup in order to operate in certain markets worldwide.
  
      The purpose of an SRS Gateway Test is to verify that the Registry
      Operatorâ€™s proxy setup operates in accordance with the technical and
      operational criteria for EPP systems described in the gTLD Applicant
      Guidebook (AGB). Furthermore, it **MUST** keep its own database
      synchronized with that of the TLD registry.
  
      The SRS Gateway Test Change Test uses the SRS gateway test suite only.
  
      **Note on test environment:** this is a "business as usual" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardSRSGateway
      - SRSGatewayIntegrationTest
  
  MainRSPEvaluationTest:
    Order: 7
    Name: Main RSP Evaluation Test
    Description: |
      The Main RSP is responsible for the creation and maintenance of domain
      name registrations in a Shared Registration System (SRS). This encompasses
      the lifecycle of a domain name registration using domain registrars and
      protocols such as the Extensible Provisioning Protocol (EPP) and adherence
      to policies regarding the use and transparency domain name registrations
      through reporting, the Registration Data Access Protocol (RDAP), and other
      mechanisms.
  
      **Note on test environment:** this test is designed to be used as part of the RSP evaluation program. Therefore, input parameters **MAY** be provided the relate to a test, staging or OT&E environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardEPP
      - MinimumRPMs
      - StandardRDAP
      - StandardRDE
  
  DNSRSPEvaluationTest:
    Order: 8
    Name: DNS RSP Evaluation Test
    Description: |
      DNS RSPs provide primary or secondary authoritative DNS services.
      Therefore, this test plan only covers the DNS area.
  
      RSPs wishing to offer DNSSEC services in addition to authoritative DNS
      will also be evaluated using the DNSSEC RSP Evaluation Test below.
  
      **Note on test environment:** this test is designed to be used as part of the RSP evaluation program. Therefore, input parameters **MAY** be provided the relate to a test, staging or OT&E environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardDNS
  
  DNSSECRSPEvaluationTest:
    Order: 9
    Name: DNSSEC RSP Evaluation Test
    Description: |
      DNSSEC RSPs provide signing of TLD zone files as a service. They do not
      provide primary or secondary authoritative DNS services.
  
      RSPs wishing to offer DNSSEC services in addition to authoritative DNS
      will also be evaluated using the DNSSEC RSP Evaluation Test below.
  
      **Note on test environment:** this test is designed to be used as part of the RSP evaluation program. Therefore, input parameters **MAY** be provided the relate to a test, staging or OT&E environment.
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardDNSSEC
      - DNSSECOperations
  
  SRSGatewayRSPTest:
    Order: 10
    Name: SRS Gateway RSP Evaluation Test
    Description: |
      SRS Gateway RSPs provide a proxy between a subset of Registrars and the
      Registry. It uses a local cache to speed up EPP query commands, but
      forwards all EPP transform commands to the primary registry system. TLD
      registries need to deploy a proxy setup in order to operate in certain
      markets worldwide.
  
      The [SRS Gateway test suite](#Test-Suite-StandardSRSGateway) requires
      access to a primary registry system that is logically independent of the
      SRS Gateway system, and details of the primary registry system are
      required as input parameters. RSPs wishing to offer SRS gateway services
      **MUST** identify such a primary registry system, which **MUST** be
      independent of the SRS gateway system, and MAY be operated by a third
      party.
  
      **Note on test environment:** this test is designed to be used as part of the RSP evaluation program. Therefore, input parameters **MAY** be provided the relate to a test, staging or OT&E environment.
  
      # Pass/fail criteria
  
      As with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.
    Test-Suites:
      - StandardSRSGateway

Test-Suites:
  StandardDNS:
    Order: 1
    Name: Authoritative DNS Service
    Description: |
      The DNS test suite validates the authoritative DNS services for the TLD
      or RSP.
  
      The DNS test suite is derived from the test plans in version
      **v2023.1.4
        ** of [Zonemaster](https://github.com/zonemaster). Test
      case IDs from this document can be mapped to the Zonemaster test IDs by
      removing the `dns-` prefix.
  
      Since Zonemaster is designed to perform testing of domain names anywhere in the DNS hierarchy, not all Zonemaster tests are applicable for TLDs and may not be listed in the test suites in this document.
  
      # Testing of Anycast networks using multiple vantage points
  
      In order to test anycast networks without requiring RSPs to provide the
      unicast adresses of their nodes, tests carried out over the network will
      be performed from multiple vantage points. All vantage points **MUST**
      receive the same response in order for the tests to pass.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
  
      Unless stated otherwise, the pass/fail criteria for the test cases in this suite are the same as those defined in the Zonemaster documentation: that is, if Zonemaster reports that a test case has an `ERROR` or `CRITICAL` result, then the corresponding test case in this suite will fail. `INFO`, `NOTICE` and `WARNING` results will not result in a failed test case. Error codes in this suite are prefixed with `ZM_` which map onto the message tags used by Zonemaster.
    Test-Cases: ^dns-
    Input-Parameters:
      - dns.nameservers
    Resources:
  
  StandardDNSSEC:
    Order: 2
    Name: DNS Security Extensions (DNSSEC)
    Description: |
      The DNSSEC test suite validates the DNSSEC signing service for the TLD or
      RSP.
  
      The DNSSEC test suite is derived from the test plans in version
      **v2023.1.4
        ** of [Zonemaster](https://github.com/zonemaster). Test
      case IDs from this document can be mapped to the Zonemaster test IDs by
      removing the hyphen-minus.
  
      Since Zonemaster is designed to perform testing of domain names anywhere in the DNS hierarchy, not all Zonemaster tests are applicable for TLDs and may not be listed in the test suites in this document.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
  
      Unless stated otherwise, the pass/fail criteria for the test cases in this suite are the same as those defined in the Zonemaster documentation: that is, if Zonemaster reports that a test case has an `ERROR` or `CRITICAL` result, then the corresponding test case in this suite will fail. `INFO`, `NOTICE` and `WARNING` results will not result in a failed test case. Error codes in this suite are prefixed with `ZM_` which map onto the message tags used by Zonemaster.
    Test-Cases: ^dnssec-
    Input-Parameters:
      - dns.nameservers
      - dnssec.dsRecords
    Resources:
  
  StandardRDAP:
    Order: 3
    Name: Registration Data Access Protocol (RDAP)
    Description: |
      The RDAP test suite validates the RDAP service of the TLD or RSP.
  
      The RDAP test suite is derived from the test specification of the [RDAP
      Conformance Tool](https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf).
      As with the DNS and DNSSEC tests, the test IDs can be mapped to the test
      IDs in this document by removing the `rdap-NN-` prefix.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^rdap-
    Input-Parameters:
      - rdap.baseURLs
      - rdap.testDomains
      - rdap.testEntities
      - rdap.testNameservers
    Resources:
  
  StandardEPP:
    Order: 4
    Name: Extensible Provisioning Protocol (EPP)
    Description: |
      The EPP test suite validates the EPP service of the TLD or RSP. It
      verifies that the EPP server properly implements the query and transform
      commands specified for domain names (and optionally host and contact
      objects) and the mandatory extensions.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^epp-
    Input-Parameters:
      - general.gracePeriodsSupported
      - general.minimalPublicDataSet
      - epp.clid01
      - epp.pwd01
      - epp.serverIssuedClientCertificate01
      - epp.clid02
      - epp.pwd02
      - epp.serverIssuedClientCertificate02
      - epp.hostModel
      - epp.hostName
      - epp.registeredNames
    Resources:
      - epp.clientACL
      - epp.clientCSR
      - epp.clientCertificate
    Errors:
      - EPP_DNS_RESOLUTION_ERROR
      - EPP_SERVICE_PORT_UNREACHABLE
      - EPP_TLS_CONNECTION_ERROR
      - EPP_LOGIN_ERROR
      - EPP_XML_PARSE_ERROR
      - EPP_GENERIC_COMMAND_ERROR
      - EPP_SCHEMA_VALIDATION_ERROR
  
  StandardRDE:
    Order: 5
    Name: Registry Data Escrow (RDE)
    Description: |
      The RDE test suite validates Registry Data Escrow deposits generated for
      the TLD or RSP. These deposits **MUST** comply with the specifications in
      the Registry Agreement and with RFC 8909 and RFC 9022.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^rde-
    Input-Parameters:
      - rde.depositFile
  
  StandardIDN:
    Order: 6
    Name: Internationalized Domain Names (IDN)
    Description: |
      The RDE test suite validates the IDN table(s) for a TLD or RSP, including
      compliance with specifications for variant labels at the top- or second-
      level, and conformance with the IDN Guidelines.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^idn-
    Input-Parameters:
      - epp.hostName
      - epp.clid01
      - epp.pwd01
      - epp.serverIssuedClientCertificate01
      - epp.serverIssuedClientCertificate02
      - epp.clid02
      - epp.pwd02
    Resources:
      - epp.clientACL
      - epp.clientCSR
      - epp.clientCertificate
  
  StandardSRSGateway:
    Order: 7
    Name: SRS Gateway
    Description: |
      The SRS Gateway test suite validates the conformance of the Gateway
      registry infrastructure of a TLD or RSP, and the synchronisation between
      primary and gateway systems.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^srsgw-
    Input-Parameters:
      - epp.hostName
      - epp.clid01
      - epp.pwd01
      - epp.serverIssuedClientCertificate01
      - epp.clid02
      - epp.pwd02
      - epp.serverIssuedClientCertificate02
      - srsgw.eppHostName
      - srsgw.serverIssuedClientCertificate01
      - srsgw.eppClid01
      - srsgw.eppPwd01
      - srsgw.eppClid02
      - srsgw.eppPwd02
      - srsgw.serverIssuedClientCertificate02
      - srsgw.rdapBaseURLs
      - rdap.baseURLs
    Resources:
      - epp.clientACL
      - epp.clientCSR
      - epp.clientCertificate
  
  DNSSECOperations:
    Order: 8
    Name: DNSSEC Operations
    Description: |
      This test suite verifies the ability of an RSP to carry out standard
      DNSSEC operational procedures while maintaining a chain of trust to the
      parent zone.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^dnssecOps
    Resources:
  
  MinimumRPMs:
    Order: 9
    Name: Minimum Rights Protection Mechanisms (RPMs)
    Description: |
      This test suite verifies an RSP's support for the minimum Rights
      Protection Mechanisms (RPMs), and the Launch Extension (RFC 8334).
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^minimumRPMs-
    Input-Parameters:
      - epp.hostName
      - epp.serverIssuedClientCertificate01
      - epp.clid01
      - epp.pwd01
      - epp.clid02
      - epp.pwd02
      - epp.serverIssuedClientCertificate02
      - minimumRPMS.sunriseModels
      - minimumRPMS.sunriseTLD
      - minimumRPMS.claimsTLD
  
  StandardIntegrationTest:
    Order: 10
    Name: Standard Integration Test
    Description: |
      This test suite verifies that the critical registry services of the TLD
      are properly integrated and functioning within the requirements of the
      Service Level Agreement.
  
      # Pass/fail criteria
  
      As with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.
    Test-Cases: ^integration-
    Resources:

Resources:
  rde.encryptionKey:
    Description: |
      RDE deposit files **MUST** be encrypted using OpenPGP (RFC 4880). The PGP
      key that **MUST** be used to encrypt the escrow deposit file may be found
      at this URL.
    URL: https://rst.icann.org/v2/resources/rde.encryptionKey.asc
  epp.clientCertificate:
    Description: |
      RFC 5734 requires servers to perform authentication of clients by means of
      a client certificate. Operators **MUST** configure their systems to permit
      the test client to connect using the certificate found at this URL.
    URL: https://rst.icann.org/v2/resources/epp.clientCertificate.pem
  epp.clientCSR:
    Description: |
      For servers that operate a private CA, this CSR may be used to issue a
      client certificate. This certificate must then be provided in the
      `epp.clientCertificate` input parameter.
  epp.clientACL:
    Description: |
      A list of IPv4 and IPv6 address(es) from which client connections to the
      operator's EPP server will be made. The list is a plain text file with
      each IP address on a separate line.
    URL: https://rst.icann.org/v2/resources/epp.clientACL.txt
  integration.rdeSFTPPublicKey:
    Description: |
      The SSH public key that will be used to authenticate connections to the
      operator's SFTP server.
    URL: https://rst.icann.org/v2/resources/integration.rdeSFTPPublicKey.pem
  integration.rdeSFTPACL:
    Description: |
      A list of IPv4 and IPv6 address(es) from which client connections to the
      operator's SFTP server will be made. The list is a plain text file with
      each IP address on a separate line.
    URL: https://rst.icann.org/v2/resources/integration.rdeSFTPACL.txt
  epp.tlsCertificateStore:
    Description: |
      A PEM-formatted file containing the CA certificates trusted by Mozilla.
      For more information, see <https://curl.se/docs/caextract.html>.
  
      EPP servers **MUST** use a certificate that has a chain of trust to one of
      the CAs present in this file.
    URL: https://rst.icann.org/v2/resources/epp.tlsCertificateStore.pem

Test-Cases:
  dns-address01:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Address-TP/address01.md>.
  
      # Objective
  
      In order for the domain and its resources to be accessible,
      authoritative name servers must have addresses in the routable public
      addressing space.
  
      IANA is responsible for global coordination of the IP addressing system.
      Aside its address allocation activities, it maintains reserved address
      ranges for special uses. These ranges can be categorized into three
      types : [Special purpose IPv4
      addresses](https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xml),
      [Special purpose IPv6
      addresses](https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xml)
      and [Multicast reserved
      addresses](https://www.iana.org/assignments/multicast-addresses/multicast-addresses.xml).
  
      # Pass/fail criteria
  
      If one name server has one of its addresses matches a forbidden address
      block, the test fails. If all the name server addresses are outside
      these forbidden blocks, the test case succeeds.
    Errors:
    - ZM_DNS_ADDRESS01_FAILED
    Maturity: BETA
    Summary: Name server address must be globally routable

  dns-address02:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Address-TP/address02.md>.
  
      # Objective
  
      Some anti-spam techniques use reverse DNS lookup to allow incoming
      traffic. In order to prevent name servers to be blocked or blacklisted,
      DNS administrators should publish PTR records associated to name server
      addresses.
  
      \[technical reference to be found\]
  
      # Pass/fail criteria
  
      If the test case succeeds, its result is a list of addresses with
      corresponding hostnames which are the result of the PTR queries
      performed. The result could be represented as a hash table where the
      keys are the IP addresses and the values their corresponding hostnames.
    Errors:
    - ZM_DNS_ADDRESS02_FAILED
    Maturity: BETA
    Summary: Reverse DNS entry exists for name server IP address

  dns-address03:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Address-TP/address03.md>.
  
      # Objective
  
      Some anti-spam techniques use reverse DNS lookup to allow incoming
      traffic. In order to prevent name servers to be blocked or blacklisted,
      DNS administrators should publish PTR records associated with the name
      server addresses.
  
      Moreover, as mentioned in paragraph 2.1 of [RFC
      1912](https://datatracker.ietf.org/doc/html/rfc1912) when a PTR record
      exists, it must match the host name.
  
      # Pass/fail criteria
  
      Multiple addresses and multiple PTR records are allowed. The test
      succeeds if every name server address has one or more PTR records and
      one of these records matches the server name. If one address doesn't
      match, the whole test case fails.
    Errors:
    - ZM_DNS_ADDRESS03_FAILED
    Maturity: BETA
    Summary: Reverse DNS entry matches name server name

  dns-connectivity01:
    Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
      see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity01.md>.\n\n#
      Objective\n\nUDP is the fundamental protocol to reach a general purpose name server\nhosting
      a zone, \"DNS servers MUST be able to service UDP \\[...\\]\" ([RFC\n1123](https://www.rfc-editor.org/rfc/rfc1123),
      section 6.1.3.2, page\n75), also restated in [RFC\n7766](https://www.rfc-editor.org/rfc/rfc7766#section-5),
      section 5.\n\nThis Test Case will verify if the name servers of *Child Zone* are\nreachable
      over UDP. The name servers tested are both those in the\ndelegation of *Child
      Zone* and those in the NS records in the *Child\nZone* itself.\n\nMost Zonemaster
      Test Cases will query the name servers in the delegation\nor the name servers
      appointed by the NS records in the zone for the NS\nor SOA record, or both. It
      is crucial that problems are reported, but\ninstead of letting several Test Cases
      report the same problems found,\nmost Test Cases assume that this test case is
      run. Only this Test Case\nwill report problems found in the following areas over
      UDP:\n\n-   Name Server not responding to a query without EDNS.\n-   Name Server
      not including SOA record of *Child Zone* in the answer\n    section in the response
      on a SOA query for *Child Zone*.\n-   Name Server not including NS record of *Child
      Zone* in the answer\n    section in the response on an NS query for *Child Zone*.\n-
      \  Name Server not setting the AA flag in a response with SOA or NS in\n    answer
      section.\n-   Name Server responding with unexpected [RCODE\n    Name](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6)\n
      \   (any except \"NoError\") on query for SOA or NS for *Child Zone*.\n\nIn addition,
      this test case will output a message if transport over IPv4\nor IPv6 has been
      disabled.\n\n# Summary\n\n  ----------------------------------------------------------------------------------------------------------------------\n
      \ Message Tag                                Level        Arguments         Message
      ID for message tag\n  ------------------------------------------ ------------
      ----------------- --------------------------------------------\n  `ZM_CN01_IPV4_DISABLED`
      \                   NOTICE       ns_list           IPv4 is disabled. No DNS queries
      are sent to\n                                                                            these
      name servers: \"{ns_list}\".\n\n  `ZM_CN01_IPV6_DISABLED`                    NOTICE
      \      ns_list           IPv6 is disabled. No DNS queries are sent to\n                                                                            these
      name servers: \"{ns_list}\".\n\n  `ZM_CN01_MISSING_NS_RECORD_UDP`            `ERROR`
      \     ns                Nameserver {ns} reponds to a NS query with\n                                             (changed
      \                      no NS records in the answer section over\n                                             from
      \                          UDP.\n                                             `WARNING`)
      \                    \n\n  `ZM_CN01_MISSING_SOA_RECORD_UDP`           `ERROR`
      \     ns                Nameserver {ns} reponds to a SOA query with\n                                             (changed
      \                      no SOA records in the answer section over\n                                             from
      \                          UDP.\n                                             `WARNING`)
      \                    \n\n  `ZM_CN01_NO_RESPONSE_NS_QUERY_UDP`         `ERROR`
      \     ns                Nameserver {ns} does not respond to NS\n                                             (changed
      \                      queries over UDP.\n                                             from
      \                          \n                                             `WARNING`)
      \                    \n\n  `ZM_CN01_NO_RESPONSE_SOA_QUERY_UDP`        `ERROR`
      \     ns                Nameserver {ns} does not respond to SOA\n                                             (changed
      \                      queries over UDP.\n                                             from
      \                          \n                                             `WARNING`)
      \                    \n\n  `ZM_CN01_NO_RESPONSE_UDP`                  `ERROR`
      \     ns                Nameserver {ns} does not respond to any\n                                             (changed
      \                      queries over UDP.\n                                             from
      \                          \n                                             `WARNING`)
      \                    \n\n  `ZM_CN01_NS_RECORD_NOT_AA_UDP`             `ERROR`
      \     ns                Nameserver {ns} does not give an\n                                             (changed
      \                      authoritative response on an NS query over\n                                             from
      \                          UDP.\n                                             `WARNING`)
      \                    \n\n  `ZM_CN01_SOA_RECORD_NOT_AA_UDP`            `ERROR`
      \     ns                Nameserver {ns} does not give an\n                                             (changed
      \                      authoritative response on an SOA query over\n                                             from
      \                          UDP.\n                                             `WARNING`)
      \                    \n\n  `ZM_CN01_UNEXPECTED_RCODE_NS_QUERY_UDP`    `ERROR`
      \     ns, rcode         Nameserver {ns} responds with an unexpected\n                                             (changed
      \                      RCODE ({rcode}) on an NS query over UDP.\n                                             from
      \                          \n                                             `WARNING`)
      \                    \n\n  `ZM_CN01_UNEXPECTED_RCODE_SOA_QUERY_UDP`   `ERROR`
      \     ns, rcode         Nameserver {ns} responds with an unexpected\n                                             (changed
      \                      RCODE ({rcode}) on an SOA query over UDP.\n                                             from
      \                          \n                                             `WARNING`)
      \                    \n\n  `ZM_CN01_WRONG_NS_RECORD_UDP`              `ERROR`
      \     ns, domain_found, Nameserver {ns} responds with a wrong owner\n                                             (changed
      \    domain_expected   name ({domain_found} instead of\n                                             from
      \                          {domain_expected}) on NS queries over UDP.\n                                             `WARNING`)
      \                    \n\n  `ZM_CN01_WRONG_SOA_RECORD_UDP`             `ERROR`
      \     ns, domain_found, Nameserver {ns} responds with a wrong owner\n                                             (changed
      \    domain_expected   name ({domain_found} instead of\n                                             from
      \                          {domain_expected}) on SOA queries over UDP.\n                                             `WARNING`)
      \                    \n  ----------------------------------------------------------------------------------------------------------------------\n\nThe
      value in the Level column is the default severity level of the\nmessage. The severity
      level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
      Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
      argument names in the Arguments column lists the arguments used in\nthe message.
      The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
      Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
      least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
      *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
      Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
      but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
      no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
      or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
      Case is \"pass\".\n"
    Errors:
    - ZM_CN01_IPV4_DISABLED
    - ZM_CN01_SOA_RECORD_NOT_AA_UDP
    - ZM_CN01_NO_RESPONSE_NS_QUERY_UDP
    - ZM_CN01_WRONG_SOA_RECORD_UDP
    - ZM_CN01_MISSING_NS_RECORD_UDP
    - ZM_CN01_UNEXPECTED_RCODE_SOA_QUERY_UDP
    - ZM_CN01_NO_RESPONSE_UDP
    - ZM_CN01_UNEXPECTED_RCODE_NS_QUERY_UDP
    - ZM_CN01_IPV6_DISABLED
    - ZM_CN01_WRONG_NS_RECORD_UDP
    - ZM_CN01_NO_RESPONSE_SOA_QUERY_UDP
    - ZM_CN01_MISSING_SOA_RECORD_UDP
    - ZM_CN01_NS_RECORD_NOT_AA_UDP
    Maturity: BETA
    Summary: UDP connectivity to name servers

  dns-connectivity02:
    Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
      see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity02.md>.\n\n#
      Objective\n\nTCP is a protocol to reach a general purpose name server hosting
      a zone,\n\"All general-purpose DNS implementations MUST support \\[...\\] TCP\ntransport\"
      ([RFC\n7766](https://www.rfc-editor.org/rfc/rfc7766#section-5), section 5).\n\nThis
      Test Case will verify if the name servers of *Child Zone* are\nreachable over
      TCP. The name servers tested are both those in the\ndelegation of *Child Zone*
      and those in the NS records in the *Child\nZone* itself.\n\nThis Test Case will
      mimic the tests done by\n[Connectivity01](connectivity01.md), but over TCP instead:\n\n-
      \  Name Server responding to a query.\n-   Name Server including SOA record of
      *Child Zone* in the answer\n    section in the response on a SOA query for *Child
      Zone*.\n-   Name Server including NS record of *Child Zone* in the answer\n    section
      in the response on an NS query for *Child Zone*.\n-   Name Server setting the
      AA flag in a response with SOA or NS in\n    answer section.\n-   Name Server
      responding with expected [RCODE\n    Name](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6)\n
      \   (\"NoError\") on query for SOA or NS for *Child Zone*.\n\n# Summary\n\n  ---------------------------------------------------------------------------------------------------------------------\n
      \ Message Tag                                Level        Arguments         Message
      ID for message tag\n  ------------------------------------------ ------------
      ----------------- -------------------------------------------\n  `ZM_CN02_MISSING_NS_RECORD_TCP`
      \           `ERROR`      ns                Nameserver {ns} reponds to a NS query
      with\n                                             (changed                       no
      NS records in the answer section over\n                                             from
      \                          TCP.\n                                             `WARNING`)
      \                    \n\n  `ZM_CN02_MISSING_SOA_RECORD_TCP`           `ERROR`
      \     ns                Nameserver {ns} reponds to a SOA query with\n                                             (changed
      \                      no SOA records in the answer section over\n                                             from
      \                          TCP.\n                                             `WARNING`)
      \                    \n\n  `ZM_CN02_NO_RESPONSE_NS_QUERY_TCP`         `ERROR`
      \     ns                Nameserver {ns} does not respond to NS\n                                             (changed
      \                      queries over TCP.\n                                             from
      \                          \n                                             `WARNING`)
      \                    \n\n  `ZM_CN02_NO_RESPONSE_SOA_QUERY_TCP`        `ERROR`
      \     ns                Nameserver {ns} does not respond to SOA\n                                             (changed
      \                      queries over TCP.\n                                             from
      \                          \n                                             `WARNING`)
      \                    \n\n  `ZM_CN02_NO_RESPONSE_TCP`                  `ERROR`
      \     ns                Nameserver {ns} does not respond to any\n                                             (changed
      \                      queries over TCP.\n                                             from
      \                          \n                                             `WARNING`)
      \                    \n\n  `ZM_CN02_NS_RECORD_NOT_AA_TCP`             `ERROR`
      \     ns                Nameserver {ns} does not give an\n                                             (changed
      \                      authoritative response on an NS query over\n                                             from
      \                          TCP.\n                                             `WARNING`)
      \                    \n\n  `ZM_CN02_SOA_RECORD_NOT_AA_TCP`            `ERROR`
      \     ns                Nameserver {ns} does not give an\n                                             (changed
      \                      authoritative response on an SOA query over\n                                             from
      \                          TCP.\n                                             `WARNING`)
      \                    \n\n  `ZM_CN02_UNEXPECTED_RCODE_NS_QUERY_TCP`    `ERROR`
      \     ns, rcode         Nameserver {ns} responds with an unexpected\n                                             (changed
      \                      RCODE ({rcode}) on an NS query over TCP.\n                                             from
      \                          \n                                             `WARNING`)
      \                    \n\n  `ZM_CN02_UNEXPECTED_RCODE_SOA_QUERY_TCP`   `ERROR`
      \     ns, rcode         Nameserver {ns} responds with an unexpected\n                                             (changed
      \                      RCODE ({rcode}) on an SOA query over TCP.\n                                             from
      \                          \n                                             `WARNING`)
      \                    \n\n  `ZM_CN02_WRONG_NS_RECORD_TCP`              `ERROR`
      \     ns, ,             Nameserver {ns} responds with a wrong owner\n                                             (changed
      \    domain_found,     name ({domain_found} instead of\n                                             from
      \        domain_expected   {domain_expected}) on NS queries over TCP.\n                                             `WARNING`)
      \                    \n\n  `ZM_CN02_WRONG_SOA_RECORD_TCP`             `ERROR`
      \     ns, ,             Nameserver {ns} responds with a wrong owner\n                                             (changed
      \    domain_found,     name ({domain_found} instead of\n                                             from
      \        domain_expected   {domain_expected}) on SOA queries over TCP.\n                                             `WARNING`)
      \                    \n  ---------------------------------------------------------------------------------------------------------------------\n\nThe
      value in the Level column is the default severity level of the\nmessage. The severity
      level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
      Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
      argument names in the Arguments column lists the arguments used in\nthe message.
      The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
      Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
      least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
      *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
      Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
      but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
      no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
      or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
      Case is \"pass\".\n"
    Errors:
    - ZM_CN02_MISSING_NS_RECORD_TCP
    - ZM_CN02_SOA_RECORD_NOT_AA_TCP
    - ZM_CN02_NO_RESPONSE_TCP
    - ZM_CN02_WRONG_SOA_RECORD_TCP
    - ZM_CN02_NO_RESPONSE_NS_QUERY_TCP
    - ZM_CN02_UNEXPECTED_RCODE_SOA_QUERY_TCP
    - ZM_CN02_NS_RECORD_NOT_AA_TCP
    - ZM_CN02_UNEXPECTED_RCODE_NS_QUERY_TCP
    - ZM_CN02_MISSING_SOA_RECORD_TCP
    - ZM_CN02_WRONG_NS_RECORD_TCP
    - ZM_CN02_NO_RESPONSE_SOA_QUERY_TCP
    Maturity: BETA
    Summary: TCP connectivity to name servers

  dns-connectivity03:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity03.md>.
  
      # Objective
  
      The objective in this test is to verify that all IP addresses of the
      domain's authoritative name servers are announced from different ASNs
      (autonomous system number). See [RFC
      1930](https://datatracker.ietf.org/doc/html/rfc1930) and
      [Wikipedia](https://en.wikipedia.org/wiki/Autonomous_system_(Internet))
      for an explanation of AS (autonomous system).
  
      This test is done separately on IPv4 and IPv6, and both must match the
      criterion.
  
      [RFC 2182](https://datatracker.ietf.org/doc/html/rfc2182#section-3.1),
      section 3.1, clearly specifies that distinct authoritative name servers
      for a child domain should be placed in different topological and
      geographical locations. The objective is to minimise the likelihood of a
      single failure disabling all of them.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level ERROR or CRITICAL.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level WARNING, but no message with severity
      level ERROR or CRITICAL.
  
      In other cases the outcome of this Test Case is "pass".
  
        Message                   Default severity level
        ------------------------- ----------------------------------
        `ZM_EMPTY_ASN_SET`        ERROR
        `ZM_ERROR_ASN_DATABASE`   ERROR
        `ZM_IPV4_ONE_ASN`         `ERROR` (changed from `WARNING`)
        `ZM_IPV4_SAME_ASN`        NOTICE
        `ZM_IPV4_DIFFERENT_ASN`   INFO
        `ZM_IPV6_ONE_ASN`         `ERROR` (changed from `WARNING`)
        `ZM_IPV6_SAME_ASN`        NOTICE
        `ZM_IPV6_DIFFERENT_ASN`   INFO
    Errors:
    - ZM_EMPTY_ASN_SET
    - ZM_IPV4_DIFFERENT_ASN
    - ZM_IPV4_ONE_ASN
    - ZM_IPV6_SAME_ASN
    - ZM_ERROR_ASN_DATABASE
    - ZM_IPV6_ONE_ASN
    - ZM_IPV4_SAME_ASN
    - ZM_IPV6_DIFFERENT_ASN
    Maturity: BETA
    Summary: AS Diversity

  dns-connectivity04:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity04.md>.
  
      # Objective
  
      The objective in this Test Case is to verify that all IP addresses of
      the domain's authoritative name servers are announced from different IP
      prefixes.
  
      This Test is done separately on IPv4 and IPv6, and both must match the
      criterion.
  
      [RFC 2182, section
      3.1](https://datatracker.ietf.org/doc/html/rfc2182#section-3.1), clearly
      specifies that distinct authoritative name servers for a child domain
      should be placed in different topological and geographical locations.
      The objective is to minimise the likelihood of a single failure
      disabling all of them.
  
      # Summary
  
        --------------------------------------------------------------------------------------------------
        Message Tag                       Level     Arguments    Message ID for message tag
        --------------------------------- --------- ------------ -----------------------------------------
        `ZM_CN04_EMPTY_PREFIX_SET`        ERROR     ns_ip        Prefix database returned no information
                                                                 for IP address {ns_ip}.
  
        `ZM_CN04_ERROR_PREFIX_DATABASE`   ERROR     ns_ip        Prefix database error. No data to analyze
                                                                 for IP address {ns_ip}.
  
        `ZM_CN04_IPV4_SAME_PREFIX`        WARNING   ns_list,     The following name server(s) are
                                                    ip_prefix    announced in the same IPv4 prefix
                                                                 ({ip_prefix}): "{ns_list}"
  
        `ZM_CN04_IPV4_DIFFERENT_PREFIX`   INFO      ns_list      The following name server(s) are
                                                                 announced in unique IPv4 prefix(es):
                                                                 "{ns_list}"
  
        `ZM_CN04_IPV6_SAME_PREFIX`        WARNING   ns_list,     The following name server(s) are
                                                    ip_prefix    announced in the same IPv6 prefix
                                                                 ({ip_prefix}): "{ns_list}"
  
        `ZM_CN04_IPV6_DIFFERENT_PREFIX`   INFO      ns_list      The following name server(s) are
                                                                 announced in unique IPv6 prefix(es):
                                                                 "{ns_list}"
        --------------------------------------------------------------------------------------------------
  
      The value in the Level column is the default severity level of the
      message. The severity level can be changed in the [Zonemaster-Engine
      Profile](../../../configuration/profiles.md). Also see the [Severity
      Level Definitions](../SeverityLevelDefinitions.md) document.
  
      The argument names in the Arguments column lists the arguments used in
      the message. The argument names are defined in the [Argument
      List](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
      or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level
      *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
      severity level *ERROR* or *CRITICAL*.
  
      In other cases, no message or only messages with severity level
      *[INFO](../SeverityLevelDefinitions.md#info)* or
      *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
      Test Case is "pass".
    Errors:
    - ZM_CN04_EMPTY_PREFIX_SET
    - ZM_CN04_IPV6_SAME_PREFIX
    - ZM_CN04_IPV4_SAME_PREFIX
    - ZM_CN04_IPV6_DIFFERENT_PREFIX
    - ZM_CN04_ERROR_PREFIX_DATABASE
    - ZM_CN04_IPV4_DIFFERENT_PREFIX
    Maturity: BETA
    Summary: IP Prefix Diversity

  dns-consistency01:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency01.md>.
  
      # Objective
  
      For the data served by the authoritative name servers for a designated
      zone to be consistent, all authoritative name servers must serve the
      same SOA record for the designated zone.
  
      If the serial number (explained in 3.3.13. of [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035)), which is part of
      the SOA record, is not consistent between authoritative servers, there
      is a possibility that the data served is inconsistent. The reasons for
      this inconsistency may be different - such as misconfiguration, or as a
      result of slow propagation to the secondary name servers.
  
      The objective of this test is to verify that the serial number is
      consistent between different authoritative name servers.
  
      For reference purposes : [RFC
      1982](https://datatracker.ietf.org/doc/html/rfc1982) explains the serial
      number arithmetic, and section 4.3.5 of [RFC
      1034](https://datatracker.ietf.org/doc/html/rfc1035) explains the
      importance of serial number consistency.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      In other cases the outcome of this Test Case is "pass".
  
        ----------------------------------------------------------------------
        Message                         Default severity level (if message is
                                        emitted)
        ------------------------------- --------------------------------------
        `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)
  
        `ZM_NO_RESPONSE_SOA_QUERY`      `ERROR` (changed from `DEBUG`)
  
        `ZM_ONE_SOA_SERIAL`             INFO
  
        `ZM_MULTIPLE_SOA_SERIALS`       `ERROR` (changed from `WARNING`)
  
        `ZM_MULTIPLE_SOA_SERIALS_OK`    NOTICE
  
        `ZM_SOA_SERIAL`                 INFO
  
        `ZM_SOA_SERIAL_VARIATION`       NOTICE
        ----------------------------------------------------------------------
    Errors:
    - ZM_NO_RESPONSE
    - ZM_MULTIPLE_SOA_SERIALS_OK
    - ZM_ONE_SOA_SERIAL
    - ZM_SOA_SERIAL_VARIATION
    - ZM_NO_RESPONSE_SOA_QUERY
    - ZM_SOA_SERIAL
    - ZM_MULTIPLE_SOA_SERIALS
    Maturity: BETA
    Summary: SOA serial number consistency

  dns-consistency02:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency02.md>.
  
      # Objective
  
      All authoritative name servers must serve the same SOA record for the
      tested domain (section 4.2.1 of [RFC
      1034](https://datatracker.ietf.org/doc/html/rfc1034)). As per section
      3.3.13 of [RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035), the
      RNAME field in the SOA RDATA refers to the administrative contact. An
      inconsistency in the administrative contact for the domain might result
      in operational failures being reported to different persons.
  
      The objective of this test is to verify that the administrative contact
      is consistent between different authoritative name servers.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      In other cases the outcome of this Test Case is "pass".
  
        ----------------------------------------------------------------------
        Message                         Default severity level (if message is
                                        emitted)
        ------------------------------- --------------------------------------
        `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)
  
        `ZM_NO_RESPONSE_SOA_QUERY`      `ERROR` (changed from `DEBUG`)
  
        `ZM_ONE_SOA_RNAME`              INFO
  
        `ZM_MULTIPLE_SOA_RNAMES`        `ERROR` (changed from `NOTICE`)
        ----------------------------------------------------------------------
    Errors:
    - ZM_NO_RESPONSE
    - ZM_ONE_SOA_RNAME
    - ZM_NO_RESPONSE_SOA_QUERY
    - ZM_MULTIPLE_SOA_RNAMES
    Maturity: BETA
    Summary: SOA RNAME consistency

  dns-consistency03:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency03.md>.
  
      # Objective
  
      All SOA record timer fields must be consistent across all authoritative
      name servers. An inconsistency in these fields might result in
      operational inconsistencies for the designated zone.
  
      There are other test cases that provide consistency tests for the other
      SOA fields:
  
      -   [CONSISTENCY01](consistency01.md) (SOA Serial)
      -   [CONSISTENCY02](consistency02.md) (RNAME)
      -   [CONSISTENCY06](consistency06.md) (MNAME)
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      In other cases the outcome of this Test Case is "pass".
  
        ---------------------------------------------------------------------------
        Message                                Default severity level (if message
                                               is emitted)
        -------------------------------------- ------------------------------------
        `ZM_NO_RESPONSE`                       `ERROR` (changed from `DEBUG`)
  
        `ZM_NO_RESPONSE_SOA_QUERY`             `ERROR` (changed from `DEBUG`)
  
        `ZM_ONE_SOA_TIME_PARAMETER_SET`        INFO
  
        `ZM_MULTIPLE_SOA_TIME_PARAMETER_SET`   `ERROR` (changed from `NOTICE`)
        ---------------------------------------------------------------------------
    Errors:
    - ZM_NO_RESPONSE
    - ZM_ONE_SOA_TIME_PARAMETER_SET
    - ZM_NO_RESPONSE_SOA_QUERY
    - ZM_MULTIPLE_SOA_TIME_PARAMETER_SET
    Maturity: BETA
    Summary: SOA timers consistency

  dns-consistency04:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency04.md>.
  
      # Objective
  
      All authoritative name servers must serve the same NS record set for the
      tested domain, child zone ([RFC
      1034](https://datatracker.ietf.org/doc/html/rfc1034), section 4.2.2).
      Any inconsistencies in NS records described in [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035), section 3.3.11,
      might result in operational failures.
  
      The objective of this test is to verify that the NS records are
      consistent between all authoritative name servers of the child zone.
  
      Two NS RR sets are considered to be equal if both sets have the same
      number of NS records, and for each NS record in one of the sets there is
      exactly one NS record with identical owner name, class, TTL and RDATA in
      the other NS set.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      In other cases the outcome of this Test Case is "pass".
  
        ----------------------------------------------------------------------
        Message                         Default severity level (if message is
                                        emitted)
        ------------------------------- --------------------------------------
        `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)
  
        `ZM_NO_RESPONSE_NS_QUERY`       `ERROR` (changed from `DEBUG`)
  
        `ZM_ONE_NS_SET`                 INFO
  
        `ZM_MULTIPLE_NS_SET`            `ERROR` (changed from `NOTICE`)
        ----------------------------------------------------------------------
    Errors:
    - ZM_NO_RESPONSE
    - ZM_ONE_NS_SET
    - ZM_NO_RESPONSE_NS_QUERY
    - ZM_MULTIPLE_NS_SET
    Maturity: BETA
    Summary: Name server NS consistency

  dns-consistency05:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency05.md>.
  
      # Objective
  
      For name servers that have IP addresses listed as glue, the IP addresses
      must match the authoritative A and AAAA records for that host. This is
      an IANA [name server
      requirement](https://www.iana.org/help/nameserver-requirements).
  
      The objective of this test is to verify that the [glue
      records](#terminology) in the delegation are consistent with
      authoritative data.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      The outcome of this Test case is "pass" in all other cases.
  
        --------------------------------------------------------------------------
        Message                               Default severity level (when message
                                              is outputted)
        ------------------------------------- ------------------------------------
        `ZM_CHILD_NS_FAILED`                  `ERROR` (changed from `DEBUG`)
  
        `ZM_NO_RESPONSE`                      `ERROR` (changed from `DEBUG`)
  
        `ZM_CHILD_ZONE_LAME`                  `ERROR` (changed from `ERROR`)
  
        `ZM_IN_BAILIWICK_ADDR_MISMATCH`       `ERROR` (changed from `ERROR`)
  
        `ZM_OUT_OF_BAILIWICK_ADDR_MISMATCH`   `ERROR` (changed from `ERROR`)
  
        `ZM_EXTRA_ADDRESS_CHILD`              `ERROR` (changed from `NOTICE`)
  
        `ZM_ADDRESSES_MATCH`                  INFO
        --------------------------------------------------------------------------
    Errors:
    - ZM_CHILD_NS_FAILED
    - ZM_OUT_OF_BAILIWICK_ADDR_MISMATCH
    - ZM_CHILD_ZONE_LAME
    - ZM_ADDRESSES_MATCH
    - ZM_NO_RESPONSE
    - ZM_EXTRA_ADDRESS_CHILD
    - ZM_IN_BAILIWICK_ADDR_MISMATCH
    Maturity: BETA
    Summary: Consistency between glue and authoritative data

  dns-consistency06:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency06.md>.
  
      # Objective
  
      All authoritative name servers must serve the same SOA record (section
      4.2.1) of [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1035) for
      the tested domain. As per section 3.3.13 of [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035) the MNAME field in
      the SOA RDATA refers to the name of "the name server that was the
      original or primary source of data for this zone". Inconsistency in
      MNAME of the domain might result in operational failures for
      applications that uses MNAME.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      In other cases the outcome of this Test Case is "pass".
  
        ----------------------------------------------------------------------
        Message                         Default severity level (if message is
                                        emitted)
        ------------------------------- --------------------------------------
        `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)
  
        `ZM_NO_RESPONSE_SOA_QUERY`      `ERROR` (changed from `DEBUG`)
  
        `ZM_ONE_SOA_MNAME`              INFO
  
        `ZM_MULTIPLE_SOA_MNAMES`        `ERROR` (changed from `NOTICE`)
        ----------------------------------------------------------------------
    Errors:
    - ZM_NO_RESPONSE
    - ZM_ONE_SOA_MNAME
    - ZM_NO_RESPONSE_SOA_QUERY
    - ZM_MULTIPLE_SOA_MNAMES
    Maturity: BETA
    Summary: SOA MNAME consistency

  dns-delegation01:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation01.md>.
  
      # Objective
  
      Section 4.1 of [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034)
      specifies that there must be a minimum of two name servers for a domain.
      This test is done to verify this condition.
  
      The RFC ([RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034))
      predates IPv6. Since IPv4 and IPv6 work as separate networks, this test
      case has been extended to test for two name servers that resolve into
      IPv4 addresses and IPv6 addresses respectively.
  
      Both [RFC 3901](https://datatracker.ietf.org/doc/html/rfc3901) (section
      3) and [RFC 4472](https://datatracker.ietf.org/doc/html/rfc4472)
      (section 1.3) states that a domain (zone) should be available over IPv4
      for the time being. Therefore, it is by the default level in this test
      case considered to be more problematic not being available over IPv4
      than not being available over IPv6.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      Else the outcome of this Test Case is "pass".
  
        Message                         Default severity level
        ------------------------------- ----------------------------------
        `ZM_ENOUGH_IPV4_NS_CHILD`       INFO
        `ZM_ENOUGH_IPV4_NS_DEL`         INFO
        `ZM_ENOUGH_IPV6_NS_CHILD`       INFO
        `ZM_ENOUGH_IPV6_NS_DEL`         INFO
        `ZM_ENOUGH_NS_CHILD`            INFO
        `ZM_ENOUGH_NS_DEL`              INFO
        `ZM_NOT_ENOUGH_IPV4_NS_CHILD`   ERROR
        `ZM_NOT_ENOUGH_IPV4_NS_DEL`     ERROR
        `ZM_NOT_ENOUGH_IPV6_NS_CHILD`   ERROR
        `ZM_NOT_ENOUGH_IPV6_NS_DEL`     ERROR
        `ZM_NOT_ENOUGH_NS_CHILD`        ERROR
        `ZM_NOT_ENOUGH_NS_DEL`          ERROR
        `ZM_NO_IPV4_NS_CHILD`           `ERROR` (changed from `WARNING`)
        `ZM_NO_IPV4_NS_DEL`             `ERROR` (changed from `WARNING`)
        `ZM_NO_IPV6_NS_CHILD`           `ERROR` (changed from `NOTICE`)
        `ZM_NO_IPV6_NS_DEL`             `ERROR` (changed from `NOTICE`)
    Errors:
    - ZM_ENOUGH_IPV4_NS_CHILD
    - ZM_NOT_ENOUGH_IPV6_NS_CHILD
    - ZM_ENOUGH_NS_CHILD
    - ZM_NO_IPV4_NS_CHILD
    - ZM_ENOUGH_IPV6_NS_CHILD
    - ZM_NOT_ENOUGH_NS_CHILD
    - ZM_NOT_ENOUGH_IPV4_NS_CHILD
    - ZM_NO_IPV6_NS_CHILD
    - ZM_ENOUGH_IPV4_NS_DEL
    - ZM_NOT_ENOUGH_IPV6_NS_DEL
    - ZM_ENOUGH_NS_DEL
    - ZM_NO_IPV4_NS_DEL
    - ZM_ENOUGH_IPV6_NS_DEL
    - ZM_NOT_ENOUGH_NS_DEL
    - ZM_NOT_ENOUGH_IPV4_NS_DEL
    - ZM_NO_IPV6_NS_DEL
    Maturity: BETA
    Summary: Minimum number of name servers

  dns-delegation02:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation02.md>.
  
      # Objective
  
      If the domain's name servers use several different names, they can all
      be using the same IP address. This may be due to a configuration error,
      or a workaround for a certain policy restriction. This test case checks
      that the name servers used do not reuse the same IP addresses.
  
      Section 4.1 of [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034)
      says at least two name servers must be used for a delegation.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      In other cases the outcome of this Test Case is "pass".
  
        Message                     Default severity level (if message is emitted)
        --------------------------- ------------------------------------------------
        `ZM_DEL_NS_SAME_IP`         ERROR
        `ZM_CHILD_NS_SAME_IP`       ERROR
        `ZM_DEL_DISTINCT_NS_IP`     INFO
        `ZM_CHILD_DISTINCT_NS_IP`   INFO
    Errors:
    - ZM_DEL_NS_SAME_IP
    - ZM_DEL_DISTINCT_NS_IP
    - ZM_CHILD_NS_SAME_IP
    - ZM_CHILD_DISTINCT_NS_IP
    Maturity: BETA
    Summary: Name servers must have distinct IP addresses

  dns-delegation03:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation03.md>.
  
      # Objective
  
      The Domain Name System defaults to using UDP for queries and answers
      with a DNS payload limit of 512 octets (bytes). Larger replies cause an
      initial truncation indication leading to a subsequent handling via TCP
      with substantially higher overhead. EDNS0 is used to allow for larger
      UDP responses thus reducing the need for use of TCP.
  
      But [IANA](https://www.iana.org/help/nameserver-requirements) still
      maintains that referrals from the parent zone name servers must fit into
      a non-EDNS0 UDP DNS packet.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      In other cases the outcome of this Test Case is "pass".
  
        -----------------------------------------------------------------------
        Message                            Default severity level of message
        ---------------------------------- ------------------------------------
        `ZM_REFERRAL_SIZE_TOO_LARGE`       WARNING
  
        `ZM_REFERRAL_SIZE_OK`              INFO
        -----------------------------------------------------------------------
    Errors:
    - ZM_REFERRAL_SIZE_TOO_LARGE
    - ZM_REFERRAL_SIZE_OK
    Maturity: BETA
    Summary: No truncation of referrals

  dns-delegation04:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation04.md>.
  
      # Objective
  
      Subsection 6.1 of [RFC
      2181](https://datatracker.ietf.org/doc/html/rfc2181) specifies that the
      nameservers must answer authoritatively for the domain. Answers to
      queries to the name servers for the designated zone must have the "AA"
      bit set.
  
      # Pass/fail criteria
  
      If all the name servers answer with the AA-bit set, then the test
      succeeds.
    Errors:
    - ZM_DNS_DELEGATION04_FAILED
    Maturity: BETA
    Summary: Name server is authoritative

  dns-delegation05:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation05.md>.
  
      # Objective
  
      Name servers for a zone are defined in NS records. An NS record points
      at a name, i.e. the RDATA for an NS record is a domain name. That name
      is the name of the name server. [RFC
      2181](https://datatracker.ietf.org/doc/html/rfc2181#section-10.3),
      section 10.3, states that the name of the name server must not itself
      point at a CNAME.
  
      The objective of this test is to verify that name servers of the tested
      domain (zone) do not point at CNAME records.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      In other cases the outcome of this Test Case is "pass".
  
        Message                 Default severity level
        ----------------------- --------------------------------
        `ZM_NO_RESPONSE`        `ERROR` (changed from `DEBUG`)
        `ZM_UNEXPECTED_RCODE`   WARNING
        `ZM_NS_IS_CNAME`        ERROR
        `ZM_NO_NS_CNAME`        INFO
    Errors:
    - ZM_NO_RESPONSE
    - ZM_NS_IS_CNAME
    - ZM_UNEXPECTED_RCODE
    - ZM_NO_NS_CNAME
    Maturity: BETA
    Summary: Name server must not point at CNAME alias

  dns-delegation06:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation06.md>.
  
      # Objective
  
      Section 6.1 of the [RFC
      2181](https://datatracker.ietf.org/doc/html/rfc2181) specifies that the
      SOA record is mandatory for every zone.
  
      This test is intended to verify the prescence of a SOA record for the
      domain.
  
      # Pass/fail criteria
  
      If there is a SOA record present for the domain this test case succeeds.
    Errors:
    - ZM_DNS_DELEGATION06_FAILED
    Maturity: BETA
    Summary: Existence of SOA

  dns-delegation07:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation07.md>.
  
      # Objective
  
      If the list of name servers for a domain obtained from its parent are
      not found in its its child zone, then it leads to an inconsistency
      (section 2.3 of
      [RIPE-114](https://www.ripe.net/publications/docs/ripe-114))
  
      # Pass/fail criteria
  
      If the set of glue name records obtained are found in the list of name
      servers obtained from the child also, then the test succeeds
    Errors:
    - ZM_DNS_DELEGATION07_FAILED
    Maturity: BETA
    Summary: Parent glue name records present in child

  dns-nameserver01:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver01.md>.
  
      # Objective
  
      To ensure consistency in DNS, an authoritative name server should not be
      configured to do recursive lookups. Also, open recursive resolvers are
      considered bad internet practice due to their capability of assisting in
      large scale DDoS attacks. The introduction to [RFC
      5358](https://datatracker.ietf.org/doc/html/rfc5358) elaborates on
      mixing recursor and authoritative functionality, and the issue is
      further elaborated by [D.J.
      Bernstein](https://cr.yp.to/djbdns/separation.html).
  
      Section 2.5 of [RFC 2870](https://datatracker.ietf.org/doc/html/rfc2870)
      have very specific requirement on disabling recursion functionality on
      root name servers.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      In other cases the outcome of this Test Case is "pass".
  
        ----------------------------------------------------------------------
        Message                         Default severity level (if message is
                                        emitted)
        ------------------------------- --------------------------------------
        `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)
  
        `ZM_IS_A_RECURSOR`              ERROR
  
        `ZM_NO_RECURSOR`                INFO
        ----------------------------------------------------------------------
    Errors:
    - ZM_NO_RESPONSE
    - ZM_NO_RECURSOR
    - ZM_IS_A_RECURSOR
    Maturity: BETA
    Summary: A name server should not be a recursor

  dns-nameserver02:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver02.md>.
  
      # Objective
  
      EDNS(0) is a mechanism to announce capabilities of a DNS implementation,
      and is now basically required by any new functionality in DNS such as
      DNSSEC. EDNS(0) is standardized in [RFC
      6891](https://datatracker.ietf.org/doc/html/rfc6891).
  
      This test case checks that all name servers has the capability to do
      EDNS(0) or if not, correctly replies to queries containing EDNS (OPT
      record).
  
      Servers not supporting EDNS(0) must return FORMERR ([RFC 6891, section
      7](https://datatracker.ietf.org/doc/html/rfc6891#section-7)):
  
      > Responders that choose not to implement the protocol extensions
      > defined in this document MUST respond with a return code (RCODE) of
      > FORMERR to messages containing an OPT record in the additional section
      > and MUST NOT include an OPT record in the response.
  
      Servers supporting EDNS(0) must reply with EDNS(0) ([RFC 6891, section
      6.1.1](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.1)):
  
      > If an OPT record is present in a received request, compliant
      > responders MUST include an OPT record in their respective responses.
  
      To eliminating the risk of falsely classifying the server as not
      supporting EDNS due e.g. firewall issues, the UDP buffer size is set to
      512 bytes (octets).
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      The outcome of this Test case is "pass" in all other cases.
  
        -----------------------------------------------------------------------
        Message                            Default severity level (when message
                                           is outputted)
        ---------------------------------- ------------------------------------
        `ZM_NO_RESPONSE`                   `ERROR` (changed from `DEBUG`)
  
        `ZM_NO_EDNS_SUPPORT`               `ERROR` (changed from `WARNING`)
  
        `ZM_BREAKS_ON_EDNS`                ERROR
  
        `ZM_EDNS_RESPONSE_WITHOUT_EDNS`    ERROR
  
        `ZM_EDNS_VERSION_ERROR`            ERROR
  
        `ZM_NS_ERROR`                      `ERROR` (changed from `WARNING`)
        -----------------------------------------------------------------------
    Errors:
    - ZM_NO_RESPONSE
    - ZM_EDNS_VERSION_ERROR
    - ZM_BREAKS_ON_EDNS
    - ZM_NS_ERROR
    - ZM_NO_EDNS_SUPPORT
    - ZM_EDNS_RESPONSE_WITHOUT_EDNS
    Maturity: BETA
    Summary: Test of EDNS0 support

  dns-nameserver03:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver03.md>.
  
      # Objective
  
      AXFR is a mechanism to transfer the whole content of a zone from a name
      server. Some people prefer to not disclose the whole content of a zone
      for various reasons, and thus wants the public name server
      infrastructure not do disclose the whole zone content to the public.
      This test case checks the availability of the AXFR mechanism.
  
      AXFR is defined in its latest revision in [RFC
      5936](https://datatracker.ietf.org/doc/html/rfc5936).
  
      # Pass/fail criteria
  
      If any name server for the domain allows a zone transfer using AXFR,
      this test case fails.
    Errors:
    - ZM_DNS_NAMESERVER03_FAILED
    Maturity: BETA
    Summary: Test availability of zone transfer (AXFR)

  dns-nameserver04:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver04.md>.
  
      # Objective
  
      Responses from the authoritative name servers must contain same source
      IP address as the destination IP address of the initial query. This has
      been clarified in section 4 of [RFC
      2181](https://datatracker.ietf.org/doc/html/rfc2181#section-4).
  
      # Pass/fail criteria
  
      If any response comes from another IP address than the query was sent
      to, this test case fails.
    Errors:
    - ZM_DNS_NAMESERVER04_FAILED
    Maturity: BETA
    Summary: Same source address

  dns-nameserver05:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver05.md>.
  
      # Objective
  
      Older implementations of authoritative name servers have shown different
      misbehaviours trying to answer queries for AAAA records, as described in
      [RFC 4074](https://datatracker.ietf.org/doc/html/rfc4074). This test
      case is intended to find out if the name server authoritative for the
      domain shows any of these behaviours.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      In other cases the outcome of this Test Case is "pass".
  
        Message                      Default severity level
        ---------------------------- ----------------------------------
        `ZM_AAAA_BAD_RDATA`          ERROR
        `ZM_AAAA_QUERY_DROPPED`      ERROR
        `ZM_AAAA_UNEXPECTED_RCODE`   ERROR
        `ZM_AAAA_WELL_PROCESSED`     INFO
        `ZM_A_UNEXPECTED_RCODE`      `ERROR` (changed from `WARNING`)
        `ZM_NO_RESPONSE`             `ERROR` (changed from `DEBUG`)
    Errors:
    - ZM_AAAA_BAD_RDATA
    - ZM_A_UNEXPECTED_RCODE
    - ZM_AAAA_UNEXPECTED_RCODE
    - ZM_NO_RESPONSE
    - ZM_AAAA_QUERY_DROPPED
    - ZM_AAAA_WELL_PROCESSED
    Maturity: BETA
    Summary: Behaviour against AAAA query

  dns-nameserver06:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver06.md>.
  
      # Objective
  
      All name servers names listed for a delegation must be resolvable in
      DNS. If they are not resolvable using DNS this is a sign of
      misconfiguration, and raises the risk of unreachability for the domain.
      It could also lower the performance for any resolver trying to resolve
      the name.
  
      The objective of this test is to resolve the domain using all the listed
      name servers used in the delegation. More information about resolver
      behavior is in section 7 of [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035).
  
      # Pass/fail criteria
  
      If any of the name server names fails to resolve to an IP address, this
      test case fails.
    Errors:
    - ZM_DNS_NAMESERVER06_FAILED
    Maturity: BETA
    Summary: NS can be resolved

  dns-nameserver07:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver07.md>.
  
      # Objective
  
      The configuration and/or implementation of some authoritative name
      servers causes them to return an upward referral to the root zone. There
      are proofs that such a [behaviour could be used for DDoS
      attacks](https://www.dns-oarc.net/oarc/articles/upward-referrals-considered-harmful)
  
      # Pass/fail criteria
  
      The test case is Ok only if there are no responses in the authority
      section
    Errors:
    - ZM_DNS_NAMESERVER07_FAILED
    Maturity: BETA
    Summary: To check whether authoritative name servers return an upward referral

  dns-nameserver08:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver08.md>.
  
      # Objective
  
      The DNS standards require that nameservers treat names with case
      insensitivity. That is, the names example.com and EXAMPLE.COM should
      resolve to the same IP address. However, in the response, most
      nameservers echo back the name as it appeared in the request, preserving
      the original case.
  
      Therefore, another way to add entropy to requests is to randomly vary
      the case of letters in domain names queried. This technique, also known
      as "0x20" because bit 0x20 is used to set the case of of US-ASCII
      letters, was first proposed in the [IETF internet
      draft](https://datatracker.ietf.org/doc/html/draft-vixie-dnsext-dns0x20-00)
      Use of Bit 0x20 in DNS Labels to Improve Transaction Identity. With this
      technique, the nameserver response must match not only the query name,
      but the case of every letter in the name string; for example,
      wWw.eXaMpLe.CoM or WwW.ExamPLe.COm. This may add little or no entropy to
      queries for the top-level and root domains, but it's effective for most
      hostnames.
  
      # Pass/fail criteria
  
      The test case is Ok only if there are no responses in the authority
      section
    Errors:
    - ZM_DNS_NAMESERVER08_FAILED
    Maturity: BETA
    Summary: Testing QNAME case insensitivity

  dns-nameserver09:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver09.md>.
  
      # Objective
  
      There has been cases where the nameservers respond with complete
      case-sensitivity (in violation of the DNS standards): that is, they
      match the exact case of the name in the response; but return different
      results for equivalent names with different cases in the request
      (typically NXDOMAIN).
  
      # Pass/fail criteria
  
      The test case passes only if the results of all queries are exactly the
      same.
    Errors:
    - ZM_DNS_NAMESERVER09_FAILED
    Maturity: BETA
    Summary: Testing QNAME case sensitivity

  dns-nameserver10:
    Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
      see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver10.md>.\n\n#
      Objective\n\nEDNS ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891))
      is a\nmechanism to announce capabilities of a DNS implementation, and is\nrequired
      by new functionality in DNS such as DNSSEC ([RFC\n4033](https://datatracker.ietf.org/doc/html/rfc4033#section-3),
      section\n3).\n\n[RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.3),\nsection
      6.1.3, states that if a nameserver has implemented EDNS but has\nnot implemented
      the version level of the request, then it MUST respond\nwith RCODE \"BADVERS\".
      Only version \"0\" has been defined for EDNS.\n\nNote that RCODE \"BADVERS\" is
      an extended RCODE which is calculated from\nthe combination of the normal RCODE
      field in the DNS package header\n([RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035#section-4.1.1),\nsection
      4.1.1) and the OPT record EXTENDED-RCODE field ([RFC\n6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.3),\nsection
      6.1.3). Also see [IANA RCODE\nRegistry](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6).\n\n#
      Summary\n\n-   Only relevant for a zone whose name servers correctly support EDNS,\n
      \   version 0.\n\n  --------------------------------------------------------------------------------------------\n
      \ Message Tag outputted              Level        Arguments     Description of
      when message\n                                                                tag
      is outputted\n  ---------------------------------- ------------ -------------
      ------------------------------\n  `ZM_N10_NO_RESPONSE_EDNS1_QUERY`   `ERROR`      ns_ip_list
      \   Response when EDNS ver=0, but\n                                     (changed
      \                  not when 1.\n                                     from                       \n
      \                                    `WARNING`)                 \n\n  `ZM_N10_UNEXPECTED_RCODE`
      \         `ERROR`      ns_ip_list,   Unexpected RCODE value when\n                                     (changed
      \    rcode         EDNS ver=1.\n                                     from                       \n
      \                                    `WARNING`)                 \n\n  `ZM_N10_EDNS_RESPONSE_ERROR`
      \      `ERROR`      ns_ip_list    Expected RCODE value when EDNS\n                                     (changed
      \                  ver=1, but error in response.\n                                     from
      \                      \n                                     `WARNING`)                 \n
      \ --------------------------------------------------------------------------------------------\n\nThe
      value in the Level column is the default severity level of the\nmessage. The severity
      level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
      Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
      argument names in the Arguments column lists the arguments used in\nthe message.
      The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
      Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
      least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
      *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
      Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
      but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
      no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
      or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
      Case is \"pass\".\n"
    Errors:
    - ZM_N10_NO_RESPONSE_EDNS1_QUERY
    - ZM_N10_EDNS_RESPONSE_ERROR
    - ZM_N10_UNEXPECTED_RCODE
    Maturity: BETA
    Summary: Test for undefined EDNS version

  dns-nameserver11:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver11.md>.
  
      # Objective
  
      EDNS is a mechanism to announce capabilities of a DNS implementation,
      and is now basically required by any new functionality in DNS such as
      DNSSEC ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891)).
  
      [RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.2),
      section 6.1.2, states that any OPTION-CODE values not understood by a
      responder or requestor MUST be ignored. Unknown OPTION-CODE values must
      be processed as though the OPTION-CODE was not even there.
  
      In this test case, we will query with an unknown EDNS OPTION-CODE and
      expect that the OPTION-CODE is not present in the response for the
      query.
  
      # Summary
  
        -----------------------------------------------------------------------------------------------
        Message Tag                            Level        Arguments     Message ID for message tag
        -------------------------------------- ------------ ------------- -----------------------------
        `ZM_N11_NO_EDNS`                       `ERROR`      ns_ip_list    The DNS response, on query
                                               (changed                   with unknown EDNS
                                               from                       option-code, does not contain
                                               `WARNING`)                 any EDNS from name servers
                                                                          "{ns_ip_list}".
  
        `ZM_N11_NO_RESPONSE`                   `ERROR`      ns_ip_list    There is no response on query
                                               (changed                   with unknown EDNS option-code
                                               from                       from name servers
                                               `WARNING`)                 "{ns_ip_list}".
  
        `ZM_N11_RETURNS_UNKNOWN_OPTION_CODE`   `ERROR`      ns_ip_list    The DNS response, on query
                                               (changed                   with unknown EDNS
                                               from                       option-code, contains an
                                               `WARNING`)                 unknown EDNS option-code from
                                                                          name servers "{ns_ip_list}".
  
        `ZM_N11_UNEXPECTED_ANSWER_SECTION`     `ERROR`      ns_ip_list    The DNS response, on query
                                               (changed                   with unknown EDNS
                                               from                       option-code, does not contain
                                               `WARNING`)                 the expected SOA record in
                                                                          the answer section from name
                                                                          servers "{ns_ip_list}".
  
        `ZM_N11_UNEXPECTED_RCODE`              `ERROR`      ns_ip_list,   The DNS response, on query
                                               (changed     rcode         with unknown EDNS
                                               from                       option-code, has unexpected
                                               `WARNING`)                 RCODE name "{rcode}" from
                                                                          name servers "{ns_ip_list}".
  
        `ZM_N11_UNSET_AA`                      `ERROR`      ns_ip_list    The DNS response, on query
                                               (changed                   with unknown EDNS
                                               from                       option-code, is unexpectedly
                                               `WARNING`)                 not authoritative from name
                                                                          servers "{ns_ip_list}".
        -----------------------------------------------------------------------------------------------
  
      The value in the Level column is the default severity level of the
      message. The severity level can be changed in the [Zonemaster-Engine
      profile](../../../configuration/profiles.md). Also see the [Severity
      Level Definitions](../SeverityLevelDefinitions.md) document.
  
      The argument names in the Arguments column lists the arguments used in
      the message. The argument names are defined in the [argument
      list](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
      or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level
      *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
      severity level *ERROR* or *CRITICAL*.
  
      In other cases, no message or only messages with severity level
      *[INFO](../SeverityLevelDefinitions.md#info)* or
      *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
      Test Case is "pass".
    Errors:
    - ZM_N11_NO_EDNS
    - ZM_N11_UNEXPECTED_RCODE
    - ZM_N11_RETURNS_UNKNOWN_OPTION_CODE
    - ZM_N11_UNSET_AA
    - ZM_N11_NO_RESPONSE
    - ZM_N11_UNEXPECTED_ANSWER_SECTION
    Maturity: BETA
    Summary: Test for unknown EDNS OPTION-CODE

  dns-nameserver12:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver12.md>.
  
      # Objective
  
      EDNS is a mechanism to announce capabilities of a dns implementation,
      and is now basically required by any new functionality in dns such as
      DNSSEC ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891)).
  
      [RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.4),
      section 6.1.4, states that "Z" flag bits must be set to zero by senders
      and ignored by receiver.
  
      [IANA](https://www.iana.org/) lists the flags in the [EDNS Header
      Flags](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-13)
      assignment list.
  
      In this test case, the query will have an unknown EDNS flag set, i.e.
      one of the Z flag bits set to "1", and it is expected that all "Z" bits
      to be clear in the response (set to "0").
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      The outcome of this Test case is "pass" in all other cases.
  
        Message                 Default severity level
        ----------------------- ----------------------------------
        `ZM_NO_RESPONSE`        `ERROR` (changed from `DEBUG`)
        `ZM_NO_EDNS_SUPPORT`    `ERROR` (changed from `WARNING`)
        `ZM_NS_ERROR`           `ERROR` (changed from `WARNING`)
        `ZM_Z_FLAGS_NOTCLEAR`   `ERROR` (changed from `WARNING`)
    Errors:
    - ZM_NO_RESPONSE
    - ZM_NS_ERROR
    - ZM_NO_EDNS_SUPPORT
    - ZM_Z_FLAGS_NOTCLEAR
    Maturity: BETA
    Summary: Test for unknown EDNS flags

  dns-nameserver13:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver13.md>.
  
      # Objective
  
      EDNS is a mechanism to announce capabilities of a DNS implementation,
      and is now basically required by any new functionality in DNS such as
      DNSSEC ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891)).
  
      [RFC 6891, section
      7](https://datatracker.ietf.org/doc/html/rfc6891#section-7) states that
      an OPT record must be included in a truncated response, if the query
      includes an OPT pseudo record.
  
      This Test Case will try to verify that if the response to a query with
      an OPT record is truncated, then the response will contain an OPT
      record.
  
      To trigger a truncated response, the OPT pseudo record 'DO' bit is set
      and the buffer size is limited to 512 bytes. If the zone is not signed
      with DNSSEC, the response will probably not be truncated anyway.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      The outcome of this Test case is "pass" in all other cases.
  
        --------------------------------------------------------------------------
        Message                         Default severity level (when message is
                                        outputed)
        ------------------------------- ------------------------------------------
        `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)
  
        `ZM_NO_EDNS_SUPPORT`            `ERROR` (changed from `WARNING`)
  
        `ZM_NS_ERROR`                   `ERROR` (changed from `WARNING`)
  
        `ZM_MISSING_OPT_IN_TRUNCATED`   `ERROR` (changed from `WARNING`)
        --------------------------------------------------------------------------
    Errors:
    - ZM_NO_RESPONSE
    - ZM_NS_ERROR
    - ZM_NO_EDNS_SUPPORT
    - ZM_MISSING_OPT_IN_TRUNCATED
    Maturity: BETA
    Summary: Test for truncated response on EDNS query

  dns-nameserver14:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver14.md>.
  
      # Objective
  
      This test case actually combines the test options in test cases
      [NAMESERVER10](nameserver10.md) and [NAMESERVER11](nameserver11.md).
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      The outcome of this Test case is "pass" in all other cases.
  
        -----------------------------------------------------------------------
        Message                      Default severity level (Output message)
        ---------------------------- ------------------------------------------
        `ZM_NO_RESPONSE`             `ERROR` (changed from `DEBUG`)
  
        `ZM_NO_EDNS_SUPPORT`         `ERROR` (changed from `WARNING`)
  
        `ZM_NS_ERROR`                `ERROR` (changed from `WARNING`)
  
        `ZM_UNKNOWN_OPTION_CODE`     `ERROR` (changed from `WARNING`)
  
        `ZM_UNSUPPORTED_EDNS_VER`    `ERROR` (changed from `WARNING`)
        -----------------------------------------------------------------------
    Errors:
    - ZM_NO_RESPONSE
    - ZM_UNSUPPORTED_EDNS_VER
    - ZM_NS_ERROR
    - ZM_NO_EDNS_SUPPORT
    - ZM_UNKNOWN_OPTION_CODE
    Maturity: BETA
    Summary: Test for unknown version with unknown OPTION-CODE

  dns-nameserver15:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver15.md>.
  
      # Objective
  
      This Test Case verifies if a name server responds to TXT queries in the
      CHAOS class, specifically about its software version as it may sometimes
      be desirable not to reveal that information.
  
      A description of DNS classes can be found in
      [RFC2929](https://datatracker.ietf.org/doc/html/rfc2929#section-3.2),
      section 3.2.
  
      # Summary
  
        -----------------------------------------------------------------------------------------------
        Message Tag                 Level   Arguments     Message ID for message tag
        --------------------------- ------- ------------- ---------------------------------------------
        `ZM_N15_SOFTWARE_VERSION`   INFO    ns_ip_list,   The following name server(s) respond to
                                            query_name,   software version query "{query_name}" with
                                            string        string "{string}". Returned from name
                                                          servers: "{ns_ip_list}"
  
        `ZM_N15_NO_VERSION`         INFO    ns_ip_list    The following name server(s) do not respond
                                                          to software version queries. Returned from
                                                          name servers: "{ns_ip_list}"
        -----------------------------------------------------------------------------------------------
  
      The value in the Level column is the default severity level of the
      message. The severity level can be changed in the [Zonemaster-Engine
      Profile](../../../configuration/profiles.md). Also see the [Severity
      Level Definitions](../SeverityLevelDefinitions.md) document.
  
      The argument names in the Arguments column lists the arguments used in
      the message. The argument names are defined in the [Argument
      List](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
      or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level
      *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
      severity level *[ERROR](../SeverityLevelDefinitions.md#error)* or
      *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.
  
      In other cases, no message or only messages with severity level
      *[INFO](../SeverityLevelDefinitions.md#info)* or
      *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
      Test Case is "pass".
    Errors:
    - ZM_N15_SOFTWARE_VERSION
    - ZM_N15_NO_VERSION
    Maturity: BETA
    Summary: Checking for revealed software version

  dns-syntax04:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax04.md>.
  
      # Objective
  
      The Name Server name must be a valid hostname according to the rules
      defined in [RFC 952](https://datatracker.ietf.org/doc/html/rfc952), in
      section 2.1 in [RFC
      1123](https://datatracker.ietf.org/doc/html/rfc1123#section-2.1),
      section 11 in [RFC
      2182](https://datatracker.ietf.org/doc/html/rfc2181#section-11) and
      section 2 and 5 in [RFC
      3696](https://datatracker.ietf.org/doc/html/rfc3696#section-2). Newer
      RFCs may override some rules defined in earlier documents.
  
      # Pass/fail criteria
  
      If any of the steps 3 to 5 in the ordered description of this test case
      fails, the whole test case fails.
    Errors:
    - ZM_DNS_SYNTAX04_FAILED
    Maturity: BETA
    Summary: The NS name must have a valid domain/hostname

  dns-syntax05:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax05.md>.
  
      # Objective
  
      The SOA RNAME field does not allow the '@' characters to be used for
      describing a mailbox. The first dot ('.') is thus translated into the
      '@' character. This is a common mistake. The rules are defined in [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035).
  
      # Pass/fail criteria
  
      If there is any '@' character in any SOA/RNAME field, this test case
      fails.
    Errors:
    - ZM_DNS_SYNTAX05_FAILED
    Maturity: BETA
    Summary: Misuse of '@' character in the SOA RNAME field

  dns-syntax06:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax06.md>.
  
      # Objective
  
      The SOA RNAME field is a mailbox address. The SOA RNAME field is defined
      in [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035#section-3.3.13),
      section 3.3.13 and in [RFC
      1912](https://datatracker.ietf.org/doc/html/rfc1912#section-2.2),
      section 2.2. The RNAME field should follow the rules of an e-mail
      address also defined in [RFC
      5322](https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1),
      section 3.4.1.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      In other cases the outcome of this Test Case is "pass".
  
        Message                            Default severity level
        ---------------------------------- ----------------------------------
        `ZM_NO_RESPONSE`                   `ERROR` (changed from `DEBUG`)
        `ZM_NO_RESPONSE_SOA_QUERY`         `ERROR` (changed from `DEBUG`)
        `ZM_RNAME_RFC822_INVALID`          `ERROR` (changed from `WARNING`)
        `ZM_RNAME_MAIL_DOMAIN_INVALID`     `ERROR` (changed from `WARNING`)
        `ZM_RNAME_MAIL_DOMAIN_LOCALHOST`   `ERROR` (changed from `WARNING`)
        `ZM_RNAME_MAIL_ILLEGAL_CNAME`      `ERROR` (changed from `WARNING`)
        `ZM_RNAME_RFC822_VALID`            INFO
    Errors:
    - ZM_NO_RESPONSE
    - ZM_RNAME_MAIL_DOMAIN_LOCALHOST
    - ZM_RNAME_RFC822_INVALID
    - ZM_RNAME_RFC822_VALID
    - ZM_NO_RESPONSE_SOA_QUERY
    - ZM_RNAME_MAIL_ILLEGAL_CNAME
    - ZM_RNAME_MAIL_DOMAIN_INVALID
    Maturity: BETA
    Summary: No illegal characters in the SOA RNAME field

  dns-syntax07:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax07.md>.
  
      # Objective
  
      The SOA MNAME field is a hostname. Hostnames are valid according to the
      rules defined in [RFC
      952](https://datatracker.ietf.org/doc/html/rfc952), in section 2.1 in
      [RFC 1123](https://datatracker.ietf.org/doc/html/rfc1123#section-2.1),
      section 11 in [RFC
      2182](https://datatracker.ietf.org/doc/html/rfc2181#section-11) and
      section 2 and 5 in [RFC
      3696](https://datatracker.ietf.org/doc/html/rfc3696#section-2). Newer
      RFCs may override some rules defined in earlier documents.
  
      # Pass/fail criteria
  
      If any of the steps 4 to 8 in the ordered description of this test case
      fails, the whole test case fails.
    Errors:
    - ZM_DNS_SYNTAX07_FAILED
    Maturity: BETA
    Summary: No illegal characters in the SOA MNAME field

  dns-zone01:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone01.md>.
  
      # Objective
  
      The MNAME field from the SOA record of a zone is supposed to contain the
      master name server for that zone. The hostname of the MNAME field may
      not be listed in the NS records in the zone among the delegated name
      servers, but should still be authoritative for the zone. MNAME may be
      used for other services such as DNS NOTIFY described in
      [RFC1996](https://datatracker.ietf.org/doc/html/rfc1996#section-2).
  
      [RFC1035](https://datatracker.ietf.org/doc/html/rfc1035#section-3.3.13),
      section 3.3.13, specifies that "the *domain-name* of the name server
      that was the original or primary source of data for this zone".
  
      [RFC1996](https://datatracker.ietf.org/doc/html/rfc1996#section-2),
      section 2, and
      [RFC2136](https://datatracker.ietf.org/doc/html/rfc2136#section-1),
      section 1, add that "the primary master is named in the zone's SOA MNAME
      field and optionally by an NS RR. There is by definition only one
      primary master server per zone".
  
      [RFC2181](https://datatracker.ietf.org/doc/html/rfc2181#section-7.3),
      section 7.2, clarifies that "it is quite clear in the specifications,
      yet seems to have been widely ignored, that the MNAME field of the SOA
      record should contain the name of the primary (master) server for the
      zone identified by the SOA. It should not contain the name of the zone
      itself. That information would be useless, as to discover it, one needs
      to start with the domain name of the SOA record - that is the name of
      the zone".
  
      There exists an unstandardized practice to set the SOA MNAME to ".",
      which should not be interpreted that there is no primary master server,
      but to indicate that there is no default server for dynamic updates.
      With ".", SOA MNAME has no server name. There is at least one old and
      expired Internet-Draft that attempted to standardize that behavior,
      [draft-jabley-dnsop-missing-mname](https://www.ietf.org/archive/id/draft-jabley-dnsop-missing-mname-00.html).
      If the SOA MNAME is an empty name (".") this Test Case will not try to
      connect to a server behind it since there will never be a server behind
      that name, as the purpose is most definitely to follow that practice.
      Instead, a special message will be outputted.
  
      This Test Case will check that: - the SOA MNAME contains the master name
      server of *Child Zone*, as best as it can be determined. - the SOA MNAME
      name server is authoritative of *Child Zone*. - the SOA SERIAL of the
      SOA MNAME is at least equal to the ones found from the name servers in
      the NS record set of *Child Zone*. This comparison must be done
      following [RFC1982](https://datatracker.ietf.org/doc/html/rfc1982). -
      the SOA MNAME name server is listed as part of the NS record set of
      *Child Zone*.
  
      # Summary
  
        ----------------------------------------------------------------------------------------------------
        Message Tag                         Level     Arguments        Message ID for message tag
        ----------------------------------- --------- ---------------- -------------------------------------
        `ZM_Z01_MNAME_HAS_LOCALHOST_ADDR`   WARNING   nsname, ns_ip    SOA MNAME name server "{nsname}"
                                                                       resolves to a localhost IP address
                                                                       ({ns_ip}).
  
        `ZM_Z01_MNAME_IS_DOT`               NOTICE    ns_ip_list       SOA MNAME is specified as "." which
                                                                       usually means "no server". Fetched
                                                                       from name servers "{ns_ip_list}".
  
        `ZM_Z01_MNAME_IS_LOCALHOST`         WARNING   ns_ip_list       SOA MNAME name server is "localhost",
                                                                       which is invalid. Fetched from name
                                                                       servers "{ns_ip_list}".
  
        `ZM_Z01_MNAME_MISSING_SOA_RECORD`   WARNING   ns               SOA MNAME name server "{ns}" reponds
                                                                       to an SOA query with no SOA records
                                                                       in the answer section.
  
        `ZM_Z01_MNAME_NO_RESPONSE`          WARNING   ns               SOA MNAME name server "{ns}" does not
                                                                       respond to an SOA query.
  
        `ZM_Z01_MNAME_NOT_AUTHORITATIVE`    WARNING   ns               SOA MNAME name server "{ns}" is not
                                                                       authoritative for the zone.
  
        `ZM_Z01_MNAME_NOT_IN_NS_LIST`       INFO      nsname           SOA MNAME name server "{nsname}" is
                                                                       not listed as NS record for the zone.
  
        `ZM_Z01_MNAME_NOT_MASTER`           WARNING   ns_list,         SOA MNAME name server(s) "{ns_list}"
                                                      soaserial,       do(es) not have the highest SOA
                                                      soaserial_list   SERIAL (expected "{soaserial}" but
                                                                       got "{soaserial_list}")
  
        `ZM_Z01_MNAME_NOT_RESOLVE`          WARNING   nsname           SOA MNAME name server "{nsname}"
                                                                       cannot be resolved into an IP
                                                                       address.
  
        `ZM_Z01_MNAME_UNEXPECTED_RCODE`     WARNING   ns, rcode        SOA MNAME name server "{ns}" gives
                                                                       unexpected RCODE name ("{rcode}") in
                                                                       response to an SOA query.
        ----------------------------------------------------------------------------------------------------
  
      The value in the Level column is the default severity level of the
      message. The severity level can be changed in the [Zonemaster-Engine
      profile](../../../configuration/profiles.md). Also see the [Severity
      Level Definitions](../SeverityLevelDefinitions.md) document.
  
      The argument names in the Arguments column lists the arguments used in
      the message. The argument names are defined in the [argument
      list](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
      or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level
      *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
      severity level *ERROR* or *CRITICAL*.
  
      In other cases, no message or only messages with severity level
      *[INFO](../SeverityLevelDefinitions.md#info)* or
      *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
      Test Case is "pass".
    Errors:
    - ZM_Z01_MNAME_HAS_LOCALHOST_ADDR
    - ZM_Z01_MNAME_NOT_IN_NS_LIST
    - ZM_Z01_MNAME_NO_RESPONSE
    - ZM_Z01_MNAME_NOT_RESOLVE
    - ZM_Z01_MNAME_IS_LOCALHOST
    - ZM_Z01_MNAME_NOT_MASTER
    - ZM_Z01_MNAME_NOT_AUTHORITATIVE
    - ZM_Z01_MNAME_UNEXPECTED_RCODE
    - ZM_Z01_MNAME_IS_DOT
    - ZM_Z01_MNAME_MISSING_SOA_RECORD
    Maturity: BETA
    Summary: Fully qualified master nameserver in SOA

  dns-zone02:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone02.md>.
  
      # Objective
  
      The SOA refresh value is the number of seconds that describes how often
      a secondary name server will poll the primary name server to see if
      there is any updates. The SOA refresh value is described in section
      3.3.13 in [RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035), and
      clarified in section 2.2 of [RFC
      1912](https://datatracker.ietf.org/doc/html/rfc1912). Setting the
      refresh value low will increase the DNS traffic between the servers, and
      also increase the load on the master name server. The primary name
      server will in most cases send DNS notifications to tell the secondary
      name servers that zone content has been updated, as described in [RFC
      1996](https://datatracker.ietf.org/doc/html/rfc1996).
  
      The [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)
      recommendation for the refresh value is 24 hours (86400 seconds). Older
      DNSCheck code had a four hour minimum value, and this is the minimum
      value we recommend.
  
      # Pass/fail criteria
  
      If the SOA refresh value is less than 14400 this test case fails.
    Errors:
    - ZM_DNS_ZONE02_FAILED
    Maturity: BETA
    Summary: SOA 'refresh' minimum value

  dns-zone03:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone03.md>.
  
      # Objective
  
      The SOA retry value is the number of seconds that describes minimum time
      elapsed since a failed zone refresh from the primary name server. The
      SOA refresh value is described in section 3.3.13 in [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035), and clarified in
      section 2.2 of [RFC
      1912](https://datatracker.ietf.org/doc/html/rfc1912).
  
      > It's typically some fraction of the refresh interval.
  
      Setting the retry value low will increase the DNS traffic between the
      servers, and also increase the load on the master name server.
  
      # Pass/fail criteria
  
      If the SOA retry value is higher than or equal to the refresh value,
      this test case fails.
    Errors:
    - ZM_DNS_ZONE03_FAILED
    Maturity: BETA
    Summary: SOA 'retry' lower than 'refresh'

  dns-zone04:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone04.md>.
  
      # Objective
  
      The SOA retry value is the number of seconds that describes minimum time
      elapsed since a failed zone refresh from the primary name server. The
      SOA refresh value is described in section 3.3.13 in [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035), and clarified in
      section 2.2 of [RFC
      1912](https://datatracker.ietf.org/doc/html/rfc1912).
  
      Setting the retry value low will increase the DNS traffic between the
      servers, and also increase the load on the master name server.
  
      The [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)
      recommendation for the retry value is 2 hours (7200 seconds). Older
      DNSCheck code had a one hour minimum value (3600 seconds), and this is
      the minimum value we recommend.
  
      # Pass/fail criteria
  
      If the retry value is less than 3600 seconds, this test case fails.
    Errors:
    - ZM_DNS_ZONE04_FAILED
    Maturity: BETA
    Summary: SOA 'retry' at least 1 hour

  dns-zone05:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone05.md>.
  
      # Objective
  
      The SOA expire value specifies for how long any secondary name server
      keeps the zone valid without any contact with the primary name server.
      This value should be greater than how long a major outage would
      typically last. The expire value should also be larger than the refresh
      and retry values, as described in section 3.3.13 in [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035), and clarified in
      section 2.2 of [RFC
      1912](https://datatracker.ietf.org/doc/html/rfc1912).
  
      Setting the expire value low will increase the risk of any unwanted
      non-availability of the zone because of any failures in contacting the
      primary name server.
  
      The [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)
      recommendation for the expire value is 1000 hours (roughly 41 days).
      Older DNSCheck code had a 7 day minimum value (604800 seconds), and this
      is the minimum value we recommend as an absolut minimum.
  
      # Pass/fail criteria
  
      If the expire value is less than 604800 seconds or if the expire value
      is lower than the refresh value, this test case fails.
    Errors:
    - ZM_DNS_ZONE05_FAILED
    Maturity: BETA
    Summary: SOA 'expire' minimum value

  dns-zone06:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone06.md>.
  
      # Objective
  
      The SOA minimum field sets the default TTL for all records in a zone.
      The recommended value is to be "cache-friendly". However, for a zone
      that changes content often, there is a need to keep the TTL values
      shorter. The use of the SOA minimum value today is the negative cache
      (where a resolver find content is missing).
  
      The SOA minimum field is described in section 3.3.13 in [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035), and clarified in
      section 2.2 of [RFC
      1912](https://datatracker.ietf.org/doc/html/rfc1912). The description of
      the implementation of negative caching is in [RFC
      2308](https://datatracker.ietf.org/doc/html/rfc2308) (although it has
      been updated by several DNSSEC related RFCs, it is still relevant for
      this purpose).
  
      The [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)
      recommendation for the minimum value 2 days, but the negative caching is
      now the norm. DNSCheck has a recommended value of between 300 seconds (5
      minutes) and 86400 seconds (1 day).
  
      # Pass/fail criteria
  
      If the minimum value is larger than 86400 seconds or if the minimum
      value is lower than 300 seconds, this test case fails.
    Errors:
    - ZM_DNS_ZONE06_FAILED
    Maturity: BETA
    Summary: SOA 'minimum' maximum value

  dns-zone07:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone07.md>.
  
      # Objective
  
      Any NS type record should not be a CNAME. The SOA MNAME should in this
      respect not be a CNAME.
  
      Quote from 2.4 in [RFC
      1912](https://datatracker.ietf.org/doc/html/rfc1912):
  
      > Having NS records pointing to a CNAME is bad and may conflict badly
      > with current BIND servers.
  
      The SOA MNAME field is described in section 3.3.13 in [RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035).
  
      The [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)
      recommendation for the minimum value 2 days, but the negative caching is
      now the norm. DNSCheck has a recommended value of between 300 seconds (5
      minutes) and 86400 seconds (1 day).
  
      # Pass/fail criteria
  
      If the SOA MNAME field is pointing to a CNAME, this test case fails.
    Errors:
    - ZM_DNS_ZONE07_FAILED
    Maturity: BETA
    Summary: SOA master is not an alias

  dns-zone10:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone10.md>.
  
      # Objective
  
      The SOA record is crucial for the DNS zone and "exactly one SOA RR
      should be present at the top of the zone" ([RFC
      1035](https://datatracker.ietf.org/doc/html/rfc1035#section-5.2),
      section 5.2). This test case will verify that the zone of the domain to
      be tested return exactly one SOA record.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      In other cases the outcome of this Test Case is "pass".
  
        Message                   Default severity level
        ------------------------- --------------------------------
        `ZM_MULTIPLE_SOA`         ERROR
        `ZM_NO_RESPONSE`          `ERROR` (changed from `DEBUG`)
        `ZM_NO_SOA_IN_RESPONSE`   `ERROR` (changed from `DEBUG`)
        `ZM_ONE_SOA`              INFO
        `ZM_WRONG_SOA`            `ERROR` (changed from `DEBUG`)
    Errors:
    - ZM_MULTIPLE_SOA
    - ZM_WRONG_SOA
    - ZM_NO_SOA_IN_RESPONSE
    - ZM_NO_RESPONSE
    - ZM_ONE_SOA
    Maturity: BETA
    Summary: No multiple SOA records

  dnssec-01:
    Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
      see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec01.md>.\n\n#
      Objective\n\nThe list of allowed Digest Algorithms in a DS record published by
      the\nparent is specified by [RFC\n8624](https://datatracker.ietf.org/doc/html/rfc8624#section-3.3),\nsection
      3.3, and is published in the [IANA\nregistry](https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xml)\nof
      *DS RR Type Digest Algorithms*. No DS Digest Algorithm values, other\nthan those
      specified in the RFC and allocated by IANA, should be used in\npublic DNS.\n\nIf
      [RFC 8624](https://datatracker.ietf.org/doc/html/rfc8624#section-3.3)\nand the
      [IANA\nregistry](https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xml)\ndisagree
      on the same DS digest algorithm, the RFC takes precedence until\nthe registry
      has a been updated with a reference to the RFC.\n\nThe table of algorithms below
      is for reference only and is copied from\n[IANA\nregistry](https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xml).\nIt
      is here to make it easier to read the steps when symbolic names are\ngiven. This
      is only an excerpt from the table. The full table is\navailable at the IANA registry.\n\n
      \ Algorithm number   Algorithm (or description)\n  ------------------ ----------------------------\n
      \ 0                  (Reserved)\n  1                  SHA-1\n  2                  SHA-256\n
      \ 3                  GOST R 34.11-94\n  4                  SHA-384\n  5-255              (Unassigned)\n\nThis
      test case will verify that the Zonemaster implementation has\nsupport for the
      DS digest algorithm of the DS record found, and if not\noutput a message tag.
      If the support is missing other test cases will\nnot be able to verify that DS
      record.\n\n# Summary\n\n-   At least one DS record must be found, or no further
      investigation\n    will be done and no messages will be outputted.\n-   No messages
      will be outputted due to errors in the responses from\n    the parent name servers.\n\n
      \ ---------------------------------------------------------------------------------------------------\n
      \ Message Tag outputted                  Level       Arguments               Description
      of when\n                                                                             message
      tag is outputted\n  -------------------------------------- ----------- -----------------------
      ------------------------\n  `ZM_DS01_DIGEST_NOT_SUPPORTED_BY_ZM`   NOTICE      ns_ip_list,
      algo_mnemo, DS Digest cannot be\n                                                     algo_num,
      keytag        validated by this\n                                                                             installation
      of\n                                                                             Zonemaster.\n\n
      \ `ZM_DS01_DS_ALGO_DEPRECATED`           ERROR       ns_ip_list, algo_mnemo, The
      DS digest algorithm\n                                                     algo_num,
      keytag        is deprecated.\n\n  `ZM_DS01_DS_ALGO_2_MISSING`            `ERROR`
      \                            DS created with algo 2\n                                         (changed
      \                           (SHA-256) is missing.\n                                         from
      \                               \n                                         `NOTICE`)
      \                          \n\n  `ZM_DS01_DS_ALGO_NOT_DS`               ERROR
      \      ns_ip_list, algo_mnemo, The DS digest algorithm\n                                                     algo_num,
      keytag        is not for DS.\n\n  `ZM_DS01_DS_ALGO_RESERVED`             ERROR
      \      ns_ip_list, algo_mnemo, No DS digest algorithm\n                                                     algo_num,
      keytag        defined for the digest\n                                                                             code.\n
      \ ---------------------------------------------------------------------------------------------------\n\nThe
      value in the Level column is the default severity level of the\nmessage. The severity
      level can be overridden in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
      Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
      argument names in the Arguments column lists the arguments used in\nthe message.
      The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
      Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
      least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
      *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
      Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
      but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
      no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
      or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
      Case is \"pass\".\n"
    Errors:
    - ZM_DS01_DIGEST_NOT_SUPPORTED_BY_ZM
    - ZM_DS01_DS_ALGO_RESERVED
    - ZM_DS01_DS_ALGO_2_MISSING
    - ZM_DS01_DS_ALGO_DEPRECATED
    - ZM_DS01_DS_ALGO_NOT_DS
    Maturity: BETA
    Summary: Legal values for the DS hash digest algorithm

  dnssec-02:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec02.md>.
  
      # Objective
  
      DNS delegations from a parent to a child are secured with DNSSEC by
      publishing one or several Delegation Signer (DS) records in the parent
      zone, along with the NS records for the delegation.
  
      For the secure delegation to work, at least one DS record must match a
      DNSKEY record in the child zone ([RFC
      4035](https://datatracker.ietf.org/doc/html/rfc4035#section-5), section
      5). Each DS record should match a DNSKEY record in the child zone. More
      than one DS may match the same DNSKEY. The DNSKEY that the DS record
      refer to must be used to sign the DNSKEY RRset in the child zone ([RFC
      4035](https://datatracker.ietf.org/doc/html/rfc4035#section-5), section
      5).
  
      The DNSKEY record that the DS record refer to must have bit 7 ("Zone Key
      flag") set in the DNSKEY RR Flags ([RFC
      4034](https://datatracker.ietf.org/doc/html/rfc4034#section-5.2),
      section 5.2).
  
      Bit 15 ("Secure Entry Point flag") on a DNSKEY record signals that it is
      meant to be a KSK and pointed out by a DS record. It is noted if the
      DNSKEY record that the DS points at does not have that flag set ([RFC
      4034](https://datatracker.ietf.org/doc/html/rfc4034#section-2.1.1),
      section 2.1.1).
  
      # Summary
  
      -   Both DS record and DNSKEY record must be found, or else no further
          investigation will be done and no messages will be outputted.
      -   No messages will be outputted due to errors in the responses from
          the parent name servers.
  
        -------------------------------------------------------------------------------------------------------
        Message Tag outputted                   Level        Arguments         Description of when message tag
                                                                               is outputted
        --------------------------------------- ------------ ----------------- --------------------------------
        `ZM_DS02_ALGO_NOT_SUPPORTED_BY_ZM`      NOTICE       ns_ip_list,       DNSKEY with tag {keytag} uses
                                                             algo_mnemo,       unsupported algorithm {algo_num}
                                                             algo_num, keytag  ({algo_mnemo}) by this
                                                                               installation of Zonemaster.
                                                                               Fetched from the nameservers
                                                                               with IP addresses
                                                                               "{ns_ip_list}".
  
        `ZM_DS02_DNSKEY_NOT_FOR_ZONE_SIGNING`   ERROR        ns_ip_list,       Flags field of DNSKEY record
                                                             keytag            with tag {keytag} does not have
                                                                               ZONE bit set although DS with
                                                                               same tag is present in parent.
                                                                               Fetched from the nameservers
                                                                               with IP addresses
                                                                               "{ns_ip_list}".
  
        `ZM_DS02_DNSKEY_NOT_SEP`                `ERROR`      ns_ip_list,       Flags field of DNSKEY record
                                                (changed     keytag            with tag {keytag} does not have
                                                from                           SEP bit set although DS with
                                                `NOTICE`)                      same tag is present in parent.
                                                                               Fetched from the nameservers
                                                                               with IP addresses
                                                                               "{ns_ip_list}".
  
        `ZM_DS02_DNSKEY_NOT_SIGNED_BY_ANY_DS`   ERROR        ns_ip_list        The DNSKEY RRset has not been
                                                                               signed by any DNSKEY matched by
                                                                               a DS record. Fetched from the
                                                                               nameservers with IP addresses
                                                                               "{ns_ip_list}".
  
        `ZM_DS02_NO_DNSKEY_FOR_DS`              `ERROR`      ns_ip_list,       The DNSKEY record with tag
                                                (changed     keytag            {keytag} that the DS refers to
                                                from                           does not exist in the DNSKEY
                                                `WARNING`)                     RRset. Fetched from the
                                                                               nameservers with IP
                                                                               "{ns_ip_list}".
  
        `ZM_DS02_NO_MATCHING_DNSKEY_RRSIG`      `ERROR`      ns_ip_list,       The DNSKEY RRset is not signed
                                                (changed     keytag            by the DNSKEY with tag {keytag}
                                                from                           that the DS record refers to.
                                                `WARNING`)                     Fetched from the nameservers
                                                                               with IP "{ns_ip_list}".
  
        `ZM_DS02_NO_MATCH_DS_DNSKEY`            ERROR        ns_ip_list,       The DS record does not match the
                                                             keytag            DNSKEY with tag {keytag} by
                                                                               algorithm or digest. Fetched
                                                                               from the nameservers with IP
                                                                               "{ns_ip_list}".
  
        `ZM_DS02_NO_VALID_DNSKEY_FOR_ANY_DS`    ERROR        ns_ip_list        There is no valid DNSKEY matched
                                                                               by any of the DS records.
                                                                               Fetched from the nameservers
                                                                               with IP addresses
                                                                               "{ns_ip_list}".
  
        `ZM_DS02_RRSIG_NOT_VALID_BY_DNSKEY`     ERROR        ns_ip_list,       The DNSKEY RRset is signed with
                                                             keytag            an RRSIG with tag {keytag} which
                                                                               cannot be validated by the
                                                                               matching DNSKEY. Fetched from
                                                                               the nameservers with IP
                                                                               addresses "{ns_ip_list}".
        -------------------------------------------------------------------------------------------------------
  
      The value in the Level column is the default severity level of the
      message. The severity level can be overridden in the [Zonemaster-Engine
      profile](../../../configuration/profiles.md). Also see the [Severity
      Level Definitions](../SeverityLevelDefinitions.md) document.
  
      The argument names in the Arguments column lists the arguments used in
      the message. The argument names are defined in the [argument
      list](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
      or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level
      *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
      severity level *ERROR* or *CRITICAL*.
  
      In other cases, no message or only messages with severity level
      *[INFO](../SeverityLevelDefinitions.md#info)* or
      *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
      Test Case is "pass".
    Errors:
    - ZM_DS02_ALGO_NOT_SUPPORTED_BY_ZM
    - ZM_DS02_NO_MATCH_DS_DNSKEY
    - ZM_DS02_NO_DNSKEY_FOR_DS
    - ZM_DS02_RRSIG_NOT_VALID_BY_DNSKEY
    - ZM_DS02_DNSKEY_NOT_SEP
    - ZM_DS02_NO_VALID_DNSKEY_FOR_ANY_DS
    - ZM_DS02_NO_MATCHING_DNSKEY_RRSIG
    - ZM_DS02_DNSKEY_NOT_FOR_ZONE_SIGNING
    - ZM_DS02_DNSKEY_NOT_SIGNED_BY_ANY_DS
    Maturity: BETA
    Summary: DS must match a valid DNSKEY in the child zone

  dnssec-03:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec03.md>.
  
      # Objective
  
      For an authoritative name server an increased number of NSEC3 iterations
      have a negative impact on performance.
  
      Section 10.3 in [RFC
      5155](https://datatracker.ietf.org/doc/html/rfc5155#section-10.3) sets a
      maximum number of iterations depending on the DNSSEC key size -
      regardless of which algorithm is used.
  
      > A zone owner MUST NOT use a value higher than shown in the table below
      > for iterations for the given key size. A resolver MAY treat a response
      > with a higher value as insecure, after the validator has verified that
      > the signature over the NSEC3 RR is correct.
  
        Key Size   Iterations
        ---------- ------------
        1024       150
        2048       500
        4096       2,500
  
      Section 5.3.2 in [RFC
      6781](https://datatracker.ietf.org/doc/html/rfc6781#section-5.3.2)
      describes the consequences for an authoritative name server in more
      detail, and references the [NSEC Hash
      Performance](https://www.nlnetlabs.nl/downloads/publications/nsec3_hash_performance.pdf)
      study from NLNet Labs.
  
      > Choosing a value of 100 iterations is deemed to be a sufficiently
      > costly, yet not excessive, value: In the worst-case scenario, the
      > performance of name servers would be halved, regardless of key size.
  
      # Pass/fail criteria
  
      If the NSEC3 iterations value is higher than 100, this test case gives a
      warning. If it is higher than the number recommended for the
      corresponding key size, this test case fails.
    Errors:
    - ZM_DNSSEC_03_FAILED
    Maturity: BETA
    Summary: Check for too many NSEC3 iterations

  dnssec-04:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec04.md>.
  
      # Objective
  
      Having RRSIG signature lifetimes last for too long opens up for DNS
      replay attacks. Having too short RRSIG signature lifetimes is likely to
      have a major operational impact if the master name server is down for
      that long.
  
      There is no clear recommendation of the exact validity periods to use
      with DNSSEC. Shorter validity than 12 hours until expiration will give a
      serious operational problem just in case of temporary network problems,
      and longer than 180 days will create wide open holes for replay attacks.
  
      The considerations are described in
      [RFC6781](https://datatracker.ietf.org/doc/html/rfc6781).
  
      # Pass/fail criteria
  
      If any of the signature expirations time is either shorter than 12 hours
      or longer than 180 days, this test case fails.
    Errors:
    - ZM_DNSSEC_04_FAILED
    Maturity: BETA
    Summary: Check for too short or too long RRSIG lifetimes

  dnssec-05:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec05.md>.
  
      # Objective
  
      A domain name (zone) should only use DNSKEY algorithms that are
      specified by [RFC
      8624](https://www.rfc-editor.org/rfc/rfc8624.html#section-3.1), section
      3.1 and the [IANA
      registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml)
      of *DNSSEC Algorithm Numbers* to be used for DNSSEC signing. A public
      domain name (zone) should not use private algorithms.
  
      If [RFC 8624](https://www.rfc-editor.org/rfc/rfc8624.html#section-3.1)
      and [IANA
      registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml)
      disagree on the same algorithm, the RFC takes precedence until the
      registry has a been updated with a reference to the RFC.
  
      The table of algorithms below is for reference only and is copied from
      [IANA
      registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml).
      It is here to make it easier to read the steps when symbolic names are
      given. This is only an excerpt from the table. The full table is
      available at [IANA
      registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml).
  
        Algorithm number   Algorithm (or description)
        ------------------ --------------------------------
        0                  (Delete DS)
        1                  RSA/MD5
        2                  Diffie-Hellman
        3                  DSA/SHA1
        4                  (Reserved)
        5                  RSA/SHA-1
        6                  DSA-NSEC3-SHA1
        7                  RSASHA1-NSEC3-SHA1
        8                  RSA/SHA-256
        9                  (Reserved)
        10                 RSA/SHA-512
        11                 (Reserved)
        12                 GOST R 34.10-2001
        13                 ECDSA Curve P-256 with SHA-256
        14                 ECDSA Curve P-384 with SHA-384
        15                 Ed25519
        16                 Ed448
        17-122             (Unassigned)
        123-251            (Reserved)
        252                (Indirect Keys)
        253                (Private algorithm)
        254                (Private algorithm OID)
        255                (Reserved)
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      In other cases the outcome of this Test Case is "pass".
  
        Message                          Default severity level
        -------------------------------- ----------------------------------
        `ZM_NO_RESPONSE`                 `ERROR` (changed from `DEBUG`)
        `ZM_NO_RESPONSE_DNSKEY`          `ERROR` (changed from `WARNING`)
        `ZM_ALGORITHM_DEPRECATED`        ERROR
        `ZM_ALGORITHM_RESERVED`          ERROR
        `ZM_ALGORITHM_UNASSIGNED`        ERROR
        `ZM_ALGORITHM_NOT_RECOMMENDED`   WARNING
        `ZM_ALGORITHM_PRIVATE`           ERROR
        `ZM_ALGORITHM_NOT_ZONE_SIGN`     ERROR
        `ZM_ALGORITHM_OK`                INFO
    Errors:
    - ZM_NO_RESPONSE
    - ZM_ALGORITHM_PRIVATE
    - ZM_ALGORITHM_UNASSIGNED
    - ZM_ALGORITHM_OK
    - ZM_ALGORITHM_DEPRECATED
    - ZM_ALGORITHM_NOT_ZONE_SIGN
    - ZM_ALGORITHM_NOT_RECOMMENDED
    - ZM_NO_RESPONSE_DNSKEY
    - ZM_ALGORITHM_RESERVED
    Maturity: BETA
    Summary: Check for invalid DNSKEY algorithms

  dnssec-06:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec06.md>.
  
      # Objective
  
      In order for an authoritative name server to be DNSSEC compliant, it
      must serve DNSSEC signatures (RRSIG) as additional data in a DNS answer.
      This additional processing is described in section 3.1 of [RFC
      4035](https://datatracker.ietf.org/doc/html/rfc4035#section-3.1).
  
      # Pass/fail criteria
  
      If any of the name servers configured for the domains fail to answer
      with DNSSEC data, this test case fails.
    Errors:
    - ZM_DNSSEC_06_FAILED
    Maturity: BETA
    Summary: Verify DNSSEC additional processing

  dnssec-08:
    Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
      see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec08.md>.\n\n#
      Objective\n\nA DNSSEC signed zone should have a DNSKEY RRset in the zone apex
      ([RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.1),\nsection
      2.1) and that RRset should be signed by a key that matches one\nof the records
      in the DNSKEY RRset ([RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.2),\nsection
      2.2).\n\nThis test case will verify if the *Child Zone* meets that requirement.\n\n#
      Summary\n\n-   If no DNSKEY records are found, then further investigation will
      not\n    be done and no messages will be outputted.\n\n  -------------------------------------------------------------------------------------------\n
      \ Message Tag outputted                  Level    Arguments     Description of
      when message\n                                                                tag
      is outputted\n  -------------------------------------- -------- -------------
      -----------------------------\n  `ZM_DS08_ALGO_NOT_SUPPORTED_BY_ZM`     NOTICE
      \  ns_ip_list,   This installation of\n                                                  algo_mnemo,
      \  Zonemaster does not support\n                                                  algo_num,
      \    the DNSKEY algorithm.\n                                                  keytag
      \       \n\n  `ZM_DS08_DNSKEY_RRSIG_EXPIRED`         ERROR    ns_ip_list,   DNSKEY
      RRset is signed with\n                                                  keytag
      \       an RRSIG that has expired.\n\n  `ZM_DS08_DNSKEY_RRSIG_NOT_YET_VALID`   ERROR
      \   ns_ip_list,   DNSKEY RRset is signed with a\n                                                  keytag
      \       not yet valid RRSIG.\n\n  `ZM_DS08_MISSING_RRSIG_IN_RESPONSE`    ERROR
      \   ns_ip_list    DNSKEY is unsigned which is\n                                                                against
      expectation.\n\n  `ZM_DS08_NO_MATCHING_DNSKEY`           ERROR    ns_ip_list,
      \  DNSKEY RRset is signed with\n                                                  keytag
      \       an RRSIG that does not match\n                                                                any
      DNSKEY.\n\n  `ZM_DS08_RRSIG_NOT_VALID_BY_DNSKEY`    ERROR    ns_ip_list,   DNSKEY
      RRset is signed with\n                                                  keytag
      \       an RRSIG that cannot be\n                                                                validated
      by the matching\n                                                                DNSKEY.\n
      \ -------------------------------------------------------------------------------------------\n\nThe
      value in the Level column is the default severity level of the\nmessage. The severity
      level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
      Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
      argument names in the Arguments column lists the arguments used in\nthe message.
      The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
      Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
      least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
      *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
      Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
      but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
      no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
      or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
      Case is \"pass\".\n"
    Errors:
    - ZM_DS08_ALGO_NOT_SUPPORTED_BY_ZM
    - ZM_DS08_NO_MATCHING_DNSKEY
    - ZM_DS08_DNSKEY_RRSIG_NOT_YET_VALID
    - ZM_DS08_RRSIG_NOT_VALID_BY_DNSKEY
    - ZM_DS08_DNSKEY_RRSIG_EXPIRED
    - ZM_DS08_MISSING_RRSIG_IN_RESPONSE
    Maturity: BETA
    Summary: Valid RRSIG for DNSKEY

  dnssec-09:
    Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
      see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec09.md>.\n\n#
      Objective\n\nIf the zone is signed, the SOA RR should be signed with a valid RRSIG\nusing
      a DNSKEY from the DNSKEY RR set. This is described in [RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.2),\nsection
      2.2.\n\nThis test case will verify if the *Child Zone* meets that requirement.\n\n#
      Summary\n\n-   If no DNSKEY records are found, then further investigation will
      not\n    be done and no messages will be outputted.\n\n  ------------------------------------------------------------------------------------------\n
      \ Message Tag outputted                 Level    Arguments     Description of
      when message\n                                                               tag
      is outputted\n  ------------------------------------- -------- ------------- -----------------------------\n
      \ `ZM_DS09_ALGO_NOT_SUPPORTED_BY_ZM`    NOTICE   ns_ip_list,   This installation
      of\n                                                 algo_mnemo,   Zonemaster
      does not support\n                                                 algo_num,     the
      DNSKEY algorithm.\n                                                 keytag        \n\n
      \ `ZM_DS09_MISSING_RRSIG_IN_RESPONSE`   ERROR    ns_ip_list    SOA is unsigned
      which is\n                                                               against
      expectation\n\n  `ZM_DS09_NO_MATCHING_DNSKEY`          ERROR    ns_ip_list,   SOA
      is signed with an RRSIG\n                                                 keytag
      \       that does not match any\n                                                               DNSKEY\n\n
      \ `ZM_DS09_RRSIG_NOT_VALID_BY_DNSKEY`   ERROR    ns_ip_list,   SOA is signed with
      an RRSIG\n                                                 keytag        that
      cannot be validated by\n                                                               the
      matching DNSKEY\n\n  `ZM_DS09_SOA_RRSIG_EXPIRED`           ERROR    ns_ip_list,
      \  SOA is signed with an RRSIG\n                                                 keytag
      \       that has expired\n\n  `ZM_DS09_SOA_RRSIG_NOT_YET_VALID`     ERROR    ns_ip_list,
      \  SOA is signed with a not yet\n                                                 keytag
      \       valid RRSIG\n  ------------------------------------------------------------------------------------------\n\nThe
      value in the Level column is the default severity level of the\nmessage. The severity
      level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
      Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
      argument names in the Arguments column lists the arguments used in\nthe message.
      The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
      Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
      least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
      *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
      Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
      but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
      no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
      or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
      Case is \"pass\".\n"
    Errors:
    - ZM_DS09_ALGO_NOT_SUPPORTED_BY_ZM
    - ZM_DS09_SOA_RRSIG_EXPIRED
    - ZM_DS09_NO_MATCHING_DNSKEY
    - ZM_DS09_SOA_RRSIG_NOT_YET_VALID
    - ZM_DS09_MISSING_RRSIG_IN_RESPONSE
    - ZM_DS09_RRSIG_NOT_VALID_BY_DNSKEY
    Maturity: BETA
    Summary: RRSIG(SOA) must be valid and created by a valid DNSKEY

  dnssec-10:
    Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
      see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec10.md>.\n\n#
      Objective\n\nWhen DNSSEC is enabled, NSEC or NSEC3 records provide a secure denial
      of\nexistence for records not present in the zone. This test case verifies\nthat
      correct NSEC or NSEC3 records with valid signatures are returned\nfor a query
      for an non-existent name.\n\nFurthermore, it is verified that the name servers
      for the zone are\nconsistent about NSEC and NSEC3, i.e. either all servers should
      use NSEC\nor all servers should use NSEC3. It is never permitted to serve both\nNSEC
      and NSEC3 for the same zone.\n\nThe use of the NSEC RR type is described in [RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-3.1.3),\nsection
      3.1.3, and the description of the NSEC RR itself is in [RFC\n4034](https://datatracker.ietf.org/doc/html/rfc4034#section-4),
      section\n4.\n\nThe description of the NSEC3 RR is in [RFC\n5155](https://datatracker.ietf.org/doc/html/rfc5155#section-3),
      section\n3, and its use in the DNS response is described in [RFC\n5155](https://datatracker.ietf.org/doc/html/rfc5155#section-7.2),\nsection
      7.2.\n\n# Summary\n\n-   If no DNSKEY records are found, then further investigation
      will not\n    be done and no messages will be outputted.\n\n  ----------------------------------------------------------------------------------------------\n
      \ Message Tag outputted                   Level    Arguments     Description of
      when message tag\n                                                                 is
      outputted\n  --------------------------------------- -------- ------------- -------------------------------\n
      \ `ZM_DS10_ALGO_NOT_SUPPORTED_BY_ZM`      NOTICE   ns_ip_list,   This installation
      of Zonemaster\n                                                   algo_mnemo,
      \  does not support the DNSKEY\n                                                   algo_num,
      \    algorithm.\n                                                   keytag        \n\n
      \ `ZM_DS10_ANSWER_VERIFY_ERROR`           ERROR    ns_ip_list,   RRSIG on record
      or records in\n                                                   domain,       answer
      section cannot be\n                                                   rrtype        verified.\n\n
      \ `ZM_DS10_HAS_NSEC`                      INFO                   Consistent NSEC
      returned from\n                                                                 servers.\n\n
      \ `ZM_DS10_HAS_NSEC3`                     INFO                   Consistent NSEC3
      returned from\n                                                                 servers.\n\n
      \ `ZM_DS10_INCONSISTENT_NSEC_NSEC3`       ERROR    2 ns_ip_list  Some servers
      return NSEC,\n                                                                 others
      return NSEC3.\n\n  `ZM_DS10_MISSING_NSEC_NSEC3`            ERROR    ns_ip_list
      \   Missing expected NSEC or NSEC3\n                                                                 in
      a signed zone.\n\n  `ZM_DS10_MIXED_NSEC_NSEC3`              ERROR    ns_ip_list
      \   Both NSEC and NSEC3 are\n                                                                 returned
      from the same server.\n\n  `ZM_DS10_NAME_NOT_COVERED_BY_NSEC`      ERROR    ns_ip_list
      \   The non-existent name is not\n                                                                 correctly
      covered by the NSEC\n                                                                 records.\n\n
      \ `ZM_DS10_NAME_NOT_COVERED_BY_NSEC3`     ERROR    ns_ip_list    The non-existent
      name is not\n                                                                 correctly
      covered by the NSEC3\n                                                                 records.\n\n
      \ `ZM_DS10_NON_EXISTENT_RESPONSE_ERROR`   ERROR    ns_ip_list    No or error in
      response of an\n                                                                 expected
      non-existent name.\n\n  `ZM_DS10_NSEC3_MISSING_SIGNATURE`       ERROR    ns_ip_list
      \   Missing signatures for NSEC3\n                                                                 record
      or records.\n\n  `ZM_DS10_NSEC3_RRSIG_VERIFY_ERROR`      ERROR    ns_ip_list    The
      signature or signatures on\n                                                                 the
      NSEC3 record or records\n                                                                 cannot
      be correctly verfied.\n\n  `ZM_DS10_NSEC_MISSING_SIGNATURE`        ERROR    ns_ip_list
      \   Missing signatures for NSEC\n                                                                 record
      or records.\n\n  `ZM_DS10_NSEC_RRSIG_VERIFY_ERROR`       ERROR    ns_ip_list    The
      signature or signatures on\n                                                                 the
      NSEC record or records\n                                                                 cannot
      be correctly verfied.\n\n  `ZM_DS10_UNSIGNED_ANSWER`               ERROR    ns_ip_list,
      \  RRSIG is missing for record or\n                                                   domain,
      \      records in the answer section.\n                                                   rrtype
      \       \n  ----------------------------------------------------------------------------------------------\n\nThe
      value in the Level column is the default severity level of the\nmessage. The severity
      level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
      Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
      argument names in the Arguments column lists the arguments used in\nthe message.
      The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
      Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
      least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
      *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
      Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
      but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
      no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
      or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
      Case is \"pass\".\n"
    Errors:
    - ZM_DS10_ALGO_NOT_SUPPORTED_BY_ZM
    - ZM_DS10_NAME_NOT_COVERED_BY_NSEC3
    - ZM_DS10_INCONSISTENT_NSEC_NSEC3
    - ZM_DS10_NSEC_MISSING_SIGNATURE
    - ZM_DS10_HAS_NSEC
    - ZM_DS10_NSEC3_MISSING_SIGNATURE
    - ZM_DS10_MIXED_NSEC_NSEC3
    - ZM_DS10_UNSIGNED_ANSWER
    - ZM_DS10_ANSWER_VERIFY_ERROR
    - ZM_DS10_NON_EXISTENT_RESPONSE_ERROR
    - ZM_DS10_MISSING_NSEC_NSEC3
    - ZM_DS10_NSEC_RRSIG_VERIFY_ERROR
    - ZM_DS10_HAS_NSEC3
    - ZM_DS10_NSEC3_RRSIG_VERIFY_ERROR
    - ZM_DS10_NAME_NOT_COVERED_BY_NSEC
    Maturity: BETA
    Summary: Zone contains NSEC or NSEC3 records

  dnssec-12:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec12.md>.
  
      # Objective
  
      The objectives for this Test Case has yet to be defined. This is a
      placeholder for a complete defintion of the Test Case. The Test Case is
      not yet implemented.
  
      Test for DNSSEC Algorithm Completeness (DS-\>DNSKEY-\>RRSIG)
  
      See issues [#588](https://github.com/zonemaster/zonemaster/issues/588),
      [#528](https://github.com/zonemaster/zonemaster/issues/528),
      [#529](https://github.com/zonemaster/zonemaster/issues/529) and
      [#231](https://github.com/zonemaster/zonemaster/issues/231).
  
      # Pass/fail criteria
  
      TBD.
    Errors:
    - ZM_DNSSEC_12_FAILED
    Maturity: BETA
    Summary: Test for DNSSEC Algorithm Completeness

  dnssec-13:
    Description: "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation,
      see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec13.md>.\n\n#
      Objective\n\nFrom [RFC\n6840](https://datatracker.ietf.org/doc/html/rfc6840#section-5.11),\nsection
      5.11:\n\n> The DS RRset and DNSKEY RRset are used to signal which algorithms are\n>
      used to sign a zone. \\[...\\] The zone MUST also be signed with each\n> algorithm
      (though not each key) present in the DNSKEY RRset. \\[...\\]\n\nTo verify that
      the whole zone is signed with all algorithms require\naccess to the complete zone,
      which is generally not possible for public\nzones. This test case is limited to
      three RRsets that must be present in\na signed zone, the SOA RRset, the NS RRset
      and the DNSKEY RRset.\n\nThis test case will verify that for each DNSKEY algorithm,
      there is a\nRRSIG of that algorithm for the three selected RRsets.\n\n# Summary\n\n-
      \  If the name server reports no DNSKEY RRset, then this test case will\n    not
      test or report anything.\n-   This test case will not report anything unless there
      is an issue to\n    report.\n\n  ----------------------------------------------------------------------------------------------\n
      \ Message Tag outputted              Level        Arguments           Description
      of when\n                                                                      message
      tag is outputted\n  ---------------------------------- ------------ -------------------
      --------------------------\n  `ZM_DS13_ALGO_NOT_SIGNED_DNSKEY`   `ERROR`      ns_ip_list,
      \        The DNSKEY RRset is not\n                                     (changed
      \    algo_mnemo,         signed with an algorithm\n                                     from
      \        algo_num            present in the DNSKEY\n                                     `WARNING`)
      \                      RRset\n\n  `ZM_DS13_ALGO_NOT_SIGNED_NS`       `ERROR`      ns_ip_list,
      \        The NS RRset is not signed\n                                     (changed
      \    algo_mnemo,         with an algorithm present\n                                     from
      \        algo_num            in the DNSKEY RRset\n                                     `WARNING`)
      \                      \n\n  `ZM_DS13_ALGO_NOT_SIGNED_SOA`      `ERROR`      ns_ip_list,
      \        The SOA RRset is not\n                                     (changed     algo_mnemo,
      \        signed with an algorithm\n                                     from         algo_num
      \           present in the DNSKEY\n                                     `WARNING`)
      \                      RRset\n  ----------------------------------------------------------------------------------------------\n\nThe
      value in the Level column is the default severity level of the\nmessage. The severity
      level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md).
      Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe
      argument names in the Arguments column lists the arguments used in\nthe message.
      The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n#
      Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at
      least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor
      *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this
      Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*,
      but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases,
      no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)*
      or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest
      Case is \"pass\".\n"
    Errors:
    - ZM_DS13_ALGO_NOT_SIGNED_DNSKEY
    - ZM_DS13_ALGO_NOT_SIGNED_SOA
    - ZM_DS13_ALGO_NOT_SIGNED_NS
    Maturity: BETA
    Summary: All DNSKEY algorithms used to sign the zone

  dnssec-14:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec14.md>.
  
      # Objective
  
      The DNSKEYs based on RSA have different minimum and maximum key sizes,
      which must be followed. This test case will validate the keys size of
      such keys. RSA based algorithms that are deprecated or else not suitable
      for DNSKEY ([RFC
      8624](https://www.rfc-editor.org/rfc/rfc8624.html#section-3.1) and [IANA
      registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml))
      are just ignored. See test case [DNSSEC05](./dnssec05.md) for test of
      algorithm.
  
      The table 1 below specify the maximum and minimum key size,
      respectively. Algorithm number can be found in [IANA
      registry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml).
  
      Table 1: Minimum and maximum RSA key sizes in bits
  
        Algorithm   Min size   Max size   Reference
        ----------- ---------- ---------- ---------------------------------------------------------------------
        5           512        4096       [RFC 3110](https://datatracker.ietf.org/doc/html/rfc3110)
        7           512        4096       [RFC 5155](https://datatracker.ietf.org/doc/html/rfc5155)
        8           512        4096       [RFC 5702](https://datatracker.ietf.org/doc/html/rfc5702#section-2)
        10          1024       4096       [RFC 5702](https://datatracker.ietf.org/doc/html/rfc5702#section-2)
  
      It is also recommended that an RSA based algorithm has a key length of
      at least 2048 bit as stated in [NIST SP 800-57 Part 1
      Rev. 4](https://csrc.nist.gov/publications/detail/sp/800-57-part-1/rev-4/archive/2016-01-28),
      table 2 on page 53 in section 5.6.1 and table 4 on page 55 in section
      5.6.2.
  
      This test case verifies that RSA DNSKEYs follows the stated key lengths
      from the RFCs and also the NIST recommended shortest key length.
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *ERROR* or *CRITICAL*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level *WARNING*, but no message with severity
      level *ERROR* or *CRITICAL*.
  
      In other cases the outcome of this Test Case is "pass".
  
        Message                          Default severity level
        -------------------------------- ----------------------------------
        `ZM_NO_RESPONSE`                 `ERROR` (changed from `DEBUG`)
        `ZM_NO_RESPONSE_DNSKEY`          `ERROR` (changed from `WARNING`)
        `ZM_DNSKEY_SMALLER_THAN_REC`     WARNING
        `ZM_DNSKEY_TOO_SMALL_FOR_ALGO`   ERROR
        `ZM_DNSKEY_TOO_LARGE_FOR_ALGO`   ERROR
        `ZM_KEY_SIZE_OK`                 INFO
    Errors:
    - ZM_NO_RESPONSE
    - ZM_DNSKEY_TOO_LARGE_FOR_ALGO
    - ZM_DNSKEY_SMALLER_THAN_REC
    - ZM_KEY_SIZE_OK
    - ZM_NO_RESPONSE_DNSKEY
    - ZM_DNSKEY_TOO_SMALL_FOR_ALGO
    Maturity: BETA
    Summary: Check for valid RSA DNSKEY key size

  dnssec-15:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec15.md>.
  
      # Objective
  
      CDS and CDNSKEY record types are defined in [RFC
      7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC
      8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types
      are optional in a zone. The objective of this test case is to verify
      that they are correctly set-up, if included in the zone.
  
      If a CDS record is included in the zone, the corresponding CDNSKEY
      record should also be included ([RFC
      7344](https://datatracker.ietf.org/doc/html/rfc7344#section-4), section
      4).
  
      The CDS and CDNSKEY RRsets should be consistent between all name servers
      for the zone in question.
  
      If there are both CDS RRs and CDNSKEY RRs in the zone they must match in
      content ([RFC
      7344](https://datatracker.ietf.org/doc/html/rfc7344#section-4), section
      4). It means that both must be derived from the same DNSKEY or both
      being "delete" CDS and CDNSKEY.
  
      # Summary
  
        ------------------------------------------------------------------------------------------------------------
        Message Tag outputted            [Default                                 Description of when message tag is
                                         level](../SeverityLevelDefinitions.md)   outputted
        -------------------------------- ---------------------------------------- ----------------------------------
        `ZM_DS15_HAS_CDNSKEY_NO_CDS`     NOTICE                                   CDNSKEY RRset is found, but no CDS
                                                                                  RRset.
  
        `ZM_DS15_HAS_CDS_AND_CDNSKEY`    INFO                                     CDNSKEY and CDS RRsets are found.
  
        `ZM_DS15_HAS_CDS_NO_CDNSKEY`     NOTICE                                   CDS RRset is found, but no CDNSKEY
                                                                                  RRset.
  
        `ZM_DS15_INCONSISTENT_CDNSKEY`   ERROR                                    All servers do not have the same
                                                                                  CDNSKEY RRset.
  
        `ZM_DS15_INCONSISTENT_CDS`       ERROR                                    All servers do not have the same
                                                                                  CDS RRset.
  
        `ZM_DS15_MISMATCH_CDS_CDNSKEY`   ERROR                                    Both CDS and CDNSKEY RRsets are
                                                                                  found but they do not match.
  
        `ZM_DS15_NO_CDS_CDNSKEY`         INFO                                     No CDS or CDNSKEY RRsets are found
                                                                                  on any name server.
        ------------------------------------------------------------------------------------------------------------
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
      or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level
      *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
      severity level *ERROR* or *CRITICAL*.
  
      In other cases, no message or only messages with severity level
      *[INFO](../SeverityLevelDefinitions.md#info)* or
      *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
      Test Case is "pass".
    Errors:
    - ZM_DS15_HAS_CDNSKEY_NO_CDS
    - ZM_DS15_INCONSISTENT_CDS
    - ZM_DS15_HAS_CDS_NO_CDNSKEY
    - ZM_DS15_NO_CDS_CDNSKEY
    - ZM_DS15_HAS_CDS_AND_CDNSKEY
    - ZM_DS15_MISMATCH_CDS_CDNSKEY
    - ZM_DS15_INCONSISTENT_CDNSKEY
    Maturity: BETA
    Summary: Existence of CDS and CDNSKEY

  dnssec-16:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec16.md>.
  
      # Objective
  
      CDS and CDNSKEY record types are defined in [RFC
      7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC
      8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types
      are optional in a zone. The objective of this test case is to verify
      that the CDS RRset is valid. This test case is only relevant if the zone
      has at least one CDS record. For tests of the CDNSKEY, see test case
      [DNSSEC17](dnssec17.md).
  
      # Summary
  
      -   If no CDS record is found, the test case will terminate early with
          no message tag outputted.
      -   If a CDS record is of "delete" type, then it can by definition not
          match or point at any DNSKEY record.
  
        -------------------------------------------------------------------------------------------------------------------
        Message Tag outputted                    [Default                                 Description of when message tag
                                                 level](../SeverityLevelDefinitions.md)   is outputted
        ---------------------------------------- ---------------------------------------- ---------------------------------
        `ZM_DS16_CDS_INVALID_RRSIG`              ERROR                                    CDS RRset is signed with an
                                                                                          invalid RRSIG.
  
        `ZM_DS16_CDS_MATCHES_NON_SEP_DNSKEY`     `ERROR` (changed from `NOTICE`)          CDS record matches a DNSKEY with
                                                                                          SEP bit (bit 15) unset.
  
        `ZM_DS16_CDS_MATCHES_NON_ZONE_DNSKEY`    ERROR                                    CDS record matches a DNSKEY with
                                                                                          zone bit (bit 7) unset.
  
        `ZM_DS16_CDS_MATCHES_NO_DNSKEY`          `ERROR` (changed from `WARNING`)         CDS record does not match any
                                                                                          DNSKEY in DNSKEY RRset.
  
        `ZM_DS16_CDS_NOT_SIGNED_BY_CDS`          `ERROR` (changed from `NOTICE`)          CDS RRset is not signed by the
                                                                                          key that the CDS record points
                                                                                          to.
  
        `ZM_DS16_CDS_SIGNED_BY_UNKNOWN_DNSKEY`   ERROR                                    CDS RRset is signed by a key not
                                                                                          in DNSKEY RRset.
  
        `ZM_DS16_CDS_UNSIGNED`                   ERROR                                    CDS RRset is unsigned.
  
        `ZM_DS16_CDS_WITHOUT_DNSKEY`             ERROR                                    CDS RRset exists, but there is no
                                                                                          DNSKEY RRset.
  
        `ZM_DS16_DELETE_CDS`                     INFO                                     CDS RRset has a "delete" CDS
                                                                                          record as a single record.
  
        `ZM_DS16_DNSKEY_NOT_SIGNED_BY_CDS`       `ERROR` (changed from `WARNING`)         DNSKEY RRset is not signed by the
                                                                                          key or keys that the CDS records
                                                                                          point to.
  
        `ZM_DS16_MIXED_DELETE_CDS`               ERROR                                    "Delete" CDS record is mixed with
                                                                                          normal CDS record.
        -------------------------------------------------------------------------------------------------------------------
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
      or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level
      *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
      severity level *ERROR* or *CRITICAL*.
  
      In other cases, no message or only messages with severity level
      *[INFO](../SeverityLevelDefinitions.md#info)* or
      *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
      Test Case is "pass".
    Errors:
    - ZM_DS16_CDS_INVALID_RRSIG
    - ZM_DS16_CDS_UNSIGNED
    - ZM_DS16_CDS_NOT_SIGNED_BY_CDS
    - ZM_DS16_MIXED_DELETE_CDS
    - ZM_DS16_CDS_MATCHES_NON_ZONE_DNSKEY
    - ZM_DS16_DELETE_CDS
    - ZM_DS16_CDS_SIGNED_BY_UNKNOWN_DNSKEY
    - ZM_DS16_CDS_WITHOUT_DNSKEY
    - ZM_DS16_CDS_MATCHES_NON_SEP_DNSKEY
    - ZM_DS16_DNSKEY_NOT_SIGNED_BY_CDS
    - ZM_DS16_CDS_MATCHES_NO_DNSKEY
    Maturity: BETA
    Summary: Validate CDS

  dnssec-17:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec17.md>.
  
      # Objective
  
      CDS and CDNSKEY record types are defined in [RFC
      7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC
      8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types
      are optional in a zone. The objective of this test case is to verify
      that the CDNSKEY RRset is valid. This test case is only relevant if the
      zone has at least one CDNSKEY record. For tests of the CDS, see test
      case [DNSSEC16](dnssec16.md).
  
      # Summary
  
      -   If no CDNSKEY record is found, the test case will terminate early
          with no message tag outputted.
      -   If a CDNSKEY record is of "delete" type, then it can by definition
          not match or point at any DNSKEY record.
  
        -----------------------------------------------------------------------------------------------------------------------
        Message Tag outputted                        [Default                                 Description of when message tag
                                                     level](../SeverityLevelDefinitions.md)   is outputted
        -------------------------------------------- ---------------------------------------- ---------------------------------
        `ZM_DS17_CDNSKEY_INVALID_RRSIG`              ERROR                                    CDNSKEY RRset signed with an
                                                                                              invalid RRSIG.
  
        `ZM_DS17_CDNSKEY_IS_NON_SEP`                 `ERROR` (changed from `NOTICE`)          CDNSKEY record has the SEP bit
                                                                                              (bit 15) unset.
  
        `ZM_DS17_CDNSKEY_IS_NON_ZONE`                ERROR                                    CDNSKEY record has the zone bit
                                                                                              (bit 7) unset.
  
        `ZM_DS17_CDNSKEY_MATCHES_NO_DNSKEY`          `ERROR` (changed from `WARNING`)         CDNSKEY record does not match any
                                                                                              DNSKEY in DNSKEY RRset.
  
        `ZM_DS17_CDNSKEY_NOT_SIGNED_BY_CDNSKEY`      `ERROR` (changed from `NOTICE`)          CDNSKEY RRset is not signed by
                                                                                              the key that the CDNSKEY record
                                                                                              points to.
  
        `ZM_DS17_CDNSKEY_SIGNED_BY_UNKNOWN_DNSKEY`   ERROR                                    CDNSKEY RRset is signed by a key
                                                                                              not in DNSKEY RRset.
  
        `ZM_DS17_CDNSKEY_UNSIGNED`                   ERROR                                    CDNSKEY RRset is unsigned.
  
        `ZM_DS17_CDNSKEY_WITHOUT_DNSKEY`             ERROR                                    CDNSKEY RRset exists, but there
                                                                                              is no DNSKEY RRset.
  
        `ZM_DS17_DELETE_CDNSKEY`                     INFO                                     CDNSKEY RRset has a "delete"
                                                                                              CDNSKEY record as a single
                                                                                              record.
  
        `ZM_DS17_DNSKEY_NOT_SIGNED_BY_CDNSKEY`       `ERROR` (changed from `WARNING`)         DNSKEY RRset is not signed by the
                                                                                              key or keys that the CDNSKEY
                                                                                              records point to.
  
        `ZM_DS17_MIXED_DELETE_CDNSKEY`               ERROR                                    "Delete" CDNSKEY record is mixed
                                                                                              with normal CDNSKEY record.
        -----------------------------------------------------------------------------------------------------------------------
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
      or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level
      *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
      severity level *ERROR* or *CRITICAL*.
  
      In other cases, no message or only messages with severity level
      *[INFO](../SeverityLevelDefinitions.md#info)* or
      *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
      Test Case is "pass".
    Errors:
    - ZM_DS17_CDNSKEY_INVALID_RRSIG
    - ZM_DS17_CDNSKEY_UNSIGNED
    - ZM_DS17_CDNSKEY_NOT_SIGNED_BY_CDNSKEY
    - ZM_DS17_MIXED_DELETE_CDNSKEY
    - ZM_DS17_CDNSKEY_IS_NON_ZONE
    - ZM_DS17_DELETE_CDNSKEY
    - ZM_DS17_CDNSKEY_SIGNED_BY_UNKNOWN_DNSKEY
    - ZM_DS17_CDNSKEY_WITHOUT_DNSKEY
    - ZM_DS17_CDNSKEY_IS_NON_SEP
    - ZM_DS17_DNSKEY_NOT_SIGNED_BY_CDNSKEY
    - ZM_DS17_CDNSKEY_MATCHES_NO_DNSKEY
    Maturity: BETA
    Summary: Validate CDNSKEY

  dnssec-18:
    Description: |
      This test case comes from version v2023.1.4 of Zonemaster. For more
      information, see
      <https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec18.md>.
  
      # Objective
  
      CDS and CDNSKEY record types are defined in [RFC
      7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC
      8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types
      are optional in a zone. The objective of this test case is to verify
      that there is a correct chain of trust from DS, in the parent zone to
      the CDS and CDNSKEY RRsets ([RFC
      7344](https://datatracker.ietf.org/doc/html/rfc7344#section-4.1),
      section 4.1).
  
      As stated in [RFC
      4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.4),
      section 2.4: \> A DS RR SHOULD point to a DNSKEY RR that is present in
      the child's \> apex DNSKEY RRset, and the child's apex DNSKEY RRset
      SHOULD be \> signed by the corresponding private key."
  
      This Test case is only relevant if \* The *Child Zone* has either CDS or
      CDNSKEY record or both, and \* The parent zone has a DS RRset for the
      *Child Zone*.
  
      # Summary
  
      -   If no CDS or CDNSKEY records are found, this test case is not run
          and no message will be outputted.
      -   If no DS records are found at parent, this test case is not run and
          no message will be outputted.
  
        -------------------------------------------------------------------------------------------------------------------
        Message Tag outputted                 [Default                                 Description of when message tag is
                                              level](../SeverityLevelDefinitions.md)   outputted
        ------------------------------------- ---------------------------------------- ------------------------------------
        `ZM_DS18_NO_MATCH_CDS_RRSIG_DS`       ERROR                                    The CDS RRset is not signed with a
                                                                                       DNSKEY record that a DS record
                                                                                       points to.
  
        `ZM_DS18_NO_MATCH_CDNSKEY_RRSIG_DS`   ERROR                                    CDNSKEY RRset is not signed with a
                                                                                       DNSKEY record that a DS record
                                                                                       points to.
        -------------------------------------------------------------------------------------------------------------------
  
      # Pass/fail criteria
  
      The outcome of this Test Case is "fail" if there is at least one message
      with the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*
      or *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.
  
      The outcome of this Test Case is "warning" if there is at least one
      message with the severity level
      *[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with
      severity level *ERROR* or *CRITICAL*.
  
      In other cases, no message or only messages with severity level
      *[INFO](../SeverityLevelDefinitions.md#info)* or
      *[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this
      Test Case is "pass".
    Errors:
    - ZM_DS18_NO_MATCH_CDS_RRSIG_DS
    - ZM_DS18_NO_MATCH_CDNSKEY_RRSIG_DS
    Maturity: BETA
    Summary: Validate trust from DS to CDS and CDNSKEY

  dnssec-91:
    Summary: Permitted signing algorithms
    Maturity: BETA
    Description: |
      In addition to the requirements outlined in `dnssec-05`, this test imposes
      an additional requirement on the signing algorithms used to sign zones,
      specifically, the algorithm number **MUST NOT** be lower than 8.
    Input-Parameters:
    Errors:
      - DNSSEC_DNS_QUERY_ERROR
      - DNSSEC_INVALID_SIGNING_ALGORITHM
    Dependencies:
      - dnssec-05
  dnssec-92:
    Summary: Permitted DS record hash algorithm(s)
    Maturity: BETA
    Description: |
      The DS record(s) submitted in the `dnssec.dsRecords` input parameters will
      be validated. Algorithm 1 (SHA-1) **MUST NOT** be used.
    Input-Parameters:
    Errors:
      - DNSSEC_DNS_QUERY_ERROR
      - DNSSEC_INVALID_DIGEST_ALGORITHM
  dnssecOps01-ZSKRollover:
    Summary: ZSK rollover
    Description: |
      This test case verifies the RSP's ability to perform a ZSK rollover (as
      described in [Section 4.1.1 of
      RFC 6781](https://datatracker.ietf.org/doc/html/rfc6781#section-4.1.1) for
      a zone.
  
      If the value of the `dnssecOps.csk` input parameter is `true`, then this
      test will be skipped.
  
      The system will monitor the SOA record in the domain name specified in the
      `dnssec.zskRolloverZone` input parameter. The domain may be present
      anywhere in the DNS hierarchy (that is, it does not need to be a TLD), but
      **MUST** have a secure chain of trust up to the root zone, so that it can
      be validated using the root zone trust anchor.
  
      During the test period (currently defined as 24 hours) the operator
      **MUST** successfully carry out a ZSK rollover for the domain, where the
      Zone Signing Key is replaced, without disrupting the chain of trust.
  
      To simplify testing, applicants may wish to provision domain that is
      configured with short TTLs and a short ZSK lifetime, so that a ZSK
      rollover is guaranteed to occur within the 24 test period.
    Input-Parameters:
      - dnssecOps.csk
      - dnssecOps.zskRolloverZone
    Dependencies:
  dnssecOps02-KSKRollover:
    Summary: KSK rollover
    Description: |
      This test case verifies the RSP's ability to perform a CSK/KSK rollover
      (as described in [Sections 4.1.2 and 4.13 of
      RFC 6781](https://datatracker.ietf.org/doc/html/rfc6781#section-4.1.2) for
      a zone.
  
      The system will monitor the SOA record in the domain name specified in the
      `dnssec.kskRolloverZone` input parameter. The domain may be present
      anywhere in the DNS hierarchy (that is, it does not need to be a TLD), but
      **MUST** have a secure chain of trust up to the root zone, so that it can
      be validated using the root zone trust anchor.
  
      During the test period (currently defined as 24 hours) the operator
      **MUST** successfully carry out a KSK rollover for the domain, where the
      Key Signing Key is replaced, and the DS record in the parent zone is
      updated, without disrupting the chain of trust.
    Input-Parameters:
      - dnssecOps.kskRolloverZone
    Dependencies:
  dnssecOps03-AlgorithmRollover:
    Summary: algorithm rollover
    Description: |
      This test case verifies the RSP's ability to perform an algorithm rollover
      (as described in [Section 4.1.4 of
      RFC 6781](https://datatracker.ietf.org/doc/html/rfc6781#section-4.1.2) for
      a zone.
  
      The system will monitor the SOA record in the domain name specified in the
      `dnssec.algorithmRolloverZone` input parameter. The domain may be present
      anywhere in the DNS hierarchy (that is, it does not need to be a TLD), but
      **MUST** have a secure chain of trust up to the root zone, so that it can
      be validated using the root zone trust anchor.
  
      During the test period (currently defined as 72 hours) the operator
      **MUST** successfully carry out an algorithm rollover for the domain
      (including an update to the DS record in the parent zone), where the
      algorithm used to secure the domain is changed, without disrupting the
      chain of trust.
  
      Note that the specific algorithms being rolled to and from are not
      significant (although they **MUST** be present in the IANA registry); it
      is not required that the new algorithm be more "secure" than the original
      algorithm; only that they are different. So a rollover from algorithm 13
      (`ECDSAP256SHA256`) to algorithm 8 (`RSASHA256`) will be accepted as well
      as a rollover from `RSASHA256` to `ECDSAP256SHA256`.
    Input-Parameters:
      - dnssecOps.algorithmRolloverZone
    Dependencies:
  
  rde-01:
    Summary: validate deposit filename format
    Maturity: BETA
    Description: |
      * The deposit filename **MUST** conform to the format specified in the RA.
      * The type of the deposit **MUST** be `FULL`.
      * The TLD in the filename **MUST** be present in the list of TLDs
        associated with the test.
    Input-Parameters:
  rde-02:
    Summary: validate signature over deposit file
    Maturity: BETA
    Description: |
      The PGP signature **MUST** be valid for the deposit file and the RSP's
      key.
    Input-Parameters:
      - rde.publicKey
      - rde.signatureFile
  rde-03:
    Summary: decrypt deposit file(s)
    Maturity: BETA
    Description: |
      It **MUST** be possible to decrypt the deposit file using the RST key. The
      PGP public key for which the deposit **MUST** be encrypted may be found in
      the URL specified by the `rde.encryptionKey` resource.
    Input-Parameters:
    Resources:
      - rde.encryptionKey
  rde-04:
    Summary: validate XML/CSV
    Maturity: BETA
    Description: |
      * XML deposit files **MUST** be well-formed and validate against the XML
        schema.
      * CSV files **MUST** conform to RFC 4180.
      * Deposits **MUST NOT** contain a mix of XML and CSV files for the deposit
        contents.
    Input-Parameters:
  rde-05:
    Summary: validate object types
    Maturity: BETA
    Description: |
      The header object **MUST** reference the correct object XML namespace
      URIs.
  
      The correct URIs is determined by the `general.minimalPublicDataSet` and
      `epp.hostModel` input parameters.
  
      All expected URIs **MUST** be present in the header, and the header **MUST
      NOT** contain any unexpected URIs.
    Input-Parameters:
  rde-06:
    Summary: validate object counts
    Maturity: BETA
    Description: |
      The number of each type of object **MUST** match the number of objects
      actually present in the deposit file.
    Input-Parameters:
  rde-07:
    Summary: validate domain objects
    Maturity: BETA
    Description: |
      Domain objects (whether CSV or XML) **MUST** have the required object
      properties, and the values of those object properties **MUST** be
      well-formed.
  
      The required properties are:
  
      * `<domain:name>`
      * `<domain:roid>` (which **MUST** have a repository ID registered with
        IANA)
      * at least one `<domain:status>` element
      * `<domain:registrant>` (if `general.minimalPublicDataSet` is `false`)
      * `<domain:clID>` (sponsoring registrar ID)
      * `<domain:crDate>` (creation date)
      * `<domain:exDate>` (expiry date)
  
      Contact, host and registrar objects (including optional objects such as
      admin and tech contacts) which are referenced in domain objects **MUST**
      be present in the deposit.
    Input-Parameters:
  rde-08:
    Summary: validate host objects (if applicable)
    Maturity: BETA
    Description: |
      Host objects (whether CSV or XML) **MUST** have the required object
      properties, and the values of those object properties **MUST** be
      well-formed.
  
      The required properties are:
  
      * `<host:name>`
      * `<host:roid>` (which **MUST** have a repository ID registered with
        IANA)
      * at least one `<domain:status>` element
      * one or more `<addr>` elements (if the host name is subordinate to
        the TLD)
      * `<host:clID>` (sponsoring registrar ID)
  
      If the applicant uses the host attribute model, then this test will be
      skipped.
    Input-Parameters:
  rde-09:
    Summary: validate contact objects (if applicable)
    Maturity: BETA
    Description: |
      Contact objects (whether CSV or XML) **MUST** have the required object
      properties, and the values of those object properties **MUST** be
      well-formed.
  
      The required properties are:
  
      * `<contact:id>`
      * `<contact:roid>` (which **MUST** have a repository ID registered with
        IANA)
      * at least one `<contact:status>` element
      * 1-2 `<contact:postalInfo>` elements containing the following:
          * a "type" attribute of "int" or "loc"
          * `<contact:name>` element
          * an `<contact:addr>` element containing the following:
            * at least one 1 `<contact:street>` element
            * `<contact:city>` element
            * `<contact:cc>` element
      * `<contact:voice>`
      * `<contact:email>`
      * `<contact:clID>` (sponsoring registrar ID)
  
      If the applicant uses the "thin" registry model, then this test will be
      skipped.
    Input-Parameters:
  rde-10:
    Summary: validate registrar objects
    Maturity: BETA
    Description: |
      Registrar objects (whether CSV or XML) **MUST** have the required object
      properties, and the values of those object properties **MUST** be
      well-formed.
  
      The required properties are:
  
      * `<rdeRegistrar:id>`
      * `<rdeRegistrar:name>`
      * `<rdeRegistrar:gurid>` (IANA ID)
    Input-Parameters:
  rde-11:
    Summary: validate IDN table objects (if applicable)
    Maturity: BETA
    Description: |
      IDN table objects (whether CSV or XML) **MUST** have the required object
      properties, and the values of those object properties **MUST** be
      well-formed.
  
      All IDN table objects present in the deposit **MUST** correspond to IDN
      tables approved for the TLD, and all approved tables **MUST** have a
      corresponding object in the deposit.
    Input-Parameters:
  rde-12:
    Summary: validate NNDN objects
    Maturity: BETA
    Description: |
      NNDN table objects (whether CSV or XML) **MUST** have the required object
      properties, and the values of those object properties **MUST** be
      well-formed.
  
      The `aName` property of NNDN objects **MUST NOT** match the `name`
      property of a domain object.
  rde-13:
    Summary: validate EPP parameters object
    Maturity: BETA
    Description: |
      The EPP Parameters object **MUST** match the `<greeting>` element returned
      by the EPP server.
    Resources:
      - epp.clientCertificate
      - epp.clientCSR
    Input-Parameters:
      - epp.hostName
      - epp.clid01
      - epp.pwd01
      - epp.serverIssuedClientCertificate01
  rde-14:
    Summary: validate policy object (if applicable)
    Maturity: BETA
    Description: |
      The object policies included in the `<rdePolicy:policy>` object **MUST**
      conform to the Registration Data Policy and the applicable data model.
  
      * If the `general.minimalPublicDataSet` input parameter is `true`, then
        contact objects **MUST NOT** be present in the deposit.
      * If the `epp.hostModel` input parameter is `attributes`, then
        host objects **MUST NOT** be present in the deposit.
  epp-01:
    Summary: Service connectivity test
    Description: |
      This test confirms that the EPP service is reachable from the probe
      servers.
  
      1. At least one `A` record **MUST** be published in the DNS for the EPP
         hostname, to allow IPv4-only hosts to connect to the EPP service.
      2. At least one `AAAA` record **SHOULD** be published in the DNS for the
         EPP hostname, to allow IPv6-only hosts to connect to the EPP service.
      3. EPP is associated with TCP port 700. All IPv4/IPv6 addresses published
         in the DNS for the EPP hostname **MUST** accept TCP connections on this
         port. Since the EPP specification requires IP-based access control, the
         RSP **MUST** configure their firewall to allow access from the IP
         addresses listed in the `epp.clientACL` resource.
      4. EPP uses TLS to secure the channel between client and server. All
         service ports **MUST** support TLSv1.2 and optionally any subsequent
         protocol published by the IETF.
      5. TLSv1.1 and all previous versions have known security issues and **MUST
         NOT** be supported by any service ports.
      6. To ensure that the connection can be trusted, all service ports
         **MUST** present a certificate issued by a trusted CA, such as those
         supported by major browsers.
      7. All TLS certificates **MUST NOT** have expired, and **MUST** be
         presented wth any required intermediate certificates.
      8. The EPP server name **MUST** match at least one `subjectAltName` field
         in all presented certificates (either exact match or wildcard).
      9. Service ports **MUST** use at least one of the ciphers recommended in
         RFC 9325 (or any successor document).
    Input-Parameters:
    Resources:
      - epp.tlsCertificateStore
    Errors:
      - EPP_MISSING_A_RECORDS
      - EPP_MISSING_AAAA_RECORDS
      - EPP_TLS_REQUIRED_PROTOCOL_NOT_SUPPORTED
      - EPP_TLS_FORBIDDEN_PROTOCOL_SUPPORTED
      - EPP_TLS_UNTRUSTED_CERTIFICATE
      - EPP_TLS_EXPIRED_CERTIFICATE
      - EPP_TLS_CERTIFICATE_CHAIN_MISSING
      - EPP_TLS_CERTIFICATE_HOSTNAME_MISMATCH
      - EPP_TLS_BAD_CIPHER
  epp-02:
    Summary: Protocol conformance test
    Description: |
      Once a connection is established, all service ports **MUST** send a
      valid `<greeting>` frame to the client.
  
      1. The `<svID>` element in the `<greeting>` **MUST** identify the EPP
         server.
      2. The `<svDate>` element in the `<greeting>` **MUST** specify a time
         within 30 seconds of the current date and time as received from the NTP
         network.
      3. The `<version>` element in the <greeting> **MUST** be exactly `1.0`.
      4. All `<lang>` element(s) in the `<greeting>` **MUST** contain valid
         language codes. At least `en` **MUST** be included.
      5. All `<objURI>` element(s) in the `<greeting>` **MUST** contain XML
         namespace URIs that are appropriate. The only mandatory URI that
         **MUST** be present is the domain namespace URI. The host and contact
         namespace URIs may be required depending on the `epp.hostModel` and
         `general.minimalPublicDataSet` parameters.
      6. All `<extURI>` element(s) in the `<greeting>` **MUST** contain XML
         namespace URIs that have been registered in the IANA registry, and that
         the mandatory extensions are also included.
      7. `<extURI>` elements containing the following XML namespaces **MUST** be
         present in the `<greeting>`:
           * `urn:ietf:params:xml:ns:secDNS-1.1`
           * `urn:ietf:params:xml:ns:launch-1.0`
           # these may become mandatory in the future:
           # * `urn:ietf:params:xml:ns:epp:loginSec-1.0`
           # * `urn:ietf:params:xml:ns:epp:secure-authinfo-transfer-1.0`
      8. If the `general.gracePeriodsSupported` input parameter is true, an
         `<extURI>` element containing the XML namespace for the RGP extension
         (RFC 3915) **MUST** be present in the `<greeting>`.
    Input-Parameters:
    Errors:
      - EPP_NO_GREETING_RECEIVED
      - EPP_GREETING_SVID_INVALID
      - EPP_GREETING_SVDATE_INVALID
      - EPP_GREETING_VERSION_INVALID
      - EPP_GREETING_INVALID_LANG
      - EPP_GREETING_UNEXPECTED_OBJURI
      - EPP_GREETING_MISSING_OBJURI
      - EPP_GREETING_UNEXPECTED_EXTURI
      - EPP_GREETING_MISSING_EXTURI
      - EPP_GREETING_RECOMMENDED_EXTENSION_MISSING
    Input-Parameters:
    Dependencies:
  epp-03:
    Summary: Authentication test
    Description: |
      The EPP server **MUST** return a `1000` result in response to a `<login>`
      command.
  
      The client will use the object and extension XML namespaces from the
      server's `<greeting>` as part of the `<login>` command.
  
      If the server supports the Login Security Extension (see RFC 8807) then
      this will be used by the client.
    Input-Parameters:
    Resources:
    Errors:
  epp-04:
    Summary: domain <check> command test
    Description: |
      The client will perform a series of `<check>` commands and will validate
      the `avail` attribute of the `<domain:name>` elements in the server
      response, as follows:
  
      * syntactically invalid domain name: `avail` attribute **MUST** be `0`
        or `false`.
      * valid but registered domain name: `avail` attribute **MUST** be `0` or
        `false`.
      * syntactically valid, unregistered domain name: `avail` attribute
        **MUST** be `1` or `true`. The domain name will be generated using
        random characters.
  
      A "syntactically valid" domain name is one that complies with the format
      specified in RFC 1123 (this test case does not consider IDN names).
  
      These checks will be carried out for each TLD in the TLD set.
    Dependencies:
      - epp-03
    Errors:
      - EPP_DOMAIN_CHECK_VALID_DOMAIN_INCORRECT_AVAIL
      - EPP_DOMAIN_CHECK_INVALID_DOMAIN_INCORRECT_AVAIL
      - EPP_DOMAIN_CHECK_REGISTERED_DOMAIN_INCORRECT_AVAIL
  epp-05:
    Summary: host <check> command test (if applicable)
    Description: |
      If the EPP server supports host objects, this test will perform a series
      of `<check>` commands and will validate the `avail` attribute of the
      `<host:name>` elements in the server response, as follows:
      * syntactically invalid hostname: `avail` attribute **MUST** be `0` or
        `false`.
      * valid but registered hostname: `avail` attribute **MUST** be `0` or
        `false`.
      * syntactically valid and unregistered hostname: `avail` attribute
        **MUST** be `1` or `true`. The hostname will be generated using random
        characters.
  
      A "syntactically valid" hostname is one that complies with the format
      specified in RFC 1123 (this test case does not consider IDN names).
    Input-Parameters:
      - epp.registeredNameservers
    Dependencies:
      - epp-04
    Errors:
      - EPP_HOST_CHECK_VALID_HOST_INCORRECT_AVAIL
      - EPP_HOST_CHECK_INVALID_HOST_INCORRECT_AVAIL
      - EPP_HOST_CHECK_REGISTERED_HOST_INCORRECT_AVAIL
  epp-06:
    Summary: contact <check> command test (if applicable for the registry type)
    Description: |
      If the EPP server supports contact objects, this test will perform a
      series of `<check>` commands and will validate the `avail` attribute of
      the `<contact:id>` elements in the server response, as follows:
      * syntactically invalid ID: `avail` attribute **MUST** be `0` or
        `false`.
      * valid but registered ID: `avail` attribute **MUST** be `0` or
        `false`.
      * valid and unregistered ID: `avail` attribute **MUST** be `1` or
        `true`. The ID will be generated using random characters.
    Input-Parameters:
      - epp.registeredContacts
    Dependencies:
      - epp-05
    Errors:
      - EPP_CONTACT_CHECK_VALID_CONTACT_ID_INCORRECT_AVAIL
      - EPP_CONTACT_CHECK_INVALID_CONTACT_ID_INCORRECT_AVAIL
      - EPP_CONTACT_CHECK_REGISTERED_CONTACT_ID_INCORRECT_AVAIL
  epp-07:
    Summary: contact <create> command test (if applicable for the registry type)
    Description: |
      This test attempts to create a number of contact objects, and validates
      the server's response. For example, the test will expect that the server
      will reject a command that creates an object with missing or invalid
      properties, but will accept a command to create an object with valid
      properties. Property values will be randomly generated but will contain
      realistic values. No personal information will be transmitted as part
      of this test.
  
      If the `general.minimalPublicDataSet` input parameter is `true`, this
      test will be skipped.
  
      The test will confirm that the server checks and validates the values of
      the following elements:
  
      * `<contact:id>`
      * `<contact:status>`
      * `<contact:postalInfo>` element(s)
      * `<contact:name>` element
      * `<contact:cc>` element
      * `<contact:voice>`
      * `<contact:email>`
  
      * The server **MUST NOT** accept a `<contact:id>` element that
        contains a value that is not a valid `clIDType` value;
      * The server **MUST NOT** accept a `<contact:status>` element that
        contains a status code not defined in RFC 5733;
      * The server **MUST NOT** accept a `<contact:postalInfo>` element that
        contains a `type` attribute that is neither `int` nor `loc`;
      * The server **MUST NOT** accept a `<contact:cc>` element that contains a
        value that is not a valid ISO 3166-1 alpha-2 code;
      * The server **MUST NOT** accept a `<contact:voice>` element that contains
        a value that does not conform to the format described in Section 2.5 of
        RFC5733;
      * The server **MUST NOT** accept a `<contact:email>` element that contains
        a value that does not conform to the format specified in RFC 5322.
  
      Once objects have been created, the client will then perform `<info>`
      commands to verify that the server has correctly stored the provided
      values.
    Dependencies:
      - epp-06
    Errors:
      - EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_ID
      - EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_STATUS
      - EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE
      - EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_CC
      - EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_VOICE
      - EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_EMAIL
      - EPP_CONTACT_CREATE_INFO_RESPONSE_NOT_1000
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE
      - EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL
  epp-08:
    Summary: Contact object access control (if applicable)
    Description: |
      This test will confirm that EPP clients are unable to perform `<info>`
      commands on objects that they do not sponsor.
  
      If the `general.minimalPublicDataSet` input parameter is `true`, this
      test will be skipped.
  
      The client will connect using a set of alternate credentials and will
      submit `<info>` and `<update>` commands on the contact objects created in
      `epp-08`. The server **MUST** respond with a 2201 "authorization error"
      response.
    Dependencies:
      - epp-07
    Errors:
      - EPP_CONTACT_INFO_RESPONSE_NOT_2201
      - EPP_CONTACT_UPDATE_RESPONSE_NOT_2201
  epp-09:
    Summary: contact <update> command test (if applicable for the registry type)
    Description: |
      This test will perform `<update>` commands on the objects created during
      `epp-07` and will confirm that the server correctly rejects invalid
      commands (which would specify invalid property values) and accepts valid
      commands.
  
      If the `general.minimalPublicDataSet` input parameter is `true`, this
      test will be skipped.
  
      The test will confirm that the server checks and validates `<update>`
      commands which transform the values of the following elements:
  
      * `<contact:status>`
      * `<contact:postalInfo>` elements (both `int` and `loc`)
          * `<contact:name>`
          * `<contact:org>`
          * `<contact:addr>` elements
            * `<contact:street>` element(s)
            * `<contact:city>` element
            * `<contact:sp>` element
            * `<contact:pc>` element
            * `<contact:cc>` element
      * `<contact:voice>`
      * `<contact:email>`
  
      Once objects have been updated, the client will then perform `<info>`
      commands to verify that the server has correctly stored the provided
      values.
    Dependencies:
      - epp-08
    Errors:
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STATUS
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_ORG
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STREET
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CITY
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_SP
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_PC
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CC
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_VOICE
      - EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_EMAIL
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_NOT_1000
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE
      - EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL
  epp-10:
    Summary: contact <delete> command test (if applicable for the registry type)
    Description: |
      This test will perform `<delete>` commands on the objects created during
      `epp-24` and will confirm that the server accepts the `<delete>` command
      with a `1xxx` response code.
  
      If the `general.minimalPublicDataSet` input parameter is `true`, this
      test will be skipped.
  
      Once the `<delete>` commands have been submitted, the client will perform
      `<info>` commands to confirm that the objects have actually been removed
      from the repository. If the response to the previous `<delete>` command
      was 1001, this step will be skipped.
    Input-Parameters:
    Dependencies:
      - epp-09
    Errors:
      - EPP_CONTACT_DELETE_RESPONSE_NOT_1000_OR_1001
      - EPP_CONTACT_DELETE_OBJECT_STILL_EXISTS
  epp-11:
    Summary: host <create> command test (if applicable)
    Description: |
      This test attempts to create a number of host objects, and validates
      the server's response. For example, the test will expect that the server
      will reject a command that creates an object with missing or invalid
      properties, but will accept a command to create an object with valid
      properties. Property values will be randomly generated but will contain
      realistic values. No personal information will be transmitted as part
      of this test.
  
      If the `epp.hostModel` input parameter is `attributes`, this test will
      be skipped.
  
      The test will confirm that the server checks and validates the values of
      the following elements:
  
      * `<host:name>` (both in- and out-of-bailiwick, for each TLD in the TLD
        set)
      * `<host:status>`
      * `<host:addr>` elements (both IPv4 and IPv6)
  
      If the `epp.hostModel` input parameter is `attributes`, this test will
      be skipped.
  
      The client will then perform `<info>` commands on the objects successfully
      created to confirm that the server has correctly stored the provided
      values.
  epp-12:
    Summary: host object access control (if applicable)
    Description: |
      This test will confirm that EPP clients are unable to perform `<info>`
      commands on objects that they do not sponsor.
  
      If the `epp.hostModel` input parameter is `attributes`, this test will
      be skipped.
  
      The client will connect using a set of alternate credentials and will
      submit `<update>` commands on the contact objects created in `epp-11`. The
      server **MUST** respond with a 2201 "authorization error" response.
    Dependencies:
      - epp-11
  epp-13:
    Summary: host <update> command test (if applicable)
    Description: |
      This test will perform `<update>` commands on the objects created during
      `epp-11` and will confirm that the server correctly rejects invalid
      commands (which would specify invalid property values) and accepts valid
      commands.
  
      If the `epp.hostModel` input parameter is `attributes`, this test will
      be skipped.
  
      The test will confirm that the server checks and validates `<update>`
      commands which transform the values of the following elements:
  
      * `<host:status>`
      * `<host:addr>` elements (both IPv4 and IPv6)
  
      Note: the server's ability to support host renames is checked in a later
      test.
  
      The client will then perform `<info>` commands on the objects successfully
      updated to confirm that the server has correctly stored the updated
      values.
    Dependencies:
      - epp-11
  epp-14:
    Summary: intentionally omitted
    Description: intentionally omitted
  epp-15:
    Summary: intentionally omitted
    Description: intentionally omitted
  epp-16:
    Summary: domain <create> command test
    Description: |
      This test performs a series domain `<create>` commands, using pseudo-
      random ASCII domain names under each TLD in the TLD set. If the
      `general.minimalPublicDataSet` input parameter is `false`, then a contact
      object (containing pseudo-random contact information) will be created
      beforehand and used as the registrant. If the `epp.hostModel` parameter is
      `objects`, then two host objects with pseudo-random names will be created
      and used as the nameservers (otherwise the names will be provided as
      attributes).
  
      The client will perform several `<create>` commands, each of which will
      test certain aspects of the server's processing of those commands, for
      example:
  
      * to confirm that the server does not accept invalid values for object
        properties (such as domain name, registration period, registant ID,
        nameservers, and DS record parameters). Examples:
          * invalid domain
          * invalid period (1-10 years)
          * non-existent registrant
          * non-existent hosts
          * invalid DS/keyData record parameters
      * to confirm that the server does not accept commands which reference
        non-existent host/contact objects
      * to confirm the server supports all permitted client-assigned status
        codes
      * to confirm that the server rejects a `<create>` command which
        specifies a registrant contact (where the
        `general.minimalPublicDataSet` input parameter is `true`)
      * to confirm that the server rejects a `<create>` command which does not
        specify a registrant contact (where the
        `general.minimalPublicDataSet`) input parameter is `false`
      * to confirm that the server rejects a `<create>` command containing
        host objects when the `epp.hostModel` parameter is `attributes`
      * to confirm that the server rejects a `<create>` command containing
        host attributes when the `epp.hostModel` parameter is `objects`
      * to confirm that the the server which implements RFC 9154 accepts a
        `<create>` command without an authInfo command.
  
      Both registrar IDs (those specified in the `epp.clid01` and `epp.clid02`
      input parameters) will be used to create domains.
  
      Once the `<create>` commands have been processed, the client will then
      perform `<info>` commands to confirm that:
  
      * the `<roid>` element is valid and contains a repository ID registered
        with IANA;
      * the `<crDate>` and `<exDate>` elements are present and valid;
      * the `<crID>` and `<clID>` elements match the client ID used to create
        the domain.
      * DNSSEC information provided in the `<create>` command is present and
        correct.
    Input-Parameters:
      - epp.secDNSInterfaces
    Dependencies:
      - epp-03
  epp-17:
    Summary: Registry object integrity test
    Description: |
      This test confirms that the EPP server will refuse a request to delete a
      linked object.
  
      If the `epp.hostModel` input parameter is `attributes`, **and** the
      `general.minimalPublicDataSet` input parameter is `true`, then this test
      will be skipped.
  
      The client will submit `<delete>` commands for any contact and host
      objects created during `epp-16`. The server **MUST** respond with a `2305`
      "Object association prohibits operation" error.
    Dependencies:
      - epp-16
  epp-18:
    Summary: domain <update> command test
    Description: |
      This test will confirm that the client is able to perform an `<update>`
      command on the domain names created in `epp-16`, including:
  
      * adding and removing client-assigned status codes
      * adding and removing nameservers (whether objects or attributes)
      * changing registrant object (if applicable)
      * adding and remove DNSSEC information
  
      The client will also confirm that it cannot perform an `<update>` command
      on a domain sponsored by another registrar, and that the server responds
      with a `2201` authorization error.
  
      Once the `<update>` commands have been processed, the client will then
      perform `<info>` commands to confirm that the changes have been correctly
      stored by the server.
    Input-Parameters:
    Dependencies:
      - epp-17
  epp-18:
    Summary: domain <renew> command test
    Description: |
      This test will confirm that the client is able to renew domain names.
  
      * Following a succesful `<renew>` command, the expiry date of the domain
        **MUST** have been increased by the period specified by the client;
      * Where a server supports RFC 3915, the domain **MUST** have an RGP
        status of `renewPeriod`;
      * The server **MUST** reject a `<renew>` command if it would result in
        the expiry date being more than 10 years into the future.
  
      The client will issue the `<renew>` commands and then perform `<info>`
      commands to ensure that the expiry date and RGP status of the domain are
      set correctly.
    Input-Parameters:
    Dependencies:
      - epp-16
  epp-19:
    Summary: domain <transfer> command test
    Description: |
      This test will confirm that the client is able to initiate a domain
      transfer.
  
      The client will perform an `<update>` command to set the authInfo code for
      the test domain (taken from the set created in `epp-16`) to a
      randomly-determined value. If the server implements RFC 9154, it **MUST**
      reject the `<update>` command if the authInfo code is insufficently
      secure.
  
      Then, using a second set of credentials, the client will connect to the
      EPP server and authenticate, submit `<transfer>` commands, and validate
      the responses.
  
      This test will confirm that:
  
      * the server rejects a `<transfer>` command with an invalid authInfo code
      * the server rejects a command which would extend the domain's validity
        period more than 10 years into the future
      * the server accepts a `<transfer>` command with a valid authInfo code
        and period.
  
      The client will use an `<info>` command to ensure that the
      `pendingTransfer` status code is added to the domain after a successul
      transfer request.
  
      Once the transfer request has been accepted, the sponsoring client will
      wait for a message to be received on the server's message queue, and will
      then approve the transfer.
  
      Once the gaining registrar has also received a message on the queue, the
      client will use an `<info>` command to confirm that:
  
      * the domain is now under the sponsorship of the gaining registrar
      * the authInfo code has been reset by the server (if the server supports
        RFC 9154).
    Dependencies:
      - epp-18
  epp-20:
    Summary: domain <transfer> rejection test
    Description:
      This test confirms that the server behaves correctly if the sponsoring
      registrar of a domain rejects a transfer request.
  
      The test procedure matches that of `epp-19`, but the transfer request will
      be rejected rather than approved. An `<info>` command will be used to
      confirm that the domain name remains under the sponsorship of the original
      registrar.
    Dependencies:
      - epp-18
    
  epp-21:
    Summary: domain <delete> command test
    Description: |
      This test will perform `<delete>` commands on the objects created during
      `epp-16` and will confirm that the server accepts the `<delete>` command
      with a `1xxx` response code.
  
      Once the `<delete>` commands have been processed, the client will perform
      `<info>` commands on the deleted to object to confirm that:
  
      * if the server responded to the `<delete>` command with a `1000`
        response, then the domain no longer exists
      * if the server responded to the `<delete>` command with a `1001`
        response, then the domain has the `pendingDelete` status and the
        `redemptionPeriod` RGP status.
    Dependencies:
      - epp-19
  epp-22:
    Summary: domain restore test (if applicable)
    Description: |
      This test will perform RGP restore operations on the objects deleted
      during `epp-21`, in order to confirm the correct operation of the server's
      implementation of RFC 3915.
  
      If the value of the `general.gracePeriodsSupported` parameter is false,
      this test will be skipped.
    Input-Parameters:
      - epp.restoreReportRequired
    Dependencies:
      - epp-21
  
  epp-23:
    Summary: host rename test (if applicable)
    Description: |
      This tests verifies the server's support for host rename operations.
  
      If the `epp.hostModel` input parameter is `attributes`, this test will
      be skipped.
  
      The client will perform `<update>` commands on the objects created during
      `epp-11` and will confirm that the server correctly accepts or rejects the
      commands, for example:
  
      * an `<update>` command which specifies a syntatically invalid host name
        is rejected;
      * an `<update>` command which places the object out-of-bailiwick is
        accepted;
      * an `<update>` command which places the object within a non-existent
        domain is rejected;
      * an `<update>` command which places the object within a domain sponsored
        by another registrar is rejected. The domain name(s) provided in the
        `epp.registeredNames` parameter will be used for this test.
      * an `<update>` command which places the object within a domain sponsored
        by the test client is accepted. A domain created during the `epp-13`
        test case will be used as the new parent domain.
  
      The client will then perform `<info>` commands on the objects successfully
      updated, to confirm that the server has correctly stored the updated
      values.
    Dependencies:
      - epp-13
  epp-24:
    Summary: host <delete> command test (if applicable)
    Description: |
      This test will perform `<delete>` commands on the objects created during
      `epp-11` and will confirm that the server accepts the `<delete>` command
      with a `1xxx` response code.
  
      Once the `<delete>` commands have been submitted, if a `1000` response was
      received from the server, the client will perform `<check>` and `<info>`
      commands to confirm that the objects have been deleted.
  
      If the `epp.hostModel` input parameter is `attributes`, this test will
      be skipped.
    Dependencies:
      - epp-23
  rdap-01-domainCaseFoldingValidation:
    Summary: Domain label case folding validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-02-domainNameValidation:
    Summary: Domain Name validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-03-ipv4Validation:
    Summary: IPv4 address validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-04-ipv6Validation:
    Summary: IPv6 address validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-05-stdRdapAsEventActorValidation:
    Summary: asEventActor Validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-06-stdRdapConformanceValidation:
    Summary: RDAP Conformance validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-07-stdRdapDomainLookupValidation:
    Summary: Domain Lookup Validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-08-stdRdapEntitiesValidation:
    Summary: Entities validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-09-stdRdapEntityLookupValidation:
    Summary: Entity lookup validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-10-stdRdapErrorResponseBodyValidation:
    Summary: Error Response Body 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-11-stdRdapEventsValidation:
    Summary: Events Validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-12-stdRdapHelpValidation:
    Summary: Help validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-13-stdRdapIpAddressesValidation:
    Summary: IP Addresses Validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-14-stdRdapLanguageIdentifierValidation:
    Summary: Language Identifier Validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-15-stdRdapLdhNameValidation:
    Summary: LDH name 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-16-stdRdapLinksValidation:
    Summary: Links validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-17-stdRdapNameserverLookupValidation:
    Summary: Nameserver lookup validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-18-stdRdapNameserversSearchValidation:
    Summary: RFC7159RDAP_RFCsNameservers search validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-19-stdRdapNoticesRemarksValidation:
    Summary: Notices and Remarks Validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-20-stdRdapPort43WhoisServerValidation:
    Summary: Port 43 WHOIS Server 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-21-stdRdapPublicIdsValidation:
    Summary: Public IDs validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-22-stdRdapRolesValidation:
    Summary: Roles validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-23-stdRdapSecureDnsValidation:
    Summary: Secure DNS validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-24-stdRdapStatusValidation:
    Summary: Status validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-25-stdRdapUnicodeNameValidation:
    Summary: RFC7159RDAP_RFCsIDNA_RFCsUnicode name 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-26-stdRdapVariantsValidation:
    Summary: Variants validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  rdap-27-webUriValidation:
    Summary: Web URI validation 
    Maturity: GAMMA
    Description: |
      This test case comes from the RDAP Conformance Tool. For more information, see
      <https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.
  minimumRPMs-01:
    Summary: Claims <check> command test
    Description: |
      This test is used to confirm the conformance of the EPP server's
      implementation of the Claims Check Form, as described in Section
      3.1.1 of RFC 8334.
  
      For this test, it is assumed that the EPP server has been configured to
      use data (specifically the Domain Name Label List, as described in Section
      5.3.3.1 of RFC 9361) from the TMCH test environment.
  
      The client will connect to the EPP server using the provided credentials
      and will then perform a series of `<check>` commands, using the Launch
      extension to specify a value of `claims` for the `type` attribute of the
      `<launch:check>` element and the `<launch:phase>` element. It will then
      confirm that the server returns an appropriate response:
  
      * a `<check>` response for a domain that is present on the DNL contains
        the correct `<launch:claimKey>` element;
      * a `<check>` response for a domain that is NOT present on the DNL
        does not contain a `<launch:claimKey>` element.
  
  minimumRPMs-02:
    Summary: |
      Sunrise domain/launch application <create> command test
    Description: |
      This test is used to confirm the conformance of the EPP server's
      implementation of the Sunrise Create Form, as described in Section
      3.3.1 of RFC 8334.
  
      For this test, it is assumed that the EPP server has been configured to
      use data (specifically the Domain Name Label List, as described in Section
      5.3.3.1 of RFC 9361) from the TMCH test environment.
  
      The client will connect to the EPP server and will submit `<create>`
      commands, using domain names and SMD files present in the TMCH test
      environment.
  
      If the server supports Start Date sunrises, the fully-qualified domain
      name will be constructed using a label from the SMD file and the
      `minimumRPMS.sunriseTLD` input parameter. The Server **MUST** respond with
      a `1000` or `1001` result code, however, if the client receives a `2302`
      "object exists" result code, it will retry with a different domain name.
  
      The client will also attempt to create a domain using an invalid SMD,
      which the server **MUST** reject.
  
      If the server supports End Date sunrises, the fully-qualified domain
      name will be constructed using a label from the SMD file and the
      `minimumRPMS.sunriseTLD` input parameter. The Server **MUST** respond with
      a `1000` or `1001` result code.
  
      Once the `<create>` commands have been processed, the client will then
      perform `<info>` commands to confirm that the domains have been created and
      that the submitted object properties have been correctly stored.
  
      The client will also confirm that the server rejects attempts to:
  
      1. create a domain using an invalid SMD;
      2. create a domain using a revoked SMD;
      3. create a domain using an SMD signed by a revoked certificate.
  
  minimumRPMs-03:
    Summary: Trademark claims domain <create> command test
    Description: |
      This test is used to confirm the conformance of the EPP server's
      implementation of the Claims Create Form, as described in Section
      3.3.2 of RFC 8334.
  
      For this test, it is assumed that the EPP server has been configured to
      use data (specifically the Domain Name Label List, as described in Section
      5.3.3.1 of RFC 9361) from the TMCH test environment.
  
      The client will connect to the EPP server and will submit `<create>`
      commands, using domain names present in the TMCH test environment.
  
      The domain name will be constructed using a label from the DNL, and the
      `minimumRPMS.claimsTLD` input parameter. The client will perform a
      Trademark Claims `<check>` command beforehand to obtain the claim key, and
      will then synthesise a trademark claims acknowledgement. The server
      **MUST** respond with a 1000 or 10001 response.
  
      Once the `<create>` commands have been processed, the client will then
      perform `<info>` commands to confirm that the domains have been created and
      that the submitted object properties have been correctly stored.
  
      The client will also confirm that the server rejects attempts to:
  
      1. create a domain using an invalid claim key;
      2. create a domain using an expired claim key;
      3. create a domain using an acceptance datetime more than 48 hours in the
        past.
  srsgw-01:
    Summary: IPv4 and IPv6 connectivity
    Maturity: BETA
    Description: |
      This test confirms that the SRS Gateway EPP system is reachable over IPv4
      and IPv6.
  
      The SRS Gateway EPP server host name will be resolved to obtain its
      IPv4 and IPv6 addresses. The client will then attempt to connect to TCP
      port 700 on these addresses.
    Dependencies:
  srsgw-02:
    Summary: Host <create> synchronization (if applicable)
    Maturity: BETA
    Description: |
      This test confirms that host objects created in the SRS Gateway EPP system
      are correctly synchronized with the primary registry system.
  
      If the value of the `epp.hostModel` input parameter is `attributes`, then
      this test will be skipped.
  
      The client will connect to the SRS Gateway EPP system, authenticate, and
      submit a `<create>` command for a pseudo-randomly generated host name.
      IP address information will be provided if required. The server **MUST**
      respond with a 1000 or 1001 response. The client will then perform an
      `<info>` command and will capture the response.
  
      It will then connect to the primary EPP system, authenticate, and perform
      an `<info>` command for the object created in the first step. If the
      server responds with a 2303 response, it will wait for 30 seconds and
      retry. The server **MUST** respond to the first or second `<info>` command
      with a 1000 response.
  
      The two `<info>` responses will then be compared and **MUST** be
      identical.
  srsgw-03:
    Summary: Contact <create> synchronization (if applicable)
    Maturity: BETA
    Description: |
      This test confirms that contact objects created in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      If the value of the `general.minimalPublicDataSet` input parameter is
      `true`, then this test will be skipped.
  
      The client will connect to the SRS Gateway EPP system, authenticate, and
      submit a `<create>` command for a pseudo-randomly generated contact
      object. The client will then perform an `<info>` command and will capture
      the response.
  
      It will then connect to the primary EPP system, authenticate, and perform
      an `<info>` command for the object created in the first step. If the
      server responds with a 2303 response, it will wait for 30 seconds and
      retry. The server **MUST** respond to the first or second `<info>` command
      with a 1000 response.
  
      The two `<info>` responses will then be compared and **MUST** be
      identical.
  srsgw-04:
    Summary: Domain <create> synchronization
    Maturity: BETA
    Description: |
      This test confirms that domain objects created in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      The client will connect to the SRS Gateway EPP system, authenticate, and
      submit `<create>` commands for a pseudo-randomly generated domain names.
      Contact and nameserver objects created in `srsgw-02` and `srsgw-03` will
      be used if required. The server **MUST** respond with 1000 or 1001
      responses. The client will then perform `<info>` commands and will capture
      the responses.
  
      It will then connect to the primary EPP system, authenticate, and perform
      `<info>` commands for the domains created in the first step. If the
      server responds with a 2303 response, it will wait for 30 seconds and
      retry. The server **MUST** respond to the first or second `<info>` command
      with a 1000 response.
  
      The pairs of `<info>` responses will then be compared and **MUST** be
      identical.
    Dependencies:
      - srsgw-02
      - srsgw-03
  srsgw-05:
    Summary: Domain <renew> synchronisation
    Maturity: BETA
    Description: |
      This test confirms that the expiry dates of domain objects renewed in the
      SRS Gateway EPP system are correctly synchronized with the primary
      registry system.
  
      The client will connect to the SRS Gateway EPP system, authenticate, and
      submit a `<renew>` command for the domain created in `srsgw-04`. The
      server **MUST** respond with a 1000 or 1001 response. The client will then
      perform an `<info>` command and will capture the response.
  
      It will then connect to the primary EPP system, authenticate, and perform
      an `<info>` command for the domain renewed in the first step.
      The server **MUST** respond with a 1000 response.
  
      The `<exDate>` element of the two `<info>` responses will then be compared
      and **MUST** be identical.
    Dependencies:
      - srsgw-04
  srsgw-06:
    Summary: Domain <transfer> synchronisation
    Maturity: BETA
    Description: |
      This test confirms that transfer requests submitted in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      The client will connect to the SRS Gateway EPP system, authenticate, and
      perform an `<update>` command to specify an authInfo code for the domain
      created in `srsgw-04`. The server **MUST** respond with a 1000 or 1001
      response.
  
      It will then reconnect to the SRS Gateway EPP system using the credentials
      of a second registrar account and submit a `<transfer op="request">`
      command using the authInfo command set for the domain in the first step.
      The server **MUST** respond with a 1000 or 1001 response.
  
      It will then connect to the primary EPP system, authenticate, and perform
      an `<info>` command for the domain. The server **MUST** respond with a
      1000 response.
  
      * if the response to the `<transfer op="request">` command was 1000, then
        the `<domain:clID>` element **MUST** contain the value of the
        `srsgw.eppClid01` input parameter.
      * if the response to the `<transfer op="request">` command was 1001, then
        the domain **MUST** have the `pendingTransfer` status.
    Dependencies:
      - srsgw-05
  srsgw-07:
    Summary: Domain <transfer> approval synchronisation
    Maturity: BETA
    Description: |
      This test confirms that transfer request approvals submitted in the SRS
      Gateway EPP system are correctly synchronized with the primary registry
      system.
  
      If the response to the `<transfer op="request">` command performed in
      `srsgw-07` was 1000, then this test will be skipped.
  
      The client will connect to the SRS Gateway EPP system, authenticate, and
      perform an `<transfer op="approve">` command for the domain for which a
      transfer was requested in `srsgw-04`. The server **MUST** respond with a
      1000 or 1001 response.
  
      It will then connect to the primary EPP system, authenticate, and perform
      an `<info>` command for the domain. The server **MUST** respond with a
      1000 response. The `<domain:clID>` element **MUST** contain the value of
      the  `srsgw.eppClid01` input parameter.
    Dependencies:
      - srsgw-06
  srsgw-08:
    Summary: Domain <delete> synchronisation
    Maturity: BETA
    Description: |
      This test confirms that domain objects deleted in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      The client will connect to the SRS Gateway EPP system, authenticate using
      the credentials provided in `epp.clid02` and `epp.pwd02`, and
      submit a `<delete>` command for the domain transferred in `srsgw-07`.
      If the value of the `general.gracePeriodsSupported` input parameter is
      `false`, the server **MUST** respond with a 1000 response. Otherwise it
      **MUST** respond with a 1001 response.
  
      It will then connect to the primary EPP system, authenticate, and perform
      an `<info>` command for the domain renewed in the first step.
  
      * if `general.gracePeriodsSupported` is false, the server **MUST**
        respond to the `<info>` command with a 2303 ("object does not exist")
        result code.
      * If `general.gracePeriodsSupported` is true, the domain object **MUST**
        have the `pendingDelete` status and have an RGP status of
        `pendingDeleteRestorable`.
    Dependencies:
      - srsgw-07
  srsgw-09:
    Summary: Host <update> synchronization (if applicable)
    Maturity: BETA
    Description: |
      This test confirms that host objects updated in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      If the value of the `epp.hostModel` input parameter is `attributes`, then
      this test will be skipped.
  
      The test client will connect to the SRS Gateway EPP server and perform
      `<update>` commands on the objects created in `srsgw-02`, specifically
      to add and remove status codes and IP addresses. It will then perform
      `<info>` commands on those objects.
  
      The client will then connect to the primary registry EPP server and
      perform `<info>` commands for those objects.
  
      The two sets of `<info>` responses **MUST** be identical.
    Dependencies:
      - srsgw-02
  srsgw-10:
    Summary: Host <delete> synchronization (if applicable)
    Maturity: BETA
    Description: |
      This test confirms that host objects deleted in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      If the value of the `epp.hostModel` input parameter is `attributes`, then
      this test will be skipped.
  
      The test client will connect to the SRS Gateway EPP server and perform
      `<delete>` commands on objects created in `srsgw-02`. The server **MUST**
      respond with a 1000 response.
  
      The client will then connect to the primary registry EPP server and
      perform `<info>` commands for those objects. The server **MUST**
      respond with a 2303 "object does not exist" response.
    Dependencies:
      - srsgw-09
  srsgw-11:
    Summary: Contact <update> synchronization (if applicable)
    Maturity: BETA
    Description: |
      This test confirms that contact objects updated in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      If the value of the `general.minimalPublicDataSet` input parameter is
      `true`, then this test will be skipped.
  
      The test client will connect to the SRS Gateway EPP server and perform
      `<update>` commands on the objects created in `srsgw-03`. It will then
      perform `<info>` commands on those objects.
  
      The client will then connect to the primary registry EPP server and
      perform `<info>` commands for those objects.
  
      The two sets of `<info>` responses **MUST** be identical.
    Dependencies:
      - srsgw-03
  srsgw-12:
    Summary: Contact <delete> synchronization (if applicable)
    Maturity: BETA
    Description: |
      This test confirms that contact objects delete in the SRS Gateway EPP
      system are correctly synchronized with the primary registry system.
  
      If the value of the `general.minimalPublicDataSet` input parameter is
      `true`, then this test will be skipped.
  
      The test client will connect to the SRS Gateway EPP server and perform
      `<delete>` commands on objects created in `srsgw-03`. The server **MUST**
      respond with a 1000 response.
  
      The client will then connect to the primary registry EPP server and
      perform `<info>` commands for those objects. The server **MUST**
      respond with a 2303 "object does not exist" response.
    Dependencies:
      - srsgw-11
  srsgw-13:
    Summary: Domain RDAP synchronization
    Maturity: BETA
    Description: |
      This test confirms that the SRS Gateway's RDAP service provides responses
      to domain lookups that match those of the primary registry RDAP server.
  
      The test system will perform RDAP queries for some of the objects created
      in `srsgw-04` against both the primary registry RDAP server and the SRS
      Gateway RDAP server. After canonicalisation, the responses from each
      server **MUST** be identical.
    Dependencies:
      - srsgw-04
  srsgw-14:
    Summary: Nameserver RDAP synchronization
    Maturity: BETA
    Description: |
      This test confirms that the SRS Gateway's RDAP service provides responses
      to domain lookups that match those of the primary registry RDAP server.
  
      If the value of the `epp.hostModel` input parameter is `attributes`, then
      this test will be skipped.
  
      The test system will perform RDAP queries for some of the objects created
      in `srsgw-02` against both the primary registry RDAP server and the SRS
      Gateway RDAP server. After canonicalisation, the JSON responses from each
      server **MUST** be identical.
    Dependencies:
      - srsgw-02
  srsgw-15:
    Summary: Registrar RDAP synchronization
    Maturity: BETA
    Description: |
      This test confirms that the SRS Gateway's RDAP service provides responses
      to registrar (entity) lookups that match those of the primary registry
      RDAP server.
  
      The test system will perform RDAP queries for some of the objects created
      in `srsgw-04` against the primary registry RDAP server in order to obtain
      the `handle` property of the entity with the `registrar` role. It will
      then construct two URLs using this value and the values of the
      `rdap.baseURLs` and `srsgw.rdapBaseURLs` input parameters. It will then
      retrieve those URLs.
  
      After canonicalisation, the JSON responses from each server **MUST** be
      identical.
    Dependencies:
      - srsgw-02
  idn-01:
    Summary: Label validation test
    Maturity: BETA
    Description: |
      This test confirms that the EPP server correctly accepts or rejects domain
      `<create>` commands for valid and invalid IDN labels, respectively.
  
      If there are no IDN tables supported under any of the TLDs associated with
      the test, then this test will be skipped.
  
      For each supported IDN table, the test client will perform a series of
      `<create>` commands using a pre-defined catalogue of test labels. If
      required, the client will create any contact object(s) needed.
  
      The server **MUST** reject all `<create>` commands for invalid labels and
      **MUST** accept all `<create>` commands for valid labels.
    Input-Parameters:
    Dependencies:
  idn-02:
    Summary: Level 1 variant handling test
    Maturity: BETA
    Description: |
      This test confirms the EPP server's conformance with the Level 1 variant
      support (no support for variant activation, all variants are blocked).
  
      If there are no IDN tables for which Level 1 support is claimed, this
      test will be skipped.
  
      For each supported IDN table, the test client will perform a series of
      `<create>` commands using a pre-defined catalogue of test labels. If
      required, the client will create any contact object(s) needed.
  
      The client will then submit `<create>` commands for one or more labels
      that are variants of the names created in the first step. The server
      **MUST** reject these commands.
    Input-Parameters:
    Dependencies:
  idn-03:
    Summary: Level 2 variant handling test
    Maturity: BETA
    Description: |
      This test confirms the EPP server's conformance with the Level 2 variant
      support (variants are supported within the same TLD).
  
      If there are no IDN tables for which Level 2 support is claimed, this
      test will be skipped.
  
      For each supported IDN table, the test client will perform a series of
      `<create>` commands using a pre-defined catalogue of test labels. If
      required, the client will create any contact object(s) needed.
  
      The client will then submit `<create>` commands for one or more labels
      that are variants of the names created in the first step. Some of these
      commands will be made using the same registrar account as the first step,
      while some will be made using alternate credentials. If the value of the
      `general.minimalPublicDataSet` input parameter is `false`, then some
      commands will also use a different registrant contact.
  
      The server **MUST** reject `<create>` commands where the (a) registrar is
      different from that of the primary label or (b) the registrant (if
      applicable) is different.
    Dependencies:
  idn-04:
    Summary: Level 3 variant handling test
    Maturity: BETA
    Description: |
      This test confirms the EPP server's conformance with the Level 3 variant
      support (variants are supported within variant TLD(s)).
  
      If there are no IDN tables for which Level 3 support is claimed, this
      test will be skipped.
  
      For each supported IDN table, the test client will perform a series of
      `<create>` commands using a pre-defined catalogue of test labels. If
      required, the client will create any contact object(s) needed.
  
      The client will then submit `<create>` commands for one or more labels
      that are variants (at both second- and top-level) of the names created in
      the first step. Some of these commands will be made using the same
      registrar account as the first step, while some will be made using
      alternate credentials. If the value of the `general.minimalPublicDataSet`
      input parameter is `false`, then some commands will also use a different
      registrant contact.
  
      The server **MUST** reject `<create>` commands where the (a) registrar is
      different from that of the primary label or (b) the registrant (if
      applicable) is different.
    Dependencies:
  integration-01:
    Summary: EPP -> RDAP Integration Test
    Maturity: BETA
    Description: |
      This test confirms that the EPP and RDAP systems are properly integrated,
      that is, that transform commands performed on objects in the EPP system
      are reflected in the RDAP system within the Service Level Requirement of
      the SLA.
  
      The test system will perform RDAP queries to confirm that the RDAP server
      provides responses for the domain and host objects created in `epp-16` and
      `epp-11` (if applicable). The RDAP server **MUST** provide a 200 response
      within 1 hour of the object's `<crDate>` element.
    Input-Parameters:
      - rdap.baseURLs
    Dependencies:
      - epp-16
      - epp-11
  integration-02:
    Summary: EPP -> DNS Integration Test
    Maturity: BETA
    Description: |
      This test confirms that the EPP and DNS systems are properly integrated,
      that is, that transform commands performed on objects in the EPP system
      are reflected in the RDAP system within the Service Level Requirement of
      the SLA.
  
      The test system will perform DNS queries to confirm that the DNS servers
      provides responses for the domain names created in `epp-16`. All DNS
      servers **MUST** provide the correct DNS response within 1 hour of the
      object's `<crDate>` element.
    Input-Parameters:
      - dns.nameservers
    Dependencies:
      - epp-16
  integration-03:
    Summary: EPP -> RDE Integration Test
    Maturity: BETA
    Description: |
      This test confirms that the EPP and RDE systems are properly integrated,
      that is, that objects created in the EPP system are reflected in a valid
      RDE deposit file within the Service Level Requirement of the SLA.
  
      The test system will periodically connect to the SFTP server specified by
      the `integration.rdeSFTPHostname` input parameter, using the username
      specified in the `integration.rdeSFTPUsername` input parameter and the SSH
      key in the `integration.rdeSFTPPublicKey` resource, and look for .ryde
      files in the directory specified by the `integration.rdeSFTPDirectory`
      input parameter. Note that operators **MUST** ensure that the IP addresses
      listed in the `integration.rdeSFTPACL` resource have been added to the
      Access Control List for the SFTP server (if any).
  
      All objects created in the `epp-16` and `epp-11` (if applicable) tests
      **MUST** be found within a valid RDE deposit file (that is, the deposit
      passes all the tests in the RDE test suite) within 24 hours of each
      object's `<crDate>` element.
  
      Furthermore, for each deposit found in the directory, the corresponding
      RDE report (as described in [Section 2.1 of
      draft-lozano-icann-registry-interfaces](https://datatracker.ietf.org/doc/html/draft-lozano-icann-registry-interfaces#section-2))
      **MUST** be recieved on the test RRI environment before 23:59:59 UTC on
      the date specified in the Watermark element of the deposit file.
  
      To facilitate submission of RDE reports, the RRI test environment will be
      configured to accept submissions for the TLDs associated with the test
      from clients using the same TLSA DNS hostnames that are configured for the
      test.
    Resources:
      - integration.rdeSFTPPublicKey
      - integration.rdeSFTPACL
    Input-Parameters:
      - integration.rdeSFTPHostname
      - integration.rdeSFTPDirectory
      - integration.rdeSFTPUsername
      - integration.rriACL
    Dependencies:
      - epp-16
      - epp-11

Input-Parameters:
  general.minimalPublicDataSet:
    Description: |
      if true, then the registry only supports the minimum public data set, and
      does not collect registrant and/or technical contact information from
      registrars.
    Type: boolean
    Example: true
  general.gracePeriodsSupported:
    Description: |
      Whether or not the registry supports grace periods as defined in RFC 3915
    Type: boolean
    Example: true
  dns.nameservers:
    Description: |
      The set of nameservers that will be authoritative for the TLD(s).
  
      This input parameter is an array where the object properties are the
      TLD names, and the values are objects. For these objects, the properties
      are the nameserver names, and the values are arrays of IPv4 and IPv6
      addresses.
  
      There **MUST** be at least two nameservers, and at least two nameservers
      **MUST** have at least one IPv6 address.
    Type: object
    Example: {"example":{"ns1.example.com":["192.168.53.1","2001:DB8::53:1"],"ns2.example.com":["192.168.53.2","2001:DB8::53:2"]}}
  dnssec.dsRecords:
    Description: |
      The DS record(s) that may be used to validate the DNSSEC signature for the
      TLD(s). This input parameter is an object where the object properties are
      the TLD names and the values are arrays of objects representing DS
      records.
  
      There **MUST** be an entry for every TLD in the TLD set and there **MUST**
      be at least one DS record for each TLD.
    Type: object
    Example: {"example":[{"keyTag":12345,"alg":8,"digestType":2,"digest":"E2D3...5766"}]}
  dnssecOps.csk:
    Description: |
      A boolean indicating whether the RSP uses a Combined Signing Key (CSK,
      also referred to as a "Single Type Signing Scheme") instead of a split
      KSK/ZSK configuration.
    Type: boolean
    Example: false
  dnssecOps.zskRolloverZone:
    Description: |
      The domain name which will be monitored for the occurrence of a ZSK
      rollover.
    Type: string
    Example: example.com
  dnssecOps.kskRolloverZone:
    Description: |
      The domain name which will be monitored for the occurrence of a KSK
      rollover.
    Type: string
    Example: example.com
  dnssecOps.algorithmRolloverZone:
    Description: |
      The domain name which will be monitored for the occurrence of an algorithm
      rollover.
    Type: string
    Example: example.com
  rde.depositFile:
    Description: |
      an RDE deposit file. The TLD to which the deposit relates **MUST** match
      one of the TLDs that are associated with the test object.
    Type: file
    Example: example_20231004_FULL_S1_R0.ryde
  rde.signatureFile:
    Description: an ASCII-armoured OpenPGP signature covering the deposit file
    Type: file
    Example: example_20231004_FULL_S1_R0.sig
  rde.publicKey:
    Description: a PGP public key block
    Type: file
    Example: rsp-rde-signing-key.asc
  epp.hostName:
    Description: the fully-qualified domain name of the EPP server
    Type: string
    Example: epp.rsp.tech
  epp.clid01:
    Description: the username used to log in to the EPP server
    Type: string
    Example: clid-01
  epp.pwd01:
    Description: the password used to log in to the EPP server
    Type: string
    Example: foo2bar
  epp.serverIssuedClientCertificate01:
    Description: |
      If the EPP server uses a private CA to issue client certificates, then
      a certificate generated using the CSR provided in the `epp.clientCSR` may
      be provided using this parameter. This certificate will only be used in
      conjunction with the `epp.clid01` and `epp.pwd01` credentials. If the
      server will accept ICANN's own client certificate, this parameter
      **SHOULD** be empty.
    Type: string
    Example: rst_test_client_cert.pem
  epp.serverIssuedClientCertificate02:
    Description: |
      If the EPP server uses a private CA to issue client certificates, then
      a certificate generated using the CSR provided in the `epp.clientCSR` may
      be provided using this parameter. This certificate will only be used in
      conjunction with the `epp.clid02` and `epp.pwd02` credentials. If the
      server will accept ICANN's own client certificate, this parameter
      **SHOULD** be empty.
    Type: string
    Example: rst_test_client_cert.pem
  epp.clid02:
    Description: the username used for transfer tests
    Type: string
    Example: clid-02
  epp.pwd02:
    Description: the password used for transfer tests
    Type: string
    Example: foo3bar
  epp.hostModel:
    Description: |
      The host model supported by the EPP server. The possible values for this
      parameter are:
        * `objects`
        * `attributes`
    Type: string
    Example: objects
  epp.secDNSInterfaces:
    Description: |
      Which of the interfaces defined in Section 4 of RFC 5910 the server
      supports (either `dsData` or `keyData`).
    Type: string
    Example: dsData
  epp.registeredNames:
    Description: |
      An array of domain names that exist in the EPP server and which are
      therefore unavailable for registration. The domains **MUST NOT** be under
      the sponsorship of the `epp.clid01` or `epp.clid02` registrars. The array
      **MUST** contain one member for each TLD in the TLD set.
    Type: array
    Example: ["example.example1", "example.example2"]
  epp.registeredNameservers:
    Description: |
      An array of host objects that exist in the EPP server and which are
      therefore unavailable for registration.
  
      If the value of `epp.hostModel` is `objects`, this array **MUST** contain
      one member for each TLD in the TLD set. However, if it is `attributes`,
      the array **MUST** be empty.
    Type: array
    Example: ["ns1.example.com", "ns2.example.org"]
  epp.registeredContacts:
    Description: |
      An array of contact IDs that exist in the EPP server and which are
      therefore unavailable for registration.
  
      If the value of `general.minimalPublicDataSet` is `false`, this array
      **MUST** contain one member for each TLD in the TLD set. However, if it is
      `false`, the array **MUST** be empty.
    Type: array
    Example: ["abc123", "def321"]
  epp.restoreReportRequired:
    Description: |
      Whether the server requires submission of a restore report when a client
      attempts to restore a domain.
  
      If the value of `general.gracePeriodsSupported` is `false`, then this
      input parameter is ignored.
    Type: boolean
    Example: false
  rdap.baseURLs:
    Descrption: |
      The RDAP base URL(s) for the TLD(s). This input parameter is an object,
      where the object properties are the TLD names and the values are strings
      containing the base URL. The URL **MUST** end with a slash ("/").
    Type: object
    Example: {"example": "https://rdap.example.com/example/"}
  rdap.testDomains:
    Description: |
      The domain(s) that will be queried to validate domain responses. This
      input parameter is an object, where the object properties are the TLD
      names and the values domain names.
    Type: object
    Example: {"example": "example.example"}
  rdap.testEntities:
    Description: |
      The entities(s) that will be queried to validate entity responses. This
      input parameter is an object, where the object properties are the TLD
      names and the values entity handles.
    Type: object
    Example: {"example": "9999"}
  rdap.testNameservers:
    Description: |
      The nameservers(s) that will be queried to validate nameserver responses.
      This input parameter is an object, where the object properties are the TLD
      names and the values host names.
    Type: object
    Example: {"example": "ns1.example.com"}
  minimumRPMS.sunriseModels:
    Description: |
      The sunrise models supported by the EPP server. The possible values for
      this parameter are:
        * `start-date`
        * `end-date`
        * `both`
    Type: string
    Example: start-date
  minimumRPMS.sunriseTLD:
    Description: |
      A TLD, or other registry-class zone, which has been configured to be in
      perpetual sunrise.
    Type: string
    Example: tmclaims.rsp.tech
  minimumRPMS.claimsTLD:
    Description: |
      A TLD, or other registry-class zone, which has been configured to be in
      perpetual trademark claims.
    Type: string
    Example: tmclaims.rsp.tech
  srsgw.eppHostName:
    Description: the fully-qualified domain name of the SRS Gateway EPP server
    Type: string
    Example: epp.rsp.tech
  srsgw.eppClid01:
    Description: the username used to log in to the SRS Gateway EPP server
    Type: string
    Example: clid-01
  srsgw.eppPwd01:
    Description: the password used to log in to the SRS Gateway EPP server
    Type: string
    Example: foo2bar
  srsgw.serverIssuedClientCertificate01:
    Description: |
      If the EPP server uses a private CA to issue client certificates, then
      a certificate generated using the CSR provided in the `epp.clientCSR` may
      be provided using this parameter. This certificate will only be used in
      conjunction with the `srsgw.eppClid01` and `srsgw.eppPwd01` credentials.
      If the server will accept ICANN's own client certificate, this parameter
      **SHOULD** be empty.
    Type: string
    Example:
  srsgw.serverIssuedClientCertificate02:
    Description: |
      If the EPP server uses a private CA to issue client certificates, then
      a certificate generated using the CSR provided in the `epp.clientCSR` may
      be provided using this parameter. This certificate will only be used in
      conjunction with the `srsgw.eppClid02` and `srsgw.eppPwd02` credentials.
      If the server will accept ICANN's own client certificate, this parameter
      **SHOULD** be empty.
    Type: string
    Example:
  srsgw.eppClid02:
    Description: the username used for transfer tests
    Type: string
    Example: clid-02
  srsgw.eppPwd02:
    Description: the password used for transfer tests
    Type: string
    Example: foo3bar
  srsgw.rdapBaseURLs:
    Description: |
      The RDAP base URL(s) for the TLD(s). This input parameter is an object,
      where the object properties are the TLD names and the values are strings
      containing the base URL. The URL **MUST** end with a slash ("/").
    Type: object
    Example: {"example": "https://rdap.example.com/example/"}
  # there are no inputs for the IDN test suite, as they are all provided in the test object.
  integration.rdeSFTPHostname:
    Description: The hostname of the operator's SFTP server.
    Type: string
    Example: sftp.rsp.tech
  integration.rdeSFTPDirectory:
    Description: |
      The directory on the SFTP server where deposit files may be found.
    Type: string
    Example: /path/to/deposits
  integration.rdeSFTPUsername:
    Description: The username that can be used to connect to the SFTP server.
    Type: string
    Example: icann
  integration.rriACL:
    Description: |
      An array of IP addresses from which requests to the RRI will be sent.
    Type: array
    Example: ["192.168.22.1", "2001:DB8::22:1"]

Errors:
  ZM_AAAA_BAD_RDATA:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_AAAA_QUERY_DROPPED:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_AAAA_UNEXPECTED_RCODE:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_AAAA_WELL_PROCESSED:
    Description: '*Not available.*'
    Severity: INFO

  ZM_ADDRESSES_MATCH:
    Description: '*Not available.*'
    Severity: INFO

  ZM_ALGORITHM_DEPRECATED:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_ALGORITHM_NOT_RECOMMENDED:
    Description: '*Not available.*'
    Severity: WARNING

  ZM_ALGORITHM_NOT_ZONE_SIGN:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_ALGORITHM_OK:
    Description: '*Not available.*'
    Severity: INFO

  ZM_ALGORITHM_PRIVATE:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_ALGORITHM_RESERVED:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_ALGORITHM_UNASSIGNED:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_A_UNEXPECTED_RCODE:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_BREAKS_ON_EDNS:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_CHILD_DISTINCT_NS_IP:
    Description: '*Not available.*'
    Severity: INFO

  ZM_CHILD_NS_FAILED:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_CHILD_NS_SAME_IP:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_CHILD_ZONE_LAME:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_CN01_IPV4_DISABLED:
    Description: |
      IPv4 is disabled. No DNS queries are sent to these name servers:
      "{ns_list}".
    Severity: NOTICE

  ZM_CN01_IPV6_DISABLED:
    Description: |
      IPv6 is disabled. No DNS queries are sent to these name servers:
      "{ns_list}".
    Severity: NOTICE

  ZM_CN01_MISSING_NS_RECORD_UDP:
    Description: |
      Nameserver {ns} reponds to a NS query with no NS records in the answer
      section over UDP.
    Severity: ERROR

  ZM_CN01_MISSING_SOA_RECORD_UDP:
    Description: |
      Nameserver {ns} reponds to a SOA query with no SOA records in the answer
      section over UDP.
    Severity: ERROR

  ZM_CN01_NO_RESPONSE_NS_QUERY_UDP:
    Description: |
      Nameserver {ns} does not respond to NS queries over UDP.
    Severity: ERROR

  ZM_CN01_NO_RESPONSE_SOA_QUERY_UDP:
    Description: |
      Nameserver {ns} does not respond to SOA queries over UDP.
    Severity: ERROR

  ZM_CN01_NO_RESPONSE_UDP:
    Description: |
      Nameserver {ns} does not respond to any queries over UDP.
    Severity: ERROR

  ZM_CN01_NS_RECORD_NOT_AA_UDP:
    Description: |
      Nameserver {ns} does not give an authoritative response on an NS query
      over UDP.
    Severity: ERROR

  ZM_CN01_SOA_RECORD_NOT_AA_UDP:
    Description: |
      Nameserver {ns} does not give an authoritative response on an SOA query
      over UDP.
    Severity: ERROR

  ZM_CN01_UNEXPECTED_RCODE_NS_QUERY_UDP:
    Description: |
      Nameserver {ns} responds with an unexpected RCODE ({rcode}) on an NS
      query over UDP.
    Severity: ERROR

  ZM_CN01_UNEXPECTED_RCODE_SOA_QUERY_UDP:
    Description: |
      Nameserver {ns} responds with an unexpected RCODE ({rcode}) on an SOA
      query over UDP.
    Severity: ERROR

  ZM_CN01_WRONG_NS_RECORD_UDP:
    Description: |
      Nameserver {ns} responds with a wrong owner name ({domain_found} instead
      of {domain_expected}) on NS queries over UDP.
    Severity: ERROR

  ZM_CN01_WRONG_SOA_RECORD_UDP:
    Description: |
      Nameserver {ns} responds with a wrong owner name ({domain_found} instead
      of {domain_expected}) on SOA queries over UDP.
    Severity: ERROR

  ZM_CN02_MISSING_NS_RECORD_TCP:
    Description: |
      Nameserver {ns} reponds to a NS query with no NS records in the answer
      section over TCP.
    Severity: ERROR

  ZM_CN02_MISSING_SOA_RECORD_TCP:
    Description: |
      Nameserver {ns} reponds to a SOA query with no SOA records in the answer
      section over TCP.
    Severity: ERROR

  ZM_CN02_NO_RESPONSE_NS_QUERY_TCP:
    Description: |
      Nameserver {ns} does not respond to NS queries over TCP.
    Severity: ERROR

  ZM_CN02_NO_RESPONSE_SOA_QUERY_TCP:
    Description: |
      Nameserver {ns} does not respond to SOA queries over TCP.
    Severity: ERROR

  ZM_CN02_NO_RESPONSE_TCP:
    Description: |
      Nameserver {ns} does not respond to any queries over TCP.
    Severity: ERROR

  ZM_CN02_NS_RECORD_NOT_AA_TCP:
    Description: |
      Nameserver {ns} does not give an authoritative response on an NS query
      over TCP.
    Severity: ERROR

  ZM_CN02_SOA_RECORD_NOT_AA_TCP:
    Description: |
      Nameserver {ns} does not give an authoritative response on an SOA query
      over TCP.
    Severity: ERROR

  ZM_CN02_UNEXPECTED_RCODE_NS_QUERY_TCP:
    Description: |
      Nameserver {ns} responds with an unexpected RCODE ({rcode}) on an NS
      query over TCP.
    Severity: ERROR

  ZM_CN02_UNEXPECTED_RCODE_SOA_QUERY_TCP:
    Description: |
      Nameserver {ns} responds with an unexpected RCODE ({rcode}) on an SOA
      query over TCP.
    Severity: ERROR

  ZM_CN02_WRONG_NS_RECORD_TCP:
    Description: |
      Nameserver {ns} responds with a wrong owner name ({domain_found} instead
      of {domain_expected}) on NS queries over TCP.
    Severity: ERROR

  ZM_CN02_WRONG_SOA_RECORD_TCP:
    Description: |
      Nameserver {ns} responds with a wrong owner name ({domain_found} instead
      of {domain_expected}) on SOA queries over TCP.
    Severity: ERROR

  ZM_CN04_EMPTY_PREFIX_SET:
    Description: |
      Prefix database returned no information for IP address {ns_ip}.
    Severity: ERROR

  ZM_CN04_ERROR_PREFIX_DATABASE:
    Description: |
      Prefix database error. No data to analyze for IP address {ns_ip}.
    Severity: ERROR

  ZM_CN04_IPV4_DIFFERENT_PREFIX:
    Description: |
      The following name server(s) are announced in unique IPv4 prefix(es):
      "{ns_list}"
    Severity: INFO

  ZM_CN04_IPV4_SAME_PREFIX:
    Description: |
      The following name server(s) are announced in the same IPv4 prefix
      ({ip_prefix}): "{ns_list}"
    Severity: WARNING

  ZM_CN04_IPV6_DIFFERENT_PREFIX:
    Description: |
      The following name server(s) are announced in unique IPv6 prefix(es):
      "{ns_list}"
    Severity: INFO

  ZM_CN04_IPV6_SAME_PREFIX:
    Description: |
      The following name server(s) are announced in the same IPv6 prefix
      ({ip_prefix}): "{ns_list}"
    Severity: WARNING

  ZM_DEL_DISTINCT_NS_IP:
    Description: '*Not available.*'
    Severity: INFO

  ZM_DEL_NS_SAME_IP:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_DNSKEY_SMALLER_THAN_REC:
    Description: '*Not available.*'
    Severity: WARNING

  ZM_DNSKEY_TOO_LARGE_FOR_ALGO:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_DNSKEY_TOO_SMALL_FOR_ALGO:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_DNSSEC_03_FAILED:
    Description: The `dnssec-03` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNSSEC_04_FAILED:
    Description: The `dnssec-04` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNSSEC_06_FAILED:
    Description: The `dnssec-06` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNSSEC_12_FAILED:
    Description: The `dnssec-12` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_ADDRESS01_FAILED:
    Description: The `dns-address01` test case failed, but no further information is
      available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_ADDRESS02_FAILED:
    Description: The `dns-address02` test case failed, but no further information is
      available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_ADDRESS03_FAILED:
    Description: The `dns-address03` test case failed, but no further information is
      available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_DELEGATION04_FAILED:
    Description: The `dns-delegation04` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_DELEGATION06_FAILED:
    Description: The `dns-delegation06` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_DELEGATION07_FAILED:
    Description: The `dns-delegation07` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_NAMESERVER03_FAILED:
    Description: The `dns-nameserver03` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_NAMESERVER04_FAILED:
    Description: The `dns-nameserver04` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_NAMESERVER06_FAILED:
    Description: The `dns-nameserver06` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_NAMESERVER07_FAILED:
    Description: The `dns-nameserver07` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_NAMESERVER08_FAILED:
    Description: The `dns-nameserver08` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_NAMESERVER09_FAILED:
    Description: The `dns-nameserver09` test case failed, but no further information
      is available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_SYNTAX04_FAILED:
    Description: The `dns-syntax04` test case failed, but no further information is
      available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_SYNTAX05_FAILED:
    Description: The `dns-syntax05` test case failed, but no further information is
      available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_SYNTAX07_FAILED:
    Description: The `dns-syntax07` test case failed, but no further information is
      available. Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_ZONE02_FAILED:
    Description: The `dns-zone02` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_ZONE03_FAILED:
    Description: The `dns-zone03` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_ZONE04_FAILED:
    Description: The `dns-zone04` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_ZONE05_FAILED:
    Description: The `dns-zone05` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_ZONE06_FAILED:
    Description: The `dns-zone06` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR

  ZM_DNS_ZONE07_FAILED:
    Description: The `dns-zone07` test case failed, but no further information is available.
      Please consult the result log for this test case.
    Severity: ERROR

  ZM_DS01_DIGEST_NOT_SUPPORTED_BY_ZM:
    Description: |
      DS Digest cannot be validated by this installation of Zonemaster.
    Severity: NOTICE

  ZM_DS01_DS_ALGO_2_MISSING:
    Description: |
      DS created with algo 2 (SHA-256) is missing.
    Severity: ERROR

  ZM_DS01_DS_ALGO_DEPRECATED:
    Description: |
      The DS digest algorithm is deprecated.
    Severity: ERROR

  ZM_DS01_DS_ALGO_NOT_DS:
    Description: |
      The DS digest algorithm is not for DS.
    Severity: ERROR

  ZM_DS01_DS_ALGO_RESERVED:
    Description: |
      No DS digest algorithm defined for the digest code.
    Severity: ERROR

  ZM_DS02_ALGO_NOT_SUPPORTED_BY_ZM:
    Description: |
      DNSKEY with tag {keytag} uses unsupported algorithm {algo_num}
      ({algo_mnemo}) by this installation of Zonemaster. Fetched from the
      nameservers with IP addresses "{ns_ip_list}".
    Severity: NOTICE

  ZM_DS02_DNSKEY_NOT_FOR_ZONE_SIGNING:
    Description: |
      Flags field of DNSKEY record with tag {keytag} does not have ZONE bit
      set although DS with same tag is present in parent. Fetched from the
      nameservers with IP addresses "{ns_ip_list}".
    Severity: ERROR

  ZM_DS02_DNSKEY_NOT_SEP:
    Description: |
      Flags field of DNSKEY record with tag {keytag} does not have SEP bit set
      although DS with same tag is present in parent. Fetched from the
      nameservers with IP addresses "{ns_ip_list}".
    Severity: ERROR

  ZM_DS02_DNSKEY_NOT_SIGNED_BY_ANY_DS:
    Description: |
      The DNSKEY RRset has not been signed by any DNSKEY matched by a DS
      record. Fetched from the nameservers with IP addresses "{ns_ip_list}".
    Severity: ERROR

  ZM_DS02_NO_DNSKEY_FOR_DS:
    Description: |
      The DNSKEY record with tag {keytag} that the DS refers to does not exist
      in the DNSKEY RRset. Fetched from the nameservers with IP
      "{ns_ip_list}".
    Severity: ERROR

  ZM_DS02_NO_MATCHING_DNSKEY_RRSIG:
    Description: |
      The DNSKEY RRset is not signed by the DNSKEY with tag {keytag} that the
      DS record refers to. Fetched from the nameservers with IP
      "{ns_ip_list}".
    Severity: ERROR

  ZM_DS02_NO_MATCH_DS_DNSKEY:
    Description: |
      The DS record does not match the DNSKEY with tag {keytag} by algorithm
      or digest. Fetched from the nameservers with IP "{ns_ip_list}".
    Severity: ERROR

  ZM_DS02_NO_VALID_DNSKEY_FOR_ANY_DS:
    Description: |
      There is no valid DNSKEY matched by any of the DS records. Fetched from
      the nameservers with IP addresses "{ns_ip_list}".
    Severity: ERROR

  ZM_DS02_RRSIG_NOT_VALID_BY_DNSKEY:
    Description: |
      The DNSKEY RRset is signed with an RRSIG with tag {keytag} which cannot
      be validated by the matching DNSKEY. Fetched from the nameservers with
      IP addresses "{ns_ip_list}".
    Severity: ERROR

  ZM_DS08_ALGO_NOT_SUPPORTED_BY_ZM:
    Description: |
      This installation of Zonemaster does not support the DNSKEY algorithm.
    Severity: NOTICE

  ZM_DS08_DNSKEY_RRSIG_EXPIRED:
    Description: |
      DNSKEY RRset is signed with an RRSIG that has expired.
    Severity: ERROR

  ZM_DS08_DNSKEY_RRSIG_NOT_YET_VALID:
    Description: |
      DNSKEY RRset is signed with a not yet valid RRSIG.
    Severity: ERROR

  ZM_DS08_MISSING_RRSIG_IN_RESPONSE:
    Description: |
      DNSKEY is unsigned which is against expectation.
    Severity: ERROR

  ZM_DS08_NO_MATCHING_DNSKEY:
    Description: |
      DNSKEY RRset is signed with an RRSIG that does not match any DNSKEY.
    Severity: ERROR

  ZM_DS08_RRSIG_NOT_VALID_BY_DNSKEY:
    Description: |
      DNSKEY RRset is signed with an RRSIG that cannot be validated by the
      matching DNSKEY.
    Severity: ERROR

  ZM_DS09_ALGO_NOT_SUPPORTED_BY_ZM:
    Description: |
      This installation of Zonemaster does not support the DNSKEY algorithm.
    Severity: NOTICE

  ZM_DS09_MISSING_RRSIG_IN_RESPONSE:
    Description: |
      SOA is unsigned which is against expectation
    Severity: ERROR

  ZM_DS09_NO_MATCHING_DNSKEY:
    Description: |
      SOA is signed with an RRSIG that does not match any DNSKEY
    Severity: ERROR

  ZM_DS09_RRSIG_NOT_VALID_BY_DNSKEY:
    Description: |
      SOA is signed with an RRSIG that cannot be validated by the matching
      DNSKEY
    Severity: ERROR

  ZM_DS09_SOA_RRSIG_EXPIRED:
    Description: |
      SOA is signed with an RRSIG that has expired
    Severity: ERROR

  ZM_DS09_SOA_RRSIG_NOT_YET_VALID:
    Description: |
      SOA is signed with a not yet valid RRSIG
    Severity: ERROR

  ZM_DS10_ALGO_NOT_SUPPORTED_BY_ZM:
    Description: |
      This installation of Zonemaster does not support the DNSKEY algorithm.
    Severity: NOTICE

  ZM_DS10_ANSWER_VERIFY_ERROR:
    Description: |
      RRSIG on record or records in answer section cannot be verified.
    Severity: ERROR

  ZM_DS10_HAS_NSEC:
    Description: |
      Consistent NSEC returned from servers.
    Severity: INFO

  ZM_DS10_HAS_NSEC3:
    Description: |
      Consistent NSEC3 returned from servers.
    Severity: INFO

  ZM_DS10_INCONSISTENT_NSEC_NSEC3:
    Description: |
      Some servers return NSEC, others return NSEC3.
    Severity: ERROR

  ZM_DS10_MISSING_NSEC_NSEC3:
    Description: |
      Missing expected NSEC or NSEC3 in a signed zone.
    Severity: ERROR

  ZM_DS10_MIXED_NSEC_NSEC3:
    Description: |
      Both NSEC and NSEC3 are returned from the same server.
    Severity: ERROR

  ZM_DS10_NAME_NOT_COVERED_BY_NSEC:
    Description: |
      The non-existent name is not correctly covered by the NSEC records.
    Severity: ERROR

  ZM_DS10_NAME_NOT_COVERED_BY_NSEC3:
    Description: |
      The non-existent name is not correctly covered by the NSEC3 records.
    Severity: ERROR

  ZM_DS10_NON_EXISTENT_RESPONSE_ERROR:
    Description: |
      No or error in response of an expected non-existent name.
    Severity: ERROR

  ZM_DS10_NSEC3_MISSING_SIGNATURE:
    Description: |
      Missing signatures for NSEC3 record or records.
    Severity: ERROR

  ZM_DS10_NSEC3_RRSIG_VERIFY_ERROR:
    Description: |
      The signature or signatures on the NSEC3 record or records cannot be
      correctly verfied.
    Severity: ERROR

  ZM_DS10_NSEC_MISSING_SIGNATURE:
    Description: |
      Missing signatures for NSEC record or records.
    Severity: ERROR

  ZM_DS10_NSEC_RRSIG_VERIFY_ERROR:
    Description: |
      The signature or signatures on the NSEC record or records cannot be
      correctly verfied.
    Severity: ERROR

  ZM_DS10_UNSIGNED_ANSWER:
    Description: |
      RRSIG is missing for record or records in the answer section.
    Severity: ERROR

  ZM_DS13_ALGO_NOT_SIGNED_DNSKEY:
    Description: |
      The DNSKEY RRset is not signed with an algorithm present in the DNSKEY
      RRset
    Severity: ERROR

  ZM_DS13_ALGO_NOT_SIGNED_NS:
    Description: |
      The NS RRset is not signed with an algorithm present in the DNSKEY RRset
    Severity: ERROR

  ZM_DS13_ALGO_NOT_SIGNED_SOA:
    Description: |
      The SOA RRset is not signed with an algorithm present in the DNSKEY
      RRset
    Severity: ERROR

  ZM_DS15_HAS_CDNSKEY_NO_CDS:
    Description: |
      CDNSKEY RRset is found, but no CDS RRset.
    Severity: NOTICE

  ZM_DS15_HAS_CDS_AND_CDNSKEY:
    Description: |
      CDNSKEY and CDS RRsets are found.
    Severity: INFO

  ZM_DS15_HAS_CDS_NO_CDNSKEY:
    Description: |
      CDS RRset is found, but no CDNSKEY RRset.
    Severity: NOTICE

  ZM_DS15_INCONSISTENT_CDNSKEY:
    Description: |
      All servers do not have the same CDNSKEY RRset.
    Severity: ERROR

  ZM_DS15_INCONSISTENT_CDS:
    Description: |
      All servers do not have the same CDS RRset.
    Severity: ERROR

  ZM_DS15_MISMATCH_CDS_CDNSKEY:
    Description: |
      Both CDS and CDNSKEY RRsets are found but they do not match.
    Severity: ERROR

  ZM_DS15_NO_CDS_CDNSKEY:
    Description: |
      No CDS or CDNSKEY RRsets are found on any name server.
    Severity: INFO

  ZM_DS16_CDS_INVALID_RRSIG:
    Description: |
      CDS RRset is signed with an invalid RRSIG.
    Severity: ERROR

  ZM_DS16_CDS_MATCHES_NON_SEP_DNSKEY:
    Description: |
      CDS record matches a DNSKEY with SEP bit (bit 15) unset.
    Severity: ERROR

  ZM_DS16_CDS_MATCHES_NON_ZONE_DNSKEY:
    Description: |
      CDS record matches a DNSKEY with zone bit (bit 7) unset.
    Severity: ERROR

  ZM_DS16_CDS_MATCHES_NO_DNSKEY:
    Description: |
      CDS record does not match any DNSKEY in DNSKEY RRset.
    Severity: ERROR

  ZM_DS16_CDS_NOT_SIGNED_BY_CDS:
    Description: |
      CDS RRset is not signed by the key that the CDS record points to.
    Severity: ERROR

  ZM_DS16_CDS_SIGNED_BY_UNKNOWN_DNSKEY:
    Description: |
      CDS RRset is signed by a key not in DNSKEY RRset.
    Severity: ERROR

  ZM_DS16_CDS_UNSIGNED:
    Description: "CDS RRset is unsigned.\n"
    Severity: ERROR

  ZM_DS16_CDS_WITHOUT_DNSKEY:
    Description: |
      CDS RRset exists, but there is no DNSKEY RRset.
    Severity: ERROR

  ZM_DS16_DELETE_CDS:
    Description: |
      CDS RRset has a "delete" CDS record as a single record.
    Severity: INFO

  ZM_DS16_DNSKEY_NOT_SIGNED_BY_CDS:
    Description: |
      DNSKEY RRset is not signed by the key or keys that the CDS records point
      to.
    Severity: ERROR

  ZM_DS16_MIXED_DELETE_CDS:
    Description: |
      "Delete" CDS record is mixed with normal CDS record.
    Severity: ERROR

  ZM_DS17_CDNSKEY_INVALID_RRSIG:
    Description: |
      CDNSKEY RRset signed with an invalid RRSIG.
    Severity: ERROR

  ZM_DS17_CDNSKEY_IS_NON_SEP:
    Description: |
      CDNSKEY record has the SEP bit (bit 15) unset.
    Severity: ERROR

  ZM_DS17_CDNSKEY_IS_NON_ZONE:
    Description: |
      CDNSKEY record has the zone bit (bit 7) unset.
    Severity: ERROR

  ZM_DS17_CDNSKEY_MATCHES_NO_DNSKEY:
    Description: |
      CDNSKEY record does not match any DNSKEY in DNSKEY RRset.
    Severity: ERROR

  ZM_DS17_CDNSKEY_NOT_SIGNED_BY_CDNSKEY:
    Description: |
      CDNSKEY RRset is not signed by the key that the CDNSKEY record points
      to.
    Severity: ERROR

  ZM_DS17_CDNSKEY_SIGNED_BY_UNKNOWN_DNSKEY:
    Description: |
      CDNSKEY RRset is signed by a key not in DNSKEY RRset.
    Severity: ERROR

  ZM_DS17_CDNSKEY_UNSIGNED:
    Description: "CDNSKEY RRset is unsigned.\n"
    Severity: ERROR

  ZM_DS17_CDNSKEY_WITHOUT_DNSKEY:
    Description: |
      CDNSKEY RRset exists, but there is no DNSKEY RRset.
    Severity: ERROR

  ZM_DS17_DELETE_CDNSKEY:
    Description: |
      CDNSKEY RRset has a "delete" CDNSKEY record as a single record.
    Severity: INFO

  ZM_DS17_DNSKEY_NOT_SIGNED_BY_CDNSKEY:
    Description: |
      DNSKEY RRset is not signed by the key or keys that the CDNSKEY records
      point to.
    Severity: ERROR

  ZM_DS17_MIXED_DELETE_CDNSKEY:
    Description: |
      "Delete" CDNSKEY record is mixed with normal CDNSKEY record.
    Severity: ERROR

  ZM_DS18_NO_MATCH_CDNSKEY_RRSIG_DS:
    Description: |
      CDNSKEY RRset is not signed with a DNSKEY record that a DS record points
      to.
    Severity: ERROR

  ZM_DS18_NO_MATCH_CDS_RRSIG_DS:
    Description: |
      The CDS RRset is not signed with a DNSKEY record that a DS record points
      to.
    Severity: ERROR

  ZM_EDNS_RESPONSE_WITHOUT_EDNS:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_EDNS_VERSION_ERROR:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_EMPTY_ASN_SET:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_ENOUGH_IPV4_NS_CHILD:
    Description: '*Not available.*'
    Severity: INFO

  ZM_ENOUGH_IPV4_NS_DEL:
    Description: '*Not available.*'
    Severity: INFO

  ZM_ENOUGH_IPV6_NS_CHILD:
    Description: '*Not available.*'
    Severity: INFO

  ZM_ENOUGH_IPV6_NS_DEL:
    Description: '*Not available.*'
    Severity: INFO

  ZM_ENOUGH_NS_CHILD:
    Description: '*Not available.*'
    Severity: INFO

  ZM_ENOUGH_NS_DEL:
    Description: '*Not available.*'
    Severity: INFO

  ZM_ERROR_ASN_DATABASE:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_EXTRA_ADDRESS_CHILD:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_IN_BAILIWICK_ADDR_MISMATCH:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_IPV4_DIFFERENT_ASN:
    Description: '*Not available.*'
    Severity: INFO

  ZM_IPV4_ONE_ASN:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_IPV4_SAME_ASN:
    Description: '*Not available.*'
    Severity: NOTICE

  ZM_IPV6_DIFFERENT_ASN:
    Description: '*Not available.*'
    Severity: INFO

  ZM_IPV6_ONE_ASN:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_IPV6_SAME_ASN:
    Description: '*Not available.*'
    Severity: NOTICE

  ZM_IS_A_RECURSOR:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_KEY_SIZE_OK:
    Description: '*Not available.*'
    Severity: INFO

  ZM_MISSING_OPT_IN_TRUNCATED:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_MULTIPLE_NS_SET:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_MULTIPLE_SOA:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_MULTIPLE_SOA_MNAMES:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_MULTIPLE_SOA_RNAMES:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_MULTIPLE_SOA_SERIALS:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_MULTIPLE_SOA_SERIALS_OK:
    Description: '*Not available.*'
    Severity: NOTICE

  ZM_MULTIPLE_SOA_TIME_PARAMETER_SET:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_N10_EDNS_RESPONSE_ERROR:
    Description: |
      Expected RCODE value when EDNS ver=1, but error in response.
    Severity: ERROR

  ZM_N10_NO_RESPONSE_EDNS1_QUERY:
    Description: |
      Response when EDNS ver=0, but not when 1.
    Severity: ERROR

  ZM_N10_UNEXPECTED_RCODE:
    Description: |
      Unexpected RCODE value when EDNS ver=1.
    Severity: ERROR

  ZM_N11_NO_EDNS:
    Description: |
      The DNS response, on query with unknown EDNS option-code, does not
      contain any EDNS from name servers "{ns_ip_list}".
    Severity: ERROR

  ZM_N11_NO_RESPONSE:
    Description: |
      There is no response on query with unknown EDNS option-code from name
      servers "{ns_ip_list}".
    Severity: ERROR

  ZM_N11_RETURNS_UNKNOWN_OPTION_CODE:
    Description: |
      The DNS response, on query with unknown EDNS option-code, contains an
      unknown EDNS option-code from name servers "{ns_ip_list}".
    Severity: ERROR

  ZM_N11_UNEXPECTED_ANSWER_SECTION:
    Description: |
      The DNS response, on query with unknown EDNS option-code, does not
      contain the expected SOA record in the answer section from name servers
      "{ns_ip_list}".
    Severity: ERROR

  ZM_N11_UNEXPECTED_RCODE:
    Description: |
      The DNS response, on query with unknown EDNS option-code, has unexpected
      RCODE name "{rcode}" from name servers "{ns_ip_list}".
    Severity: ERROR

  ZM_N11_UNSET_AA:
    Description: |
      The DNS response, on query with unknown EDNS option-code, is
      unexpectedly not authoritative from name servers "{ns_ip_list}".
    Severity: ERROR

  ZM_N15_NO_VERSION:
    Description: |
      The following name server(s) do not respond to software version queries.
      Returned from name servers: "{ns_ip_list}"
    Severity: INFO

  ZM_N15_SOFTWARE_VERSION:
    Description: |
      The following name server(s) respond to software version query
      "{query_name}" with string "{string}". Returned from name servers:
      "{ns_ip_list}"
    Severity: INFO

  ZM_NOT_ENOUGH_IPV4_NS_CHILD:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NOT_ENOUGH_IPV4_NS_DEL:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NOT_ENOUGH_IPV6_NS_CHILD:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NOT_ENOUGH_IPV6_NS_DEL:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NOT_ENOUGH_NS_CHILD:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NOT_ENOUGH_NS_DEL:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NO_EDNS_SUPPORT:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NO_IPV4_NS_CHILD:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NO_IPV4_NS_DEL:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NO_IPV6_NS_CHILD:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NO_IPV6_NS_DEL:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NO_NS_CNAME:
    Description: '*Not available.*'
    Severity: INFO

  ZM_NO_RECURSOR:
    Description: '*Not available.*'
    Severity: INFO

  ZM_NO_RESPONSE:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NO_RESPONSE_DNSKEY:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NO_RESPONSE_NS_QUERY:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NO_RESPONSE_SOA_QUERY:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NO_SOA_IN_RESPONSE:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NS_ERROR:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_NS_IS_CNAME:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_ONE_NS_SET:
    Description: '*Not available.*'
    Severity: INFO

  ZM_ONE_SOA:
    Description: '*Not available.*'
    Severity: INFO

  ZM_ONE_SOA_MNAME:
    Description: '*Not available.*'
    Severity: INFO

  ZM_ONE_SOA_RNAME:
    Description: '*Not available.*'
    Severity: INFO

  ZM_ONE_SOA_SERIAL:
    Description: '*Not available.*'
    Severity: INFO

  ZM_ONE_SOA_TIME_PARAMETER_SET:
    Description: '*Not available.*'
    Severity: INFO

  ZM_OUT_OF_BAILIWICK_ADDR_MISMATCH:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_REFERRAL_SIZE_OK:
    Description: '*Not available.*'
    Severity: INFO

  ZM_REFERRAL_SIZE_TOO_LARGE:
    Description: '*Not available.*'
    Severity: WARNING

  ZM_RNAME_MAIL_DOMAIN_INVALID:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_RNAME_MAIL_DOMAIN_LOCALHOST:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_RNAME_MAIL_ILLEGAL_CNAME:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_RNAME_RFC822_INVALID:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_RNAME_RFC822_VALID:
    Description: '*Not available.*'
    Severity: INFO

  ZM_SOA_SERIAL:
    Description: '*Not available.*'
    Severity: INFO

  ZM_SOA_SERIAL_VARIATION:
    Description: '*Not available.*'
    Severity: NOTICE

  ZM_UNEXPECTED_RCODE:
    Description: '*Not available.*'
    Severity: WARNING

  ZM_UNKNOWN_OPTION_CODE:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_UNSUPPORTED_EDNS_VER:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_WRONG_SOA:
    Description: '*Not available.*'
    Severity: ERROR

  ZM_Z01_MNAME_HAS_LOCALHOST_ADDR:
    Description: |
      SOA MNAME name server "{nsname}" resolves to a localhost IP address
      ({ns_ip}).
    Severity: WARNING

  ZM_Z01_MNAME_IS_DOT:
    Description: |
      SOA MNAME is specified as "." which usually means "no server". Fetched
      from name servers "{ns_ip_list}".
    Severity: NOTICE

  ZM_Z01_MNAME_IS_LOCALHOST:
    Description: |
      SOA MNAME name server is "localhost", which is invalid. Fetched from
      name servers "{ns_ip_list}".
    Severity: WARNING

  ZM_Z01_MNAME_MISSING_SOA_RECORD:
    Description: |
      SOA MNAME name server "{ns}" reponds to an SOA query with no SOA records
      in the answer section.
    Severity: WARNING

  ZM_Z01_MNAME_NOT_AUTHORITATIVE:
    Description: |
      SOA MNAME name server "{ns}" is not authoritative for the zone.
    Severity: WARNING

  ZM_Z01_MNAME_NOT_IN_NS_LIST:
    Description: |
      SOA MNAME name server "{nsname}" is not listed as NS record for the
      zone.
    Severity: INFO

  ZM_Z01_MNAME_NOT_MASTER:
    Description: |
      SOA MNAME name server(s) "{ns_list}" do(es) not have the highest SOA
      SERIAL (expected "{soaserial}" but got "{soaserial_list}")
    Severity: WARNING

  ZM_Z01_MNAME_NOT_RESOLVE:
    Description: |
      SOA MNAME name server "{nsname}" cannot be resolved into an IP address.
    Severity: WARNING

  ZM_Z01_MNAME_NO_RESPONSE:
    Description: |
      SOA MNAME name server "{ns}" does not respond to an SOA query.
    Severity: WARNING

  ZM_Z01_MNAME_UNEXPECTED_RCODE:
    Description: |
      SOA MNAME name server "{ns}" gives unexpected RCODE name ("{rcode}") in
      response to an SOA query.
    Severity: WARNING

  ZM_Z_FLAGS_NOTCLEAR:
    Description: '*Not available.*'
    Severity: ERROR

  DNSSEC_DNS_QUERY_ERROR:
    Severity: ERROR
    Description: An error occurred while performing DNS query(s).
  DNSSEC_INVALID_SIGNING_ALGORITHM:
    Severity: ERROR
    Description: An invalid algorithm is used to sign the zone.
  DNSSEC_INVALID_DIGEST_ALGORITHM:
    Severity: ERROR
    Description: An invalid algorithm is used in the provided DS record(s).
  EPP_SERVICE_PORT_UNREACHABLE:
    Severity: ERROR
    Description: The client was unable to successfully connect to the EPP serer.
  EPP_LOGIN_ERROR:
    Severity: ERROR
    Description: |
      The client was unable to successfullt authenticate with the EPP server.
  EPP_GENERIC_COMMAND_ERROR:
    Severity: ERROR
    Description: The client received a 2400 error from the server.
  EPP_SCHEMA_VALIDATION_ERROR:
    Severity: ERROR
    Description: The response from the server failed schema validation.
  
  EPP_DNS_RESOLUTION_ERROR:
    Severity: ERROR
    Description: TBA
  
  EPP_MISSING_A_RECORDS:
    Severity: ERROR
    Description: TBA
  
  EPP_MISSING_AAAA_RECORDS:
    Severity: WARNING
    Description: TBA
  
  EPP_SERVICE_PORT_UNREACHABLE:
    Severity: ERROR
    Description: TBA
  
  EPP_TLS_CONNECTION_ERROR:
    Severity: ERROR
    Description: TBA
  
  EPP_TLS_REQUIRED_PROTOCOL_NOT_SUPPORTED:
    Severity: ERROR
    Description: TBA
  
  EPP_TLS_FORBIDDEN_PROTOCOL_SUPPORTED:
    Severity: ERROR
    Description: TBA
  
  EPP_TLS_UNTRUSTED_CERTIFICATE:
    Severity: ERROR
    Description: TBA
  
  EPP_TLS_EXPIRED_CERTIFICATE:
    Severity: ERROR
    Description: TBA
  
  EPP_TLS_CERTIFICATE_CHAIN_MISSING:
    Severity: ERROR
    Description: TBA
  
  EPP_TLS_CERTIFICATE_HOSTNAME_MISMATCH:
    Severity: ERROR
    Description: TBA
  
  EPP_TLS_BAD_CIPHER:
    Severity: ERROR
    Description: |
      The server uses an encryption cipher not recommended in RFC 9325.
  
  EPP_NO_GREETING_RECEIVED:
    Severity: ERROR
    Description: TBA
  
  EPP_GREETING_SVID_INVALID:
    Severity: ERROR
    Description: TBA
  
  EPP_GREETING_SVDATE_INVALID:
    Severity: ERROR
    Description: TBA
  
  EPP_GREETING_VERSION_INVALID:
    Severity: ERROR
    Description: TBA
  
  EPP_GREETING_INVALID_LANG:
    Severity: ERROR
    Description: TBA
  
  EPP_GREETING_UNEXPECTED_OBJURI:
    Severity: ERROR
    Description: TBA
  
  EPP_GREETING_MISSING_OBJURI:
    Severity: ERROR
    Description: TBA
  
  EPP_GREETING_UNEXPECTED_EXTURI:
    Severity: ERROR
    Description: TBA
  
  EPP_GREETING_MISSING_EXTURI:
    Severity: ERROR
    Description: TBA
  
  EPP_XML_PARSE_ERROR:
    Severity: ERROR
    Description: The XML response from the server could not be parsed.
  
  EPP_GREETING_RECOMMENDED_EXTENSION_MISSING:
    Severity: WARNING
    Description: |
      The server does not include the namespace URI of a recommended extension
      in an `<extURI>` element of the `<greeting>` frame.
  
  EPP_DOMAIN_CHECK_VALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_INVALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_REGISTERED_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_VALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_INVALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_REGISTERED_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_VALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_INVALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_REGISTERED_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_INFO_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_RESPONSE_NOT_1000_OR_1001:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_OBJECT_STILL_EXISTS:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_VALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_INVALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_REGISTERED_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_VALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_INVALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_REGISTERED_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_VALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_INVALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_REGISTERED_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_INFO_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_RESPONSE_NOT_1000_OR_1001:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_OBJECT_STILL_EXISTS:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_VALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_INVALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_REGISTERED_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_VALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_INVALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_REGISTERED_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_VALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_INVALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_REGISTERED_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_INFO_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_RESPONSE_NOT_1000_OR_1001:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_OBJECT_STILL_EXISTS:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_VALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_INVALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_REGISTERED_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_VALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_INVALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_REGISTERED_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_VALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_INVALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_REGISTERED_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_INFO_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_RESPONSE_NOT_1000_OR_1001:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_OBJECT_STILL_EXISTS:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_VALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_INVALID_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_DOMAIN_CHECK_REGISTERED_DOMAIN_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_VALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_INVALID_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_HOST_CHECK_REGISTERED_HOST_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_VALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_INVALID_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CHECK_REGISTERED_CONTACT_ID_INCORRECT_AVAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_INFO_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_RESPONSE_NOT_2201:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_NOT_1000:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_RESPONSE_NOT_1000_OR_1001:
    Severity: ERROR
    Description: TBA.
  
  EPP_CONTACT_DELETE_OBJECT_STILL_EXISTS:
    Severity: ERROR
    Description: TBA.
