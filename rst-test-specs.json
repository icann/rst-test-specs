{
   "Contact" : {
      "Email" : "rst@icann.org",
      "Name" : "GDS Technical Services",
      "Organization" : "Internet Corporation for Assigned Names and Numbers (ICANN)"
   },
   "Errors" : {
      "DNSSEC_DNS_QUERY_ERROR" : {
         "Description" : "An error occurred while performing DNS query(s).",
         "Severity" : "ERROR"
      },
      "DNSSEC_INVALID_DIGEST_ALGORITHM" : {
         "Description" : "An invalid algorithm is used in the provided DS record(s).",
         "Severity" : "ERROR"
      },
      "DNSSEC_INVALID_SIGNING_ALGORITHM" : {
         "Description" : "An invalid algorithm is used to sign the zone.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CHECK_INVALID_CONTACT_ID_INCORRECT_AVAIL" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CHECK_REGISTERED_CONTACT_ID_INCORRECT_AVAIL" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CHECK_VALID_CONTACT_ID_INCORRECT_AVAIL" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_INFO_RESPONSE_NOT_1000" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_CC" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_EMAIL" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_ID" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_STATUS" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_VOICE" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_DELETE_OBJECT_STILL_EXISTS" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_DELETE_RESPONSE_NOT_1000_OR_1001" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_INFO_RESPONSE_NOT_2201" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_INFO_RESPONSE_NOT_1000" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_RESPONSE_NOT_2201" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CC" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CITY" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_EMAIL" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_ORG" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_PC" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_SP" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STATUS" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STREET" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_VOICE" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_DNS_RESOLUTION_ERROR" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_DOMAIN_CHECK_INVALID_DOMAIN_INCORRECT_AVAIL" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_DOMAIN_CHECK_REGISTERED_DOMAIN_INCORRECT_AVAIL" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_DOMAIN_CHECK_VALID_DOMAIN_INCORRECT_AVAIL" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_GENERIC_COMMAND_ERROR" : {
         "Description" : "The client received a 2400 error from the server.",
         "Severity" : "ERROR"
      },
      "EPP_GREETING_INVALID_LANG" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_GREETING_MISSING_EXTURI" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_GREETING_MISSING_OBJURI" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_GREETING_RECOMMENDED_EXTENSION_MISSING" : {
         "Description" : "The server does not include the namespace URI of a recommended extension\nin an `<extURI>` element of the `<greeting>` frame.\n",
         "Severity" : "WARNING"
      },
      "EPP_GREETING_SVDATE_INVALID" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_GREETING_SVID_INVALID" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_GREETING_UNEXPECTED_EXTURI" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_GREETING_UNEXPECTED_OBJURI" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_GREETING_VERSION_INVALID" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_HOST_CHECK_INVALID_HOST_INCORRECT_AVAIL" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_HOST_CHECK_REGISTERED_HOST_INCORRECT_AVAIL" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_HOST_CHECK_VALID_HOST_INCORRECT_AVAIL" : {
         "Description" : "TBA.",
         "Severity" : "ERROR"
      },
      "EPP_LOGIN_ERROR" : {
         "Description" : "The client was unable to successfullt authenticate with the EPP server.\n",
         "Severity" : "ERROR"
      },
      "EPP_MISSING_AAAA_RECORDS" : {
         "Description" : "TBA",
         "Severity" : "WARNING"
      },
      "EPP_MISSING_A_RECORDS" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_NO_GREETING_RECEIVED" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_SCHEMA_VALIDATION_ERROR" : {
         "Description" : "The response from the server failed schema validation.",
         "Severity" : "ERROR"
      },
      "EPP_SERVICE_PORT_UNREACHABLE" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_TLS_BAD_CIPHER" : {
         "Description" : "The server uses an encryption cipher not recommended in RFC 9325.\n",
         "Severity" : "ERROR"
      },
      "EPP_TLS_CERTIFICATE_CHAIN_MISSING" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_TLS_CERTIFICATE_HOSTNAME_MISMATCH" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_TLS_CONNECTION_ERROR" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_TLS_EXPIRED_CERTIFICATE" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_TLS_FORBIDDEN_PROTOCOL_SUPPORTED" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_TLS_REQUIRED_PROTOCOL_NOT_SUPPORTED" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_TLS_UNTRUSTED_CERTIFICATE" : {
         "Description" : "TBA",
         "Severity" : "ERROR"
      },
      "EPP_XML_PARSE_ERROR" : {
         "Description" : "The XML response from the server could not be parsed.",
         "Severity" : "ERROR"
      },
      "ZM_AAAA_BAD_RDATA" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_AAAA_QUERY_DROPPED" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_AAAA_UNEXPECTED_RCODE" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_AAAA_WELL_PROCESSED" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_ADDRESSES_MATCH" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_ALGORITHM_DEPRECATED" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_ALGORITHM_NOT_RECOMMENDED" : {
         "Description" : "*Not available.*",
         "Severity" : "WARNING"
      },
      "ZM_ALGORITHM_NOT_ZONE_SIGN" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_ALGORITHM_OK" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_ALGORITHM_PRIVATE" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_ALGORITHM_RESERVED" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_ALGORITHM_UNASSIGNED" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_A_UNEXPECTED_RCODE" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_BREAKS_ON_EDNS" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_CHILD_DISTINCT_NS_IP" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_CHILD_NS_FAILED" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_CHILD_NS_SAME_IP" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_CHILD_ZONE_LAME" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_CN01_IPV4_DISABLED" : {
         "Description" : "IPv4 is disabled. No DNS queries are sent to these name servers:\n\"{ns_list}\".\n",
         "Severity" : "NOTICE"
      },
      "ZM_CN01_IPV6_DISABLED" : {
         "Description" : "IPv6 is disabled. No DNS queries are sent to these name servers:\n\"{ns_list}\".\n",
         "Severity" : "NOTICE"
      },
      "ZM_CN01_MISSING_NS_RECORD_UDP" : {
         "Description" : "Nameserver {ns} reponds to a NS query with no NS records in the answer\nsection over UDP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN01_MISSING_SOA_RECORD_UDP" : {
         "Description" : "Nameserver {ns} reponds to a SOA query with no SOA records in the answer\nsection over UDP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN01_NO_RESPONSE_NS_QUERY_UDP" : {
         "Description" : "Nameserver {ns} does not respond to NS queries over UDP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN01_NO_RESPONSE_SOA_QUERY_UDP" : {
         "Description" : "Nameserver {ns} does not respond to SOA queries over UDP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN01_NO_RESPONSE_UDP" : {
         "Description" : "Nameserver {ns} does not respond to any queries over UDP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN01_NS_RECORD_NOT_AA_UDP" : {
         "Description" : "Nameserver {ns} does not give an authoritative response on an NS query\nover UDP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN01_SOA_RECORD_NOT_AA_UDP" : {
         "Description" : "Nameserver {ns} does not give an authoritative response on an SOA query\nover UDP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN01_UNEXPECTED_RCODE_NS_QUERY_UDP" : {
         "Description" : "Nameserver {ns} responds with an unexpected RCODE ({rcode}) on an NS\nquery over UDP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN01_UNEXPECTED_RCODE_SOA_QUERY_UDP" : {
         "Description" : "Nameserver {ns} responds with an unexpected RCODE ({rcode}) on an SOA\nquery over UDP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN01_WRONG_NS_RECORD_UDP" : {
         "Description" : "Nameserver {ns} responds with a wrong owner name ({domain_found} instead\nof {domain_expected}) on NS queries over UDP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN01_WRONG_SOA_RECORD_UDP" : {
         "Description" : "Nameserver {ns} responds with a wrong owner name ({domain_found} instead\nof {domain_expected}) on SOA queries over UDP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN02_MISSING_NS_RECORD_TCP" : {
         "Description" : "Nameserver {ns} reponds to a NS query with no NS records in the answer\nsection over TCP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN02_MISSING_SOA_RECORD_TCP" : {
         "Description" : "Nameserver {ns} reponds to a SOA query with no SOA records in the answer\nsection over TCP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN02_NO_RESPONSE_NS_QUERY_TCP" : {
         "Description" : "Nameserver {ns} does not respond to NS queries over TCP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN02_NO_RESPONSE_SOA_QUERY_TCP" : {
         "Description" : "Nameserver {ns} does not respond to SOA queries over TCP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN02_NO_RESPONSE_TCP" : {
         "Description" : "Nameserver {ns} does not respond to any queries over TCP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN02_NS_RECORD_NOT_AA_TCP" : {
         "Description" : "Nameserver {ns} does not give an authoritative response on an NS query\nover TCP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN02_SOA_RECORD_NOT_AA_TCP" : {
         "Description" : "Nameserver {ns} does not give an authoritative response on an SOA query\nover TCP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN02_UNEXPECTED_RCODE_NS_QUERY_TCP" : {
         "Description" : "Nameserver {ns} responds with an unexpected RCODE ({rcode}) on an NS\nquery over TCP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN02_UNEXPECTED_RCODE_SOA_QUERY_TCP" : {
         "Description" : "Nameserver {ns} responds with an unexpected RCODE ({rcode}) on an SOA\nquery over TCP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN02_WRONG_NS_RECORD_TCP" : {
         "Description" : "Nameserver {ns} responds with a wrong owner name ({domain_found} instead\nof {domain_expected}) on NS queries over TCP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN02_WRONG_SOA_RECORD_TCP" : {
         "Description" : "Nameserver {ns} responds with a wrong owner name ({domain_found} instead\nof {domain_expected}) on SOA queries over TCP.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN04_EMPTY_PREFIX_SET" : {
         "Description" : "Prefix database returned no information for IP address {ns_ip}.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN04_ERROR_PREFIX_DATABASE" : {
         "Description" : "Prefix database error. No data to analyze for IP address {ns_ip}.\n",
         "Severity" : "ERROR"
      },
      "ZM_CN04_IPV4_DIFFERENT_PREFIX" : {
         "Description" : "The following name server(s) are announced in unique IPv4 prefix(es):\n\"{ns_list}\"\n",
         "Severity" : "INFO"
      },
      "ZM_CN04_IPV4_SAME_PREFIX" : {
         "Description" : "The following name server(s) are announced in the same IPv4 prefix\n({ip_prefix}): \"{ns_list}\"\n",
         "Severity" : "WARNING"
      },
      "ZM_CN04_IPV6_DIFFERENT_PREFIX" : {
         "Description" : "The following name server(s) are announced in unique IPv6 prefix(es):\n\"{ns_list}\"\n",
         "Severity" : "INFO"
      },
      "ZM_CN04_IPV6_SAME_PREFIX" : {
         "Description" : "The following name server(s) are announced in the same IPv6 prefix\n({ip_prefix}): \"{ns_list}\"\n",
         "Severity" : "WARNING"
      },
      "ZM_DEL_DISTINCT_NS_IP" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_DEL_NS_SAME_IP" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_DNSKEY_SMALLER_THAN_REC" : {
         "Description" : "*Not available.*",
         "Severity" : "WARNING"
      },
      "ZM_DNSKEY_TOO_LARGE_FOR_ALGO" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_DNSKEY_TOO_SMALL_FOR_ALGO" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_DNSSEC_03_FAILED" : {
         "Description" : "The `dnssec-03` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNSSEC_04_FAILED" : {
         "Description" : "The `dnssec-04` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNSSEC_06_FAILED" : {
         "Description" : "The `dnssec-06` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNSSEC_12_FAILED" : {
         "Description" : "The `dnssec-12` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_ADDRESS01_FAILED" : {
         "Description" : "The `dns-address01` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_ADDRESS02_FAILED" : {
         "Description" : "The `dns-address02` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_ADDRESS03_FAILED" : {
         "Description" : "The `dns-address03` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_DELEGATION04_FAILED" : {
         "Description" : "The `dns-delegation04` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_DELEGATION06_FAILED" : {
         "Description" : "The `dns-delegation06` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_DELEGATION07_FAILED" : {
         "Description" : "The `dns-delegation07` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_NAMESERVER03_FAILED" : {
         "Description" : "The `dns-nameserver03` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_NAMESERVER04_FAILED" : {
         "Description" : "The `dns-nameserver04` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_NAMESERVER06_FAILED" : {
         "Description" : "The `dns-nameserver06` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_NAMESERVER07_FAILED" : {
         "Description" : "The `dns-nameserver07` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_NAMESERVER08_FAILED" : {
         "Description" : "The `dns-nameserver08` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_NAMESERVER09_FAILED" : {
         "Description" : "The `dns-nameserver09` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_SYNTAX04_FAILED" : {
         "Description" : "The `dns-syntax04` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_SYNTAX05_FAILED" : {
         "Description" : "The `dns-syntax05` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_SYNTAX07_FAILED" : {
         "Description" : "The `dns-syntax07` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_ZONE02_FAILED" : {
         "Description" : "The `dns-zone02` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_ZONE03_FAILED" : {
         "Description" : "The `dns-zone03` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_ZONE04_FAILED" : {
         "Description" : "The `dns-zone04` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_ZONE05_FAILED" : {
         "Description" : "The `dns-zone05` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_ZONE06_FAILED" : {
         "Description" : "The `dns-zone06` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DNS_ZONE07_FAILED" : {
         "Description" : "The `dns-zone07` test case failed, but no further information is available. Please consult the result log for this test case.",
         "Severity" : "ERROR"
      },
      "ZM_DS01_DIGEST_NOT_SUPPORTED_BY_ZM" : {
         "Description" : "DS Digest cannot be validated by this installation of Zonemaster.\n",
         "Severity" : "NOTICE"
      },
      "ZM_DS01_DS_ALGO_2_MISSING" : {
         "Description" : "DS created with algo 2 (SHA-256) is missing.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS01_DS_ALGO_DEPRECATED" : {
         "Description" : "The DS digest algorithm is deprecated.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS01_DS_ALGO_NOT_DS" : {
         "Description" : "The DS digest algorithm is not for DS.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS01_DS_ALGO_RESERVED" : {
         "Description" : "No DS digest algorithm defined for the digest code.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS02_ALGO_NOT_SUPPORTED_BY_ZM" : {
         "Description" : "DNSKEY with tag {keytag} uses unsupported algorithm {algo_num}\n({algo_mnemo}) by this installation of Zonemaster. Fetched from the\nnameservers with IP addresses \"{ns_ip_list}\".\n",
         "Severity" : "NOTICE"
      },
      "ZM_DS02_DNSKEY_NOT_FOR_ZONE_SIGNING" : {
         "Description" : "Flags field of DNSKEY record with tag {keytag} does not have ZONE bit\nset although DS with same tag is present in parent. Fetched from the\nnameservers with IP addresses \"{ns_ip_list}\".\n",
         "Severity" : "ERROR"
      },
      "ZM_DS02_DNSKEY_NOT_SEP" : {
         "Description" : "Flags field of DNSKEY record with tag {keytag} does not have SEP bit set\nalthough DS with same tag is present in parent. Fetched from the\nnameservers with IP addresses \"{ns_ip_list}\".\n",
         "Severity" : "ERROR"
      },
      "ZM_DS02_DNSKEY_NOT_SIGNED_BY_ANY_DS" : {
         "Description" : "The DNSKEY RRset has not been signed by any DNSKEY matched by a DS\nrecord. Fetched from the nameservers with IP addresses \"{ns_ip_list}\".\n",
         "Severity" : "ERROR"
      },
      "ZM_DS02_NO_DNSKEY_FOR_DS" : {
         "Description" : "The DNSKEY record with tag {keytag} that the DS refers to does not exist\nin the DNSKEY RRset. Fetched from the nameservers with IP\n\"{ns_ip_list}\".\n",
         "Severity" : "ERROR"
      },
      "ZM_DS02_NO_MATCHING_DNSKEY_RRSIG" : {
         "Description" : "The DNSKEY RRset is not signed by the DNSKEY with tag {keytag} that the\nDS record refers to. Fetched from the nameservers with IP\n\"{ns_ip_list}\".\n",
         "Severity" : "ERROR"
      },
      "ZM_DS02_NO_MATCH_DS_DNSKEY" : {
         "Description" : "The DS record does not match the DNSKEY with tag {keytag} by algorithm\nor digest. Fetched from the nameservers with IP \"{ns_ip_list}\".\n",
         "Severity" : "ERROR"
      },
      "ZM_DS02_NO_VALID_DNSKEY_FOR_ANY_DS" : {
         "Description" : "There is no valid DNSKEY matched by any of the DS records. Fetched from\nthe nameservers with IP addresses \"{ns_ip_list}\".\n",
         "Severity" : "ERROR"
      },
      "ZM_DS02_RRSIG_NOT_VALID_BY_DNSKEY" : {
         "Description" : "The DNSKEY RRset is signed with an RRSIG with tag {keytag} which cannot\nbe validated by the matching DNSKEY. Fetched from the nameservers with\nIP addresses \"{ns_ip_list}\".\n",
         "Severity" : "ERROR"
      },
      "ZM_DS08_ALGO_NOT_SUPPORTED_BY_ZM" : {
         "Description" : "This installation of Zonemaster does not support the DNSKEY algorithm.\n",
         "Severity" : "NOTICE"
      },
      "ZM_DS08_DNSKEY_RRSIG_EXPIRED" : {
         "Description" : "DNSKEY RRset is signed with an RRSIG that has expired.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS08_DNSKEY_RRSIG_NOT_YET_VALID" : {
         "Description" : "DNSKEY RRset is signed with a not yet valid RRSIG.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS08_MISSING_RRSIG_IN_RESPONSE" : {
         "Description" : "DNSKEY is unsigned which is against expectation.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS08_NO_MATCHING_DNSKEY" : {
         "Description" : "DNSKEY RRset is signed with an RRSIG that does not match any DNSKEY.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS08_RRSIG_NOT_VALID_BY_DNSKEY" : {
         "Description" : "DNSKEY RRset is signed with an RRSIG that cannot be validated by the\nmatching DNSKEY.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS09_ALGO_NOT_SUPPORTED_BY_ZM" : {
         "Description" : "This installation of Zonemaster does not support the DNSKEY algorithm.\n",
         "Severity" : "NOTICE"
      },
      "ZM_DS09_MISSING_RRSIG_IN_RESPONSE" : {
         "Description" : "SOA is unsigned which is against expectation\n",
         "Severity" : "ERROR"
      },
      "ZM_DS09_NO_MATCHING_DNSKEY" : {
         "Description" : "SOA is signed with an RRSIG that does not match any DNSKEY\n",
         "Severity" : "ERROR"
      },
      "ZM_DS09_RRSIG_NOT_VALID_BY_DNSKEY" : {
         "Description" : "SOA is signed with an RRSIG that cannot be validated by the matching\nDNSKEY\n",
         "Severity" : "ERROR"
      },
      "ZM_DS09_SOA_RRSIG_EXPIRED" : {
         "Description" : "SOA is signed with an RRSIG that has expired\n",
         "Severity" : "ERROR"
      },
      "ZM_DS09_SOA_RRSIG_NOT_YET_VALID" : {
         "Description" : "SOA is signed with a not yet valid RRSIG\n",
         "Severity" : "ERROR"
      },
      "ZM_DS10_ALGO_NOT_SUPPORTED_BY_ZM" : {
         "Description" : "This installation of Zonemaster does not support the DNSKEY algorithm.\n",
         "Severity" : "NOTICE"
      },
      "ZM_DS10_ANSWER_VERIFY_ERROR" : {
         "Description" : "RRSIG on record or records in answer section cannot be verified.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS10_HAS_NSEC" : {
         "Description" : "Consistent NSEC returned from servers.\n",
         "Severity" : "INFO"
      },
      "ZM_DS10_HAS_NSEC3" : {
         "Description" : "Consistent NSEC3 returned from servers.\n",
         "Severity" : "INFO"
      },
      "ZM_DS10_INCONSISTENT_NSEC_NSEC3" : {
         "Description" : "Some servers return NSEC, others return NSEC3.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS10_MISSING_NSEC_NSEC3" : {
         "Description" : "Missing expected NSEC or NSEC3 in a signed zone.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS10_MIXED_NSEC_NSEC3" : {
         "Description" : "Both NSEC and NSEC3 are returned from the same server.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS10_NAME_NOT_COVERED_BY_NSEC" : {
         "Description" : "The non-existent name is not correctly covered by the NSEC records.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS10_NAME_NOT_COVERED_BY_NSEC3" : {
         "Description" : "The non-existent name is not correctly covered by the NSEC3 records.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS10_NON_EXISTENT_RESPONSE_ERROR" : {
         "Description" : "No or error in response of an expected non-existent name.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS10_NSEC3_MISSING_SIGNATURE" : {
         "Description" : "Missing signatures for NSEC3 record or records.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS10_NSEC3_RRSIG_VERIFY_ERROR" : {
         "Description" : "The signature or signatures on the NSEC3 record or records cannot be\ncorrectly verfied.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS10_NSEC_MISSING_SIGNATURE" : {
         "Description" : "Missing signatures for NSEC record or records.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS10_NSEC_RRSIG_VERIFY_ERROR" : {
         "Description" : "The signature or signatures on the NSEC record or records cannot be\ncorrectly verfied.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS10_UNSIGNED_ANSWER" : {
         "Description" : "RRSIG is missing for record or records in the answer section.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS13_ALGO_NOT_SIGNED_DNSKEY" : {
         "Description" : "The DNSKEY RRset is not signed with an algorithm present in the DNSKEY\nRRset\n",
         "Severity" : "ERROR"
      },
      "ZM_DS13_ALGO_NOT_SIGNED_NS" : {
         "Description" : "The NS RRset is not signed with an algorithm present in the DNSKEY RRset\n",
         "Severity" : "ERROR"
      },
      "ZM_DS13_ALGO_NOT_SIGNED_SOA" : {
         "Description" : "The SOA RRset is not signed with an algorithm present in the DNSKEY\nRRset\n",
         "Severity" : "ERROR"
      },
      "ZM_DS15_HAS_CDNSKEY_NO_CDS" : {
         "Description" : "CDNSKEY RRset is found, but no CDS RRset.\n",
         "Severity" : "NOTICE"
      },
      "ZM_DS15_HAS_CDS_AND_CDNSKEY" : {
         "Description" : "CDNSKEY and CDS RRsets are found.\n",
         "Severity" : "INFO"
      },
      "ZM_DS15_HAS_CDS_NO_CDNSKEY" : {
         "Description" : "CDS RRset is found, but no CDNSKEY RRset.\n",
         "Severity" : "NOTICE"
      },
      "ZM_DS15_INCONSISTENT_CDNSKEY" : {
         "Description" : "All servers do not have the same CDNSKEY RRset.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS15_INCONSISTENT_CDS" : {
         "Description" : "All servers do not have the same CDS RRset.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS15_MISMATCH_CDS_CDNSKEY" : {
         "Description" : "Both CDS and CDNSKEY RRsets are found but they do not match.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS15_NO_CDS_CDNSKEY" : {
         "Description" : "No CDS or CDNSKEY RRsets are found on any name server.\n",
         "Severity" : "INFO"
      },
      "ZM_DS16_CDS_INVALID_RRSIG" : {
         "Description" : "CDS RRset is signed with an invalid RRSIG.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS16_CDS_MATCHES_NON_SEP_DNSKEY" : {
         "Description" : "CDS record matches a DNSKEY with SEP bit (bit 15) unset.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS16_CDS_MATCHES_NON_ZONE_DNSKEY" : {
         "Description" : "CDS record matches a DNSKEY with zone bit (bit 7) unset.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS16_CDS_MATCHES_NO_DNSKEY" : {
         "Description" : "CDS record does not match any DNSKEY in DNSKEY RRset.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS16_CDS_NOT_SIGNED_BY_CDS" : {
         "Description" : "CDS RRset is not signed by the key that the CDS record points to.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS16_CDS_SIGNED_BY_UNKNOWN_DNSKEY" : {
         "Description" : "CDS RRset is signed by a key not in DNSKEY RRset.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS16_CDS_UNSIGNED" : {
         "Description" : "CDS RRset is unsigned.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS16_CDS_WITHOUT_DNSKEY" : {
         "Description" : "CDS RRset exists, but there is no DNSKEY RRset.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS16_DELETE_CDS" : {
         "Description" : "CDS RRset has a \"delete\" CDS record as a single record.\n",
         "Severity" : "INFO"
      },
      "ZM_DS16_DNSKEY_NOT_SIGNED_BY_CDS" : {
         "Description" : "DNSKEY RRset is not signed by the key or keys that the CDS records point\nto.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS16_MIXED_DELETE_CDS" : {
         "Description" : "\"Delete\" CDS record is mixed with normal CDS record.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS17_CDNSKEY_INVALID_RRSIG" : {
         "Description" : "CDNSKEY RRset signed with an invalid RRSIG.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS17_CDNSKEY_IS_NON_SEP" : {
         "Description" : "CDNSKEY record has the SEP bit (bit 15) unset.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS17_CDNSKEY_IS_NON_ZONE" : {
         "Description" : "CDNSKEY record has the zone bit (bit 7) unset.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS17_CDNSKEY_MATCHES_NO_DNSKEY" : {
         "Description" : "CDNSKEY record does not match any DNSKEY in DNSKEY RRset.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS17_CDNSKEY_NOT_SIGNED_BY_CDNSKEY" : {
         "Description" : "CDNSKEY RRset is not signed by the key that the CDNSKEY record points\nto.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS17_CDNSKEY_SIGNED_BY_UNKNOWN_DNSKEY" : {
         "Description" : "CDNSKEY RRset is signed by a key not in DNSKEY RRset.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS17_CDNSKEY_UNSIGNED" : {
         "Description" : "CDNSKEY RRset is unsigned.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS17_CDNSKEY_WITHOUT_DNSKEY" : {
         "Description" : "CDNSKEY RRset exists, but there is no DNSKEY RRset.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS17_DELETE_CDNSKEY" : {
         "Description" : "CDNSKEY RRset has a \"delete\" CDNSKEY record as a single record.\n",
         "Severity" : "INFO"
      },
      "ZM_DS17_DNSKEY_NOT_SIGNED_BY_CDNSKEY" : {
         "Description" : "DNSKEY RRset is not signed by the key or keys that the CDNSKEY records\npoint to.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS17_MIXED_DELETE_CDNSKEY" : {
         "Description" : "\"Delete\" CDNSKEY record is mixed with normal CDNSKEY record.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS18_NO_MATCH_CDNSKEY_RRSIG_DS" : {
         "Description" : "CDNSKEY RRset is not signed with a DNSKEY record that a DS record points\nto.\n",
         "Severity" : "ERROR"
      },
      "ZM_DS18_NO_MATCH_CDS_RRSIG_DS" : {
         "Description" : "The CDS RRset is not signed with a DNSKEY record that a DS record points\nto.\n",
         "Severity" : "ERROR"
      },
      "ZM_EDNS_RESPONSE_WITHOUT_EDNS" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_EDNS_VERSION_ERROR" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_EMPTY_ASN_SET" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_ENOUGH_IPV4_NS_CHILD" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_ENOUGH_IPV4_NS_DEL" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_ENOUGH_IPV6_NS_CHILD" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_ENOUGH_IPV6_NS_DEL" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_ENOUGH_NS_CHILD" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_ENOUGH_NS_DEL" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_ERROR_ASN_DATABASE" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_EXTRA_ADDRESS_CHILD" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_IN_BAILIWICK_ADDR_MISMATCH" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_IPV4_DIFFERENT_ASN" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_IPV4_ONE_ASN" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_IPV4_SAME_ASN" : {
         "Description" : "*Not available.*",
         "Severity" : "NOTICE"
      },
      "ZM_IPV6_DIFFERENT_ASN" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_IPV6_ONE_ASN" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_IPV6_SAME_ASN" : {
         "Description" : "*Not available.*",
         "Severity" : "NOTICE"
      },
      "ZM_IS_A_RECURSOR" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_KEY_SIZE_OK" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_MISSING_OPT_IN_TRUNCATED" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_MULTIPLE_NS_SET" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_MULTIPLE_SOA" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_MULTIPLE_SOA_MNAMES" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_MULTIPLE_SOA_RNAMES" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_MULTIPLE_SOA_SERIALS" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_MULTIPLE_SOA_SERIALS_OK" : {
         "Description" : "*Not available.*",
         "Severity" : "NOTICE"
      },
      "ZM_MULTIPLE_SOA_TIME_PARAMETER_SET" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_N10_EDNS_RESPONSE_ERROR" : {
         "Description" : "Expected RCODE value when EDNS ver=1, but error in response.\n",
         "Severity" : "ERROR"
      },
      "ZM_N10_NO_RESPONSE_EDNS1_QUERY" : {
         "Description" : "Response when EDNS ver=0, but not when 1.\n",
         "Severity" : "ERROR"
      },
      "ZM_N10_UNEXPECTED_RCODE" : {
         "Description" : "Unexpected RCODE value when EDNS ver=1.\n",
         "Severity" : "ERROR"
      },
      "ZM_N11_NO_EDNS" : {
         "Description" : "The DNS response, on query with unknown EDNS option-code, does not\ncontain any EDNS from name servers \"{ns_ip_list}\".\n",
         "Severity" : "ERROR"
      },
      "ZM_N11_NO_RESPONSE" : {
         "Description" : "There is no response on query with unknown EDNS option-code from name\nservers \"{ns_ip_list}\".\n",
         "Severity" : "ERROR"
      },
      "ZM_N11_RETURNS_UNKNOWN_OPTION_CODE" : {
         "Description" : "The DNS response, on query with unknown EDNS option-code, contains an\nunknown EDNS option-code from name servers \"{ns_ip_list}\".\n",
         "Severity" : "ERROR"
      },
      "ZM_N11_UNEXPECTED_ANSWER_SECTION" : {
         "Description" : "The DNS response, on query with unknown EDNS option-code, does not\ncontain the expected SOA record in the answer section from name servers\n\"{ns_ip_list}\".\n",
         "Severity" : "ERROR"
      },
      "ZM_N11_UNEXPECTED_RCODE" : {
         "Description" : "The DNS response, on query with unknown EDNS option-code, has unexpected\nRCODE name \"{rcode}\" from name servers \"{ns_ip_list}\".\n",
         "Severity" : "ERROR"
      },
      "ZM_N11_UNSET_AA" : {
         "Description" : "The DNS response, on query with unknown EDNS option-code, is\nunexpectedly not authoritative from name servers \"{ns_ip_list}\".\n",
         "Severity" : "ERROR"
      },
      "ZM_N15_NO_VERSION" : {
         "Description" : "The following name server(s) do not respond to software version queries.\nReturned from name servers: \"{ns_ip_list}\"\n",
         "Severity" : "INFO"
      },
      "ZM_N15_SOFTWARE_VERSION" : {
         "Description" : "The following name server(s) respond to software version query\n\"{query_name}\" with string \"{string}\". Returned from name servers:\n\"{ns_ip_list}\"\n",
         "Severity" : "INFO"
      },
      "ZM_NOT_ENOUGH_IPV4_NS_CHILD" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NOT_ENOUGH_IPV4_NS_DEL" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NOT_ENOUGH_IPV6_NS_CHILD" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NOT_ENOUGH_IPV6_NS_DEL" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NOT_ENOUGH_NS_CHILD" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NOT_ENOUGH_NS_DEL" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NO_EDNS_SUPPORT" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NO_IPV4_NS_CHILD" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NO_IPV4_NS_DEL" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NO_IPV6_NS_CHILD" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NO_IPV6_NS_DEL" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NO_NS_CNAME" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_NO_RECURSOR" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_NO_RESPONSE" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NO_RESPONSE_DNSKEY" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NO_RESPONSE_NS_QUERY" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NO_RESPONSE_SOA_QUERY" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NO_SOA_IN_RESPONSE" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NS_ERROR" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_NS_IS_CNAME" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_ONE_NS_SET" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_ONE_SOA" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_ONE_SOA_MNAME" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_ONE_SOA_RNAME" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_ONE_SOA_SERIAL" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_ONE_SOA_TIME_PARAMETER_SET" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_OUT_OF_BAILIWICK_ADDR_MISMATCH" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_REFERRAL_SIZE_OK" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_REFERRAL_SIZE_TOO_LARGE" : {
         "Description" : "*Not available.*",
         "Severity" : "WARNING"
      },
      "ZM_RNAME_MAIL_DOMAIN_INVALID" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_RNAME_MAIL_DOMAIN_LOCALHOST" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_RNAME_MAIL_ILLEGAL_CNAME" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_RNAME_RFC822_INVALID" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_RNAME_RFC822_VALID" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_SOA_SERIAL" : {
         "Description" : "*Not available.*",
         "Severity" : "INFO"
      },
      "ZM_SOA_SERIAL_VARIATION" : {
         "Description" : "*Not available.*",
         "Severity" : "NOTICE"
      },
      "ZM_UNEXPECTED_RCODE" : {
         "Description" : "*Not available.*",
         "Severity" : "WARNING"
      },
      "ZM_UNKNOWN_OPTION_CODE" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_UNSUPPORTED_EDNS_VER" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_WRONG_SOA" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      },
      "ZM_Z01_MNAME_HAS_LOCALHOST_ADDR" : {
         "Description" : "SOA MNAME name server \"{nsname}\" resolves to a localhost IP address\n({ns_ip}).\n",
         "Severity" : "WARNING"
      },
      "ZM_Z01_MNAME_IS_DOT" : {
         "Description" : "SOA MNAME is specified as \".\" which usually means \"no server\". Fetched\nfrom name servers \"{ns_ip_list}\".\n",
         "Severity" : "NOTICE"
      },
      "ZM_Z01_MNAME_IS_LOCALHOST" : {
         "Description" : "SOA MNAME name server is \"localhost\", which is invalid. Fetched from\nname servers \"{ns_ip_list}\".\n",
         "Severity" : "WARNING"
      },
      "ZM_Z01_MNAME_MISSING_SOA_RECORD" : {
         "Description" : "SOA MNAME name server \"{ns}\" reponds to an SOA query with no SOA records\nin the answer section.\n",
         "Severity" : "WARNING"
      },
      "ZM_Z01_MNAME_NOT_AUTHORITATIVE" : {
         "Description" : "SOA MNAME name server \"{ns}\" is not authoritative for the zone.\n",
         "Severity" : "WARNING"
      },
      "ZM_Z01_MNAME_NOT_IN_NS_LIST" : {
         "Description" : "SOA MNAME name server \"{nsname}\" is not listed as NS record for the\nzone.\n",
         "Severity" : "INFO"
      },
      "ZM_Z01_MNAME_NOT_MASTER" : {
         "Description" : "SOA MNAME name server(s) \"{ns_list}\" do(es) not have the highest SOA\nSERIAL (expected \"{soaserial}\" but got \"{soaserial_list}\")\n",
         "Severity" : "WARNING"
      },
      "ZM_Z01_MNAME_NOT_RESOLVE" : {
         "Description" : "SOA MNAME name server \"{nsname}\" cannot be resolved into an IP address.\n",
         "Severity" : "WARNING"
      },
      "ZM_Z01_MNAME_NO_RESPONSE" : {
         "Description" : "SOA MNAME name server \"{ns}\" does not respond to an SOA query.\n",
         "Severity" : "WARNING"
      },
      "ZM_Z01_MNAME_UNEXPECTED_RCODE" : {
         "Description" : "SOA MNAME name server \"{ns}\" gives unexpected RCODE name (\"{rcode}\") in\nresponse to an SOA query.\n",
         "Severity" : "WARNING"
      },
      "ZM_Z_FLAGS_NOTCLEAR" : {
         "Description" : "*Not available.*",
         "Severity" : "ERROR"
      }
   },
   "Input-Parameters" : {
      "dns.nameservers" : {
         "Description" : "The set of nameservers that will be authoritative for the TLD(s).\n\nThis input parameter is an array where the object properties are the\nTLD names, and the values are objects. For these objects, the properties\nare the nameserver names, and the values are arrays of IPv4 and IPv6\naddresses.\n\nThere **MUST** be at least two nameservers, and at least two nameservers\n**MUST** have at least one IPv6 address.\n",
         "Example" : {
            "example" : {
               "ns1.example.com" : [
                  "192.168.53.1",
                  "2001:DB8::53:1"
               ],
               "ns2.example.com" : [
                  "192.168.53.2",
                  "2001:DB8::53:2"
               ]
            }
         },
         "Type" : "object"
      },
      "dnssec.dsRecords" : {
         "Description" : "The DS record(s) that may be used to validate the DNSSEC signature for the\nTLD(s). This input parameter is an object where the object properties are\nthe TLD names and the values are arrays of objects representing DS\nrecords.\n\nThere **MUST** be an entry for every TLD in the TLD set and there **MUST**\nbe at least one DS record for each TLD.\n",
         "Example" : {
            "example" : [
               {
                  "alg" : "8",
                  "digest" : "E2D3...5766",
                  "digestType" : "2",
                  "keyTag" : "12345"
               }
            ]
         },
         "Type" : "object"
      },
      "dnssecOps.algorithmRolloverZone" : {
         "Description" : "The domain name which will be monitored for the occurrence of an algorithm\nrollover.\n",
         "Example" : "example.com",
         "Type" : "string"
      },
      "dnssecOps.csk" : {
         "Description" : "A boolean indicating whether the RSP uses a Combined Signing Key (CSK,\nalso referred to as a \"Single Type Signing Scheme\") instead of a split\nKSK/ZSK configuration.\n",
         "Example" : "",
         "Type" : "boolean"
      },
      "dnssecOps.kskRolloverZone" : {
         "Description" : "The domain name which will be monitored for the occurrence of a KSK\nrollover.\n",
         "Example" : "example.com",
         "Type" : "string"
      },
      "dnssecOps.zskRolloverZone" : {
         "Description" : "The domain name which will be monitored for the occurrence of a ZSK\nrollover.\n",
         "Example" : "example.com",
         "Type" : "string"
      },
      "epp.clid01" : {
         "Description" : "the username used to log in to the EPP server",
         "Example" : "clid-01",
         "Type" : "string"
      },
      "epp.clid02" : {
         "Description" : "the username used for transfer tests",
         "Example" : "clid-02",
         "Type" : "string"
      },
      "epp.hostModel" : {
         "Description" : "The host model supported by the EPP server. The possible values for this\nparameter are:\n  * `objects`\n  * `attributes`\n",
         "Example" : "objects",
         "Type" : "string"
      },
      "epp.hostName" : {
         "Description" : "the fully-qualified domain name of the EPP server",
         "Example" : "epp.rsp.tech",
         "Type" : "string"
      },
      "epp.pwd01" : {
         "Description" : "the password used to log in to the EPP server",
         "Example" : "foo2bar",
         "Type" : "string"
      },
      "epp.pwd02" : {
         "Description" : "the password used for transfer tests",
         "Example" : "foo3bar",
         "Type" : "string"
      },
      "epp.registeredContacts" : {
         "Description" : "An array of contact IDs that exist in the EPP server and which are\ntherefore unavailable for registration.\n\nIf the value of `general.minimalPublicDataSet` is `false`, this array\n**MUST** contain one member for each TLD in the TLD set. However, if it is\n`false`, the array **MUST** be empty.\n",
         "Example" : [
            "abc123",
            "def321"
         ],
         "Type" : "array"
      },
      "epp.registeredNames" : {
         "Description" : "An array of domain names that exist in the EPP server and which are\ntherefore unavailable for registration. The domains **MUST NOT** be under\nthe sponsorship of the `epp.clid01` or `epp.clid02` registrars. The array\n**MUST** contain one member for each TLD in the TLD set.\n",
         "Example" : [
            "example.example1",
            "example.example2"
         ],
         "Type" : "array"
      },
      "epp.registeredNameservers" : {
         "Description" : "An array of host objects that exist in the EPP server and which are\ntherefore unavailable for registration.\n\nIf the value of `epp.hostModel` is `objects`, this array **MUST** contain\none member for each TLD in the TLD set. However, if it is `attributes`,\nthe array **MUST** be empty.\n",
         "Example" : [
            "ns1.example.com",
            "ns2.example.org"
         ],
         "Type" : "array"
      },
      "epp.restoreReportRequired" : {
         "Description" : "Whether the server requires submission of a restore report when a client\nattempts to restore a domain.\n\nIf the value of `general.gracePeriodsSupported` is `false`, then this\ninput parameter is ignored.\n",
         "Example" : "",
         "Type" : "boolean"
      },
      "epp.secDNSInterfaces" : {
         "Description" : "Which of the interfaces defined in Section 4 of RFC 5910 the server\nsupports (either `dsData` or `keyData`).\n",
         "Example" : "dsData",
         "Type" : "string"
      },
      "epp.serverIssuedClientCertificate01" : {
         "Description" : "If the EPP server uses a private CA to issue client certificates, then\na certificate generated using the CSR provided in the `epp.clientCSR` may\nbe provided using this parameter. This certificate will only be used in\nconjunction with the `epp.clid01` and `epp.pwd01` credentials. If the\nserver will accept ICANN's own client certificate, this parameter\n**SHOULD** be empty.\n",
         "Example" : "rst_test_client_cert.pem",
         "Type" : "string"
      },
      "epp.serverIssuedClientCertificate02" : {
         "Description" : "If the EPP server uses a private CA to issue client certificates, then\na certificate generated using the CSR provided in the `epp.clientCSR` may\nbe provided using this parameter. This certificate will only be used in\nconjunction with the `epp.clid02` and `epp.pwd02` credentials. If the\nserver will accept ICANN's own client certificate, this parameter\n**SHOULD** be empty.\n",
         "Example" : "rst_test_client_cert.pem",
         "Type" : "string"
      },
      "general.gracePeriodsSupported" : {
         "Description" : "Whether or not the registry supports grace periods as defined in RFC 3915\n",
         "Example" : "1",
         "Type" : "boolean"
      },
      "general.minimalPublicDataSet" : {
         "Description" : "if true, then the registry only supports the minimum public data set, and\ndoes not collect registrant and/or technical contact information from\nregistrars.\n",
         "Example" : "1",
         "Type" : "boolean"
      },
      "integration.rdeSFTPDirectory" : {
         "Description" : "The directory on the SFTP server where deposit files may be found.\n",
         "Example" : "/path/to/deposits",
         "Type" : "string"
      },
      "integration.rdeSFTPHostname" : {
         "Description" : "The hostname of the operator's SFTP server.",
         "Example" : "sftp.rsp.tech",
         "Type" : "string"
      },
      "integration.rdeSFTPUsername" : {
         "Description" : "The username that can be used to connect to the SFTP server.",
         "Example" : "icann",
         "Type" : "string"
      },
      "integration.rriACL" : {
         "Description" : "An array of IP addresses from which requests to the RRI will be sent.\n",
         "Example" : [
            "192.168.22.1",
            "2001:DB8::22:1"
         ],
         "Type" : "array"
      },
      "minimumRPMS.claimsTLD" : {
         "Description" : "A TLD, or other registry-class zone, which has been configured to be in\nperpetual trademark claims.\n",
         "Example" : "tmclaims.rsp.tech",
         "Type" : "string"
      },
      "minimumRPMS.sunriseModels" : {
         "Description" : "The sunrise models supported by the EPP server. The possible values for\nthis parameter are:\n  * `start-date`\n  * `end-date`\n  * `both`\n",
         "Example" : "start-date",
         "Type" : "string"
      },
      "minimumRPMS.sunriseTLD" : {
         "Description" : "A TLD, or other registry-class zone, which has been configured to be in\nperpetual sunrise.\n",
         "Example" : "tmclaims.rsp.tech",
         "Type" : "string"
      },
      "rdap.baseURLs" : {
         "Descrption" : "The RDAP base URL(s) for the TLD(s). This input parameter is an object,\nwhere the object properties are the TLD names and the values are strings\ncontaining the base URL. The URL **MUST** end with a slash (\"/\").\n",
         "Example" : {
            "example" : "https://rdap.example.com/example/"
         },
         "Type" : "object"
      },
      "rdap.testDomains" : {
         "Description" : "The domain(s) that will be queried to validate domain responses. This\ninput parameter is an object, where the object properties are the TLD\nnames and the values domain names.\n",
         "Example" : {
            "example" : "example.example"
         },
         "Type" : "object"
      },
      "rdap.testEntities" : {
         "Description" : "The entities(s) that will be queried to validate entity responses. This\ninput parameter is an object, where the object properties are the TLD\nnames and the values entity handles.\n",
         "Example" : {
            "example" : "9999"
         },
         "Type" : "object"
      },
      "rdap.testNameservers" : {
         "Description" : "The nameservers(s) that will be queried to validate nameserver responses.\nThis input parameter is an object, where the object properties are the TLD\nnames and the values host names.\n",
         "Example" : {
            "example" : "ns1.example.com"
         },
         "Type" : "object"
      },
      "rde.depositFile" : {
         "Description" : "an RDE deposit file. The TLD to which the deposit relates **MUST** match\none of the TLDs that are associated with the test object.\n",
         "Example" : "example_20231004_FULL_S1_R0.ryde",
         "Type" : "file"
      },
      "rde.publicKey" : {
         "Description" : "a PGP public key block",
         "Example" : "rsp-rde-signing-key.asc",
         "Type" : "file"
      },
      "rde.signatureFile" : {
         "Description" : "an ASCII-armoured OpenPGP signature covering the deposit file",
         "Example" : "example_20231004_FULL_S1_R0.sig",
         "Type" : "file"
      },
      "srsgw.eppClid01" : {
         "Description" : "the username used to log in to the SRS Gateway EPP server",
         "Example" : "clid-01",
         "Type" : "string"
      },
      "srsgw.eppClid02" : {
         "Description" : "the username used for transfer tests",
         "Example" : "clid-02",
         "Type" : "string"
      },
      "srsgw.eppHostName" : {
         "Description" : "the fully-qualified domain name of the SRS Gateway EPP server",
         "Example" : "epp.rsp.tech",
         "Type" : "string"
      },
      "srsgw.eppPwd01" : {
         "Description" : "the password used to log in to the SRS Gateway EPP server",
         "Example" : "foo2bar",
         "Type" : "string"
      },
      "srsgw.eppPwd02" : {
         "Description" : "the password used for transfer tests",
         "Example" : "foo3bar",
         "Type" : "string"
      },
      "srsgw.rdapBaseURLs" : {
         "Description" : "The RDAP base URL(s) for the TLD(s). This input parameter is an object,\nwhere the object properties are the TLD names and the values are strings\ncontaining the base URL. The URL **MUST** end with a slash (\"/\").\n",
         "Example" : {
            "example" : "https://rdap.example.com/example/"
         },
         "Type" : "object"
      },
      "srsgw.serverIssuedClientCertificate01" : {
         "Description" : "If the EPP server uses a private CA to issue client certificates, then\na certificate generated using the CSR provided in the `epp.clientCSR` may\nbe provided using this parameter. This certificate will only be used in\nconjunction with the `srsgw.eppClid01` and `srsgw.eppPwd01` credentials.\nIf the server will accept ICANN's own client certificate, this parameter\n**SHOULD** be empty.\n",
         "Example" : null,
         "Type" : "string"
      },
      "srsgw.serverIssuedClientCertificate02" : {
         "Description" : "If the EPP server uses a private CA to issue client certificates, then\na certificate generated using the CSR provided in the `epp.clientCSR` may\nbe provided using this parameter. This certificate will only be used in\nconjunction with the `srsgw.eppClid02` and `srsgw.eppPwd02` credentials.\nIf the server will accept ICANN's own client certificate, this parameter\n**SHOULD** be empty.\n",
         "Example" : null,
         "Type" : "string"
      }
   },
   "Last-Updated" : "2024-01-04",
   "Preamble" : "This file describes each test [plan](#test-plans), [suite](#test-suites) and\n[case](#test-cases) in the RST system, as well as the\n[input parameters](#input-parameters) required for each, relevant\n[resources](#resources), any inter-case dependencies, and the\n[errors](#errors) that might occur during testing.\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\",\n\"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\ndocument are to be interpreted as described in [RFC\n2119](https://www.rfc-editor.org/rfc/rfc2119.html) when, and only when, they\nappear in all capitals, as shown here.\n\n# 2.1. Test plans\n\nAn individual *Test Plan* addresses a particular scenario (for example, RSP\nevaluation or Pre-Delegation Testing). Each plan consists of one or more *test\nsuites*, which in turn include one or more *test cases*.\n\n## 2.1.1. Test plan types\n\nThere are two types of test plan described in this document:\n\n* **Business as usual** plans, which are used as part of the lifecycle of a\ngTLD (Pre-Delegion Test, RSP/DNS RSP change Test, IDN Test, SRS Gateway\nTest)\n* **RSP evaluation** plans, which are used as part of the RSP evaluation\nprogram.\n\n# 2.2. Test suites\n\nA *Test Suite* is a collection of *test cases* with a common theme or subject\nmatter, for example, Authoritative DNS or Registry Data Escrow.\n\n# 2.3. Test cases\n\nA *Test Case* describes a process for determining the conformance or\nacceptability of a certain element of the system.\n\nA test case consists of a *test procedure* which accepts zero or more **input\nparameters**, and generates one or more **test results**.\n\n## 2.3.1. Input parameters\n\nAll test cases require some information about the subject of the test, for\nexample, service hostnames, credentials, and functional parameters. These\n*input parameters* may be shared across multiple test cases.\n\n## 2.3.2. Test environments\n\nEach test plan indicates whether the test is to be carried out in the\nproduction environment, or whether a test, staging or OT&E environment may be\nused. In general, test plans which are designed for \"business as usual\" use\nduring the lifecycle of a TLD **MUST** be carried out in the production\nregistry infrastructure, while RSP evaluation tests **MAY** be carried out in\ntest, staging or OT&E environments.\n\n## 2.3.3. Test results\n\nTest cases will generate one or more *test results*. Test results indicate the\noutcome of the test and other relevant information.\n\n## 2.3.4. General pass/fail criteria\n\nIn general, for a test to pass, **all** the test cases specified in the test\nsuite(s) for the test plan **MUST** pass: if *any* fail, then the test as a\nwhole will fail.\n\nA test case will fail if it produces one or more [errors](#errors) with the\n`ERROR` or `CRITICAL` severities.\n\n## 2.3.5. Error severity levels\n\n1. `INFO` - an informational message.\n1. `NOTICE` - a normal but significant condition.\n2. `WARNING` - an issue which does not prevent the test from *passing*, but\n which may benefit from further investigation.\n1. `ERROR` - an issue which prevents the test from *passing*, but does not\n prevent the test from *continuing*. A test may produce multiple `ERROR`\n results.\n2. `CRITICAL` - an issue which prevents the test from continuing any\n further. A test will only produce a single `CRITICAL` result and it\n will always be the last result in the log.\n\n## 2.3.6. Common errors\n\nFor each test case, various errors and critical errors are defined which will\nbe used to signal why that the case might have failed.\n\nIn addition to these, there are a number of errors which any test case may\nproduce, which are:\n\n* [TBA]\n\n# 2.4. Key acronyms and terms\n\nRST\n: Registry System Testing. This system.\n\nPDT\n: Pre-Delegation Test. A test carried out prior to the delegation of a new TLD\ninto the DNS root zone.\n\nRSP\n: Registry Service Provider. A specialist provider of critical registry\nservices.\n\nDNS\n: Domain Name System. The internet's system of globally unique identifiers.\n\nTLD\n: Top-level domain. The highest level of the DNS namespace hierarchy.\n\ngTLD\n: generic top-level domain.\n\nDNSSEC\n: DNS Security Extensions. DNSSEC is described in [BCP\n237](https://www.rfc-editor.org/info/bcp237).\n\nEPP\n: Extensible Provisioning Protocol. The protocol used by registrars to create\nand manage domain name registrations in an SRS. EPP is defined in [STD\n69](https://www.rfc-editor.org/info/std69).\n\nSRS\n: Shared Registry System. A TLD registry in which registrations are managed\nby one or more registrars, using EPP.\n\nRDDS\n: Registration Data Directory Services. A service to provide access to\ndata about domain registrations to third parties.\n\nRDAP\n: Registration Data Access Protocol. The protocol used to deliver the RDDS.\nRDAP is defined in [STD 95](https://www.rfc-editor.org/info/std95).\n\nRDE\n: Registry Data Escrow. A system whereby the registration data stored in a\nShared Registry System is backed up to a trusted third party. RDE is defined\nin [RFC 8909](https://www.rfc-editor.org/info/rfc8909) and [RFC\n9022](https://www.rfc-editor.org/info/rfc9022).\n\nIDN\n: Internationalized Domain Name. A domain name that contains characters not in\nthe ASCII character set. The technical specification for IDNs may be found in\n[RFC 5890](https://www.rfc-editor.org/info/rfc5890). All gTLDs must comply\nwith ICANN's [IDN\nGuidelines](https://www.icann.org/resources/pages/implementation-guidelines-2012-02-25-en).\n\nLGR\n: Label Generation Ruleset. The rules by which IDNs are validated. LGRs are\ndescribed in [RFC 7940](https://www.rfc-editor.org/info/rfc7940).\n\nRO\n: Registry Operator. The entity to which ICANN has granted the right to\noperate a gTLD.\n\nRA\n: Registry Agreement. The contract between a Registry Operator and ICANN. The\nbase Registry Agreement may be reviewed at\n<https://www.icann.org/en/registry-agreements/base-agreement>.\n\nKSK\n: Key Signing Key. A cryptographic key which acts as the Secure Entry Point\nfor a DNS zone, and which signs a DNS zone's ZSKs. A digest of this key is\npublished in the parent zone (ie. the root zone for a TLD).\n\nZSK\n: Zone Signing Key. A cryptographic key which signs a DNS zone's resource\nrecords.\n\nCSK\n: Combined Signing Key. A cryptographic key used as **both** a KSK and a ZSK.\n\nRPMs\n: Rights Protection Mechanisms, intended to discourage or prevent registration\nof domain names that violate or abuse another party’s legal rights. These\n**MUST** include (but are not limited to): (1) Sunrise Periods, and (2)\nTrademark Claims Periods (see [Specification 7 of the Registry\nAgreement](https://itp.cdn.icann.org/en/files/registry-agreements/base-registry-agreement-30-04-2023-en.html#specification7)).\n\nTMCH\n: Trademark Clearinghouse. The system established by ICANN to maintain a\ndatabase of validated and registered trademarks which is used to enforce\nRights Protection Mechanisms (RPMs) in gTLDs. The functional specifications of\nthe TMCH are defined in [RFC 9361](https://www.rfc-editor.org/info/rfc9361).\n\nSLA\n: Service Level Agreement. The registry performance specifications laid out in\n[Specification 10 of the Registry\nAgreement](https://itp.cdn.icann.org/en/files/registry-agreements/base-registry-agreement-30-04-2023-en.html#specification10).\n\nRRI\n: Registration Reporting Interfaces. The interfaces provided by ICANN to\ncontracted parties including Registry Operators to fulfill and monitor their\napplicable reporting requirements, including per-registrar transaction\nreports; registry functions activity reports; data escrow deposits reports and\ndata escrow deposits notifications. For registry operators, the relevant\ninterfaces are defined in [draft-lozano-icann-registry-interfaces](https://datatracker.ietf.org/doc/html/draft-lozano-icann-registry-interfaces).\n",
   "RST-Test-Plan-Schema-Version" : "1.6.0",
   "Resources" : {
      "epp.clientACL" : {
         "Description" : "A list of IPv4 and IPv6 address(es) from which client connections to the\noperator's EPP server will be made. The list is a plain text file with\neach IP address on a separate line.\n",
         "URL" : "https://rst.icann.org/v2/resources/epp.clientACL.txt"
      },
      "epp.clientCSR" : {
         "Description" : "For servers that operate a private CA, this CSR may be used to issue a\nclient certificate. This certificate must then be provided in the\n`epp.clientCertificate` input parameter.\n"
      },
      "epp.clientCertificate" : {
         "Description" : "RFC 5734 requires servers to perform authentication of clients by means of\na client certificate. Operators **MUST** configure their systems to permit\nthe test client to connect using the certificate found at this URL.\n",
         "URL" : "https://rst.icann.org/v2/resources/epp.clientCertificate.pem"
      },
      "epp.tlsCertificateStore" : {
         "Description" : "A PEM-formatted file containing the CA certificates trusted by Mozilla.\nFor more information, see <https://curl.se/docs/caextract.html>.\n\nEPP servers **MUST** use a certificate that has a chain of trust to one of\nthe CAs present in this file.\n",
         "URL" : "https://rst.icann.org/v2/resources/epp.tlsCertificateStore.pem"
      },
      "integration.rdeSFTPACL" : {
         "Description" : "A list of IPv4 and IPv6 address(es) from which client connections to the\noperator's SFTP server will be made. The list is a plain text file with\neach IP address on a separate line.\n",
         "URL" : "https://rst.icann.org/v2/resources/integration.rdeSFTPACL.txt"
      },
      "integration.rdeSFTPPublicKey" : {
         "Description" : "The SSH public key that will be used to authenticate connections to the\noperator's SFTP server.\n",
         "URL" : "https://rst.icann.org/v2/resources/integration.rdeSFTPPublicKey.pem"
      },
      "rde.encryptionKey" : {
         "Description" : "RDE deposit files **MUST** be encrypted using OpenPGP (RFC 4880). The PGP\nkey that **MUST** be used to encrypt the escrow deposit file may be found\nat this URL.\n",
         "URL" : "https://rst.icann.org/v2/resources/rde.encryptionKey.asc"
      }
   },
   "Test-Cases" : {
      "dns-address01" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Address-TP/address01.md>.\n\n# Objective\n\nIn order for the domain and its resources to be accessible,\nauthoritative name servers must have addresses in the routable public\naddressing space.\n\nIANA is responsible for global coordination of the IP addressing system.\nAside its address allocation activities, it maintains reserved address\nranges for special uses. These ranges can be categorized into three\ntypes : [Special purpose IPv4\naddresses](https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xml),\n[Special purpose IPv6\naddresses](https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xml)\nand [Multicast reserved\naddresses](https://www.iana.org/assignments/multicast-addresses/multicast-addresses.xml).\n\n# Pass/fail criteria\n\nIf one name server has one of its addresses matches a forbidden address\nblock, the test fails. If all the name server addresses are outside\nthese forbidden blocks, the test case succeeds.\n",
         "Errors" : [
            "ZM_DNS_ADDRESS01_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Name server address must be globally routable"
      },
      "dns-address02" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Address-TP/address02.md>.\n\n# Objective\n\nSome anti-spam techniques use reverse DNS lookup to allow incoming\ntraffic. In order to prevent name servers to be blocked or blacklisted,\nDNS administrators should publish PTR records associated to name server\naddresses.\n\n\\[technical reference to be found\\]\n\n# Pass/fail criteria\n\nIf the test case succeeds, its result is a list of addresses with\ncorresponding hostnames which are the result of the PTR queries\nperformed. The result could be represented as a hash table where the\nkeys are the IP addresses and the values their corresponding hostnames.\n",
         "Errors" : [
            "ZM_DNS_ADDRESS02_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Reverse DNS entry exists for name server IP address"
      },
      "dns-address03" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Address-TP/address03.md>.\n\n# Objective\n\nSome anti-spam techniques use reverse DNS lookup to allow incoming\ntraffic. In order to prevent name servers to be blocked or blacklisted,\nDNS administrators should publish PTR records associated with the name\nserver addresses.\n\nMoreover, as mentioned in paragraph 2.1 of [RFC\n1912](https://datatracker.ietf.org/doc/html/rfc1912) when a PTR record\nexists, it must match the host name.\n\n# Pass/fail criteria\n\nMultiple addresses and multiple PTR records are allowed. The test\nsucceeds if every name server address has one or more PTR records and\none of these records matches the server name. If one address doesn't\nmatch, the whole test case fails.\n",
         "Errors" : [
            "ZM_DNS_ADDRESS03_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Reverse DNS entry matches name server name"
      },
      "dns-connectivity01" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity01.md>.\n\n# Objective\n\nUDP is the fundamental protocol to reach a general purpose name server\nhosting a zone, \"DNS servers MUST be able to service UDP \\[...\\]\" ([RFC\n1123](https://www.rfc-editor.org/rfc/rfc1123), section 6.1.3.2, page\n75), also restated in [RFC\n7766](https://www.rfc-editor.org/rfc/rfc7766#section-5), section 5.\n\nThis Test Case will verify if the name servers of *Child Zone* are\nreachable over UDP. The name servers tested are both those in the\ndelegation of *Child Zone* and those in the NS records in the *Child\nZone* itself.\n\nMost Zonemaster Test Cases will query the name servers in the delegation\nor the name servers appointed by the NS records in the zone for the NS\nor SOA record, or both. It is crucial that problems are reported, but\ninstead of letting several Test Cases report the same problems found,\nmost Test Cases assume that this test case is run. Only this Test Case\nwill report problems found in the following areas over UDP:\n\n-   Name Server not responding to a query without EDNS.\n-   Name Server not including SOA record of *Child Zone* in the answer\n    section in the response on a SOA query for *Child Zone*.\n-   Name Server not including NS record of *Child Zone* in the answer\n    section in the response on an NS query for *Child Zone*.\n-   Name Server not setting the AA flag in a response with SOA or NS in\n    answer section.\n-   Name Server responding with unexpected [RCODE\n    Name](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6)\n    (any except \"NoError\") on query for SOA or NS for *Child Zone*.\n\nIn addition, this test case will output a message if transport over IPv4\nor IPv6 has been disabled.\n\n# Summary\n\n  ----------------------------------------------------------------------------------------------------------------------\n  Message Tag                                Level        Arguments         Message ID for message tag\n  ------------------------------------------ ------------ ----------------- --------------------------------------------\n  `ZM_CN01_IPV4_DISABLED`                    NOTICE       ns_list           IPv4 is disabled. No DNS queries are sent to\n                                                                            these name servers: \"{ns_list}\".\n\n  `ZM_CN01_IPV6_DISABLED`                    NOTICE       ns_list           IPv6 is disabled. No DNS queries are sent to\n                                                                            these name servers: \"{ns_list}\".\n\n  `ZM_CN01_MISSING_NS_RECORD_UDP`            `ERROR`      ns                Nameserver {ns} reponds to a NS query with\n                                             (changed                       no NS records in the answer section over\n                                             from                           UDP.\n                                             `WARNING`)                     \n\n  `ZM_CN01_MISSING_SOA_RECORD_UDP`           `ERROR`      ns                Nameserver {ns} reponds to a SOA query with\n                                             (changed                       no SOA records in the answer section over\n                                             from                           UDP.\n                                             `WARNING`)                     \n\n  `ZM_CN01_NO_RESPONSE_NS_QUERY_UDP`         `ERROR`      ns                Nameserver {ns} does not respond to NS\n                                             (changed                       queries over UDP.\n                                             from                           \n                                             `WARNING`)                     \n\n  `ZM_CN01_NO_RESPONSE_SOA_QUERY_UDP`        `ERROR`      ns                Nameserver {ns} does not respond to SOA\n                                             (changed                       queries over UDP.\n                                             from                           \n                                             `WARNING`)                     \n\n  `ZM_CN01_NO_RESPONSE_UDP`                  `ERROR`      ns                Nameserver {ns} does not respond to any\n                                             (changed                       queries over UDP.\n                                             from                           \n                                             `WARNING`)                     \n\n  `ZM_CN01_NS_RECORD_NOT_AA_UDP`             `ERROR`      ns                Nameserver {ns} does not give an\n                                             (changed                       authoritative response on an NS query over\n                                             from                           UDP.\n                                             `WARNING`)                     \n\n  `ZM_CN01_SOA_RECORD_NOT_AA_UDP`            `ERROR`      ns                Nameserver {ns} does not give an\n                                             (changed                       authoritative response on an SOA query over\n                                             from                           UDP.\n                                             `WARNING`)                     \n\n  `ZM_CN01_UNEXPECTED_RCODE_NS_QUERY_UDP`    `ERROR`      ns, rcode         Nameserver {ns} responds with an unexpected\n                                             (changed                       RCODE ({rcode}) on an NS query over UDP.\n                                             from                           \n                                             `WARNING`)                     \n\n  `ZM_CN01_UNEXPECTED_RCODE_SOA_QUERY_UDP`   `ERROR`      ns, rcode         Nameserver {ns} responds with an unexpected\n                                             (changed                       RCODE ({rcode}) on an SOA query over UDP.\n                                             from                           \n                                             `WARNING`)                     \n\n  `ZM_CN01_WRONG_NS_RECORD_UDP`              `ERROR`      ns, domain_found, Nameserver {ns} responds with a wrong owner\n                                             (changed     domain_expected   name ({domain_found} instead of\n                                             from                           {domain_expected}) on NS queries over UDP.\n                                             `WARNING`)                     \n\n  `ZM_CN01_WRONG_SOA_RECORD_UDP`             `ERROR`      ns, domain_found, Nameserver {ns} responds with a wrong owner\n                                             (changed     domain_expected   name ({domain_found} instead of\n                                             from                           {domain_expected}) on SOA queries over UDP.\n                                             `WARNING`)                     \n  ----------------------------------------------------------------------------------------------------------------------\n\nThe value in the Level column is the default severity level of the\nmessage. The severity level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md). Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe argument names in the Arguments column lists the arguments used in\nthe message. The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_CN01_IPV4_DISABLED",
            "ZM_CN01_SOA_RECORD_NOT_AA_UDP",
            "ZM_CN01_NO_RESPONSE_NS_QUERY_UDP",
            "ZM_CN01_WRONG_SOA_RECORD_UDP",
            "ZM_CN01_MISSING_NS_RECORD_UDP",
            "ZM_CN01_UNEXPECTED_RCODE_SOA_QUERY_UDP",
            "ZM_CN01_NO_RESPONSE_UDP",
            "ZM_CN01_UNEXPECTED_RCODE_NS_QUERY_UDP",
            "ZM_CN01_IPV6_DISABLED",
            "ZM_CN01_WRONG_NS_RECORD_UDP",
            "ZM_CN01_NO_RESPONSE_SOA_QUERY_UDP",
            "ZM_CN01_MISSING_SOA_RECORD_UDP",
            "ZM_CN01_NS_RECORD_NOT_AA_UDP"
         ],
         "Maturity" : "BETA",
         "Summary" : "UDP connectivity to name servers"
      },
      "dns-connectivity02" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity02.md>.\n\n# Objective\n\nTCP is a protocol to reach a general purpose name server hosting a zone,\n\"All general-purpose DNS implementations MUST support \\[...\\] TCP\ntransport\" ([RFC\n7766](https://www.rfc-editor.org/rfc/rfc7766#section-5), section 5).\n\nThis Test Case will verify if the name servers of *Child Zone* are\nreachable over TCP. The name servers tested are both those in the\ndelegation of *Child Zone* and those in the NS records in the *Child\nZone* itself.\n\nThis Test Case will mimic the tests done by\n[Connectivity01](connectivity01.md), but over TCP instead:\n\n-   Name Server responding to a query.\n-   Name Server including SOA record of *Child Zone* in the answer\n    section in the response on a SOA query for *Child Zone*.\n-   Name Server including NS record of *Child Zone* in the answer\n    section in the response on an NS query for *Child Zone*.\n-   Name Server setting the AA flag in a response with SOA or NS in\n    answer section.\n-   Name Server responding with expected [RCODE\n    Name](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6)\n    (\"NoError\") on query for SOA or NS for *Child Zone*.\n\n# Summary\n\n  ---------------------------------------------------------------------------------------------------------------------\n  Message Tag                                Level        Arguments         Message ID for message tag\n  ------------------------------------------ ------------ ----------------- -------------------------------------------\n  `ZM_CN02_MISSING_NS_RECORD_TCP`            `ERROR`      ns                Nameserver {ns} reponds to a NS query with\n                                             (changed                       no NS records in the answer section over\n                                             from                           TCP.\n                                             `WARNING`)                     \n\n  `ZM_CN02_MISSING_SOA_RECORD_TCP`           `ERROR`      ns                Nameserver {ns} reponds to a SOA query with\n                                             (changed                       no SOA records in the answer section over\n                                             from                           TCP.\n                                             `WARNING`)                     \n\n  `ZM_CN02_NO_RESPONSE_NS_QUERY_TCP`         `ERROR`      ns                Nameserver {ns} does not respond to NS\n                                             (changed                       queries over TCP.\n                                             from                           \n                                             `WARNING`)                     \n\n  `ZM_CN02_NO_RESPONSE_SOA_QUERY_TCP`        `ERROR`      ns                Nameserver {ns} does not respond to SOA\n                                             (changed                       queries over TCP.\n                                             from                           \n                                             `WARNING`)                     \n\n  `ZM_CN02_NO_RESPONSE_TCP`                  `ERROR`      ns                Nameserver {ns} does not respond to any\n                                             (changed                       queries over TCP.\n                                             from                           \n                                             `WARNING`)                     \n\n  `ZM_CN02_NS_RECORD_NOT_AA_TCP`             `ERROR`      ns                Nameserver {ns} does not give an\n                                             (changed                       authoritative response on an NS query over\n                                             from                           TCP.\n                                             `WARNING`)                     \n\n  `ZM_CN02_SOA_RECORD_NOT_AA_TCP`            `ERROR`      ns                Nameserver {ns} does not give an\n                                             (changed                       authoritative response on an SOA query over\n                                             from                           TCP.\n                                             `WARNING`)                     \n\n  `ZM_CN02_UNEXPECTED_RCODE_NS_QUERY_TCP`    `ERROR`      ns, rcode         Nameserver {ns} responds with an unexpected\n                                             (changed                       RCODE ({rcode}) on an NS query over TCP.\n                                             from                           \n                                             `WARNING`)                     \n\n  `ZM_CN02_UNEXPECTED_RCODE_SOA_QUERY_TCP`   `ERROR`      ns, rcode         Nameserver {ns} responds with an unexpected\n                                             (changed                       RCODE ({rcode}) on an SOA query over TCP.\n                                             from                           \n                                             `WARNING`)                     \n\n  `ZM_CN02_WRONG_NS_RECORD_TCP`              `ERROR`      ns, ,             Nameserver {ns} responds with a wrong owner\n                                             (changed     domain_found,     name ({domain_found} instead of\n                                             from         domain_expected   {domain_expected}) on NS queries over TCP.\n                                             `WARNING`)                     \n\n  `ZM_CN02_WRONG_SOA_RECORD_TCP`             `ERROR`      ns, ,             Nameserver {ns} responds with a wrong owner\n                                             (changed     domain_found,     name ({domain_found} instead of\n                                             from         domain_expected   {domain_expected}) on SOA queries over TCP.\n                                             `WARNING`)                     \n  ---------------------------------------------------------------------------------------------------------------------\n\nThe value in the Level column is the default severity level of the\nmessage. The severity level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md). Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe argument names in the Arguments column lists the arguments used in\nthe message. The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_CN02_MISSING_NS_RECORD_TCP",
            "ZM_CN02_SOA_RECORD_NOT_AA_TCP",
            "ZM_CN02_NO_RESPONSE_TCP",
            "ZM_CN02_WRONG_SOA_RECORD_TCP",
            "ZM_CN02_NO_RESPONSE_NS_QUERY_TCP",
            "ZM_CN02_UNEXPECTED_RCODE_SOA_QUERY_TCP",
            "ZM_CN02_NS_RECORD_NOT_AA_TCP",
            "ZM_CN02_UNEXPECTED_RCODE_NS_QUERY_TCP",
            "ZM_CN02_MISSING_SOA_RECORD_TCP",
            "ZM_CN02_WRONG_NS_RECORD_TCP",
            "ZM_CN02_NO_RESPONSE_SOA_QUERY_TCP"
         ],
         "Maturity" : "BETA",
         "Summary" : "TCP connectivity to name servers"
      },
      "dns-connectivity03" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity03.md>.\n\n# Objective\n\nThe objective in this test is to verify that all IP addresses of the\ndomain's authoritative name servers are announced from different ASNs\n(autonomous system number). See [RFC\n1930](https://datatracker.ietf.org/doc/html/rfc1930) and\n[Wikipedia](https://en.wikipedia.org/wiki/Autonomous_system_(Internet))\nfor an explanation of AS (autonomous system).\n\nThis test is done separately on IPv4 and IPv6, and both must match the\ncriterion.\n\n[RFC 2182](https://datatracker.ietf.org/doc/html/rfc2182#section-3.1),\nsection 3.1, clearly specifies that distinct authoritative name servers\nfor a child domain should be placed in different topological and\ngeographical locations. The objective is to minimise the likelihood of a\nsingle failure disabling all of them.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level ERROR or CRITICAL.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level WARNING, but no message with severity\nlevel ERROR or CRITICAL.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  Message                   Default severity level\n  ------------------------- ----------------------------------\n  `ZM_EMPTY_ASN_SET`        ERROR\n  `ZM_ERROR_ASN_DATABASE`   ERROR\n  `ZM_IPV4_ONE_ASN`         `ERROR` (changed from `WARNING`)\n  `ZM_IPV4_SAME_ASN`        NOTICE\n  `ZM_IPV4_DIFFERENT_ASN`   INFO\n  `ZM_IPV6_ONE_ASN`         `ERROR` (changed from `WARNING`)\n  `ZM_IPV6_SAME_ASN`        NOTICE\n  `ZM_IPV6_DIFFERENT_ASN`   INFO\n",
         "Errors" : [
            "ZM_EMPTY_ASN_SET",
            "ZM_IPV4_DIFFERENT_ASN",
            "ZM_IPV4_ONE_ASN",
            "ZM_IPV6_SAME_ASN",
            "ZM_ERROR_ASN_DATABASE",
            "ZM_IPV6_ONE_ASN",
            "ZM_IPV4_SAME_ASN",
            "ZM_IPV6_DIFFERENT_ASN"
         ],
         "Maturity" : "BETA",
         "Summary" : "AS Diversity"
      },
      "dns-connectivity04" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Connectivity-TP/connectivity04.md>.\n\n# Objective\n\nThe objective in this Test Case is to verify that all IP addresses of\nthe domain's authoritative name servers are announced from different IP\nprefixes.\n\nThis Test is done separately on IPv4 and IPv6, and both must match the\ncriterion.\n\n[RFC 2182, section\n3.1](https://datatracker.ietf.org/doc/html/rfc2182#section-3.1), clearly\nspecifies that distinct authoritative name servers for a child domain\nshould be placed in different topological and geographical locations.\nThe objective is to minimise the likelihood of a single failure\ndisabling all of them.\n\n# Summary\n\n  --------------------------------------------------------------------------------------------------\n  Message Tag                       Level     Arguments    Message ID for message tag\n  --------------------------------- --------- ------------ -----------------------------------------\n  `ZM_CN04_EMPTY_PREFIX_SET`        ERROR     ns_ip        Prefix database returned no information\n                                                           for IP address {ns_ip}.\n\n  `ZM_CN04_ERROR_PREFIX_DATABASE`   ERROR     ns_ip        Prefix database error. No data to analyze\n                                                           for IP address {ns_ip}.\n\n  `ZM_CN04_IPV4_SAME_PREFIX`        WARNING   ns_list,     The following name server(s) are\n                                              ip_prefix    announced in the same IPv4 prefix\n                                                           ({ip_prefix}): \"{ns_list}\"\n\n  `ZM_CN04_IPV4_DIFFERENT_PREFIX`   INFO      ns_list      The following name server(s) are\n                                                           announced in unique IPv4 prefix(es):\n                                                           \"{ns_list}\"\n\n  `ZM_CN04_IPV6_SAME_PREFIX`        WARNING   ns_list,     The following name server(s) are\n                                              ip_prefix    announced in the same IPv6 prefix\n                                                           ({ip_prefix}): \"{ns_list}\"\n\n  `ZM_CN04_IPV6_DIFFERENT_PREFIX`   INFO      ns_list      The following name server(s) are\n                                                           announced in unique IPv6 prefix(es):\n                                                           \"{ns_list}\"\n  --------------------------------------------------------------------------------------------------\n\nThe value in the Level column is the default severity level of the\nmessage. The severity level can be changed in the [Zonemaster-Engine\nProfile](../../../configuration/profiles.md). Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe argument names in the Arguments column lists the arguments used in\nthe message. The argument names are defined in the [Argument\nList](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_CN04_EMPTY_PREFIX_SET",
            "ZM_CN04_IPV6_SAME_PREFIX",
            "ZM_CN04_IPV4_SAME_PREFIX",
            "ZM_CN04_IPV6_DIFFERENT_PREFIX",
            "ZM_CN04_ERROR_PREFIX_DATABASE",
            "ZM_CN04_IPV4_DIFFERENT_PREFIX"
         ],
         "Maturity" : "BETA",
         "Summary" : "IP Prefix Diversity"
      },
      "dns-consistency01" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency01.md>.\n\n# Objective\n\nFor the data served by the authoritative name servers for a designated\nzone to be consistent, all authoritative name servers must serve the\nsame SOA record for the designated zone.\n\nIf the serial number (explained in 3.3.13. of [RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035)), which is part of\nthe SOA record, is not consistent between authoritative servers, there\nis a possibility that the data served is inconsistent. The reasons for\nthis inconsistency may be different - such as misconfiguration, or as a\nresult of slow propagation to the secondary name servers.\n\nThe objective of this test is to verify that the serial number is\nconsistent between different authoritative name servers.\n\nFor reference purposes : [RFC\n1982](https://datatracker.ietf.org/doc/html/rfc1982) explains the serial\nnumber arithmetic, and section 4.3.5 of [RFC\n1034](https://datatracker.ietf.org/doc/html/rfc1035) explains the\nimportance of serial number consistency.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  ----------------------------------------------------------------------\n  Message                         Default severity level (if message is\n                                  emitted)\n  ------------------------------- --------------------------------------\n  `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)\n\n  `ZM_NO_RESPONSE_SOA_QUERY`      `ERROR` (changed from `DEBUG`)\n\n  `ZM_ONE_SOA_SERIAL`             INFO\n\n  `ZM_MULTIPLE_SOA_SERIALS`       `ERROR` (changed from `WARNING`)\n\n  `ZM_MULTIPLE_SOA_SERIALS_OK`    NOTICE\n\n  `ZM_SOA_SERIAL`                 INFO\n\n  `ZM_SOA_SERIAL_VARIATION`       NOTICE\n  ----------------------------------------------------------------------\n",
         "Errors" : [
            "ZM_NO_RESPONSE",
            "ZM_MULTIPLE_SOA_SERIALS_OK",
            "ZM_ONE_SOA_SERIAL",
            "ZM_SOA_SERIAL_VARIATION",
            "ZM_NO_RESPONSE_SOA_QUERY",
            "ZM_SOA_SERIAL",
            "ZM_MULTIPLE_SOA_SERIALS"
         ],
         "Maturity" : "BETA",
         "Summary" : "SOA serial number consistency"
      },
      "dns-consistency02" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency02.md>.\n\n# Objective\n\nAll authoritative name servers must serve the same SOA record for the\ntested domain (section 4.2.1 of [RFC\n1034](https://datatracker.ietf.org/doc/html/rfc1034)). As per section\n3.3.13 of [RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035), the\nRNAME field in the SOA RDATA refers to the administrative contact. An\ninconsistency in the administrative contact for the domain might result\nin operational failures being reported to different persons.\n\nThe objective of this test is to verify that the administrative contact\nis consistent between different authoritative name servers.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  ----------------------------------------------------------------------\n  Message                         Default severity level (if message is\n                                  emitted)\n  ------------------------------- --------------------------------------\n  `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)\n\n  `ZM_NO_RESPONSE_SOA_QUERY`      `ERROR` (changed from `DEBUG`)\n\n  `ZM_ONE_SOA_RNAME`              INFO\n\n  `ZM_MULTIPLE_SOA_RNAMES`        `ERROR` (changed from `NOTICE`)\n  ----------------------------------------------------------------------\n",
         "Errors" : [
            "ZM_NO_RESPONSE",
            "ZM_ONE_SOA_RNAME",
            "ZM_NO_RESPONSE_SOA_QUERY",
            "ZM_MULTIPLE_SOA_RNAMES"
         ],
         "Maturity" : "BETA",
         "Summary" : "SOA RNAME consistency"
      },
      "dns-consistency03" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency03.md>.\n\n# Objective\n\nAll SOA record timer fields must be consistent across all authoritative\nname servers. An inconsistency in these fields might result in\noperational inconsistencies for the designated zone.\n\nThere are other test cases that provide consistency tests for the other\nSOA fields:\n\n-   [CONSISTENCY01](consistency01.md) (SOA Serial)\n-   [CONSISTENCY02](consistency02.md) (RNAME)\n-   [CONSISTENCY06](consistency06.md) (MNAME)\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  ---------------------------------------------------------------------------\n  Message                                Default severity level (if message\n                                         is emitted)\n  -------------------------------------- ------------------------------------\n  `ZM_NO_RESPONSE`                       `ERROR` (changed from `DEBUG`)\n\n  `ZM_NO_RESPONSE_SOA_QUERY`             `ERROR` (changed from `DEBUG`)\n\n  `ZM_ONE_SOA_TIME_PARAMETER_SET`        INFO\n\n  `ZM_MULTIPLE_SOA_TIME_PARAMETER_SET`   `ERROR` (changed from `NOTICE`)\n  ---------------------------------------------------------------------------\n",
         "Errors" : [
            "ZM_NO_RESPONSE",
            "ZM_ONE_SOA_TIME_PARAMETER_SET",
            "ZM_NO_RESPONSE_SOA_QUERY",
            "ZM_MULTIPLE_SOA_TIME_PARAMETER_SET"
         ],
         "Maturity" : "BETA",
         "Summary" : "SOA timers consistency"
      },
      "dns-consistency04" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency04.md>.\n\n# Objective\n\nAll authoritative name servers must serve the same NS record set for the\ntested domain, child zone ([RFC\n1034](https://datatracker.ietf.org/doc/html/rfc1034), section 4.2.2).\nAny inconsistencies in NS records described in [RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035), section 3.3.11,\nmight result in operational failures.\n\nThe objective of this test is to verify that the NS records are\nconsistent between all authoritative name servers of the child zone.\n\nTwo NS RR sets are considered to be equal if both sets have the same\nnumber of NS records, and for each NS record in one of the sets there is\nexactly one NS record with identical owner name, class, TTL and RDATA in\nthe other NS set.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  ----------------------------------------------------------------------\n  Message                         Default severity level (if message is\n                                  emitted)\n  ------------------------------- --------------------------------------\n  `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)\n\n  `ZM_NO_RESPONSE_NS_QUERY`       `ERROR` (changed from `DEBUG`)\n\n  `ZM_ONE_NS_SET`                 INFO\n\n  `ZM_MULTIPLE_NS_SET`            `ERROR` (changed from `NOTICE`)\n  ----------------------------------------------------------------------\n",
         "Errors" : [
            "ZM_NO_RESPONSE",
            "ZM_ONE_NS_SET",
            "ZM_NO_RESPONSE_NS_QUERY",
            "ZM_MULTIPLE_NS_SET"
         ],
         "Maturity" : "BETA",
         "Summary" : "Name server NS consistency"
      },
      "dns-consistency05" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency05.md>.\n\n# Objective\n\nFor name servers that have IP addresses listed as glue, the IP addresses\nmust match the authoritative A and AAAA records for that host. This is\nan IANA [name server\nrequirement](https://www.iana.org/help/nameserver-requirements).\n\nThe objective of this test is to verify that the [glue\nrecords](#terminology) in the delegation are consistent with\nauthoritative data.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nThe outcome of this Test case is \"pass\" in all other cases.\n\n  --------------------------------------------------------------------------\n  Message                               Default severity level (when message\n                                        is outputted)\n  ------------------------------------- ------------------------------------\n  `ZM_CHILD_NS_FAILED`                  `ERROR` (changed from `DEBUG`)\n\n  `ZM_NO_RESPONSE`                      `ERROR` (changed from `DEBUG`)\n\n  `ZM_CHILD_ZONE_LAME`                  `ERROR` (changed from `ERROR`)\n\n  `ZM_IN_BAILIWICK_ADDR_MISMATCH`       `ERROR` (changed from `ERROR`)\n\n  `ZM_OUT_OF_BAILIWICK_ADDR_MISMATCH`   `ERROR` (changed from `ERROR`)\n\n  `ZM_EXTRA_ADDRESS_CHILD`              `ERROR` (changed from `NOTICE`)\n\n  `ZM_ADDRESSES_MATCH`                  INFO\n  --------------------------------------------------------------------------\n",
         "Errors" : [
            "ZM_CHILD_NS_FAILED",
            "ZM_OUT_OF_BAILIWICK_ADDR_MISMATCH",
            "ZM_CHILD_ZONE_LAME",
            "ZM_ADDRESSES_MATCH",
            "ZM_NO_RESPONSE",
            "ZM_EXTRA_ADDRESS_CHILD",
            "ZM_IN_BAILIWICK_ADDR_MISMATCH"
         ],
         "Maturity" : "BETA",
         "Summary" : "Consistency between glue and authoritative data"
      },
      "dns-consistency06" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Consistency-TP/consistency06.md>.\n\n# Objective\n\nAll authoritative name servers must serve the same SOA record (section\n4.2.1) of [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1035) for\nthe tested domain. As per section 3.3.13 of [RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035) the MNAME field in\nthe SOA RDATA refers to the name of \"the name server that was the\noriginal or primary source of data for this zone\". Inconsistency in\nMNAME of the domain might result in operational failures for\napplications that uses MNAME.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  ----------------------------------------------------------------------\n  Message                         Default severity level (if message is\n                                  emitted)\n  ------------------------------- --------------------------------------\n  `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)\n\n  `ZM_NO_RESPONSE_SOA_QUERY`      `ERROR` (changed from `DEBUG`)\n\n  `ZM_ONE_SOA_MNAME`              INFO\n\n  `ZM_MULTIPLE_SOA_MNAMES`        `ERROR` (changed from `NOTICE`)\n  ----------------------------------------------------------------------\n",
         "Errors" : [
            "ZM_NO_RESPONSE",
            "ZM_ONE_SOA_MNAME",
            "ZM_NO_RESPONSE_SOA_QUERY",
            "ZM_MULTIPLE_SOA_MNAMES"
         ],
         "Maturity" : "BETA",
         "Summary" : "SOA MNAME consistency"
      },
      "dns-delegation01" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation01.md>.\n\n# Objective\n\nSection 4.1 of [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034)\nspecifies that there must be a minimum of two name servers for a domain.\nThis test is done to verify this condition.\n\nThe RFC ([RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034))\npredates IPv6. Since IPv4 and IPv6 work as separate networks, this test\ncase has been extended to test for two name servers that resolve into\nIPv4 addresses and IPv6 addresses respectively.\n\nBoth [RFC 3901](https://datatracker.ietf.org/doc/html/rfc3901) (section\n3) and [RFC 4472](https://datatracker.ietf.org/doc/html/rfc4472)\n(section 1.3) states that a domain (zone) should be available over IPv4\nfor the time being. Therefore, it is by the default level in this test\ncase considered to be more problematic not being available over IPv4\nthan not being available over IPv6.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nElse the outcome of this Test Case is \"pass\".\n\n  Message                         Default severity level\n  ------------------------------- ----------------------------------\n  `ZM_ENOUGH_IPV4_NS_CHILD`       INFO\n  `ZM_ENOUGH_IPV4_NS_DEL`         INFO\n  `ZM_ENOUGH_IPV6_NS_CHILD`       INFO\n  `ZM_ENOUGH_IPV6_NS_DEL`         INFO\n  `ZM_ENOUGH_NS_CHILD`            INFO\n  `ZM_ENOUGH_NS_DEL`              INFO\n  `ZM_NOT_ENOUGH_IPV4_NS_CHILD`   ERROR\n  `ZM_NOT_ENOUGH_IPV4_NS_DEL`     ERROR\n  `ZM_NOT_ENOUGH_IPV6_NS_CHILD`   ERROR\n  `ZM_NOT_ENOUGH_IPV6_NS_DEL`     ERROR\n  `ZM_NOT_ENOUGH_NS_CHILD`        ERROR\n  `ZM_NOT_ENOUGH_NS_DEL`          ERROR\n  `ZM_NO_IPV4_NS_CHILD`           `ERROR` (changed from `WARNING`)\n  `ZM_NO_IPV4_NS_DEL`             `ERROR` (changed from `WARNING`)\n  `ZM_NO_IPV6_NS_CHILD`           `ERROR` (changed from `NOTICE`)\n  `ZM_NO_IPV6_NS_DEL`             `ERROR` (changed from `NOTICE`)\n",
         "Errors" : [
            "ZM_ENOUGH_IPV4_NS_CHILD",
            "ZM_NOT_ENOUGH_IPV6_NS_CHILD",
            "ZM_ENOUGH_NS_CHILD",
            "ZM_NO_IPV4_NS_CHILD",
            "ZM_ENOUGH_IPV6_NS_CHILD",
            "ZM_NOT_ENOUGH_NS_CHILD",
            "ZM_NOT_ENOUGH_IPV4_NS_CHILD",
            "ZM_NO_IPV6_NS_CHILD",
            "ZM_ENOUGH_IPV4_NS_DEL",
            "ZM_NOT_ENOUGH_IPV6_NS_DEL",
            "ZM_ENOUGH_NS_DEL",
            "ZM_NO_IPV4_NS_DEL",
            "ZM_ENOUGH_IPV6_NS_DEL",
            "ZM_NOT_ENOUGH_NS_DEL",
            "ZM_NOT_ENOUGH_IPV4_NS_DEL",
            "ZM_NO_IPV6_NS_DEL"
         ],
         "Maturity" : "BETA",
         "Summary" : "Minimum number of name servers"
      },
      "dns-delegation02" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation02.md>.\n\n# Objective\n\nIf the domain's name servers use several different names, they can all\nbe using the same IP address. This may be due to a configuration error,\nor a workaround for a certain policy restriction. This test case checks\nthat the name servers used do not reuse the same IP addresses.\n\nSection 4.1 of [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034)\nsays at least two name servers must be used for a delegation.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  Message                     Default severity level (if message is emitted)\n  --------------------------- ------------------------------------------------\n  `ZM_DEL_NS_SAME_IP`         ERROR\n  `ZM_CHILD_NS_SAME_IP`       ERROR\n  `ZM_DEL_DISTINCT_NS_IP`     INFO\n  `ZM_CHILD_DISTINCT_NS_IP`   INFO\n",
         "Errors" : [
            "ZM_DEL_NS_SAME_IP",
            "ZM_DEL_DISTINCT_NS_IP",
            "ZM_CHILD_NS_SAME_IP",
            "ZM_CHILD_DISTINCT_NS_IP"
         ],
         "Maturity" : "BETA",
         "Summary" : "Name servers must have distinct IP addresses"
      },
      "dns-delegation03" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation03.md>.\n\n# Objective\n\nThe Domain Name System defaults to using UDP for queries and answers\nwith a DNS payload limit of 512 octets (bytes). Larger replies cause an\ninitial truncation indication leading to a subsequent handling via TCP\nwith substantially higher overhead. EDNS0 is used to allow for larger\nUDP responses thus reducing the need for use of TCP.\n\nBut [IANA](https://www.iana.org/help/nameserver-requirements) still\nmaintains that referrals from the parent zone name servers must fit into\na non-EDNS0 UDP DNS packet.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  -----------------------------------------------------------------------\n  Message                            Default severity level of message\n  ---------------------------------- ------------------------------------\n  `ZM_REFERRAL_SIZE_TOO_LARGE`       WARNING\n\n  `ZM_REFERRAL_SIZE_OK`              INFO\n  -----------------------------------------------------------------------\n",
         "Errors" : [
            "ZM_REFERRAL_SIZE_TOO_LARGE",
            "ZM_REFERRAL_SIZE_OK"
         ],
         "Maturity" : "BETA",
         "Summary" : "No truncation of referrals"
      },
      "dns-delegation04" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation04.md>.\n\n# Objective\n\nSubsection 6.1 of [RFC\n2181](https://datatracker.ietf.org/doc/html/rfc2181) specifies that the\nnameservers must answer authoritatively for the domain. Answers to\nqueries to the name servers for the designated zone must have the \"AA\"\nbit set.\n\n# Pass/fail criteria\n\nIf all the name servers answer with the AA-bit set, then the test\nsucceeds.\n",
         "Errors" : [
            "ZM_DNS_DELEGATION04_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Name server is authoritative"
      },
      "dns-delegation05" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation05.md>.\n\n# Objective\n\nName servers for a zone are defined in NS records. An NS record points\nat a name, i.e. the RDATA for an NS record is a domain name. That name\nis the name of the name server. [RFC\n2181](https://datatracker.ietf.org/doc/html/rfc2181#section-10.3),\nsection 10.3, states that the name of the name server must not itself\npoint at a CNAME.\n\nThe objective of this test is to verify that name servers of the tested\ndomain (zone) do not point at CNAME records.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  Message                 Default severity level\n  ----------------------- --------------------------------\n  `ZM_NO_RESPONSE`        `ERROR` (changed from `DEBUG`)\n  `ZM_UNEXPECTED_RCODE`   WARNING\n  `ZM_NS_IS_CNAME`        ERROR\n  `ZM_NO_NS_CNAME`        INFO\n",
         "Errors" : [
            "ZM_NO_RESPONSE",
            "ZM_NS_IS_CNAME",
            "ZM_UNEXPECTED_RCODE",
            "ZM_NO_NS_CNAME"
         ],
         "Maturity" : "BETA",
         "Summary" : "Name server must not point at CNAME alias"
      },
      "dns-delegation06" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation06.md>.\n\n# Objective\n\nSection 6.1 of the [RFC\n2181](https://datatracker.ietf.org/doc/html/rfc2181) specifies that the\nSOA record is mandatory for every zone.\n\nThis test is intended to verify the prescence of a SOA record for the\ndomain.\n\n# Pass/fail criteria\n\nIf there is a SOA record present for the domain this test case succeeds.\n",
         "Errors" : [
            "ZM_DNS_DELEGATION06_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Existence of SOA"
      },
      "dns-delegation07" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Delegation-TP/delegation07.md>.\n\n# Objective\n\nIf the list of name servers for a domain obtained from its parent are\nnot found in its its child zone, then it leads to an inconsistency\n(section 2.3 of\n[RIPE-114](https://www.ripe.net/publications/docs/ripe-114))\n\n# Pass/fail criteria\n\nIf the set of glue name records obtained are found in the list of name\nservers obtained from the child also, then the test succeeds\n",
         "Errors" : [
            "ZM_DNS_DELEGATION07_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Parent glue name records present in child"
      },
      "dns-nameserver01" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver01.md>.\n\n# Objective\n\nTo ensure consistency in DNS, an authoritative name server should not be\nconfigured to do recursive lookups. Also, open recursive resolvers are\nconsidered bad internet practice due to their capability of assisting in\nlarge scale DDoS attacks. The introduction to [RFC\n5358](https://datatracker.ietf.org/doc/html/rfc5358) elaborates on\nmixing recursor and authoritative functionality, and the issue is\nfurther elaborated by [D.J.\nBernstein](https://cr.yp.to/djbdns/separation.html).\n\nSection 2.5 of [RFC 2870](https://datatracker.ietf.org/doc/html/rfc2870)\nhave very specific requirement on disabling recursion functionality on\nroot name servers.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  ----------------------------------------------------------------------\n  Message                         Default severity level (if message is\n                                  emitted)\n  ------------------------------- --------------------------------------\n  `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)\n\n  `ZM_IS_A_RECURSOR`              ERROR\n\n  `ZM_NO_RECURSOR`                INFO\n  ----------------------------------------------------------------------\n",
         "Errors" : [
            "ZM_NO_RESPONSE",
            "ZM_NO_RECURSOR",
            "ZM_IS_A_RECURSOR"
         ],
         "Maturity" : "BETA",
         "Summary" : "A name server should not be a recursor"
      },
      "dns-nameserver02" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver02.md>.\n\n# Objective\n\nEDNS(0) is a mechanism to announce capabilities of a DNS implementation,\nand is now basically required by any new functionality in DNS such as\nDNSSEC. EDNS(0) is standardized in [RFC\n6891](https://datatracker.ietf.org/doc/html/rfc6891).\n\nThis test case checks that all name servers has the capability to do\nEDNS(0) or if not, correctly replies to queries containing EDNS (OPT\nrecord).\n\nServers not supporting EDNS(0) must return FORMERR ([RFC 6891, section\n7](https://datatracker.ietf.org/doc/html/rfc6891#section-7)):\n\n> Responders that choose not to implement the protocol extensions\n> defined in this document MUST respond with a return code (RCODE) of\n> FORMERR to messages containing an OPT record in the additional section\n> and MUST NOT include an OPT record in the response.\n\nServers supporting EDNS(0) must reply with EDNS(0) ([RFC 6891, section\n6.1.1](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.1)):\n\n> If an OPT record is present in a received request, compliant\n> responders MUST include an OPT record in their respective responses.\n\nTo eliminating the risk of falsely classifying the server as not\nsupporting EDNS due e.g. firewall issues, the UDP buffer size is set to\n512 bytes (octets).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nThe outcome of this Test case is \"pass\" in all other cases.\n\n  -----------------------------------------------------------------------\n  Message                            Default severity level (when message\n                                     is outputted)\n  ---------------------------------- ------------------------------------\n  `ZM_NO_RESPONSE`                   `ERROR` (changed from `DEBUG`)\n\n  `ZM_NO_EDNS_SUPPORT`               `ERROR` (changed from `WARNING`)\n\n  `ZM_BREAKS_ON_EDNS`                ERROR\n\n  `ZM_EDNS_RESPONSE_WITHOUT_EDNS`    ERROR\n\n  `ZM_EDNS_VERSION_ERROR`            ERROR\n\n  `ZM_NS_ERROR`                      `ERROR` (changed from `WARNING`)\n  -----------------------------------------------------------------------\n",
         "Errors" : [
            "ZM_NO_RESPONSE",
            "ZM_EDNS_VERSION_ERROR",
            "ZM_BREAKS_ON_EDNS",
            "ZM_NS_ERROR",
            "ZM_NO_EDNS_SUPPORT",
            "ZM_EDNS_RESPONSE_WITHOUT_EDNS"
         ],
         "Maturity" : "BETA",
         "Summary" : "Test of EDNS0 support"
      },
      "dns-nameserver03" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver03.md>.\n\n# Objective\n\nAXFR is a mechanism to transfer the whole content of a zone from a name\nserver. Some people prefer to not disclose the whole content of a zone\nfor various reasons, and thus wants the public name server\ninfrastructure not do disclose the whole zone content to the public.\nThis test case checks the availability of the AXFR mechanism.\n\nAXFR is defined in its latest revision in [RFC\n5936](https://datatracker.ietf.org/doc/html/rfc5936).\n\n# Pass/fail criteria\n\nIf any name server for the domain allows a zone transfer using AXFR,\nthis test case fails.\n",
         "Errors" : [
            "ZM_DNS_NAMESERVER03_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Test availability of zone transfer (AXFR)"
      },
      "dns-nameserver04" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver04.md>.\n\n# Objective\n\nResponses from the authoritative name servers must contain same source\nIP address as the destination IP address of the initial query. This has\nbeen clarified in section 4 of [RFC\n2181](https://datatracker.ietf.org/doc/html/rfc2181#section-4).\n\n# Pass/fail criteria\n\nIf any response comes from another IP address than the query was sent\nto, this test case fails.\n",
         "Errors" : [
            "ZM_DNS_NAMESERVER04_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Same source address"
      },
      "dns-nameserver05" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver05.md>.\n\n# Objective\n\nOlder implementations of authoritative name servers have shown different\nmisbehaviours trying to answer queries for AAAA records, as described in\n[RFC 4074](https://datatracker.ietf.org/doc/html/rfc4074). This test\ncase is intended to find out if the name server authoritative for the\ndomain shows any of these behaviours.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  Message                      Default severity level\n  ---------------------------- ----------------------------------\n  `ZM_AAAA_BAD_RDATA`          ERROR\n  `ZM_AAAA_QUERY_DROPPED`      ERROR\n  `ZM_AAAA_UNEXPECTED_RCODE`   ERROR\n  `ZM_AAAA_WELL_PROCESSED`     INFO\n  `ZM_A_UNEXPECTED_RCODE`      `ERROR` (changed from `WARNING`)\n  `ZM_NO_RESPONSE`             `ERROR` (changed from `DEBUG`)\n",
         "Errors" : [
            "ZM_AAAA_BAD_RDATA",
            "ZM_A_UNEXPECTED_RCODE",
            "ZM_AAAA_UNEXPECTED_RCODE",
            "ZM_NO_RESPONSE",
            "ZM_AAAA_QUERY_DROPPED",
            "ZM_AAAA_WELL_PROCESSED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Behaviour against AAAA query"
      },
      "dns-nameserver06" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver06.md>.\n\n# Objective\n\nAll name servers names listed for a delegation must be resolvable in\nDNS. If they are not resolvable using DNS this is a sign of\nmisconfiguration, and raises the risk of unreachability for the domain.\nIt could also lower the performance for any resolver trying to resolve\nthe name.\n\nThe objective of this test is to resolve the domain using all the listed\nname servers used in the delegation. More information about resolver\nbehavior is in section 7 of [RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035).\n\n# Pass/fail criteria\n\nIf any of the name server names fails to resolve to an IP address, this\ntest case fails.\n",
         "Errors" : [
            "ZM_DNS_NAMESERVER06_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "NS can be resolved"
      },
      "dns-nameserver07" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver07.md>.\n\n# Objective\n\nThe configuration and/or implementation of some authoritative name\nservers causes them to return an upward referral to the root zone. There\nare proofs that such a [behaviour could be used for DDoS\nattacks](https://www.dns-oarc.net/oarc/articles/upward-referrals-considered-harmful)\n\n# Pass/fail criteria\n\nThe test case is Ok only if there are no responses in the authority\nsection\n",
         "Errors" : [
            "ZM_DNS_NAMESERVER07_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "To check whether authoritative name servers return an upward referral"
      },
      "dns-nameserver08" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver08.md>.\n\n# Objective\n\nThe DNS standards require that nameservers treat names with case\ninsensitivity. That is, the names example.com and EXAMPLE.COM should\nresolve to the same IP address. However, in the response, most\nnameservers echo back the name as it appeared in the request, preserving\nthe original case.\n\nTherefore, another way to add entropy to requests is to randomly vary\nthe case of letters in domain names queried. This technique, also known\nas \"0x20\" because bit 0x20 is used to set the case of of US-ASCII\nletters, was first proposed in the [IETF internet\ndraft](https://datatracker.ietf.org/doc/html/draft-vixie-dnsext-dns0x20-00)\nUse of Bit 0x20 in DNS Labels to Improve Transaction Identity. With this\ntechnique, the nameserver response must match not only the query name,\nbut the case of every letter in the name string; for example,\nwWw.eXaMpLe.CoM or WwW.ExamPLe.COm. This may add little or no entropy to\nqueries for the top-level and root domains, but it's effective for most\nhostnames.\n\n# Pass/fail criteria\n\nThe test case is Ok only if there are no responses in the authority\nsection\n",
         "Errors" : [
            "ZM_DNS_NAMESERVER08_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Testing QNAME case insensitivity"
      },
      "dns-nameserver09" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver09.md>.\n\n# Objective\n\nThere has been cases where the nameservers respond with complete\ncase-sensitivity (in violation of the DNS standards): that is, they\nmatch the exact case of the name in the response; but return different\nresults for equivalent names with different cases in the request\n(typically NXDOMAIN).\n\n# Pass/fail criteria\n\nThe test case passes only if the results of all queries are exactly the\nsame.\n",
         "Errors" : [
            "ZM_DNS_NAMESERVER09_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Testing QNAME case sensitivity"
      },
      "dns-nameserver10" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver10.md>.\n\n# Objective\n\nEDNS ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891)) is a\nmechanism to announce capabilities of a DNS implementation, and is\nrequired by new functionality in DNS such as DNSSEC ([RFC\n4033](https://datatracker.ietf.org/doc/html/rfc4033#section-3), section\n3).\n\n[RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.3),\nsection 6.1.3, states that if a nameserver has implemented EDNS but has\nnot implemented the version level of the request, then it MUST respond\nwith RCODE \"BADVERS\". Only version \"0\" has been defined for EDNS.\n\nNote that RCODE \"BADVERS\" is an extended RCODE which is calculated from\nthe combination of the normal RCODE field in the DNS package header\n([RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035#section-4.1.1),\nsection 4.1.1) and the OPT record EXTENDED-RCODE field ([RFC\n6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.3),\nsection 6.1.3). Also see [IANA RCODE\nRegistry](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6).\n\n# Summary\n\n-   Only relevant for a zone whose name servers correctly support EDNS,\n    version 0.\n\n  --------------------------------------------------------------------------------------------\n  Message Tag outputted              Level        Arguments     Description of when message\n                                                                tag is outputted\n  ---------------------------------- ------------ ------------- ------------------------------\n  `ZM_N10_NO_RESPONSE_EDNS1_QUERY`   `ERROR`      ns_ip_list    Response when EDNS ver=0, but\n                                     (changed                   not when 1.\n                                     from                       \n                                     `WARNING`)                 \n\n  `ZM_N10_UNEXPECTED_RCODE`          `ERROR`      ns_ip_list,   Unexpected RCODE value when\n                                     (changed     rcode         EDNS ver=1.\n                                     from                       \n                                     `WARNING`)                 \n\n  `ZM_N10_EDNS_RESPONSE_ERROR`       `ERROR`      ns_ip_list    Expected RCODE value when EDNS\n                                     (changed                   ver=1, but error in response.\n                                     from                       \n                                     `WARNING`)                 \n  --------------------------------------------------------------------------------------------\n\nThe value in the Level column is the default severity level of the\nmessage. The severity level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md). Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe argument names in the Arguments column lists the arguments used in\nthe message. The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_N10_NO_RESPONSE_EDNS1_QUERY",
            "ZM_N10_EDNS_RESPONSE_ERROR",
            "ZM_N10_UNEXPECTED_RCODE"
         ],
         "Maturity" : "BETA",
         "Summary" : "Test for undefined EDNS version"
      },
      "dns-nameserver11" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver11.md>.\n\n# Objective\n\nEDNS is a mechanism to announce capabilities of a DNS implementation,\nand is now basically required by any new functionality in DNS such as\nDNSSEC ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891)).\n\n[RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.2),\nsection 6.1.2, states that any OPTION-CODE values not understood by a\nresponder or requestor MUST be ignored. Unknown OPTION-CODE values must\nbe processed as though the OPTION-CODE was not even there.\n\nIn this test case, we will query with an unknown EDNS OPTION-CODE and\nexpect that the OPTION-CODE is not present in the response for the\nquery.\n\n# Summary\n\n  -----------------------------------------------------------------------------------------------\n  Message Tag                            Level        Arguments     Message ID for message tag\n  -------------------------------------- ------------ ------------- -----------------------------\n  `ZM_N11_NO_EDNS`                       `ERROR`      ns_ip_list    The DNS response, on query\n                                         (changed                   with unknown EDNS\n                                         from                       option-code, does not contain\n                                         `WARNING`)                 any EDNS from name servers\n                                                                    \"{ns_ip_list}\".\n\n  `ZM_N11_NO_RESPONSE`                   `ERROR`      ns_ip_list    There is no response on query\n                                         (changed                   with unknown EDNS option-code\n                                         from                       from name servers\n                                         `WARNING`)                 \"{ns_ip_list}\".\n\n  `ZM_N11_RETURNS_UNKNOWN_OPTION_CODE`   `ERROR`      ns_ip_list    The DNS response, on query\n                                         (changed                   with unknown EDNS\n                                         from                       option-code, contains an\n                                         `WARNING`)                 unknown EDNS option-code from\n                                                                    name servers \"{ns_ip_list}\".\n\n  `ZM_N11_UNEXPECTED_ANSWER_SECTION`     `ERROR`      ns_ip_list    The DNS response, on query\n                                         (changed                   with unknown EDNS\n                                         from                       option-code, does not contain\n                                         `WARNING`)                 the expected SOA record in\n                                                                    the answer section from name\n                                                                    servers \"{ns_ip_list}\".\n\n  `ZM_N11_UNEXPECTED_RCODE`              `ERROR`      ns_ip_list,   The DNS response, on query\n                                         (changed     rcode         with unknown EDNS\n                                         from                       option-code, has unexpected\n                                         `WARNING`)                 RCODE name \"{rcode}\" from\n                                                                    name servers \"{ns_ip_list}\".\n\n  `ZM_N11_UNSET_AA`                      `ERROR`      ns_ip_list    The DNS response, on query\n                                         (changed                   with unknown EDNS\n                                         from                       option-code, is unexpectedly\n                                         `WARNING`)                 not authoritative from name\n                                                                    servers \"{ns_ip_list}\".\n  -----------------------------------------------------------------------------------------------\n\nThe value in the Level column is the default severity level of the\nmessage. The severity level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md). Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe argument names in the Arguments column lists the arguments used in\nthe message. The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_N11_NO_EDNS",
            "ZM_N11_UNEXPECTED_RCODE",
            "ZM_N11_RETURNS_UNKNOWN_OPTION_CODE",
            "ZM_N11_UNSET_AA",
            "ZM_N11_NO_RESPONSE",
            "ZM_N11_UNEXPECTED_ANSWER_SECTION"
         ],
         "Maturity" : "BETA",
         "Summary" : "Test for unknown EDNS OPTION-CODE"
      },
      "dns-nameserver12" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver12.md>.\n\n# Objective\n\nEDNS is a mechanism to announce capabilities of a dns implementation,\nand is now basically required by any new functionality in dns such as\nDNSSEC ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891)).\n\n[RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891#section-6.1.4),\nsection 6.1.4, states that \"Z\" flag bits must be set to zero by senders\nand ignored by receiver.\n\n[IANA](https://www.iana.org/) lists the flags in the [EDNS Header\nFlags](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-13)\nassignment list.\n\nIn this test case, the query will have an unknown EDNS flag set, i.e.\none of the Z flag bits set to \"1\", and it is expected that all \"Z\" bits\nto be clear in the response (set to \"0\").\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nThe outcome of this Test case is \"pass\" in all other cases.\n\n  Message                 Default severity level\n  ----------------------- ----------------------------------\n  `ZM_NO_RESPONSE`        `ERROR` (changed from `DEBUG`)\n  `ZM_NO_EDNS_SUPPORT`    `ERROR` (changed from `WARNING`)\n  `ZM_NS_ERROR`           `ERROR` (changed from `WARNING`)\n  `ZM_Z_FLAGS_NOTCLEAR`   `ERROR` (changed from `WARNING`)\n",
         "Errors" : [
            "ZM_NO_RESPONSE",
            "ZM_NS_ERROR",
            "ZM_NO_EDNS_SUPPORT",
            "ZM_Z_FLAGS_NOTCLEAR"
         ],
         "Maturity" : "BETA",
         "Summary" : "Test for unknown EDNS flags"
      },
      "dns-nameserver13" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver13.md>.\n\n# Objective\n\nEDNS is a mechanism to announce capabilities of a DNS implementation,\nand is now basically required by any new functionality in DNS such as\nDNSSEC ([RFC 6891](https://datatracker.ietf.org/doc/html/rfc6891)).\n\n[RFC 6891, section\n7](https://datatracker.ietf.org/doc/html/rfc6891#section-7) states that\nan OPT record must be included in a truncated response, if the query\nincludes an OPT pseudo record.\n\nThis Test Case will try to verify that if the response to a query with\nan OPT record is truncated, then the response will contain an OPT\nrecord.\n\nTo trigger a truncated response, the OPT pseudo record 'DO' bit is set\nand the buffer size is limited to 512 bytes. If the zone is not signed\nwith DNSSEC, the response will probably not be truncated anyway.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nThe outcome of this Test case is \"pass\" in all other cases.\n\n  --------------------------------------------------------------------------\n  Message                         Default severity level (when message is\n                                  outputed)\n  ------------------------------- ------------------------------------------\n  `ZM_NO_RESPONSE`                `ERROR` (changed from `DEBUG`)\n\n  `ZM_NO_EDNS_SUPPORT`            `ERROR` (changed from `WARNING`)\n\n  `ZM_NS_ERROR`                   `ERROR` (changed from `WARNING`)\n\n  `ZM_MISSING_OPT_IN_TRUNCATED`   `ERROR` (changed from `WARNING`)\n  --------------------------------------------------------------------------\n",
         "Errors" : [
            "ZM_NO_RESPONSE",
            "ZM_NS_ERROR",
            "ZM_NO_EDNS_SUPPORT",
            "ZM_MISSING_OPT_IN_TRUNCATED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Test for truncated response on EDNS query"
      },
      "dns-nameserver14" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver14.md>.\n\n# Objective\n\nThis test case actually combines the test options in test cases\n[NAMESERVER10](nameserver10.md) and [NAMESERVER11](nameserver11.md).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nThe outcome of this Test case is \"pass\" in all other cases.\n\n  -----------------------------------------------------------------------\n  Message                      Default severity level (Output message)\n  ---------------------------- ------------------------------------------\n  `ZM_NO_RESPONSE`             `ERROR` (changed from `DEBUG`)\n\n  `ZM_NO_EDNS_SUPPORT`         `ERROR` (changed from `WARNING`)\n\n  `ZM_NS_ERROR`                `ERROR` (changed from `WARNING`)\n\n  `ZM_UNKNOWN_OPTION_CODE`     `ERROR` (changed from `WARNING`)\n\n  `ZM_UNSUPPORTED_EDNS_VER`    `ERROR` (changed from `WARNING`)\n  -----------------------------------------------------------------------\n",
         "Errors" : [
            "ZM_NO_RESPONSE",
            "ZM_UNSUPPORTED_EDNS_VER",
            "ZM_NS_ERROR",
            "ZM_NO_EDNS_SUPPORT",
            "ZM_UNKNOWN_OPTION_CODE"
         ],
         "Maturity" : "BETA",
         "Summary" : "Test for unknown version with unknown OPTION-CODE"
      },
      "dns-nameserver15" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Nameserver-TP/nameserver15.md>.\n\n# Objective\n\nThis Test Case verifies if a name server responds to TXT queries in the\nCHAOS class, specifically about its software version as it may sometimes\nbe desirable not to reveal that information.\n\nA description of DNS classes can be found in\n[RFC2929](https://datatracker.ietf.org/doc/html/rfc2929#section-3.2),\nsection 3.2.\n\n# Summary\n\n  -----------------------------------------------------------------------------------------------\n  Message Tag                 Level   Arguments     Message ID for message tag\n  --------------------------- ------- ------------- ---------------------------------------------\n  `ZM_N15_SOFTWARE_VERSION`   INFO    ns_ip_list,   The following name server(s) respond to\n                                      query_name,   software version query \"{query_name}\" with\n                                      string        string \"{string}\". Returned from name\n                                                    servers: \"{ns_ip_list}\"\n\n  `ZM_N15_NO_VERSION`         INFO    ns_ip_list    The following name server(s) do not respond\n                                                    to software version queries. Returned from\n                                                    name servers: \"{ns_ip_list}\"\n  -----------------------------------------------------------------------------------------------\n\nThe value in the Level column is the default severity level of the\nmessage. The severity level can be changed in the [Zonemaster-Engine\nProfile](../../../configuration/profiles.md). Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe argument names in the Arguments column lists the arguments used in\nthe message. The argument names are defined in the [Argument\nList](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *[ERROR](../SeverityLevelDefinitions.md#error)* or\n*[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_N15_SOFTWARE_VERSION",
            "ZM_N15_NO_VERSION"
         ],
         "Maturity" : "BETA",
         "Summary" : "Checking for revealed software version"
      },
      "dns-syntax04" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax04.md>.\n\n# Objective\n\nThe Name Server name must be a valid hostname according to the rules\ndefined in [RFC 952](https://datatracker.ietf.org/doc/html/rfc952), in\nsection 2.1 in [RFC\n1123](https://datatracker.ietf.org/doc/html/rfc1123#section-2.1),\nsection 11 in [RFC\n2182](https://datatracker.ietf.org/doc/html/rfc2181#section-11) and\nsection 2 and 5 in [RFC\n3696](https://datatracker.ietf.org/doc/html/rfc3696#section-2). Newer\nRFCs may override some rules defined in earlier documents.\n\n# Pass/fail criteria\n\nIf any of the steps 3 to 5 in the ordered description of this test case\nfails, the whole test case fails.\n",
         "Errors" : [
            "ZM_DNS_SYNTAX04_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "The NS name must have a valid domain/hostname"
      },
      "dns-syntax05" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax05.md>.\n\n# Objective\n\nThe SOA RNAME field does not allow the '@' characters to be used for\ndescribing a mailbox. The first dot ('.') is thus translated into the\n'@' character. This is a common mistake. The rules are defined in [RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035).\n\n# Pass/fail criteria\n\nIf there is any '@' character in any SOA/RNAME field, this test case\nfails.\n",
         "Errors" : [
            "ZM_DNS_SYNTAX05_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Misuse of '@' character in the SOA RNAME field"
      },
      "dns-syntax06" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax06.md>.\n\n# Objective\n\nThe SOA RNAME field is a mailbox address. The SOA RNAME field is defined\nin [RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035#section-3.3.13),\nsection 3.3.13 and in [RFC\n1912](https://datatracker.ietf.org/doc/html/rfc1912#section-2.2),\nsection 2.2. The RNAME field should follow the rules of an e-mail\naddress also defined in [RFC\n5322](https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1),\nsection 3.4.1.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  Message                            Default severity level\n  ---------------------------------- ----------------------------------\n  `ZM_NO_RESPONSE`                   `ERROR` (changed from `DEBUG`)\n  `ZM_NO_RESPONSE_SOA_QUERY`         `ERROR` (changed from `DEBUG`)\n  `ZM_RNAME_RFC822_INVALID`          `ERROR` (changed from `WARNING`)\n  `ZM_RNAME_MAIL_DOMAIN_INVALID`     `ERROR` (changed from `WARNING`)\n  `ZM_RNAME_MAIL_DOMAIN_LOCALHOST`   `ERROR` (changed from `WARNING`)\n  `ZM_RNAME_MAIL_ILLEGAL_CNAME`      `ERROR` (changed from `WARNING`)\n  `ZM_RNAME_RFC822_VALID`            INFO\n",
         "Errors" : [
            "ZM_NO_RESPONSE",
            "ZM_RNAME_MAIL_DOMAIN_LOCALHOST",
            "ZM_RNAME_RFC822_INVALID",
            "ZM_RNAME_RFC822_VALID",
            "ZM_NO_RESPONSE_SOA_QUERY",
            "ZM_RNAME_MAIL_ILLEGAL_CNAME",
            "ZM_RNAME_MAIL_DOMAIN_INVALID"
         ],
         "Maturity" : "BETA",
         "Summary" : "No illegal characters in the SOA RNAME field"
      },
      "dns-syntax07" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Syntax-TP/syntax07.md>.\n\n# Objective\n\nThe SOA MNAME field is a hostname. Hostnames are valid according to the\nrules defined in [RFC\n952](https://datatracker.ietf.org/doc/html/rfc952), in section 2.1 in\n[RFC 1123](https://datatracker.ietf.org/doc/html/rfc1123#section-2.1),\nsection 11 in [RFC\n2182](https://datatracker.ietf.org/doc/html/rfc2181#section-11) and\nsection 2 and 5 in [RFC\n3696](https://datatracker.ietf.org/doc/html/rfc3696#section-2). Newer\nRFCs may override some rules defined in earlier documents.\n\n# Pass/fail criteria\n\nIf any of the steps 4 to 8 in the ordered description of this test case\nfails, the whole test case fails.\n",
         "Errors" : [
            "ZM_DNS_SYNTAX07_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "No illegal characters in the SOA MNAME field"
      },
      "dns-zone01" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone01.md>.\n\n# Objective\n\nThe MNAME field from the SOA record of a zone is supposed to contain the\nmaster name server for that zone. The hostname of the MNAME field may\nnot be listed in the NS records in the zone among the delegated name\nservers, but should still be authoritative for the zone. MNAME may be\nused for other services such as DNS NOTIFY described in\n[RFC1996](https://datatracker.ietf.org/doc/html/rfc1996#section-2).\n\n[RFC1035](https://datatracker.ietf.org/doc/html/rfc1035#section-3.3.13),\nsection 3.3.13, specifies that \"the *domain-name* of the name server\nthat was the original or primary source of data for this zone\".\n\n[RFC1996](https://datatracker.ietf.org/doc/html/rfc1996#section-2),\nsection 2, and\n[RFC2136](https://datatracker.ietf.org/doc/html/rfc2136#section-1),\nsection 1, add that \"the primary master is named in the zone's SOA MNAME\nfield and optionally by an NS RR. There is by definition only one\nprimary master server per zone\".\n\n[RFC2181](https://datatracker.ietf.org/doc/html/rfc2181#section-7.3),\nsection 7.2, clarifies that \"it is quite clear in the specifications,\nyet seems to have been widely ignored, that the MNAME field of the SOA\nrecord should contain the name of the primary (master) server for the\nzone identified by the SOA. It should not contain the name of the zone\nitself. That information would be useless, as to discover it, one needs\nto start with the domain name of the SOA record - that is the name of\nthe zone\".\n\nThere exists an unstandardized practice to set the SOA MNAME to \".\",\nwhich should not be interpreted that there is no primary master server,\nbut to indicate that there is no default server for dynamic updates.\nWith \".\", SOA MNAME has no server name. There is at least one old and\nexpired Internet-Draft that attempted to standardize that behavior,\n[draft-jabley-dnsop-missing-mname](https://www.ietf.org/archive/id/draft-jabley-dnsop-missing-mname-00.html).\nIf the SOA MNAME is an empty name (\".\") this Test Case will not try to\nconnect to a server behind it since there will never be a server behind\nthat name, as the purpose is most definitely to follow that practice.\nInstead, a special message will be outputted.\n\nThis Test Case will check that: - the SOA MNAME contains the master name\nserver of *Child Zone*, as best as it can be determined. - the SOA MNAME\nname server is authoritative of *Child Zone*. - the SOA SERIAL of the\nSOA MNAME is at least equal to the ones found from the name servers in\nthe NS record set of *Child Zone*. This comparison must be done\nfollowing [RFC1982](https://datatracker.ietf.org/doc/html/rfc1982). -\nthe SOA MNAME name server is listed as part of the NS record set of\n*Child Zone*.\n\n# Summary\n\n  ----------------------------------------------------------------------------------------------------\n  Message Tag                         Level     Arguments        Message ID for message tag\n  ----------------------------------- --------- ---------------- -------------------------------------\n  `ZM_Z01_MNAME_HAS_LOCALHOST_ADDR`   WARNING   nsname, ns_ip    SOA MNAME name server \"{nsname}\"\n                                                                 resolves to a localhost IP address\n                                                                 ({ns_ip}).\n\n  `ZM_Z01_MNAME_IS_DOT`               NOTICE    ns_ip_list       SOA MNAME is specified as \".\" which\n                                                                 usually means \"no server\". Fetched\n                                                                 from name servers \"{ns_ip_list}\".\n\n  `ZM_Z01_MNAME_IS_LOCALHOST`         WARNING   ns_ip_list       SOA MNAME name server is \"localhost\",\n                                                                 which is invalid. Fetched from name\n                                                                 servers \"{ns_ip_list}\".\n\n  `ZM_Z01_MNAME_MISSING_SOA_RECORD`   WARNING   ns               SOA MNAME name server \"{ns}\" reponds\n                                                                 to an SOA query with no SOA records\n                                                                 in the answer section.\n\n  `ZM_Z01_MNAME_NO_RESPONSE`          WARNING   ns               SOA MNAME name server \"{ns}\" does not\n                                                                 respond to an SOA query.\n\n  `ZM_Z01_MNAME_NOT_AUTHORITATIVE`    WARNING   ns               SOA MNAME name server \"{ns}\" is not\n                                                                 authoritative for the zone.\n\n  `ZM_Z01_MNAME_NOT_IN_NS_LIST`       INFO      nsname           SOA MNAME name server \"{nsname}\" is\n                                                                 not listed as NS record for the zone.\n\n  `ZM_Z01_MNAME_NOT_MASTER`           WARNING   ns_list,         SOA MNAME name server(s) \"{ns_list}\"\n                                                soaserial,       do(es) not have the highest SOA\n                                                soaserial_list   SERIAL (expected \"{soaserial}\" but\n                                                                 got \"{soaserial_list}\")\n\n  `ZM_Z01_MNAME_NOT_RESOLVE`          WARNING   nsname           SOA MNAME name server \"{nsname}\"\n                                                                 cannot be resolved into an IP\n                                                                 address.\n\n  `ZM_Z01_MNAME_UNEXPECTED_RCODE`     WARNING   ns, rcode        SOA MNAME name server \"{ns}\" gives\n                                                                 unexpected RCODE name (\"{rcode}\") in\n                                                                 response to an SOA query.\n  ----------------------------------------------------------------------------------------------------\n\nThe value in the Level column is the default severity level of the\nmessage. The severity level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md). Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe argument names in the Arguments column lists the arguments used in\nthe message. The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_Z01_MNAME_HAS_LOCALHOST_ADDR",
            "ZM_Z01_MNAME_NOT_IN_NS_LIST",
            "ZM_Z01_MNAME_NO_RESPONSE",
            "ZM_Z01_MNAME_NOT_RESOLVE",
            "ZM_Z01_MNAME_IS_LOCALHOST",
            "ZM_Z01_MNAME_NOT_MASTER",
            "ZM_Z01_MNAME_NOT_AUTHORITATIVE",
            "ZM_Z01_MNAME_UNEXPECTED_RCODE",
            "ZM_Z01_MNAME_IS_DOT",
            "ZM_Z01_MNAME_MISSING_SOA_RECORD"
         ],
         "Maturity" : "BETA",
         "Summary" : "Fully qualified master nameserver in SOA"
      },
      "dns-zone02" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone02.md>.\n\n# Objective\n\nThe SOA refresh value is the number of seconds that describes how often\na secondary name server will poll the primary name server to see if\nthere is any updates. The SOA refresh value is described in section\n3.3.13 in [RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035), and\nclarified in section 2.2 of [RFC\n1912](https://datatracker.ietf.org/doc/html/rfc1912). Setting the\nrefresh value low will increase the DNS traffic between the servers, and\nalso increase the load on the master name server. The primary name\nserver will in most cases send DNS notifications to tell the secondary\nname servers that zone content has been updated, as described in [RFC\n1996](https://datatracker.ietf.org/doc/html/rfc1996).\n\nThe [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)\nrecommendation for the refresh value is 24 hours (86400 seconds). Older\nDNSCheck code had a four hour minimum value, and this is the minimum\nvalue we recommend.\n\n# Pass/fail criteria\n\nIf the SOA refresh value is less than 14400 this test case fails.\n",
         "Errors" : [
            "ZM_DNS_ZONE02_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "SOA 'refresh' minimum value"
      },
      "dns-zone03" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone03.md>.\n\n# Objective\n\nThe SOA retry value is the number of seconds that describes minimum time\nelapsed since a failed zone refresh from the primary name server. The\nSOA refresh value is described in section 3.3.13 in [RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035), and clarified in\nsection 2.2 of [RFC\n1912](https://datatracker.ietf.org/doc/html/rfc1912).\n\n> It's typically some fraction of the refresh interval.\n\nSetting the retry value low will increase the DNS traffic between the\nservers, and also increase the load on the master name server.\n\n# Pass/fail criteria\n\nIf the SOA retry value is higher than or equal to the refresh value,\nthis test case fails.\n",
         "Errors" : [
            "ZM_DNS_ZONE03_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "SOA 'retry' lower than 'refresh'"
      },
      "dns-zone04" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone04.md>.\n\n# Objective\n\nThe SOA retry value is the number of seconds that describes minimum time\nelapsed since a failed zone refresh from the primary name server. The\nSOA refresh value is described in section 3.3.13 in [RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035), and clarified in\nsection 2.2 of [RFC\n1912](https://datatracker.ietf.org/doc/html/rfc1912).\n\nSetting the retry value low will increase the DNS traffic between the\nservers, and also increase the load on the master name server.\n\nThe [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)\nrecommendation for the retry value is 2 hours (7200 seconds). Older\nDNSCheck code had a one hour minimum value (3600 seconds), and this is\nthe minimum value we recommend.\n\n# Pass/fail criteria\n\nIf the retry value is less than 3600 seconds, this test case fails.\n",
         "Errors" : [
            "ZM_DNS_ZONE04_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "SOA 'retry' at least 1 hour"
      },
      "dns-zone05" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone05.md>.\n\n# Objective\n\nThe SOA expire value specifies for how long any secondary name server\nkeeps the zone valid without any contact with the primary name server.\nThis value should be greater than how long a major outage would\ntypically last. The expire value should also be larger than the refresh\nand retry values, as described in section 3.3.13 in [RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035), and clarified in\nsection 2.2 of [RFC\n1912](https://datatracker.ietf.org/doc/html/rfc1912).\n\nSetting the expire value low will increase the risk of any unwanted\nnon-availability of the zone because of any failures in contacting the\nprimary name server.\n\nThe [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)\nrecommendation for the expire value is 1000 hours (roughly 41 days).\nOlder DNSCheck code had a 7 day minimum value (604800 seconds), and this\nis the minimum value we recommend as an absolut minimum.\n\n# Pass/fail criteria\n\nIf the expire value is less than 604800 seconds or if the expire value\nis lower than the refresh value, this test case fails.\n",
         "Errors" : [
            "ZM_DNS_ZONE05_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "SOA 'expire' minimum value"
      },
      "dns-zone06" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone06.md>.\n\n# Objective\n\nThe SOA minimum field sets the default TTL for all records in a zone.\nThe recommended value is to be \"cache-friendly\". However, for a zone\nthat changes content often, there is a need to keep the TTL values\nshorter. The use of the SOA minimum value today is the negative cache\n(where a resolver find content is missing).\n\nThe SOA minimum field is described in section 3.3.13 in [RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035), and clarified in\nsection 2.2 of [RFC\n1912](https://datatracker.ietf.org/doc/html/rfc1912). The description of\nthe implementation of negative caching is in [RFC\n2308](https://datatracker.ietf.org/doc/html/rfc2308) (although it has\nbeen updated by several DNSSEC related RFCs, it is still relevant for\nthis purpose).\n\nThe [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)\nrecommendation for the minimum value 2 days, but the negative caching is\nnow the norm. DNSCheck has a recommended value of between 300 seconds (5\nminutes) and 86400 seconds (1 day).\n\n# Pass/fail criteria\n\nIf the minimum value is larger than 86400 seconds or if the minimum\nvalue is lower than 300 seconds, this test case fails.\n",
         "Errors" : [
            "ZM_DNS_ZONE06_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "SOA 'minimum' maximum value"
      },
      "dns-zone07" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone07.md>.\n\n# Objective\n\nAny NS type record should not be a CNAME. The SOA MNAME should in this\nrespect not be a CNAME.\n\nQuote from 2.4 in [RFC\n1912](https://datatracker.ietf.org/doc/html/rfc1912):\n\n> Having NS records pointing to a CNAME is bad and may conflict badly\n> with current BIND servers.\n\nThe SOA MNAME field is described in section 3.3.13 in [RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035).\n\nThe [RIPE-203](https://www.ripe.net/publications/docs/ripe-203)\nrecommendation for the minimum value 2 days, but the negative caching is\nnow the norm. DNSCheck has a recommended value of between 300 seconds (5\nminutes) and 86400 seconds (1 day).\n\n# Pass/fail criteria\n\nIf the SOA MNAME field is pointing to a CNAME, this test case fails.\n",
         "Errors" : [
            "ZM_DNS_ZONE07_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "SOA master is not an alias"
      },
      "dns-zone10" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/Zone-TP/zone10.md>.\n\n# Objective\n\nThe SOA record is crucial for the DNS zone and \"exactly one SOA RR\nshould be present at the top of the zone\" ([RFC\n1035](https://datatracker.ietf.org/doc/html/rfc1035#section-5.2),\nsection 5.2). This test case will verify that the zone of the domain to\nbe tested return exactly one SOA record.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  Message                   Default severity level\n  ------------------------- --------------------------------\n  `ZM_MULTIPLE_SOA`         ERROR\n  `ZM_NO_RESPONSE`          `ERROR` (changed from `DEBUG`)\n  `ZM_NO_SOA_IN_RESPONSE`   `ERROR` (changed from `DEBUG`)\n  `ZM_ONE_SOA`              INFO\n  `ZM_WRONG_SOA`            `ERROR` (changed from `DEBUG`)\n",
         "Errors" : [
            "ZM_MULTIPLE_SOA",
            "ZM_WRONG_SOA",
            "ZM_NO_SOA_IN_RESPONSE",
            "ZM_NO_RESPONSE",
            "ZM_ONE_SOA"
         ],
         "Maturity" : "BETA",
         "Summary" : "No multiple SOA records"
      },
      "dnssec-01" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec01.md>.\n\n# Objective\n\nThe list of allowed Digest Algorithms in a DS record published by the\nparent is specified by [RFC\n8624](https://datatracker.ietf.org/doc/html/rfc8624#section-3.3),\nsection 3.3, and is published in the [IANA\nregistry](https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xml)\nof *DS RR Type Digest Algorithms*. No DS Digest Algorithm values, other\nthan those specified in the RFC and allocated by IANA, should be used in\npublic DNS.\n\nIf [RFC 8624](https://datatracker.ietf.org/doc/html/rfc8624#section-3.3)\nand the [IANA\nregistry](https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xml)\ndisagree on the same DS digest algorithm, the RFC takes precedence until\nthe registry has a been updated with a reference to the RFC.\n\nThe table of algorithms below is for reference only and is copied from\n[IANA\nregistry](https://www.iana.org/assignments/ds-rr-types/ds-rr-types.xml).\nIt is here to make it easier to read the steps when symbolic names are\ngiven. This is only an excerpt from the table. The full table is\navailable at the IANA registry.\n\n  Algorithm number   Algorithm (or description)\n  ------------------ ----------------------------\n  0                  (Reserved)\n  1                  SHA-1\n  2                  SHA-256\n  3                  GOST R 34.11-94\n  4                  SHA-384\n  5-255              (Unassigned)\n\nThis test case will verify that the Zonemaster implementation has\nsupport for the DS digest algorithm of the DS record found, and if not\noutput a message tag. If the support is missing other test cases will\nnot be able to verify that DS record.\n\n# Summary\n\n-   At least one DS record must be found, or no further investigation\n    will be done and no messages will be outputted.\n-   No messages will be outputted due to errors in the responses from\n    the parent name servers.\n\n  ---------------------------------------------------------------------------------------------------\n  Message Tag outputted                  Level       Arguments               Description of when\n                                                                             message tag is outputted\n  -------------------------------------- ----------- ----------------------- ------------------------\n  `ZM_DS01_DIGEST_NOT_SUPPORTED_BY_ZM`   NOTICE      ns_ip_list, algo_mnemo, DS Digest cannot be\n                                                     algo_num, keytag        validated by this\n                                                                             installation of\n                                                                             Zonemaster.\n\n  `ZM_DS01_DS_ALGO_DEPRECATED`           ERROR       ns_ip_list, algo_mnemo, The DS digest algorithm\n                                                     algo_num, keytag        is deprecated.\n\n  `ZM_DS01_DS_ALGO_2_MISSING`            `ERROR`                             DS created with algo 2\n                                         (changed                            (SHA-256) is missing.\n                                         from                                \n                                         `NOTICE`)                           \n\n  `ZM_DS01_DS_ALGO_NOT_DS`               ERROR       ns_ip_list, algo_mnemo, The DS digest algorithm\n                                                     algo_num, keytag        is not for DS.\n\n  `ZM_DS01_DS_ALGO_RESERVED`             ERROR       ns_ip_list, algo_mnemo, No DS digest algorithm\n                                                     algo_num, keytag        defined for the digest\n                                                                             code.\n  ---------------------------------------------------------------------------------------------------\n\nThe value in the Level column is the default severity level of the\nmessage. The severity level can be overridden in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md). Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe argument names in the Arguments column lists the arguments used in\nthe message. The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_DS01_DIGEST_NOT_SUPPORTED_BY_ZM",
            "ZM_DS01_DS_ALGO_RESERVED",
            "ZM_DS01_DS_ALGO_2_MISSING",
            "ZM_DS01_DS_ALGO_DEPRECATED",
            "ZM_DS01_DS_ALGO_NOT_DS"
         ],
         "Maturity" : "BETA",
         "Summary" : "Legal values for the DS hash digest algorithm"
      },
      "dnssec-02" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec02.md>.\n\n# Objective\n\nDNS delegations from a parent to a child are secured with DNSSEC by\npublishing one or several Delegation Signer (DS) records in the parent\nzone, along with the NS records for the delegation.\n\nFor the secure delegation to work, at least one DS record must match a\nDNSKEY record in the child zone ([RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-5), section\n5). Each DS record should match a DNSKEY record in the child zone. More\nthan one DS may match the same DNSKEY. The DNSKEY that the DS record\nrefer to must be used to sign the DNSKEY RRset in the child zone ([RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-5), section\n5).\n\nThe DNSKEY record that the DS record refer to must have bit 7 (\"Zone Key\nflag\") set in the DNSKEY RR Flags ([RFC\n4034](https://datatracker.ietf.org/doc/html/rfc4034#section-5.2),\nsection 5.2).\n\nBit 15 (\"Secure Entry Point flag\") on a DNSKEY record signals that it is\nmeant to be a KSK and pointed out by a DS record. It is noted if the\nDNSKEY record that the DS points at does not have that flag set ([RFC\n4034](https://datatracker.ietf.org/doc/html/rfc4034#section-2.1.1),\nsection 2.1.1).\n\n# Summary\n\n-   Both DS record and DNSKEY record must be found, or else no further\n    investigation will be done and no messages will be outputted.\n-   No messages will be outputted due to errors in the responses from\n    the parent name servers.\n\n  -------------------------------------------------------------------------------------------------------\n  Message Tag outputted                   Level        Arguments         Description of when message tag\n                                                                         is outputted\n  --------------------------------------- ------------ ----------------- --------------------------------\n  `ZM_DS02_ALGO_NOT_SUPPORTED_BY_ZM`      NOTICE       ns_ip_list,       DNSKEY with tag {keytag} uses\n                                                       algo_mnemo,       unsupported algorithm {algo_num}\n                                                       algo_num, keytag  ({algo_mnemo}) by this\n                                                                         installation of Zonemaster.\n                                                                         Fetched from the nameservers\n                                                                         with IP addresses\n                                                                         \"{ns_ip_list}\".\n\n  `ZM_DS02_DNSKEY_NOT_FOR_ZONE_SIGNING`   ERROR        ns_ip_list,       Flags field of DNSKEY record\n                                                       keytag            with tag {keytag} does not have\n                                                                         ZONE bit set although DS with\n                                                                         same tag is present in parent.\n                                                                         Fetched from the nameservers\n                                                                         with IP addresses\n                                                                         \"{ns_ip_list}\".\n\n  `ZM_DS02_DNSKEY_NOT_SEP`                `ERROR`      ns_ip_list,       Flags field of DNSKEY record\n                                          (changed     keytag            with tag {keytag} does not have\n                                          from                           SEP bit set although DS with\n                                          `NOTICE`)                      same tag is present in parent.\n                                                                         Fetched from the nameservers\n                                                                         with IP addresses\n                                                                         \"{ns_ip_list}\".\n\n  `ZM_DS02_DNSKEY_NOT_SIGNED_BY_ANY_DS`   ERROR        ns_ip_list        The DNSKEY RRset has not been\n                                                                         signed by any DNSKEY matched by\n                                                                         a DS record. Fetched from the\n                                                                         nameservers with IP addresses\n                                                                         \"{ns_ip_list}\".\n\n  `ZM_DS02_NO_DNSKEY_FOR_DS`              `ERROR`      ns_ip_list,       The DNSKEY record with tag\n                                          (changed     keytag            {keytag} that the DS refers to\n                                          from                           does not exist in the DNSKEY\n                                          `WARNING`)                     RRset. Fetched from the\n                                                                         nameservers with IP\n                                                                         \"{ns_ip_list}\".\n\n  `ZM_DS02_NO_MATCHING_DNSKEY_RRSIG`      `ERROR`      ns_ip_list,       The DNSKEY RRset is not signed\n                                          (changed     keytag            by the DNSKEY with tag {keytag}\n                                          from                           that the DS record refers to.\n                                          `WARNING`)                     Fetched from the nameservers\n                                                                         with IP \"{ns_ip_list}\".\n\n  `ZM_DS02_NO_MATCH_DS_DNSKEY`            ERROR        ns_ip_list,       The DS record does not match the\n                                                       keytag            DNSKEY with tag {keytag} by\n                                                                         algorithm or digest. Fetched\n                                                                         from the nameservers with IP\n                                                                         \"{ns_ip_list}\".\n\n  `ZM_DS02_NO_VALID_DNSKEY_FOR_ANY_DS`    ERROR        ns_ip_list        There is no valid DNSKEY matched\n                                                                         by any of the DS records.\n                                                                         Fetched from the nameservers\n                                                                         with IP addresses\n                                                                         \"{ns_ip_list}\".\n\n  `ZM_DS02_RRSIG_NOT_VALID_BY_DNSKEY`     ERROR        ns_ip_list,       The DNSKEY RRset is signed with\n                                                       keytag            an RRSIG with tag {keytag} which\n                                                                         cannot be validated by the\n                                                                         matching DNSKEY. Fetched from\n                                                                         the nameservers with IP\n                                                                         addresses \"{ns_ip_list}\".\n  -------------------------------------------------------------------------------------------------------\n\nThe value in the Level column is the default severity level of the\nmessage. The severity level can be overridden in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md). Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe argument names in the Arguments column lists the arguments used in\nthe message. The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_DS02_ALGO_NOT_SUPPORTED_BY_ZM",
            "ZM_DS02_NO_MATCH_DS_DNSKEY",
            "ZM_DS02_NO_DNSKEY_FOR_DS",
            "ZM_DS02_RRSIG_NOT_VALID_BY_DNSKEY",
            "ZM_DS02_DNSKEY_NOT_SEP",
            "ZM_DS02_NO_VALID_DNSKEY_FOR_ANY_DS",
            "ZM_DS02_NO_MATCHING_DNSKEY_RRSIG",
            "ZM_DS02_DNSKEY_NOT_FOR_ZONE_SIGNING",
            "ZM_DS02_DNSKEY_NOT_SIGNED_BY_ANY_DS"
         ],
         "Maturity" : "BETA",
         "Summary" : "DS must match a valid DNSKEY in the child zone"
      },
      "dnssec-03" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec03.md>.\n\n# Objective\n\nFor an authoritative name server an increased number of NSEC3 iterations\nhave a negative impact on performance.\n\nSection 10.3 in [RFC\n5155](https://datatracker.ietf.org/doc/html/rfc5155#section-10.3) sets a\nmaximum number of iterations depending on the DNSSEC key size -\nregardless of which algorithm is used.\n\n> A zone owner MUST NOT use a value higher than shown in the table below\n> for iterations for the given key size. A resolver MAY treat a response\n> with a higher value as insecure, after the validator has verified that\n> the signature over the NSEC3 RR is correct.\n\n  Key Size   Iterations\n  ---------- ------------\n  1024       150\n  2048       500\n  4096       2,500\n\nSection 5.3.2 in [RFC\n6781](https://datatracker.ietf.org/doc/html/rfc6781#section-5.3.2)\ndescribes the consequences for an authoritative name server in more\ndetail, and references the [NSEC Hash\nPerformance](https://www.nlnetlabs.nl/downloads/publications/nsec3_hash_performance.pdf)\nstudy from NLNet Labs.\n\n> Choosing a value of 100 iterations is deemed to be a sufficiently\n> costly, yet not excessive, value: In the worst-case scenario, the\n> performance of name servers would be halved, regardless of key size.\n\n# Pass/fail criteria\n\nIf the NSEC3 iterations value is higher than 100, this test case gives a\nwarning. If it is higher than the number recommended for the\ncorresponding key size, this test case fails.\n",
         "Errors" : [
            "ZM_DNSSEC_03_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Check for too many NSEC3 iterations"
      },
      "dnssec-04" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec04.md>.\n\n# Objective\n\nHaving RRSIG signature lifetimes last for too long opens up for DNS\nreplay attacks. Having too short RRSIG signature lifetimes is likely to\nhave a major operational impact if the master name server is down for\nthat long.\n\nThere is no clear recommendation of the exact validity periods to use\nwith DNSSEC. Shorter validity than 12 hours until expiration will give a\nserious operational problem just in case of temporary network problems,\nand longer than 180 days will create wide open holes for replay attacks.\n\nThe considerations are described in\n[RFC6781](https://datatracker.ietf.org/doc/html/rfc6781).\n\n# Pass/fail criteria\n\nIf any of the signature expirations time is either shorter than 12 hours\nor longer than 180 days, this test case fails.\n",
         "Errors" : [
            "ZM_DNSSEC_04_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Check for too short or too long RRSIG lifetimes"
      },
      "dnssec-05" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec05.md>.\n\n# Objective\n\nA domain name (zone) should only use DNSKEY algorithms that are\nspecified by [RFC\n8624](https://www.rfc-editor.org/rfc/rfc8624.html#section-3.1), section\n3.1 and the [IANA\nregistry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml)\nof *DNSSEC Algorithm Numbers* to be used for DNSSEC signing. A public\ndomain name (zone) should not use private algorithms.\n\nIf [RFC 8624](https://www.rfc-editor.org/rfc/rfc8624.html#section-3.1)\nand [IANA\nregistry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml)\ndisagree on the same algorithm, the RFC takes precedence until the\nregistry has a been updated with a reference to the RFC.\n\nThe table of algorithms below is for reference only and is copied from\n[IANA\nregistry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml).\nIt is here to make it easier to read the steps when symbolic names are\ngiven. This is only an excerpt from the table. The full table is\navailable at [IANA\nregistry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml).\n\n  Algorithm number   Algorithm (or description)\n  ------------------ --------------------------------\n  0                  (Delete DS)\n  1                  RSA/MD5\n  2                  Diffie-Hellman\n  3                  DSA/SHA1\n  4                  (Reserved)\n  5                  RSA/SHA-1\n  6                  DSA-NSEC3-SHA1\n  7                  RSASHA1-NSEC3-SHA1\n  8                  RSA/SHA-256\n  9                  (Reserved)\n  10                 RSA/SHA-512\n  11                 (Reserved)\n  12                 GOST R 34.10-2001\n  13                 ECDSA Curve P-256 with SHA-256\n  14                 ECDSA Curve P-384 with SHA-384\n  15                 Ed25519\n  16                 Ed448\n  17-122             (Unassigned)\n  123-251            (Reserved)\n  252                (Indirect Keys)\n  253                (Private algorithm)\n  254                (Private algorithm OID)\n  255                (Reserved)\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  Message                          Default severity level\n  -------------------------------- ----------------------------------\n  `ZM_NO_RESPONSE`                 `ERROR` (changed from `DEBUG`)\n  `ZM_NO_RESPONSE_DNSKEY`          `ERROR` (changed from `WARNING`)\n  `ZM_ALGORITHM_DEPRECATED`        ERROR\n  `ZM_ALGORITHM_RESERVED`          ERROR\n  `ZM_ALGORITHM_UNASSIGNED`        ERROR\n  `ZM_ALGORITHM_NOT_RECOMMENDED`   WARNING\n  `ZM_ALGORITHM_PRIVATE`           ERROR\n  `ZM_ALGORITHM_NOT_ZONE_SIGN`     ERROR\n  `ZM_ALGORITHM_OK`                INFO\n",
         "Errors" : [
            "ZM_NO_RESPONSE",
            "ZM_ALGORITHM_PRIVATE",
            "ZM_ALGORITHM_UNASSIGNED",
            "ZM_ALGORITHM_OK",
            "ZM_ALGORITHM_DEPRECATED",
            "ZM_ALGORITHM_NOT_ZONE_SIGN",
            "ZM_ALGORITHM_NOT_RECOMMENDED",
            "ZM_NO_RESPONSE_DNSKEY",
            "ZM_ALGORITHM_RESERVED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Check for invalid DNSKEY algorithms"
      },
      "dnssec-06" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec06.md>.\n\n# Objective\n\nIn order for an authoritative name server to be DNSSEC compliant, it\nmust serve DNSSEC signatures (RRSIG) as additional data in a DNS answer.\nThis additional processing is described in section 3.1 of [RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-3.1).\n\n# Pass/fail criteria\n\nIf any of the name servers configured for the domains fail to answer\nwith DNSSEC data, this test case fails.\n",
         "Errors" : [
            "ZM_DNSSEC_06_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Verify DNSSEC additional processing"
      },
      "dnssec-08" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec08.md>.\n\n# Objective\n\nA DNSSEC signed zone should have a DNSKEY RRset in the zone apex ([RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.1),\nsection 2.1) and that RRset should be signed by a key that matches one\nof the records in the DNSKEY RRset ([RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.2),\nsection 2.2).\n\nThis test case will verify if the *Child Zone* meets that requirement.\n\n# Summary\n\n-   If no DNSKEY records are found, then further investigation will not\n    be done and no messages will be outputted.\n\n  -------------------------------------------------------------------------------------------\n  Message Tag outputted                  Level    Arguments     Description of when message\n                                                                tag is outputted\n  -------------------------------------- -------- ------------- -----------------------------\n  `ZM_DS08_ALGO_NOT_SUPPORTED_BY_ZM`     NOTICE   ns_ip_list,   This installation of\n                                                  algo_mnemo,   Zonemaster does not support\n                                                  algo_num,     the DNSKEY algorithm.\n                                                  keytag        \n\n  `ZM_DS08_DNSKEY_RRSIG_EXPIRED`         ERROR    ns_ip_list,   DNSKEY RRset is signed with\n                                                  keytag        an RRSIG that has expired.\n\n  `ZM_DS08_DNSKEY_RRSIG_NOT_YET_VALID`   ERROR    ns_ip_list,   DNSKEY RRset is signed with a\n                                                  keytag        not yet valid RRSIG.\n\n  `ZM_DS08_MISSING_RRSIG_IN_RESPONSE`    ERROR    ns_ip_list    DNSKEY is unsigned which is\n                                                                against expectation.\n\n  `ZM_DS08_NO_MATCHING_DNSKEY`           ERROR    ns_ip_list,   DNSKEY RRset is signed with\n                                                  keytag        an RRSIG that does not match\n                                                                any DNSKEY.\n\n  `ZM_DS08_RRSIG_NOT_VALID_BY_DNSKEY`    ERROR    ns_ip_list,   DNSKEY RRset is signed with\n                                                  keytag        an RRSIG that cannot be\n                                                                validated by the matching\n                                                                DNSKEY.\n  -------------------------------------------------------------------------------------------\n\nThe value in the Level column is the default severity level of the\nmessage. The severity level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md). Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe argument names in the Arguments column lists the arguments used in\nthe message. The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_DS08_ALGO_NOT_SUPPORTED_BY_ZM",
            "ZM_DS08_NO_MATCHING_DNSKEY",
            "ZM_DS08_DNSKEY_RRSIG_NOT_YET_VALID",
            "ZM_DS08_RRSIG_NOT_VALID_BY_DNSKEY",
            "ZM_DS08_DNSKEY_RRSIG_EXPIRED",
            "ZM_DS08_MISSING_RRSIG_IN_RESPONSE"
         ],
         "Maturity" : "BETA",
         "Summary" : "Valid RRSIG for DNSKEY"
      },
      "dnssec-09" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec09.md>.\n\n# Objective\n\nIf the zone is signed, the SOA RR should be signed with a valid RRSIG\nusing a DNSKEY from the DNSKEY RR set. This is described in [RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.2),\nsection 2.2.\n\nThis test case will verify if the *Child Zone* meets that requirement.\n\n# Summary\n\n-   If no DNSKEY records are found, then further investigation will not\n    be done and no messages will be outputted.\n\n  ------------------------------------------------------------------------------------------\n  Message Tag outputted                 Level    Arguments     Description of when message\n                                                               tag is outputted\n  ------------------------------------- -------- ------------- -----------------------------\n  `ZM_DS09_ALGO_NOT_SUPPORTED_BY_ZM`    NOTICE   ns_ip_list,   This installation of\n                                                 algo_mnemo,   Zonemaster does not support\n                                                 algo_num,     the DNSKEY algorithm.\n                                                 keytag        \n\n  `ZM_DS09_MISSING_RRSIG_IN_RESPONSE`   ERROR    ns_ip_list    SOA is unsigned which is\n                                                               against expectation\n\n  `ZM_DS09_NO_MATCHING_DNSKEY`          ERROR    ns_ip_list,   SOA is signed with an RRSIG\n                                                 keytag        that does not match any\n                                                               DNSKEY\n\n  `ZM_DS09_RRSIG_NOT_VALID_BY_DNSKEY`   ERROR    ns_ip_list,   SOA is signed with an RRSIG\n                                                 keytag        that cannot be validated by\n                                                               the matching DNSKEY\n\n  `ZM_DS09_SOA_RRSIG_EXPIRED`           ERROR    ns_ip_list,   SOA is signed with an RRSIG\n                                                 keytag        that has expired\n\n  `ZM_DS09_SOA_RRSIG_NOT_YET_VALID`     ERROR    ns_ip_list,   SOA is signed with a not yet\n                                                 keytag        valid RRSIG\n  ------------------------------------------------------------------------------------------\n\nThe value in the Level column is the default severity level of the\nmessage. The severity level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md). Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe argument names in the Arguments column lists the arguments used in\nthe message. The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_DS09_ALGO_NOT_SUPPORTED_BY_ZM",
            "ZM_DS09_SOA_RRSIG_EXPIRED",
            "ZM_DS09_NO_MATCHING_DNSKEY",
            "ZM_DS09_SOA_RRSIG_NOT_YET_VALID",
            "ZM_DS09_MISSING_RRSIG_IN_RESPONSE",
            "ZM_DS09_RRSIG_NOT_VALID_BY_DNSKEY"
         ],
         "Maturity" : "BETA",
         "Summary" : "RRSIG(SOA) must be valid and created by a valid DNSKEY"
      },
      "dnssec-10" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec10.md>.\n\n# Objective\n\nWhen DNSSEC is enabled, NSEC or NSEC3 records provide a secure denial of\nexistence for records not present in the zone. This test case verifies\nthat correct NSEC or NSEC3 records with valid signatures are returned\nfor a query for an non-existent name.\n\nFurthermore, it is verified that the name servers for the zone are\nconsistent about NSEC and NSEC3, i.e. either all servers should use NSEC\nor all servers should use NSEC3. It is never permitted to serve both\nNSEC and NSEC3 for the same zone.\n\nThe use of the NSEC RR type is described in [RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-3.1.3),\nsection 3.1.3, and the description of the NSEC RR itself is in [RFC\n4034](https://datatracker.ietf.org/doc/html/rfc4034#section-4), section\n4.\n\nThe description of the NSEC3 RR is in [RFC\n5155](https://datatracker.ietf.org/doc/html/rfc5155#section-3), section\n3, and its use in the DNS response is described in [RFC\n5155](https://datatracker.ietf.org/doc/html/rfc5155#section-7.2),\nsection 7.2.\n\n# Summary\n\n-   If no DNSKEY records are found, then further investigation will not\n    be done and no messages will be outputted.\n\n  ----------------------------------------------------------------------------------------------\n  Message Tag outputted                   Level    Arguments     Description of when message tag\n                                                                 is outputted\n  --------------------------------------- -------- ------------- -------------------------------\n  `ZM_DS10_ALGO_NOT_SUPPORTED_BY_ZM`      NOTICE   ns_ip_list,   This installation of Zonemaster\n                                                   algo_mnemo,   does not support the DNSKEY\n                                                   algo_num,     algorithm.\n                                                   keytag        \n\n  `ZM_DS10_ANSWER_VERIFY_ERROR`           ERROR    ns_ip_list,   RRSIG on record or records in\n                                                   domain,       answer section cannot be\n                                                   rrtype        verified.\n\n  `ZM_DS10_HAS_NSEC`                      INFO                   Consistent NSEC returned from\n                                                                 servers.\n\n  `ZM_DS10_HAS_NSEC3`                     INFO                   Consistent NSEC3 returned from\n                                                                 servers.\n\n  `ZM_DS10_INCONSISTENT_NSEC_NSEC3`       ERROR    2 ns_ip_list  Some servers return NSEC,\n                                                                 others return NSEC3.\n\n  `ZM_DS10_MISSING_NSEC_NSEC3`            ERROR    ns_ip_list    Missing expected NSEC or NSEC3\n                                                                 in a signed zone.\n\n  `ZM_DS10_MIXED_NSEC_NSEC3`              ERROR    ns_ip_list    Both NSEC and NSEC3 are\n                                                                 returned from the same server.\n\n  `ZM_DS10_NAME_NOT_COVERED_BY_NSEC`      ERROR    ns_ip_list    The non-existent name is not\n                                                                 correctly covered by the NSEC\n                                                                 records.\n\n  `ZM_DS10_NAME_NOT_COVERED_BY_NSEC3`     ERROR    ns_ip_list    The non-existent name is not\n                                                                 correctly covered by the NSEC3\n                                                                 records.\n\n  `ZM_DS10_NON_EXISTENT_RESPONSE_ERROR`   ERROR    ns_ip_list    No or error in response of an\n                                                                 expected non-existent name.\n\n  `ZM_DS10_NSEC3_MISSING_SIGNATURE`       ERROR    ns_ip_list    Missing signatures for NSEC3\n                                                                 record or records.\n\n  `ZM_DS10_NSEC3_RRSIG_VERIFY_ERROR`      ERROR    ns_ip_list    The signature or signatures on\n                                                                 the NSEC3 record or records\n                                                                 cannot be correctly verfied.\n\n  `ZM_DS10_NSEC_MISSING_SIGNATURE`        ERROR    ns_ip_list    Missing signatures for NSEC\n                                                                 record or records.\n\n  `ZM_DS10_NSEC_RRSIG_VERIFY_ERROR`       ERROR    ns_ip_list    The signature or signatures on\n                                                                 the NSEC record or records\n                                                                 cannot be correctly verfied.\n\n  `ZM_DS10_UNSIGNED_ANSWER`               ERROR    ns_ip_list,   RRSIG is missing for record or\n                                                   domain,       records in the answer section.\n                                                   rrtype        \n  ----------------------------------------------------------------------------------------------\n\nThe value in the Level column is the default severity level of the\nmessage. The severity level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md). Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe argument names in the Arguments column lists the arguments used in\nthe message. The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_DS10_ALGO_NOT_SUPPORTED_BY_ZM",
            "ZM_DS10_NAME_NOT_COVERED_BY_NSEC3",
            "ZM_DS10_INCONSISTENT_NSEC_NSEC3",
            "ZM_DS10_NSEC_MISSING_SIGNATURE",
            "ZM_DS10_HAS_NSEC",
            "ZM_DS10_NSEC3_MISSING_SIGNATURE",
            "ZM_DS10_MIXED_NSEC_NSEC3",
            "ZM_DS10_UNSIGNED_ANSWER",
            "ZM_DS10_ANSWER_VERIFY_ERROR",
            "ZM_DS10_NON_EXISTENT_RESPONSE_ERROR",
            "ZM_DS10_MISSING_NSEC_NSEC3",
            "ZM_DS10_NSEC_RRSIG_VERIFY_ERROR",
            "ZM_DS10_HAS_NSEC3",
            "ZM_DS10_NSEC3_RRSIG_VERIFY_ERROR",
            "ZM_DS10_NAME_NOT_COVERED_BY_NSEC"
         ],
         "Maturity" : "BETA",
         "Summary" : "Zone contains NSEC or NSEC3 records"
      },
      "dnssec-12" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec12.md>.\n\n# Objective\n\nThe objectives for this Test Case has yet to be defined. This is a\nplaceholder for a complete defintion of the Test Case. The Test Case is\nnot yet implemented.\n\nTest for DNSSEC Algorithm Completeness (DS-\\>DNSKEY-\\>RRSIG)\n\nSee issues [#588](https://github.com/zonemaster/zonemaster/issues/588),\n[#528](https://github.com/zonemaster/zonemaster/issues/528),\n[#529](https://github.com/zonemaster/zonemaster/issues/529) and\n[#231](https://github.com/zonemaster/zonemaster/issues/231).\n\n# Pass/fail criteria\n\nTBD.\n",
         "Errors" : [
            "ZM_DNSSEC_12_FAILED"
         ],
         "Maturity" : "BETA",
         "Summary" : "Test for DNSSEC Algorithm Completeness"
      },
      "dnssec-13" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec13.md>.\n\n# Objective\n\nFrom [RFC\n6840](https://datatracker.ietf.org/doc/html/rfc6840#section-5.11),\nsection 5.11:\n\n> The DS RRset and DNSKEY RRset are used to signal which algorithms are\n> used to sign a zone. \\[...\\] The zone MUST also be signed with each\n> algorithm (though not each key) present in the DNSKEY RRset. \\[...\\]\n\nTo verify that the whole zone is signed with all algorithms require\naccess to the complete zone, which is generally not possible for public\nzones. This test case is limited to three RRsets that must be present in\na signed zone, the SOA RRset, the NS RRset and the DNSKEY RRset.\n\nThis test case will verify that for each DNSKEY algorithm, there is a\nRRSIG of that algorithm for the three selected RRsets.\n\n# Summary\n\n-   If the name server reports no DNSKEY RRset, then this test case will\n    not test or report anything.\n-   This test case will not report anything unless there is an issue to\n    report.\n\n  ----------------------------------------------------------------------------------------------\n  Message Tag outputted              Level        Arguments           Description of when\n                                                                      message tag is outputted\n  ---------------------------------- ------------ ------------------- --------------------------\n  `ZM_DS13_ALGO_NOT_SIGNED_DNSKEY`   `ERROR`      ns_ip_list,         The DNSKEY RRset is not\n                                     (changed     algo_mnemo,         signed with an algorithm\n                                     from         algo_num            present in the DNSKEY\n                                     `WARNING`)                       RRset\n\n  `ZM_DS13_ALGO_NOT_SIGNED_NS`       `ERROR`      ns_ip_list,         The NS RRset is not signed\n                                     (changed     algo_mnemo,         with an algorithm present\n                                     from         algo_num            in the DNSKEY RRset\n                                     `WARNING`)                       \n\n  `ZM_DS13_ALGO_NOT_SIGNED_SOA`      `ERROR`      ns_ip_list,         The SOA RRset is not\n                                     (changed     algo_mnemo,         signed with an algorithm\n                                     from         algo_num            present in the DNSKEY\n                                     `WARNING`)                       RRset\n  ----------------------------------------------------------------------------------------------\n\nThe value in the Level column is the default severity level of the\nmessage. The severity level can be changed in the [Zonemaster-Engine\nprofile](../../../configuration/profiles.md). Also see the [Severity\nLevel Definitions](../SeverityLevelDefinitions.md) document.\n\nThe argument names in the Arguments column lists the arguments used in\nthe message. The argument names are defined in the [argument\nlist](https://github.com/zonemaster/zonemaster-engine/blob/master/docs/logentry_args.md).\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_DS13_ALGO_NOT_SIGNED_DNSKEY",
            "ZM_DS13_ALGO_NOT_SIGNED_SOA",
            "ZM_DS13_ALGO_NOT_SIGNED_NS"
         ],
         "Maturity" : "BETA",
         "Summary" : "All DNSKEY algorithms used to sign the zone"
      },
      "dnssec-14" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec14.md>.\n\n# Objective\n\nThe DNSKEYs based on RSA have different minimum and maximum key sizes,\nwhich must be followed. This test case will validate the keys size of\nsuch keys. RSA based algorithms that are deprecated or else not suitable\nfor DNSKEY ([RFC\n8624](https://www.rfc-editor.org/rfc/rfc8624.html#section-3.1) and [IANA\nregistry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml))\nare just ignored. See test case [DNSSEC05](./dnssec05.md) for test of\nalgorithm.\n\nThe table 1 below specify the maximum and minimum key size,\nrespectively. Algorithm number can be found in [IANA\nregistry](https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xml).\n\nTable 1: Minimum and maximum RSA key sizes in bits\n\n  Algorithm   Min size   Max size   Reference\n  ----------- ---------- ---------- ---------------------------------------------------------------------\n  5           512        4096       [RFC 3110](https://datatracker.ietf.org/doc/html/rfc3110)\n  7           512        4096       [RFC 5155](https://datatracker.ietf.org/doc/html/rfc5155)\n  8           512        4096       [RFC 5702](https://datatracker.ietf.org/doc/html/rfc5702#section-2)\n  10          1024       4096       [RFC 5702](https://datatracker.ietf.org/doc/html/rfc5702#section-2)\n\nIt is also recommended that an RSA based algorithm has a key length of\nat least 2048 bit as stated in [NIST SP 800-57 Part 1\nRev. 4](https://csrc.nist.gov/publications/detail/sp/800-57-part-1/rev-4/archive/2016-01-28),\ntable 2 on page 53 in section 5.6.1 and table 4 on page 55 in section\n5.6.2.\n\nThis test case verifies that RSA DNSKEYs follows the stated key lengths\nfrom the RFCs and also the NIST recommended shortest key length.\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *ERROR* or *CRITICAL*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level *WARNING*, but no message with severity\nlevel *ERROR* or *CRITICAL*.\n\nIn other cases the outcome of this Test Case is \"pass\".\n\n  Message                          Default severity level\n  -------------------------------- ----------------------------------\n  `ZM_NO_RESPONSE`                 `ERROR` (changed from `DEBUG`)\n  `ZM_NO_RESPONSE_DNSKEY`          `ERROR` (changed from `WARNING`)\n  `ZM_DNSKEY_SMALLER_THAN_REC`     WARNING\n  `ZM_DNSKEY_TOO_SMALL_FOR_ALGO`   ERROR\n  `ZM_DNSKEY_TOO_LARGE_FOR_ALGO`   ERROR\n  `ZM_KEY_SIZE_OK`                 INFO\n",
         "Errors" : [
            "ZM_NO_RESPONSE",
            "ZM_DNSKEY_TOO_LARGE_FOR_ALGO",
            "ZM_DNSKEY_SMALLER_THAN_REC",
            "ZM_KEY_SIZE_OK",
            "ZM_NO_RESPONSE_DNSKEY",
            "ZM_DNSKEY_TOO_SMALL_FOR_ALGO"
         ],
         "Maturity" : "BETA",
         "Summary" : "Check for valid RSA DNSKEY key size"
      },
      "dnssec-15" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec15.md>.\n\n# Objective\n\nCDS and CDNSKEY record types are defined in [RFC\n7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC\n8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types\nare optional in a zone. The objective of this test case is to verify\nthat they are correctly set-up, if included in the zone.\n\nIf a CDS record is included in the zone, the corresponding CDNSKEY\nrecord should also be included ([RFC\n7344](https://datatracker.ietf.org/doc/html/rfc7344#section-4), section\n4).\n\nThe CDS and CDNSKEY RRsets should be consistent between all name servers\nfor the zone in question.\n\nIf there are both CDS RRs and CDNSKEY RRs in the zone they must match in\ncontent ([RFC\n7344](https://datatracker.ietf.org/doc/html/rfc7344#section-4), section\n4). It means that both must be derived from the same DNSKEY or both\nbeing \"delete\" CDS and CDNSKEY.\n\n# Summary\n\n  ------------------------------------------------------------------------------------------------------------\n  Message Tag outputted            [Default                                 Description of when message tag is\n                                   level](../SeverityLevelDefinitions.md)   outputted\n  -------------------------------- ---------------------------------------- ----------------------------------\n  `ZM_DS15_HAS_CDNSKEY_NO_CDS`     NOTICE                                   CDNSKEY RRset is found, but no CDS\n                                                                            RRset.\n\n  `ZM_DS15_HAS_CDS_AND_CDNSKEY`    INFO                                     CDNSKEY and CDS RRsets are found.\n\n  `ZM_DS15_HAS_CDS_NO_CDNSKEY`     NOTICE                                   CDS RRset is found, but no CDNSKEY\n                                                                            RRset.\n\n  `ZM_DS15_INCONSISTENT_CDNSKEY`   ERROR                                    All servers do not have the same\n                                                                            CDNSKEY RRset.\n\n  `ZM_DS15_INCONSISTENT_CDS`       ERROR                                    All servers do not have the same\n                                                                            CDS RRset.\n\n  `ZM_DS15_MISMATCH_CDS_CDNSKEY`   ERROR                                    Both CDS and CDNSKEY RRsets are\n                                                                            found but they do not match.\n\n  `ZM_DS15_NO_CDS_CDNSKEY`         INFO                                     No CDS or CDNSKEY RRsets are found\n                                                                            on any name server.\n  ------------------------------------------------------------------------------------------------------------\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_DS15_HAS_CDNSKEY_NO_CDS",
            "ZM_DS15_INCONSISTENT_CDS",
            "ZM_DS15_HAS_CDS_NO_CDNSKEY",
            "ZM_DS15_NO_CDS_CDNSKEY",
            "ZM_DS15_HAS_CDS_AND_CDNSKEY",
            "ZM_DS15_MISMATCH_CDS_CDNSKEY",
            "ZM_DS15_INCONSISTENT_CDNSKEY"
         ],
         "Maturity" : "BETA",
         "Summary" : "Existence of CDS and CDNSKEY"
      },
      "dnssec-16" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec16.md>.\n\n# Objective\n\nCDS and CDNSKEY record types are defined in [RFC\n7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC\n8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types\nare optional in a zone. The objective of this test case is to verify\nthat the CDS RRset is valid. This test case is only relevant if the zone\nhas at least one CDS record. For tests of the CDNSKEY, see test case\n[DNSSEC17](dnssec17.md).\n\n# Summary\n\n-   If no CDS record is found, the test case will terminate early with\n    no message tag outputted.\n-   If a CDS record is of \"delete\" type, then it can by definition not\n    match or point at any DNSKEY record.\n\n  -------------------------------------------------------------------------------------------------------------------\n  Message Tag outputted                    [Default                                 Description of when message tag\n                                           level](../SeverityLevelDefinitions.md)   is outputted\n  ---------------------------------------- ---------------------------------------- ---------------------------------\n  `ZM_DS16_CDS_INVALID_RRSIG`              ERROR                                    CDS RRset is signed with an\n                                                                                    invalid RRSIG.\n\n  `ZM_DS16_CDS_MATCHES_NON_SEP_DNSKEY`     `ERROR` (changed from `NOTICE`)          CDS record matches a DNSKEY with\n                                                                                    SEP bit (bit 15) unset.\n\n  `ZM_DS16_CDS_MATCHES_NON_ZONE_DNSKEY`    ERROR                                    CDS record matches a DNSKEY with\n                                                                                    zone bit (bit 7) unset.\n\n  `ZM_DS16_CDS_MATCHES_NO_DNSKEY`          `ERROR` (changed from `WARNING`)         CDS record does not match any\n                                                                                    DNSKEY in DNSKEY RRset.\n\n  `ZM_DS16_CDS_NOT_SIGNED_BY_CDS`          `ERROR` (changed from `NOTICE`)          CDS RRset is not signed by the\n                                                                                    key that the CDS record points\n                                                                                    to.\n\n  `ZM_DS16_CDS_SIGNED_BY_UNKNOWN_DNSKEY`   ERROR                                    CDS RRset is signed by a key not\n                                                                                    in DNSKEY RRset.\n\n  `ZM_DS16_CDS_UNSIGNED`                   ERROR                                    CDS RRset is unsigned.\n\n  `ZM_DS16_CDS_WITHOUT_DNSKEY`             ERROR                                    CDS RRset exists, but there is no\n                                                                                    DNSKEY RRset.\n\n  `ZM_DS16_DELETE_CDS`                     INFO                                     CDS RRset has a \"delete\" CDS\n                                                                                    record as a single record.\n\n  `ZM_DS16_DNSKEY_NOT_SIGNED_BY_CDS`       `ERROR` (changed from `WARNING`)         DNSKEY RRset is not signed by the\n                                                                                    key or keys that the CDS records\n                                                                                    point to.\n\n  `ZM_DS16_MIXED_DELETE_CDS`               ERROR                                    \"Delete\" CDS record is mixed with\n                                                                                    normal CDS record.\n  -------------------------------------------------------------------------------------------------------------------\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_DS16_CDS_INVALID_RRSIG",
            "ZM_DS16_CDS_UNSIGNED",
            "ZM_DS16_CDS_NOT_SIGNED_BY_CDS",
            "ZM_DS16_MIXED_DELETE_CDS",
            "ZM_DS16_CDS_MATCHES_NON_ZONE_DNSKEY",
            "ZM_DS16_DELETE_CDS",
            "ZM_DS16_CDS_SIGNED_BY_UNKNOWN_DNSKEY",
            "ZM_DS16_CDS_WITHOUT_DNSKEY",
            "ZM_DS16_CDS_MATCHES_NON_SEP_DNSKEY",
            "ZM_DS16_DNSKEY_NOT_SIGNED_BY_CDS",
            "ZM_DS16_CDS_MATCHES_NO_DNSKEY"
         ],
         "Maturity" : "BETA",
         "Summary" : "Validate CDS"
      },
      "dnssec-17" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec17.md>.\n\n# Objective\n\nCDS and CDNSKEY record types are defined in [RFC\n7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC\n8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types\nare optional in a zone. The objective of this test case is to verify\nthat the CDNSKEY RRset is valid. This test case is only relevant if the\nzone has at least one CDNSKEY record. For tests of the CDS, see test\ncase [DNSSEC16](dnssec16.md).\n\n# Summary\n\n-   If no CDNSKEY record is found, the test case will terminate early\n    with no message tag outputted.\n-   If a CDNSKEY record is of \"delete\" type, then it can by definition\n    not match or point at any DNSKEY record.\n\n  -----------------------------------------------------------------------------------------------------------------------\n  Message Tag outputted                        [Default                                 Description of when message tag\n                                               level](../SeverityLevelDefinitions.md)   is outputted\n  -------------------------------------------- ---------------------------------------- ---------------------------------\n  `ZM_DS17_CDNSKEY_INVALID_RRSIG`              ERROR                                    CDNSKEY RRset signed with an\n                                                                                        invalid RRSIG.\n\n  `ZM_DS17_CDNSKEY_IS_NON_SEP`                 `ERROR` (changed from `NOTICE`)          CDNSKEY record has the SEP bit\n                                                                                        (bit 15) unset.\n\n  `ZM_DS17_CDNSKEY_IS_NON_ZONE`                ERROR                                    CDNSKEY record has the zone bit\n                                                                                        (bit 7) unset.\n\n  `ZM_DS17_CDNSKEY_MATCHES_NO_DNSKEY`          `ERROR` (changed from `WARNING`)         CDNSKEY record does not match any\n                                                                                        DNSKEY in DNSKEY RRset.\n\n  `ZM_DS17_CDNSKEY_NOT_SIGNED_BY_CDNSKEY`      `ERROR` (changed from `NOTICE`)          CDNSKEY RRset is not signed by\n                                                                                        the key that the CDNSKEY record\n                                                                                        points to.\n\n  `ZM_DS17_CDNSKEY_SIGNED_BY_UNKNOWN_DNSKEY`   ERROR                                    CDNSKEY RRset is signed by a key\n                                                                                        not in DNSKEY RRset.\n\n  `ZM_DS17_CDNSKEY_UNSIGNED`                   ERROR                                    CDNSKEY RRset is unsigned.\n\n  `ZM_DS17_CDNSKEY_WITHOUT_DNSKEY`             ERROR                                    CDNSKEY RRset exists, but there\n                                                                                        is no DNSKEY RRset.\n\n  `ZM_DS17_DELETE_CDNSKEY`                     INFO                                     CDNSKEY RRset has a \"delete\"\n                                                                                        CDNSKEY record as a single\n                                                                                        record.\n\n  `ZM_DS17_DNSKEY_NOT_SIGNED_BY_CDNSKEY`       `ERROR` (changed from `WARNING`)         DNSKEY RRset is not signed by the\n                                                                                        key or keys that the CDNSKEY\n                                                                                        records point to.\n\n  `ZM_DS17_MIXED_DELETE_CDNSKEY`               ERROR                                    \"Delete\" CDNSKEY record is mixed\n                                                                                        with normal CDNSKEY record.\n  -----------------------------------------------------------------------------------------------------------------------\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_DS17_CDNSKEY_INVALID_RRSIG",
            "ZM_DS17_CDNSKEY_UNSIGNED",
            "ZM_DS17_CDNSKEY_NOT_SIGNED_BY_CDNSKEY",
            "ZM_DS17_MIXED_DELETE_CDNSKEY",
            "ZM_DS17_CDNSKEY_IS_NON_ZONE",
            "ZM_DS17_DELETE_CDNSKEY",
            "ZM_DS17_CDNSKEY_SIGNED_BY_UNKNOWN_DNSKEY",
            "ZM_DS17_CDNSKEY_WITHOUT_DNSKEY",
            "ZM_DS17_CDNSKEY_IS_NON_SEP",
            "ZM_DS17_DNSKEY_NOT_SIGNED_BY_CDNSKEY",
            "ZM_DS17_CDNSKEY_MATCHES_NO_DNSKEY"
         ],
         "Maturity" : "BETA",
         "Summary" : "Validate CDNSKEY"
      },
      "dnssec-18" : {
         "Description" : "This test case comes from version v2023.1.4 of Zonemaster. For more\ninformation, see\n<https://github.com/zonemaster/zonemaster/blob/v2023.1.4/docs/public/specifications/tests/DNSSEC-TP/dnssec18.md>.\n\n# Objective\n\nCDS and CDNSKEY record types are defined in [RFC\n7344](https://datatracker.ietf.org/doc/html/rfc7344) and [RFC\n8078](https://datatracker.ietf.org/doc/html/rfc8078). Both record types\nare optional in a zone. The objective of this test case is to verify\nthat there is a correct chain of trust from DS, in the parent zone to\nthe CDS and CDNSKEY RRsets ([RFC\n7344](https://datatracker.ietf.org/doc/html/rfc7344#section-4.1),\nsection 4.1).\n\nAs stated in [RFC\n4035](https://datatracker.ietf.org/doc/html/rfc4035#section-2.4),\nsection 2.4: \\> A DS RR SHOULD point to a DNSKEY RR that is present in\nthe child's \\> apex DNSKEY RRset, and the child's apex DNSKEY RRset\nSHOULD be \\> signed by the corresponding private key.\"\n\nThis Test case is only relevant if \\* The *Child Zone* has either CDS or\nCDNSKEY record or both, and \\* The parent zone has a DS RRset for the\n*Child Zone*.\n\n# Summary\n\n-   If no CDS or CDNSKEY records are found, this test case is not run\n    and no message will be outputted.\n-   If no DS records are found at parent, this test case is not run and\n    no message will be outputted.\n\n  -------------------------------------------------------------------------------------------------------------------\n  Message Tag outputted                 [Default                                 Description of when message tag is\n                                        level](../SeverityLevelDefinitions.md)   outputted\n  ------------------------------------- ---------------------------------------- ------------------------------------\n  `ZM_DS18_NO_MATCH_CDS_RRSIG_DS`       ERROR                                    The CDS RRset is not signed with a\n                                                                                 DNSKEY record that a DS record\n                                                                                 points to.\n\n  `ZM_DS18_NO_MATCH_CDNSKEY_RRSIG_DS`   ERROR                                    CDNSKEY RRset is not signed with a\n                                                                                 DNSKEY record that a DS record\n                                                                                 points to.\n  -------------------------------------------------------------------------------------------------------------------\n\n# Pass/fail criteria\n\nThe outcome of this Test Case is \"fail\" if there is at least one message\nwith the severity level *[ERROR](../SeverityLevelDefinitions.md#error)*\nor *[CRITICAL](../SeverityLevelDefinitions.md#critical)*.\n\nThe outcome of this Test Case is \"warning\" if there is at least one\nmessage with the severity level\n*[WARNING](../SeverityLevelDefinitions.md#warning)*, but no message with\nseverity level *ERROR* or *CRITICAL*.\n\nIn other cases, no message or only messages with severity level\n*[INFO](../SeverityLevelDefinitions.md#info)* or\n*[NOTICE](../SeverityLevelDefinitions.md#notice)*, the outcome of this\nTest Case is \"pass\".\n",
         "Errors" : [
            "ZM_DS18_NO_MATCH_CDS_RRSIG_DS",
            "ZM_DS18_NO_MATCH_CDNSKEY_RRSIG_DS"
         ],
         "Maturity" : "BETA",
         "Summary" : "Validate trust from DS to CDS and CDNSKEY"
      },
      "dnssec-91" : {
         "Dependencies" : [
            "dnssec-05"
         ],
         "Description" : "In addition to the requirements outlined in `dnssec-05`, this test imposes\nan additional requirement on the signing algorithms used to sign zones,\nspecifically, the algorithm number **MUST NOT** be lower than 8.\n",
         "Errors" : [
            "DNSSEC_DNS_QUERY_ERROR",
            "DNSSEC_INVALID_SIGNING_ALGORITHM"
         ],
         "Input-Parameters" : null,
         "Maturity" : "BETA",
         "Summary" : "Permitted signing algorithms"
      },
      "dnssec-92" : {
         "Description" : "The DS record(s) submitted in the `dnssec.dsRecords` input parameters will\nbe validated. Algorithm 1 (SHA-1) **MUST NOT** be used.\n",
         "Errors" : [
            "DNSSEC_DNS_QUERY_ERROR",
            "DNSSEC_INVALID_DIGEST_ALGORITHM"
         ],
         "Input-Parameters" : null,
         "Maturity" : "BETA",
         "Summary" : "Permitted DS record hash algorithm(s)"
      },
      "dnssecOps01-ZSKRollover" : {
         "Dependencies" : null,
         "Description" : "This test case verifies the RSP's ability to perform a ZSK rollover (as\ndescribed in [Section 4.1.1 of\nRFC 6781](https://datatracker.ietf.org/doc/html/rfc6781#section-4.1.1) for\na zone.\n\nIf the value of the `dnssecOps.csk` input parameter is `true`, then this\ntest will be skipped.\n\nThe system will monitor the SOA record in the domain name specified in the\n`dnssec.zskRolloverZone` input parameter. The domain may be present\nanywhere in the DNS hierarchy (that is, it does not need to be a TLD), but\n**MUST** have a secure chain of trust up to the root zone, so that it can\nbe validated using the root zone trust anchor.\n\nDuring the test period (currently defined as 24 hours) the operator\n**MUST** successfully carry out a ZSK rollover for the domain, where the\nZone Signing Key is replaced, without disrupting the chain of trust.\n\nTo simplify testing, applicants may wish to provision domain that is\nconfigured with short TTLs and a short ZSK lifetime, so that a ZSK\nrollover is guaranteed to occur within the 24 test period.\n",
         "Input-Parameters" : [
            "dnssecOps.csk",
            "dnssecOps.zskRolloverZone"
         ],
         "Summary" : "ZSK rollover"
      },
      "dnssecOps02-KSKRollover" : {
         "Dependencies" : null,
         "Description" : "This test case verifies the RSP's ability to perform a CSK/KSK rollover\n(as described in [Sections 4.1.2 and 4.13 of\nRFC 6781](https://datatracker.ietf.org/doc/html/rfc6781#section-4.1.2) for\na zone.\n\nThe system will monitor the SOA record in the domain name specified in the\n`dnssec.kskRolloverZone` input parameter. The domain may be present\nanywhere in the DNS hierarchy (that is, it does not need to be a TLD), but\n**MUST** have a secure chain of trust up to the root zone, so that it can\nbe validated using the root zone trust anchor.\n\nDuring the test period (currently defined as 24 hours) the operator\n**MUST** successfully carry out a KSK rollover for the domain, where the\nKey Signing Key is replaced, and the DS record in the parent zone is\nupdated, without disrupting the chain of trust.\n",
         "Input-Parameters" : [
            "dnssecOps.kskRolloverZone"
         ],
         "Summary" : "KSK rollover"
      },
      "dnssecOps03-AlgorithmRollover" : {
         "Dependencies" : null,
         "Description" : "This test case verifies the RSP's ability to perform an algorithm rollover\n(as described in [Section 4.1.4 of\nRFC 6781](https://datatracker.ietf.org/doc/html/rfc6781#section-4.1.2) for\na zone.\n\nThe system will monitor the SOA record in the domain name specified in the\n`dnssec.algorithmRolloverZone` input parameter. The domain may be present\nanywhere in the DNS hierarchy (that is, it does not need to be a TLD), but\n**MUST** have a secure chain of trust up to the root zone, so that it can\nbe validated using the root zone trust anchor.\n\nDuring the test period (currently defined as 72 hours) the operator\n**MUST** successfully carry out an algorithm rollover for the domain\n(including an update to the DS record in the parent zone), where the\nalgorithm used to secure the domain is changed, without disrupting the\nchain of trust.\n\nNote that the specific algorithms being rolled to and from are not\nsignificant (although they **MUST** be present in the IANA registry); it\nis not required that the new algorithm be more \"secure\" than the original\nalgorithm; only that they are different. So a rollover from algorithm 13\n(`ECDSAP256SHA256`) to algorithm 8 (`RSASHA256`) will be accepted as well\nas a rollover from `RSASHA256` to `ECDSAP256SHA256`.\n",
         "Input-Parameters" : [
            "dnssecOps.algorithmRolloverZone"
         ],
         "Summary" : "algorithm rollover"
      },
      "epp-01" : {
         "Description" : "This test confirms that the EPP service is reachable from the probe\nservers.\n\n1. At least one `A` record **MUST** be published in the DNS for the EPP\n   hostname, to allow IPv4-only hosts to connect to the EPP service.\n2. At least one `AAAA` record **SHOULD** be published in the DNS for the\n   EPP hostname, to allow IPv6-only hosts to connect to the EPP service.\n3. EPP is associated with TCP port 700. All IPv4/IPv6 addresses published\n   in the DNS for the EPP hostname **MUST** accept TCP connections on this\n   port. Since the EPP specification requires IP-based access control, the\n   RSP **MUST** configure their firewall to allow access from the IP\n   addresses listed in the `epp.clientACL` resource.\n4. EPP uses TLS to secure the channel between client and server. All\n   service ports **MUST** support TLSv1.2 and optionally any subsequent\n   protocol published by the IETF.\n5. TLSv1.1 and all previous versions have known security issues and **MUST\n   NOT** be supported by any service ports.\n6. To ensure that the connection can be trusted, all service ports\n   **MUST** present a certificate issued by a trusted CA, such as those\n   supported by major browsers.\n7. All TLS certificates **MUST NOT** have expired, and **MUST** be\n   presented wth any required intermediate certificates.\n8. The EPP server name **MUST** match at least one `subjectAltName` field\n   in all presented certificates (either exact match or wildcard).\n9. Service ports **MUST** use at least one of the ciphers recommended in\n   RFC 9325 (or any successor document).\n",
         "Errors" : [
            "EPP_MISSING_A_RECORDS",
            "EPP_MISSING_AAAA_RECORDS",
            "EPP_TLS_REQUIRED_PROTOCOL_NOT_SUPPORTED",
            "EPP_TLS_FORBIDDEN_PROTOCOL_SUPPORTED",
            "EPP_TLS_UNTRUSTED_CERTIFICATE",
            "EPP_TLS_EXPIRED_CERTIFICATE",
            "EPP_TLS_CERTIFICATE_CHAIN_MISSING",
            "EPP_TLS_CERTIFICATE_HOSTNAME_MISMATCH",
            "EPP_TLS_BAD_CIPHER"
         ],
         "Input-Parameters" : null,
         "Resources" : [
            "epp.tlsCertificateStore"
         ],
         "Summary" : "Service connectivity test"
      },
      "epp-02" : {
         "Dependencies" : null,
         "Description" : "Once a connection is established, all service ports **MUST** send a\nvalid `<greeting>` frame to the client.\n\n1. The `<svID>` element in the `<greeting>` **MUST** identify the EPP\n   server.\n2. The `<svDate>` element in the `<greeting>` **MUST** specify a time\n   within 30 seconds of the current date and time as received from the NTP\n   network.\n3. The `<version>` element in the <greeting> **MUST** be exactly `1.0`.\n4. All `<lang>` element(s) in the `<greeting>` **MUST** contain valid\n   language codes. At least `en` **MUST** be included.\n5. All `<objURI>` element(s) in the `<greeting>` **MUST** contain XML\n   namespace URIs that are appropriate. The only mandatory URI that\n   **MUST** be present is the domain namespace URI. The host and contact\n   namespace URIs may be required depending on the `epp.hostModel` and\n   `general.minimalPublicDataSet` parameters.\n6. All `<extURI>` element(s) in the `<greeting>` **MUST** contain XML\n   namespace URIs that have been registered in the IANA registry, and that\n   the mandatory extensions are also included.\n7. `<extURI>` elements containing the following XML namespaces **MUST** be\n   present in the `<greeting>`:\n     * `urn:ietf:params:xml:ns:secDNS-1.1`\n     * `urn:ietf:params:xml:ns:launch-1.0`\n     # these may become mandatory in the future:\n     # * `urn:ietf:params:xml:ns:epp:loginSec-1.0`\n     # * `urn:ietf:params:xml:ns:epp:secure-authinfo-transfer-1.0`\n8. If the `general.gracePeriodsSupported` input parameter is true, an\n   `<extURI>` element containing the XML namespace for the RGP extension\n   (RFC 3915) **MUST** be present in the `<greeting>`.\n",
         "Errors" : [
            "EPP_NO_GREETING_RECEIVED",
            "EPP_GREETING_SVID_INVALID",
            "EPP_GREETING_SVDATE_INVALID",
            "EPP_GREETING_VERSION_INVALID",
            "EPP_GREETING_INVALID_LANG",
            "EPP_GREETING_UNEXPECTED_OBJURI",
            "EPP_GREETING_MISSING_OBJURI",
            "EPP_GREETING_UNEXPECTED_EXTURI",
            "EPP_GREETING_MISSING_EXTURI",
            "EPP_GREETING_RECOMMENDED_EXTENSION_MISSING"
         ],
         "Input-Parameters" : null,
         "Summary" : "Protocol conformance test"
      },
      "epp-03" : {
         "Description" : "The EPP server **MUST** return a `1000` result in response to a `<login>`\ncommand.\n\nThe client will use the object and extension XML namespaces from the\nserver's `<greeting>` as part of the `<login>` command.\n\nIf the server supports the Login Security Extension (see RFC 8807) then\nthis will be used by the client.\n",
         "Errors" : null,
         "Input-Parameters" : null,
         "Resources" : null,
         "Summary" : "Authentication test"
      },
      "epp-04" : {
         "Dependencies" : [
            "epp-03"
         ],
         "Description" : "The client will perform a series of `<check>` commands and will validate\nthe `avail` attribute of the `<domain:name>` elements in the server\nresponse, as follows:\n\n* syntactically invalid domain name: `avail` attribute **MUST** be `0`\n  or `false`.\n* valid but registered domain name: `avail` attribute **MUST** be `0` or\n  `false`.\n* syntactically valid, unregistered domain name: `avail` attribute\n  **MUST** be `1` or `true`. The domain name will be generated using\n  random characters.\n\nA \"syntactically valid\" domain name is one that complies with the format\nspecified in RFC 1123 (this test case does not consider IDN names).\n\nThese checks will be carried out for each TLD in the TLD set.\n",
         "Errors" : [
            "EPP_DOMAIN_CHECK_VALID_DOMAIN_INCORRECT_AVAIL",
            "EPP_DOMAIN_CHECK_INVALID_DOMAIN_INCORRECT_AVAIL",
            "EPP_DOMAIN_CHECK_REGISTERED_DOMAIN_INCORRECT_AVAIL"
         ],
         "Summary" : "domain <check> command test"
      },
      "epp-05" : {
         "Dependencies" : [
            "epp-04"
         ],
         "Description" : "If the EPP server supports host objects, this test will perform a series\nof `<check>` commands and will validate the `avail` attribute of the\n`<host:name>` elements in the server response, as follows:\n* syntactically invalid hostname: `avail` attribute **MUST** be `0` or\n  `false`.\n* valid but registered hostname: `avail` attribute **MUST** be `0` or\n  `false`.\n* syntactically valid and unregistered hostname: `avail` attribute\n  **MUST** be `1` or `true`. The hostname will be generated using random\n  characters.\n\nA \"syntactically valid\" hostname is one that complies with the format\nspecified in RFC 1123 (this test case does not consider IDN names).\n",
         "Errors" : [
            "EPP_HOST_CHECK_VALID_HOST_INCORRECT_AVAIL",
            "EPP_HOST_CHECK_INVALID_HOST_INCORRECT_AVAIL",
            "EPP_HOST_CHECK_REGISTERED_HOST_INCORRECT_AVAIL"
         ],
         "Input-Parameters" : [
            "epp.registeredNameservers"
         ],
         "Summary" : "host <check> command test (if applicable)"
      },
      "epp-06" : {
         "Dependencies" : [
            "epp-05"
         ],
         "Description" : "If the EPP server supports contact objects, this test will perform a\nseries of `<check>` commands and will validate the `avail` attribute of\nthe `<contact:id>` elements in the server response, as follows:\n* syntactically invalid ID: `avail` attribute **MUST** be `0` or\n  `false`.\n* valid but registered ID: `avail` attribute **MUST** be `0` or\n  `false`.\n* valid and unregistered ID: `avail` attribute **MUST** be `1` or\n  `true`. The ID will be generated using random characters.\n",
         "Errors" : [
            "EPP_CONTACT_CHECK_VALID_CONTACT_ID_INCORRECT_AVAIL",
            "EPP_CONTACT_CHECK_INVALID_CONTACT_ID_INCORRECT_AVAIL",
            "EPP_CONTACT_CHECK_REGISTERED_CONTACT_ID_INCORRECT_AVAIL"
         ],
         "Input-Parameters" : [
            "epp.registeredContacts"
         ],
         "Summary" : "contact <check> command test (if applicable for the registry type)"
      },
      "epp-07" : {
         "Dependencies" : [
            "epp-06"
         ],
         "Description" : "This test attempts to create a number of contact objects, and validates\nthe server's response. For example, the test will expect that the server\nwill reject a command that creates an object with missing or invalid\nproperties, but will accept a command to create an object with valid\nproperties. Property values will be randomly generated but will contain\nrealistic values. No personal information will be transmitted as part\nof this test.\n\nIf the `general.minimalPublicDataSet` input parameter is `true`, this\ntest will be skipped.\n\nThe test will confirm that the server checks and validates the values of\nthe following elements:\n\n* `<contact:id>`\n* `<contact:status>`\n* `<contact:postalInfo>` element(s)\n* `<contact:name>` element\n* `<contact:cc>` element\n* `<contact:voice>`\n* `<contact:email>`\n\n* The server **MUST NOT** accept a `<contact:id>` element that\n  contains a value that is not a valid `clIDType` value;\n* The server **MUST NOT** accept a `<contact:status>` element that\n  contains a status code not defined in RFC 5733;\n* The server **MUST NOT** accept a `<contact:postalInfo>` element that\n  contains a `type` attribute that is neither `int` nor `loc`;\n* The server **MUST NOT** accept a `<contact:cc>` element that contains a\n  value that is not a valid ISO 3166-1 alpha-2 code;\n* The server **MUST NOT** accept a `<contact:voice>` element that contains\n  a value that does not conform to the format described in Section 2.5 of\n  RFC5733;\n* The server **MUST NOT** accept a `<contact:email>` element that contains\n  a value that does not conform to the format specified in RFC 5322.\n\nOnce objects have been created, the client will then perform `<info>`\ncommands to verify that the server has correctly stored the provided\nvalues.\n",
         "Errors" : [
            "EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_ID",
            "EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_STATUS",
            "EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE",
            "EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_CC",
            "EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_VOICE",
            "EPP_CONTACT_CREATE_SERVER_ACCEPTS_INVALID_EMAIL",
            "EPP_CONTACT_CREATE_INFO_RESPONSE_NOT_1000",
            "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID",
            "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS",
            "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE",
            "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME",
            "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG",
            "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET",
            "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY",
            "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP",
            "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC",
            "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC",
            "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE",
            "EPP_CONTACT_CREATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL"
         ],
         "Summary" : "contact <create> command test (if applicable for the registry type)"
      },
      "epp-08" : {
         "Dependencies" : [
            "epp-07"
         ],
         "Description" : "This test will confirm that EPP clients are unable to perform `<info>`\ncommands on objects that they do not sponsor.\n\nIf the `general.minimalPublicDataSet` input parameter is `true`, this\ntest will be skipped.\n\nThe client will connect using a set of alternate credentials and will\nsubmit `<info>` and `<update>` commands on the contact objects created in\n`epp-08`. The server **MUST** respond with a 2201 \"authorization error\"\nresponse.\n",
         "Errors" : [
            "EPP_CONTACT_INFO_RESPONSE_NOT_2201",
            "EPP_CONTACT_UPDATE_RESPONSE_NOT_2201"
         ],
         "Summary" : "Contact object access control (if applicable)"
      },
      "epp-09" : {
         "Dependencies" : [
            "epp-08"
         ],
         "Description" : "This test will perform `<update>` commands on the objects created during\n`epp-07` and will confirm that the server correctly rejects invalid\ncommands (which would specify invalid property values) and accepts valid\ncommands.\n\nIf the `general.minimalPublicDataSet` input parameter is `true`, this\ntest will be skipped.\n\nThe test will confirm that the server checks and validates `<update>`\ncommands which transform the values of the following elements:\n\n* `<contact:status>`\n* `<contact:postalInfo>` elements (both `int` and `loc`)\n    * `<contact:name>`\n    * `<contact:org>`\n    * `<contact:addr>` elements\n      * `<contact:street>` element(s)\n      * `<contact:city>` element\n      * `<contact:sp>` element\n      * `<contact:pc>` element\n      * `<contact:cc>` element\n* `<contact:voice>`\n* `<contact:email>`\n\nOnce objects have been updated, the client will then perform `<info>`\ncommands to verify that the server has correctly stored the provided\nvalues.\n",
         "Errors" : [
            "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STATUS",
            "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_POSTALINFO_TYPE",
            "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_ORG",
            "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_STREET",
            "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CITY",
            "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_SP",
            "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_PC",
            "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_CC",
            "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_VOICE",
            "EPP_CONTACT_UPDATE_SERVER_ACCEPTS_INVALID_EMAIL",
            "EPP_CONTACT_UPDATE_INFO_RESPONSE_NOT_1000",
            "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ID",
            "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STATUS",
            "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_POSTALINFO_TYPE",
            "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_NAME",
            "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_ORG",
            "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_STREET",
            "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CITY",
            "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_SP",
            "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_PC",
            "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_CC",
            "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_VOICE",
            "EPP_CONTACT_UPDATE_INFO_RESPONSE_MISSING_OR_INCORRECT_EMAIL"
         ],
         "Summary" : "contact <update> command test (if applicable for the registry type)"
      },
      "epp-10" : {
         "Dependencies" : [
            "epp-09"
         ],
         "Description" : "This test will perform `<delete>` commands on the objects created during\n`epp-24` and will confirm that the server accepts the `<delete>` command\nwith a `1xxx` response code.\n\nIf the `general.minimalPublicDataSet` input parameter is `true`, this\ntest will be skipped.\n\nOnce the `<delete>` commands have been submitted, the client will perform\n`<info>` commands to confirm that the objects have actually been removed\nfrom the repository. If the response to the previous `<delete>` command\nwas 1001, this step will be skipped.\n",
         "Errors" : [
            "EPP_CONTACT_DELETE_RESPONSE_NOT_1000_OR_1001",
            "EPP_CONTACT_DELETE_OBJECT_STILL_EXISTS"
         ],
         "Input-Parameters" : null,
         "Summary" : "contact <delete> command test (if applicable for the registry type)"
      },
      "epp-11" : {
         "Description" : "This test attempts to create a number of host objects, and validates\nthe server's response. For example, the test will expect that the server\nwill reject a command that creates an object with missing or invalid\nproperties, but will accept a command to create an object with valid\nproperties. Property values will be randomly generated but will contain\nrealistic values. No personal information will be transmitted as part\nof this test.\n\nIf the `epp.hostModel` input parameter is `attributes`, this test will\nbe skipped.\n\nThe test will confirm that the server checks and validates the values of\nthe following elements:\n\n* `<host:name>` (both in- and out-of-bailiwick, for each TLD in the TLD\n  set)\n* `<host:status>`\n* `<host:addr>` elements (both IPv4 and IPv6)\n\nIf the `epp.hostModel` input parameter is `attributes`, this test will\nbe skipped.\n\nThe client will then perform `<info>` commands on the objects successfully\ncreated to confirm that the server has correctly stored the provided\nvalues.\n",
         "Summary" : "host <create> command test (if applicable)"
      },
      "epp-12" : {
         "Dependencies" : [
            "epp-11"
         ],
         "Description" : "This test will confirm that EPP clients are unable to perform `<info>`\ncommands on objects that they do not sponsor.\n\nIf the `epp.hostModel` input parameter is `attributes`, this test will\nbe skipped.\n\nThe client will connect using a set of alternate credentials and will\nsubmit `<update>` commands on the contact objects created in `epp-11`. The\nserver **MUST** respond with a 2201 \"authorization error\" response.\n",
         "Summary" : "host object access control (if applicable)"
      },
      "epp-13" : {
         "Dependencies" : [
            "epp-11"
         ],
         "Description" : "This test will perform `<update>` commands on the objects created during\n`epp-11` and will confirm that the server correctly rejects invalid\ncommands (which would specify invalid property values) and accepts valid\ncommands.\n\nIf the `epp.hostModel` input parameter is `attributes`, this test will\nbe skipped.\n\nThe test will confirm that the server checks and validates `<update>`\ncommands which transform the values of the following elements:\n\n* `<host:status>`\n* `<host:addr>` elements (both IPv4 and IPv6)\n\nNote: the server's ability to support host renames is checked in a later\ntest.\n\nThe client will then perform `<info>` commands on the objects successfully\nupdated to confirm that the server has correctly stored the updated\nvalues.\n",
         "Summary" : "host <update> command test (if applicable)"
      },
      "epp-14" : {
         "Description" : "intentionally omitted",
         "Summary" : "intentionally omitted"
      },
      "epp-15" : {
         "Description" : "intentionally omitted",
         "Summary" : "intentionally omitted"
      },
      "epp-16" : {
         "Dependencies" : [
            "epp-03"
         ],
         "Description" : "This test performs a series domain `<create>` commands, using pseudo-\nrandom ASCII domain names under each TLD in the TLD set. If the\n`general.minimalPublicDataSet` input parameter is `false`, then a contact\nobject (containing pseudo-random contact information) will be created\nbeforehand and used as the registrant. If the `epp.hostModel` parameter is\n`objects`, then two host objects with pseudo-random names will be created\nand used as the nameservers (otherwise the names will be provided as\nattributes).\n\nThe client will perform several `<create>` commands, each of which will\ntest certain aspects of the server's processing of those commands, for\nexample:\n\n* to confirm that the server does not accept invalid values for object\n  properties (such as domain name, registration period, registant ID,\n  nameservers, and DS record parameters). Examples:\n    * invalid domain\n    * invalid period (1-10 years)\n    * non-existent registrant\n    * non-existent hosts\n    * invalid DS/keyData record parameters\n* to confirm that the server does not accept commands which reference\n  non-existent host/contact objects\n* to confirm the server supports all permitted client-assigned status\n  codes\n* to confirm that the server rejects a `<create>` command which\n  specifies a registrant contact (where the\n  `general.minimalPublicDataSet` input parameter is `true`)\n* to confirm that the server rejects a `<create>` command which does not\n  specify a registrant contact (where the\n  `general.minimalPublicDataSet`) input parameter is `false`\n* to confirm that the server rejects a `<create>` command containing\n  host objects when the `epp.hostModel` parameter is `attributes`\n* to confirm that the server rejects a `<create>` command containing\n  host attributes when the `epp.hostModel` parameter is `objects`\n* to confirm that the the server which implements RFC 9154 accepts a\n  `<create>` command without an authInfo command.\n\nBoth registrar IDs (those specified in the `epp.clid01` and `epp.clid02`\ninput parameters) will be used to create domains.\n\nOnce the `<create>` commands have been processed, the client will then\nperform `<info>` commands to confirm that:\n\n* the `<roid>` element is valid and contains a repository ID registered\n  with IANA;\n* the `<crDate>` and `<exDate>` elements are present and valid;\n* the `<crID>` and `<clID>` elements match the client ID used to create\n  the domain.\n* DNSSEC information provided in the `<create>` command is present and\n  correct.\n",
         "Input-Parameters" : [
            "epp.secDNSInterfaces"
         ],
         "Summary" : "domain <create> command test"
      },
      "epp-17" : {
         "Dependencies" : [
            "epp-16"
         ],
         "Description" : "This test confirms that the EPP server will refuse a request to delete a\nlinked object.\n\nIf the `epp.hostModel` input parameter is `attributes`, **and** the\n`general.minimalPublicDataSet` input parameter is `true`, then this test\nwill be skipped.\n\nThe client will submit `<delete>` commands for any contact and host\nobjects created during `epp-16`. The server **MUST** respond with a `2305`\n\"Object association prohibits operation\" error.\n",
         "Summary" : "Registry object integrity test"
      },
      "epp-18" : {
         "Dependencies" : [
            "epp-16"
         ],
         "Description" : "This test will confirm that the client is able to renew domain names.\n\n* Following a succesful `<renew>` command, the expiry date of the domain\n  **MUST** have been increased by the period specified by the client;\n* Where a server supports RFC 3915, the domain **MUST** have an RGP\n  status of `renewPeriod`;\n* The server **MUST** reject a `<renew>` command if it would result in\n  the expiry date being more than 10 years into the future.\n\nThe client will issue the `<renew>` commands and then perform `<info>`\ncommands to ensure that the expiry date and RGP status of the domain are\nset correctly.\n",
         "Input-Parameters" : null,
         "Summary" : "domain <renew> command test"
      },
      "epp-19" : {
         "Dependencies" : [
            "epp-18"
         ],
         "Description" : "This test will confirm that the client is able to initiate a domain\ntransfer.\n\nThe client will perform an `<update>` command to set the authInfo code for\nthe test domain (taken from the set created in `epp-16`) to a\nrandomly-determined value. If the server implements RFC 9154, it **MUST**\nreject the `<update>` command if the authInfo code is insufficently\nsecure.\n\nThen, using a second set of credentials, the client will connect to the\nEPP server and authenticate, submit `<transfer>` commands, and validate\nthe responses.\n\nThis test will confirm that:\n\n* the server rejects a `<transfer>` command with an invalid authInfo code\n* the server rejects a command which would extend the domain's validity\n  period more than 10 years into the future\n* the server accepts a `<transfer>` command with a valid authInfo code\n  and period.\n\nThe client will use an `<info>` command to ensure that the\n`pendingTransfer` status code is added to the domain after a successul\ntransfer request.\n\nOnce the transfer request has been accepted, the sponsoring client will\nwait for a message to be received on the server's message queue, and will\nthen approve the transfer.\n\nOnce the gaining registrar has also received a message on the queue, the\nclient will use an `<info>` command to confirm that:\n\n* the domain is now under the sponsorship of the gaining registrar\n* the authInfo code has been reset by the server (if the server supports\n  RFC 9154).\n",
         "Summary" : "domain <transfer> command test"
      },
      "epp-20" : {
         "Dependencies" : [
            "epp-18"
         ],
         "Description" : "This test confirms that the server behaves correctly if the sponsoring registrar of a domain rejects a transfer request.\nThe test procedure matches that of `epp-19`, but the transfer request will be rejected rather than approved. An `<info>` command will be used to confirm that the domain name remains under the sponsorship of the original registrar.",
         "Summary" : "domain <transfer> rejection test"
      },
      "epp-21" : {
         "Dependencies" : [
            "epp-19"
         ],
         "Description" : "This test will perform `<delete>` commands on the objects created during\n`epp-16` and will confirm that the server accepts the `<delete>` command\nwith a `1xxx` response code.\n\nOnce the `<delete>` commands have been processed, the client will perform\n`<info>` commands on the deleted to object to confirm that:\n\n* if the server responded to the `<delete>` command with a `1000`\n  response, then the domain no longer exists\n* if the server responded to the `<delete>` command with a `1001`\n  response, then the domain has the `pendingDelete` status and the\n  `redemptionPeriod` RGP status.\n",
         "Summary" : "domain <delete> command test"
      },
      "epp-22" : {
         "Dependencies" : [
            "epp-21"
         ],
         "Description" : "This test will perform RGP restore operations on the objects deleted\nduring `epp-21`, in order to confirm the correct operation of the server's\nimplementation of RFC 3915.\n\nIf the value of the `general.gracePeriodsSupported` parameter is false,\nthis test will be skipped.\n",
         "Input-Parameters" : [
            "epp.restoreReportRequired"
         ],
         "Summary" : "domain restore test (if applicable)"
      },
      "epp-23" : {
         "Dependencies" : [
            "epp-13"
         ],
         "Description" : "This tests verifies the server's support for host rename operations.\n\nIf the `epp.hostModel` input parameter is `attributes`, this test will\nbe skipped.\n\nThe client will perform `<update>` commands on the objects created during\n`epp-11` and will confirm that the server correctly accepts or rejects the\ncommands, for example:\n\n* an `<update>` command which specifies a syntatically invalid host name\n  is rejected;\n* an `<update>` command which places the object out-of-bailiwick is\n  accepted;\n* an `<update>` command which places the object within a non-existent\n  domain is rejected;\n* an `<update>` command which places the object within a domain sponsored\n  by another registrar is rejected. The domain name(s) provided in the\n  `epp.registeredNames` parameter will be used for this test.\n* an `<update>` command which places the object within a domain sponsored\n  by the test client is accepted. A domain created during the `epp-13`\n  test case will be used as the new parent domain.\n\nThe client will then perform `<info>` commands on the objects successfully\nupdated, to confirm that the server has correctly stored the updated\nvalues.\n",
         "Summary" : "host rename test (if applicable)"
      },
      "epp-24" : {
         "Dependencies" : [
            "epp-23"
         ],
         "Description" : "This test will perform `<delete>` commands on the objects created during\n`epp-11` and will confirm that the server accepts the `<delete>` command\nwith a `1xxx` response code.\n\nOnce the `<delete>` commands have been submitted, if a `1000` response was\nreceived from the server, the client will perform `<check>` and `<info>`\ncommands to confirm that the objects have been deleted.\n\nIf the `epp.hostModel` input parameter is `attributes`, this test will\nbe skipped.\n",
         "Summary" : "host <delete> command test (if applicable)"
      },
      "idn-01" : {
         "Dependencies" : null,
         "Description" : "This test confirms that the EPP server correctly accepts or rejects domain\n`<create>` commands for valid and invalid IDN labels, respectively.\n\nIf there are no IDN tables supported under any of the TLDs associated with\nthe test, then this test will be skipped.\n\nFor each supported IDN table, the test client will perform a series of\n`<create>` commands using a pre-defined catalogue of test labels. If\nrequired, the client will create any contact object(s) needed.\n\nThe server **MUST** reject all `<create>` commands for invalid labels and\n**MUST** accept all `<create>` commands for valid labels.\n",
         "Input-Parameters" : null,
         "Maturity" : "BETA",
         "Summary" : "Label validation test"
      },
      "idn-02" : {
         "Dependencies" : null,
         "Description" : "This test confirms the EPP server's conformance with the Level 1 variant\nsupport (no support for variant activation, all variants are blocked).\n\nIf there are no IDN tables for which Level 1 support is claimed, this\ntest will be skipped.\n\nFor each supported IDN table, the test client will perform a series of\n`<create>` commands using a pre-defined catalogue of test labels. If\nrequired, the client will create any contact object(s) needed.\n\nThe client will then submit `<create>` commands for one or more labels\nthat are variants of the names created in the first step. The server\n**MUST** reject these commands.\n",
         "Input-Parameters" : null,
         "Maturity" : "BETA",
         "Summary" : "Level 1 variant handling test"
      },
      "idn-03" : {
         "Dependencies" : null,
         "Description" : "This test confirms the EPP server's conformance with the Level 2 variant\nsupport (variants are supported within the same TLD).\n\nIf there are no IDN tables for which Level 2 support is claimed, this\ntest will be skipped.\n\nFor each supported IDN table, the test client will perform a series of\n`<create>` commands using a pre-defined catalogue of test labels. If\nrequired, the client will create any contact object(s) needed.\n\nThe client will then submit `<create>` commands for one or more labels\nthat are variants of the names created in the first step. Some of these\ncommands will be made using the same registrar account as the first step,\nwhile some will be made using alternate credentials. If the value of the\n`general.minimalPublicDataSet` input parameter is `false`, then some\ncommands will also use a different registrant contact.\n\nThe server **MUST** reject `<create>` commands where the (a) registrar is\ndifferent from that of the primary label or (b) the registrant (if\napplicable) is different.\n",
         "Maturity" : "BETA",
         "Summary" : "Level 2 variant handling test"
      },
      "idn-04" : {
         "Dependencies" : null,
         "Description" : "This test confirms the EPP server's conformance with the Level 3 variant\nsupport (variants are supported within variant TLD(s)).\n\nIf there are no IDN tables for which Level 3 support is claimed, this\ntest will be skipped.\n\nFor each supported IDN table, the test client will perform a series of\n`<create>` commands using a pre-defined catalogue of test labels. If\nrequired, the client will create any contact object(s) needed.\n\nThe client will then submit `<create>` commands for one or more labels\nthat are variants (at both second- and top-level) of the names created in\nthe first step. Some of these commands will be made using the same\nregistrar account as the first step, while some will be made using\nalternate credentials. If the value of the `general.minimalPublicDataSet`\ninput parameter is `false`, then some commands will also use a different\nregistrant contact.\n\nThe server **MUST** reject `<create>` commands where the (a) registrar is\ndifferent from that of the primary label or (b) the registrant (if\napplicable) is different.\n",
         "Maturity" : "BETA",
         "Summary" : "Level 3 variant handling test"
      },
      "integration-01" : {
         "Dependencies" : [
            "epp-16",
            "epp-11"
         ],
         "Description" : "This test confirms that the EPP and RDAP systems are properly integrated,\nthat is, that transform commands performed on objects in the EPP system\nare reflected in the RDAP system within the Service Level Requirement of\nthe SLA.\n\nThe test system will perform RDAP queries to confirm that the RDAP server\nprovides responses for the domain and host objects created in `epp-16` and\n`epp-11` (if applicable). The RDAP server **MUST** provide a 200 response\nwithin 1 hour of the object's `<crDate>` element.\n",
         "Input-Parameters" : [
            "rdap.baseURLs"
         ],
         "Maturity" : "BETA",
         "Summary" : "EPP -> RDAP Integration Test"
      },
      "integration-02" : {
         "Dependencies" : [
            "epp-16"
         ],
         "Description" : "This test confirms that the EPP and DNS systems are properly integrated,\nthat is, that transform commands performed on objects in the EPP system\nare reflected in the RDAP system within the Service Level Requirement of\nthe SLA.\n\nThe test system will perform DNS queries to confirm that the DNS servers\nprovides responses for the domain names created in `epp-16`. All DNS\nservers **MUST** provide the correct DNS response within 1 hour of the\nobject's `<crDate>` element.\n",
         "Input-Parameters" : [
            "dns.nameservers"
         ],
         "Maturity" : "BETA",
         "Summary" : "EPP -> DNS Integration Test"
      },
      "integration-03" : {
         "Dependencies" : [
            "epp-16",
            "epp-11"
         ],
         "Description" : "This test confirms that the EPP and RDE systems are properly integrated,\nthat is, that objects created in the EPP system are reflected in a valid\nRDE deposit file within the Service Level Requirement of the SLA.\n\nThe test system will periodically connect to the SFTP server specified by\nthe `integration.rdeSFTPHostname` input parameter, using the username\nspecified in the `integration.rdeSFTPUsername` input parameter and the SSH\nkey in the `integration.rdeSFTPPublicKey` resource, and look for .ryde\nfiles in the directory specified by the `integration.rdeSFTPDirectory`\ninput parameter. Note that operators **MUST** ensure that the IP addresses\nlisted in the `integration.rdeSFTPACL` resource have been added to the\nAccess Control List for the SFTP server (if any).\n\nAll objects created in the `epp-16` and `epp-11` (if applicable) tests\n**MUST** be found within a valid RDE deposit file (that is, the deposit\npasses all the tests in the RDE test suite) within 24 hours of each\nobject's `<crDate>` element.\n\nFurthermore, for each deposit found in the directory, the corresponding\nRDE report (as described in [Section 2.1 of\ndraft-lozano-icann-registry-interfaces](https://datatracker.ietf.org/doc/html/draft-lozano-icann-registry-interfaces#section-2))\n**MUST** be recieved on the test RRI environment before 23:59:59 UTC on\nthe date specified in the Watermark element of the deposit file.\n\nTo facilitate submission of RDE reports, the RRI test environment will be\nconfigured to accept submissions for the TLDs associated with the test\nfrom clients using the same TLSA DNS hostnames that are configured for the\ntest.\n",
         "Input-Parameters" : [
            "integration.rdeSFTPHostname",
            "integration.rdeSFTPDirectory",
            "integration.rdeSFTPUsername",
            "integration.rriACL"
         ],
         "Maturity" : "BETA",
         "Resources" : [
            "integration.rdeSFTPPublicKey",
            "integration.rdeSFTPACL"
         ],
         "Summary" : "EPP -> RDE Integration Test"
      },
      "minimumRPMs-01" : {
         "Description" : "This test is used to confirm the conformance of the EPP server's\nimplementation of the Claims Check Form, as described in Section\n3.1.1 of RFC 8334.\n\nFor this test, it is assumed that the EPP server has been configured to\nuse data (specifically the Domain Name Label List, as described in Section\n5.3.3.1 of RFC 9361) from the TMCH test environment.\n\nThe client will connect to the EPP server using the provided credentials\nand will then perform a series of `<check>` commands, using the Launch\nextension to specify a value of `claims` for the `type` attribute of the\n`<launch:check>` element and the `<launch:phase>` element. It will then\nconfirm that the server returns an appropriate response:\n\n* a `<check>` response for a domain that is present on the DNL contains\n  the correct `<launch:claimKey>` element;\n* a `<check>` response for a domain that is NOT present on the DNL\n  does not contain a `<launch:claimKey>` element.\n",
         "Summary" : "Claims <check> command test"
      },
      "minimumRPMs-02" : {
         "Description" : "This test is used to confirm the conformance of the EPP server's\nimplementation of the Sunrise Create Form, as described in Section\n3.3.1 of RFC 8334.\n\nFor this test, it is assumed that the EPP server has been configured to\nuse data (specifically the Domain Name Label List, as described in Section\n5.3.3.1 of RFC 9361) from the TMCH test environment.\n\nThe client will connect to the EPP server and will submit `<create>`\ncommands, using domain names and SMD files present in the TMCH test\nenvironment.\n\nIf the server supports Start Date sunrises, the fully-qualified domain\nname will be constructed using a label from the SMD file and the\n`minimumRPMS.sunriseTLD` input parameter. The Server **MUST** respond with\na `1000` or `1001` result code, however, if the client receives a `2302`\n\"object exists\" result code, it will retry with a different domain name.\n\nThe client will also attempt to create a domain using an invalid SMD,\nwhich the server **MUST** reject.\n\nIf the server supports End Date sunrises, the fully-qualified domain\nname will be constructed using a label from the SMD file and the\n`minimumRPMS.sunriseTLD` input parameter. The Server **MUST** respond with\na `1000` or `1001` result code.\n\nOnce the `<create>` commands have been processed, the client will then\nperform `<info>` commands to confirm that the domains have been created and\nthat the submitted object properties have been correctly stored.\n\nThe client will also confirm that the server rejects attempts to:\n\n1. create a domain using an invalid SMD;\n2. create a domain using a revoked SMD;\n3. create a domain using an SMD signed by a revoked certificate.\n",
         "Summary" : "Sunrise domain/launch application <create> command test\n"
      },
      "minimumRPMs-03" : {
         "Description" : "This test is used to confirm the conformance of the EPP server's\nimplementation of the Claims Create Form, as described in Section\n3.3.2 of RFC 8334.\n\nFor this test, it is assumed that the EPP server has been configured to\nuse data (specifically the Domain Name Label List, as described in Section\n5.3.3.1 of RFC 9361) from the TMCH test environment.\n\nThe client will connect to the EPP server and will submit `<create>`\ncommands, using domain names present in the TMCH test environment.\n\nThe domain name will be constructed using a label from the DNL, and the\n`minimumRPMS.claimsTLD` input parameter. The client will perform a\nTrademark Claims `<check>` command beforehand to obtain the claim key, and\nwill then synthesise a trademark claims acknowledgement. The server\n**MUST** respond with a 1000 or 10001 response.\n\nOnce the `<create>` commands have been processed, the client will then\nperform `<info>` commands to confirm that the domains have been created and\nthat the submitted object properties have been correctly stored.\n\nThe client will also confirm that the server rejects attempts to:\n\n1. create a domain using an invalid claim key;\n2. create a domain using an expired claim key;\n3. create a domain using an acceptance datetime more than 48 hours in the\n  past.\n",
         "Summary" : "Trademark claims domain <create> command test"
      },
      "rdap-01-domainCaseFoldingValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Domain label case folding validation"
      },
      "rdap-02-domainNameValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Domain Name validation"
      },
      "rdap-03-ipv4Validation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "IPv4 address validation"
      },
      "rdap-04-ipv6Validation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "IPv6 address validation"
      },
      "rdap-05-stdRdapAsEventActorValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "asEventActor Validation"
      },
      "rdap-06-stdRdapConformanceValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "RDAP Conformance validation"
      },
      "rdap-07-stdRdapDomainLookupValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Domain Lookup Validation"
      },
      "rdap-08-stdRdapEntitiesValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Entities validation"
      },
      "rdap-09-stdRdapEntityLookupValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Entity lookup validation"
      },
      "rdap-10-stdRdapErrorResponseBodyValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Error Response Body"
      },
      "rdap-11-stdRdapEventsValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Events Validation"
      },
      "rdap-12-stdRdapHelpValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Help validation"
      },
      "rdap-13-stdRdapIpAddressesValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "IP Addresses Validation"
      },
      "rdap-14-stdRdapLanguageIdentifierValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Language Identifier Validation"
      },
      "rdap-15-stdRdapLdhNameValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "LDH name"
      },
      "rdap-16-stdRdapLinksValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Links validation"
      },
      "rdap-17-stdRdapNameserverLookupValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Nameserver lookup validation"
      },
      "rdap-18-stdRdapNameserversSearchValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "RFC7159RDAP_RFCsNameservers search validation"
      },
      "rdap-19-stdRdapNoticesRemarksValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Notices and Remarks Validation"
      },
      "rdap-20-stdRdapPort43WhoisServerValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Port 43 WHOIS Server"
      },
      "rdap-21-stdRdapPublicIdsValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Public IDs validation"
      },
      "rdap-22-stdRdapRolesValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Roles validation"
      },
      "rdap-23-stdRdapSecureDnsValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Secure DNS validation"
      },
      "rdap-24-stdRdapStatusValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Status validation"
      },
      "rdap-25-stdRdapUnicodeNameValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "RFC7159RDAP_RFCsIDNA_RFCsUnicode name"
      },
      "rdap-26-stdRdapVariantsValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Variants validation"
      },
      "rdap-27-webUriValidation" : {
         "Description" : "This test case comes from the RDAP Conformance Tool. For more information, see\n<https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf>.\n",
         "Maturity" : "GAMMA",
         "Summary" : "Web URI validation"
      },
      "rde-01" : {
         "Description" : "* The deposit filename **MUST** conform to the format specified in the RA.\n* The type of the deposit **MUST** be `FULL`.\n* The TLD in the filename **MUST** be present in the list of TLDs\n  associated with the test.\n",
         "Input-Parameters" : null,
         "Maturity" : "BETA",
         "Summary" : "validate deposit filename format"
      },
      "rde-02" : {
         "Description" : "The PGP signature **MUST** be valid for the deposit file and the RSP's\nkey.\n",
         "Input-Parameters" : [
            "rde.publicKey",
            "rde.signatureFile"
         ],
         "Maturity" : "BETA",
         "Summary" : "validate signature over deposit file"
      },
      "rde-03" : {
         "Description" : "It **MUST** be possible to decrypt the deposit file using the RST key. The\nPGP public key for which the deposit **MUST** be encrypted may be found in\nthe URL specified by the `rde.encryptionKey` resource.\n",
         "Input-Parameters" : null,
         "Maturity" : "BETA",
         "Resources" : [
            "rde.encryptionKey"
         ],
         "Summary" : "decrypt deposit file(s)"
      },
      "rde-04" : {
         "Description" : "* XML deposit files **MUST** be well-formed and validate against the XML\n  schema.\n* CSV files **MUST** conform to RFC 4180.\n* Deposits **MUST NOT** contain a mix of XML and CSV files for the deposit\n  contents.\n",
         "Input-Parameters" : null,
         "Maturity" : "BETA",
         "Summary" : "validate XML/CSV"
      },
      "rde-05" : {
         "Description" : "The header object **MUST** reference the correct object XML namespace\nURIs.\n\nThe correct URIs is determined by the `general.minimalPublicDataSet` and\n`epp.hostModel` input parameters.\n\nAll expected URIs **MUST** be present in the header, and the header **MUST\nNOT** contain any unexpected URIs.\n",
         "Input-Parameters" : null,
         "Maturity" : "BETA",
         "Summary" : "validate object types"
      },
      "rde-06" : {
         "Description" : "The number of each type of object **MUST** match the number of objects\nactually present in the deposit file.\n",
         "Input-Parameters" : null,
         "Maturity" : "BETA",
         "Summary" : "validate object counts"
      },
      "rde-07" : {
         "Description" : "Domain objects (whether CSV or XML) **MUST** have the required object\nproperties, and the values of those object properties **MUST** be\nwell-formed.\n\nThe required properties are:\n\n* `<domain:name>`\n* `<domain:roid>` (which **MUST** have a repository ID registered with\n  IANA)\n* at least one `<domain:status>` element\n* `<domain:registrant>` (if `general.minimalPublicDataSet` is `false`)\n* `<domain:clID>` (sponsoring registrar ID)\n* `<domain:crDate>` (creation date)\n* `<domain:exDate>` (expiry date)\n\nContact, host and registrar objects (including optional objects such as\nadmin and tech contacts) which are referenced in domain objects **MUST**\nbe present in the deposit.\n",
         "Input-Parameters" : null,
         "Maturity" : "BETA",
         "Summary" : "validate domain objects"
      },
      "rde-08" : {
         "Description" : "Host objects (whether CSV or XML) **MUST** have the required object\nproperties, and the values of those object properties **MUST** be\nwell-formed.\n\nThe required properties are:\n\n* `<host:name>`\n* `<host:roid>` (which **MUST** have a repository ID registered with\n  IANA)\n* at least one `<domain:status>` element\n* one or more `<addr>` elements (if the host name is subordinate to\n  the TLD)\n* `<host:clID>` (sponsoring registrar ID)\n\nIf the applicant uses the host attribute model, then this test will be\nskipped.\n",
         "Input-Parameters" : null,
         "Maturity" : "BETA",
         "Summary" : "validate host objects (if applicable)"
      },
      "rde-09" : {
         "Description" : "Contact objects (whether CSV or XML) **MUST** have the required object\nproperties, and the values of those object properties **MUST** be\nwell-formed.\n\nThe required properties are:\n\n* `<contact:id>`\n* `<contact:roid>` (which **MUST** have a repository ID registered with\n  IANA)\n* at least one `<contact:status>` element\n* 1-2 `<contact:postalInfo>` elements containing the following:\n    * a \"type\" attribute of \"int\" or \"loc\"\n    * `<contact:name>` element\n    * an `<contact:addr>` element containing the following:\n      * at least one 1 `<contact:street>` element\n      * `<contact:city>` element\n      * `<contact:cc>` element\n* `<contact:voice>`\n* `<contact:email>`\n* `<contact:clID>` (sponsoring registrar ID)\n\nIf the applicant uses the \"thin\" registry model, then this test will be\nskipped.\n",
         "Input-Parameters" : null,
         "Maturity" : "BETA",
         "Summary" : "validate contact objects (if applicable)"
      },
      "rde-10" : {
         "Description" : "Registrar objects (whether CSV or XML) **MUST** have the required object\nproperties, and the values of those object properties **MUST** be\nwell-formed.\n\nThe required properties are:\n\n* `<rdeRegistrar:id>`\n* `<rdeRegistrar:name>`\n* `<rdeRegistrar:gurid>` (IANA ID)\n",
         "Input-Parameters" : null,
         "Maturity" : "BETA",
         "Summary" : "validate registrar objects"
      },
      "rde-11" : {
         "Description" : "IDN table objects (whether CSV or XML) **MUST** have the required object\nproperties, and the values of those object properties **MUST** be\nwell-formed.\n\nAll IDN table objects present in the deposit **MUST** correspond to IDN\ntables approved for the TLD, and all approved tables **MUST** have a\ncorresponding object in the deposit.\n",
         "Input-Parameters" : null,
         "Maturity" : "BETA",
         "Summary" : "validate IDN table objects (if applicable)"
      },
      "rde-12" : {
         "Description" : "NNDN table objects (whether CSV or XML) **MUST** have the required object\nproperties, and the values of those object properties **MUST** be\nwell-formed.\n\nThe `aName` property of NNDN objects **MUST NOT** match the `name`\nproperty of a domain object.\n",
         "Maturity" : "BETA",
         "Summary" : "validate NNDN objects"
      },
      "rde-13" : {
         "Description" : "The EPP Parameters object **MUST** match the `<greeting>` element returned\nby the EPP server.\n",
         "Input-Parameters" : [
            "epp.hostName",
            "epp.clid01",
            "epp.pwd01",
            "epp.serverIssuedClientCertificate01"
         ],
         "Maturity" : "BETA",
         "Resources" : [
            "epp.clientCertificate",
            "epp.clientCSR"
         ],
         "Summary" : "validate EPP parameters object"
      },
      "rde-14" : {
         "Description" : "The object policies included in the `<rdePolicy:policy>` object **MUST**\nconform to the Registration Data Policy and the applicable data model.\n\n* If the `general.minimalPublicDataSet` input parameter is `true`, then\n  contact objects **MUST NOT** be present in the deposit.\n* If the `epp.hostModel` input parameter is `attributes`, then\n  host objects **MUST NOT** be present in the deposit.\n",
         "Maturity" : "BETA",
         "Summary" : "validate policy object (if applicable)"
      },
      "srsgw-01" : {
         "Dependencies" : null,
         "Description" : "This test confirms that the SRS Gateway EPP system is reachable over IPv4\nand IPv6.\n\nThe SRS Gateway EPP server host name will be resolved to obtain its\nIPv4 and IPv6 addresses. The client will then attempt to connect to TCP\nport 700 on these addresses.\n",
         "Maturity" : "BETA",
         "Summary" : "IPv4 and IPv6 connectivity"
      },
      "srsgw-02" : {
         "Description" : "This test confirms that host objects created in the SRS Gateway EPP system\nare correctly synchronized with the primary registry system.\n\nIf the value of the `epp.hostModel` input parameter is `attributes`, then\nthis test will be skipped.\n\nThe client will connect to the SRS Gateway EPP system, authenticate, and\nsubmit a `<create>` command for a pseudo-randomly generated host name.\nIP address information will be provided if required. The server **MUST**\nrespond with a 1000 or 1001 response. The client will then perform an\n`<info>` command and will capture the response.\n\nIt will then connect to the primary EPP system, authenticate, and perform\nan `<info>` command for the object created in the first step. If the\nserver responds with a 2303 response, it will wait for 30 seconds and\nretry. The server **MUST** respond to the first or second `<info>` command\nwith a 1000 response.\n\nThe two `<info>` responses will then be compared and **MUST** be\nidentical.\n",
         "Maturity" : "BETA",
         "Summary" : "Host <create> synchronization (if applicable)"
      },
      "srsgw-03" : {
         "Description" : "This test confirms that contact objects created in the SRS Gateway EPP\nsystem are correctly synchronized with the primary registry system.\n\nIf the value of the `general.minimalPublicDataSet` input parameter is\n`true`, then this test will be skipped.\n\nThe client will connect to the SRS Gateway EPP system, authenticate, and\nsubmit a `<create>` command for a pseudo-randomly generated contact\nobject. The client will then perform an `<info>` command and will capture\nthe response.\n\nIt will then connect to the primary EPP system, authenticate, and perform\nan `<info>` command for the object created in the first step. If the\nserver responds with a 2303 response, it will wait for 30 seconds and\nretry. The server **MUST** respond to the first or second `<info>` command\nwith a 1000 response.\n\nThe two `<info>` responses will then be compared and **MUST** be\nidentical.\n",
         "Maturity" : "BETA",
         "Summary" : "Contact <create> synchronization (if applicable)"
      },
      "srsgw-04" : {
         "Dependencies" : [
            "srsgw-02",
            "srsgw-03"
         ],
         "Description" : "This test confirms that domain objects created in the SRS Gateway EPP\nsystem are correctly synchronized with the primary registry system.\n\nThe client will connect to the SRS Gateway EPP system, authenticate, and\nsubmit `<create>` commands for a pseudo-randomly generated domain names.\nContact and nameserver objects created in `srsgw-02` and `srsgw-03` will\nbe used if required. The server **MUST** respond with 1000 or 1001\nresponses. The client will then perform `<info>` commands and will capture\nthe responses.\n\nIt will then connect to the primary EPP system, authenticate, and perform\n`<info>` commands for the domains created in the first step. If the\nserver responds with a 2303 response, it will wait for 30 seconds and\nretry. The server **MUST** respond to the first or second `<info>` command\nwith a 1000 response.\n\nThe pairs of `<info>` responses will then be compared and **MUST** be\nidentical.\n",
         "Maturity" : "BETA",
         "Summary" : "Domain <create> synchronization"
      },
      "srsgw-05" : {
         "Dependencies" : [
            "srsgw-04"
         ],
         "Description" : "This test confirms that the expiry dates of domain objects renewed in the\nSRS Gateway EPP system are correctly synchronized with the primary\nregistry system.\n\nThe client will connect to the SRS Gateway EPP system, authenticate, and\nsubmit a `<renew>` command for the domain created in `srsgw-04`. The\nserver **MUST** respond with a 1000 or 1001 response. The client will then\nperform an `<info>` command and will capture the response.\n\nIt will then connect to the primary EPP system, authenticate, and perform\nan `<info>` command for the domain renewed in the first step.\nThe server **MUST** respond with a 1000 response.\n\nThe `<exDate>` element of the two `<info>` responses will then be compared\nand **MUST** be identical.\n",
         "Maturity" : "BETA",
         "Summary" : "Domain <renew> synchronisation"
      },
      "srsgw-06" : {
         "Dependencies" : [
            "srsgw-05"
         ],
         "Description" : "This test confirms that transfer requests submitted in the SRS Gateway EPP\nsystem are correctly synchronized with the primary registry system.\n\nThe client will connect to the SRS Gateway EPP system, authenticate, and\nperform an `<update>` command to specify an authInfo code for the domain\ncreated in `srsgw-04`. The server **MUST** respond with a 1000 or 1001\nresponse.\n\nIt will then reconnect to the SRS Gateway EPP system using the credentials\nof a second registrar account and submit a `<transfer op=\"request\">`\ncommand using the authInfo command set for the domain in the first step.\nThe server **MUST** respond with a 1000 or 1001 response.\n\nIt will then connect to the primary EPP system, authenticate, and perform\nan `<info>` command for the domain. The server **MUST** respond with a\n1000 response.\n\n* if the response to the `<transfer op=\"request\">` command was 1000, then\n  the `<domain:clID>` element **MUST** contain the value of the\n  `srsgw.eppClid01` input parameter.\n* if the response to the `<transfer op=\"request\">` command was 1001, then\n  the domain **MUST** have the `pendingTransfer` status.\n",
         "Maturity" : "BETA",
         "Summary" : "Domain <transfer> synchronisation"
      },
      "srsgw-07" : {
         "Dependencies" : [
            "srsgw-06"
         ],
         "Description" : "This test confirms that transfer request approvals submitted in the SRS\nGateway EPP system are correctly synchronized with the primary registry\nsystem.\n\nIf the response to the `<transfer op=\"request\">` command performed in\n`srsgw-07` was 1000, then this test will be skipped.\n\nThe client will connect to the SRS Gateway EPP system, authenticate, and\nperform an `<transfer op=\"approve\">` command for the domain for which a\ntransfer was requested in `srsgw-04`. The server **MUST** respond with a\n1000 or 1001 response.\n\nIt will then connect to the primary EPP system, authenticate, and perform\nan `<info>` command for the domain. The server **MUST** respond with a\n1000 response. The `<domain:clID>` element **MUST** contain the value of\nthe  `srsgw.eppClid01` input parameter.\n",
         "Maturity" : "BETA",
         "Summary" : "Domain <transfer> approval synchronisation"
      },
      "srsgw-08" : {
         "Dependencies" : [
            "srsgw-07"
         ],
         "Description" : "This test confirms that domain objects deleted in the SRS Gateway EPP\nsystem are correctly synchronized with the primary registry system.\n\nThe client will connect to the SRS Gateway EPP system, authenticate using\nthe credentials provided in `epp.clid02` and `epp.pwd02`, and\nsubmit a `<delete>` command for the domain transferred in `srsgw-07`.\nIf the value of the `general.gracePeriodsSupported` input parameter is\n`false`, the server **MUST** respond with a 1000 response. Otherwise it\n**MUST** respond with a 1001 response.\n\nIt will then connect to the primary EPP system, authenticate, and perform\nan `<info>` command for the domain renewed in the first step.\n\n* if `general.gracePeriodsSupported` is false, the server **MUST**\n  respond to the `<info>` command with a 2303 (\"object does not exist\")\n  result code.\n* If `general.gracePeriodsSupported` is true, the domain object **MUST**\n  have the `pendingDelete` status and have an RGP status of\n  `pendingDeleteRestorable`.\n",
         "Maturity" : "BETA",
         "Summary" : "Domain <delete> synchronisation"
      },
      "srsgw-09" : {
         "Dependencies" : [
            "srsgw-02"
         ],
         "Description" : "This test confirms that host objects updated in the SRS Gateway EPP\nsystem are correctly synchronized with the primary registry system.\n\nIf the value of the `epp.hostModel` input parameter is `attributes`, then\nthis test will be skipped.\n\nThe test client will connect to the SRS Gateway EPP server and perform\n`<update>` commands on the objects created in `srsgw-02`, specifically\nto add and remove status codes and IP addresses. It will then perform\n`<info>` commands on those objects.\n\nThe client will then connect to the primary registry EPP server and\nperform `<info>` commands for those objects.\n\nThe two sets of `<info>` responses **MUST** be identical.\n",
         "Maturity" : "BETA",
         "Summary" : "Host <update> synchronization (if applicable)"
      },
      "srsgw-10" : {
         "Dependencies" : [
            "srsgw-09"
         ],
         "Description" : "This test confirms that host objects deleted in the SRS Gateway EPP\nsystem are correctly synchronized with the primary registry system.\n\nIf the value of the `epp.hostModel` input parameter is `attributes`, then\nthis test will be skipped.\n\nThe test client will connect to the SRS Gateway EPP server and perform\n`<delete>` commands on objects created in `srsgw-02`. The server **MUST**\nrespond with a 1000 response.\n\nThe client will then connect to the primary registry EPP server and\nperform `<info>` commands for those objects. The server **MUST**\nrespond with a 2303 \"object does not exist\" response.\n",
         "Maturity" : "BETA",
         "Summary" : "Host <delete> synchronization (if applicable)"
      },
      "srsgw-11" : {
         "Dependencies" : [
            "srsgw-03"
         ],
         "Description" : "This test confirms that contact objects updated in the SRS Gateway EPP\nsystem are correctly synchronized with the primary registry system.\n\nIf the value of the `general.minimalPublicDataSet` input parameter is\n`true`, then this test will be skipped.\n\nThe test client will connect to the SRS Gateway EPP server and perform\n`<update>` commands on the objects created in `srsgw-03`. It will then\nperform `<info>` commands on those objects.\n\nThe client will then connect to the primary registry EPP server and\nperform `<info>` commands for those objects.\n\nThe two sets of `<info>` responses **MUST** be identical.\n",
         "Maturity" : "BETA",
         "Summary" : "Contact <update> synchronization (if applicable)"
      },
      "srsgw-12" : {
         "Dependencies" : [
            "srsgw-11"
         ],
         "Description" : "This test confirms that contact objects delete in the SRS Gateway EPP\nsystem are correctly synchronized with the primary registry system.\n\nIf the value of the `general.minimalPublicDataSet` input parameter is\n`true`, then this test will be skipped.\n\nThe test client will connect to the SRS Gateway EPP server and perform\n`<delete>` commands on objects created in `srsgw-03`. The server **MUST**\nrespond with a 1000 response.\n\nThe client will then connect to the primary registry EPP server and\nperform `<info>` commands for those objects. The server **MUST**\nrespond with a 2303 \"object does not exist\" response.\n",
         "Maturity" : "BETA",
         "Summary" : "Contact <delete> synchronization (if applicable)"
      },
      "srsgw-13" : {
         "Dependencies" : [
            "srsgw-04"
         ],
         "Description" : "This test confirms that the SRS Gateway's RDAP service provides responses\nto domain lookups that match those of the primary registry RDAP server.\n\nThe test system will perform RDAP queries for some of the objects created\nin `srsgw-04` against both the primary registry RDAP server and the SRS\nGateway RDAP server. After canonicalisation, the responses from each\nserver **MUST** be identical.\n",
         "Maturity" : "BETA",
         "Summary" : "Domain RDAP synchronization"
      },
      "srsgw-14" : {
         "Dependencies" : [
            "srsgw-02"
         ],
         "Description" : "This test confirms that the SRS Gateway's RDAP service provides responses\nto domain lookups that match those of the primary registry RDAP server.\n\nIf the value of the `epp.hostModel` input parameter is `attributes`, then\nthis test will be skipped.\n\nThe test system will perform RDAP queries for some of the objects created\nin `srsgw-02` against both the primary registry RDAP server and the SRS\nGateway RDAP server. After canonicalisation, the JSON responses from each\nserver **MUST** be identical.\n",
         "Maturity" : "BETA",
         "Summary" : "Nameserver RDAP synchronization"
      },
      "srsgw-15" : {
         "Dependencies" : [
            "srsgw-02"
         ],
         "Description" : "This test confirms that the SRS Gateway's RDAP service provides responses\nto registrar (entity) lookups that match those of the primary registry\nRDAP server.\n\nThe test system will perform RDAP queries for some of the objects created\nin `srsgw-04` against the primary registry RDAP server in order to obtain\nthe `handle` property of the entity with the `registrar` role. It will\nthen construct two URLs using this value and the values of the\n`rdap.baseURLs` and `srsgw.rdapBaseURLs` input parameters. It will then\nretrieve those URLs.\n\nAfter canonicalisation, the JSON responses from each server **MUST** be\nidentical.\n",
         "Maturity" : "BETA",
         "Summary" : "Registrar RDAP synchronization"
      }
   },
   "Test-Plans" : {
      "DNSRSPChangeTest" : {
         "Description" : "A Registry Operator may apply to ICANN to change a Material Subcontracting\nArrangement (MSA) and appoint a new provider of authoritative DNS services\ninstead of or in addition to any existing provider(s).\n\nBefore this change can be approved, the new DNS provider **MUST** complete\ntesting to ensure their systems comply with the technical and operational\nrequirements of the Registry Agreement.\n\nThe DNS RSP Change Test uses the DNS test suite only.\n\n**Note on test environment:** this is a \"business as usual\" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.\n\n# Pass/fail criteria\n\nAs with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.\n",
         "Name" : "DNS RSP Change Test",
         "Order" : "3",
         "Test-Suites" : [
            "StandardDNS",
            "StandardDNSSEC"
         ]
      },
      "DNSRSPEvaluationTest" : {
         "Description" : "DNS RSPs provide primary or secondary authoritative DNS services.\nTherefore, this test plan only covers the DNS area.\n\nRSPs wishing to offer DNSSEC services in addition to authoritative DNS\nwill also be evaluated using the DNSSEC RSP Evaluation Test below.\n\n**Note on test environment:** this test is designed to be used as part of the RSP evaluation program. Therefore, input parameters **MAY** be provided the relate to a test, staging or OT&E environment.\n\n# Pass/fail criteria\n\nAs with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.\n",
         "Name" : "DNS RSP Evaluation Test",
         "Order" : "8",
         "Test-Suites" : [
            "StandardDNS"
         ]
      },
      "DNSSECRSPEvaluationTest" : {
         "Description" : "DNSSEC RSPs provide signing of TLD zone files as a service. They do not\nprovide primary or secondary authoritative DNS services.\n\nRSPs wishing to offer DNSSEC services in addition to authoritative DNS\nwill also be evaluated using the DNSSEC RSP Evaluation Test below.\n\n**Note on test environment:** this test is designed to be used as part of the RSP evaluation program. Therefore, input parameters **MAY** be provided the relate to a test, staging or OT&E environment.\n\nAs with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.\n",
         "Name" : "DNSSEC RSP Evaluation Test",
         "Order" : "9",
         "Test-Suites" : [
            "StandardDNSSEC",
            "DNSSECOperations"
         ]
      },
      "MainRSPEvaluationTest" : {
         "Description" : "The Main RSP is responsible for the creation and maintenance of domain\nname registrations in a Shared Registration System (SRS). This encompasses\nthe lifecycle of a domain name registration using domain registrars and\nprotocols such as the Extensible Provisioning Protocol (EPP) and adherence\nto policies regarding the use and transparency domain name registrations\nthrough reporting, the Registration Data Access Protocol (RDAP), and other\nmechanisms.\n\n**Note on test environment:** this test is designed to be used as part of the RSP evaluation program. Therefore, input parameters **MAY** be provided the relate to a test, staging or OT&E environment.\n\n# Pass/fail criteria\n\nAs with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.\n",
         "Name" : "Main RSP Evaluation Test",
         "Order" : "7",
         "Test-Suites" : [
            "StandardEPP",
            "MinimumRPMs",
            "StandardRDAP",
            "StandardRDE"
         ]
      },
      "RSPEvaluationIDNTest" : {
         "Description" : "This test plan is identical to the Standard IDN Test, but is intended\nsolely for use by the RSP evaluation program.\n\n**Note on test environment:** this is a \"business as usual\" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.\n\n# Pass/fail criteria\n\nAs with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.\n",
         "Name" : "IDN Test (RSP Evaluation)",
         "Order" : "5",
         "Test-Suites" : [
            "StandardIDN"
         ]
      },
      "SRSGatewayRSPTest" : {
         "Description" : "SRS Gateway RSPs provide a proxy between a subset of Registrars and the\nRegistry. It uses a local cache to speed up EPP query commands, but\nforwards all EPP transform commands to the primary registry system. TLD\nregistries need to deploy a proxy setup in order to operate in certain\nmarkets worldwide.\n\nThe [SRS Gateway test suite](#Test-Suite-StandardSRSGateway) requires\naccess to a primary registry system that is logically independent of the\nSRS Gateway system, and details of the primary registry system are\nrequired as input parameters. RSPs wishing to offer SRS gateway services\n**MUST** identify such a primary registry system, which **MUST** be\nindependent of the SRS gateway system, and MAY be operated by a third\nparty.\n\n**Note on test environment:** this test is designed to be used as part of the RSP evaluation program. Therefore, input parameters **MAY** be provided the relate to a test, staging or OT&E environment.\n\n# Pass/fail criteria\n\nAs with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.\n",
         "Name" : "SRS Gateway RSP Evaluation Test",
         "Order" : "10",
         "Test-Suites" : [
            "StandardSRSGateway"
         ]
      },
      "SRSGatewayTest" : {
         "Description" : "An SRS Gateway service is a Shared Registry System implementation that\nacts as a proxy between a subset of Registrars and the Registry. It uses\na local cache to speed up EPP query commands, but forwards all EPP\ntransform commands to the primary registry system. TLD registries need to\ndeploy a proxy setup in order to operate in certain markets worldwide.\n\nThe purpose of an SRS Gateway Test is to verify that the Registry\nOperator’s proxy setup operates in accordance with the technical and\noperational criteria for EPP systems described in the gTLD Applicant\nGuidebook (AGB). Furthermore, it **MUST** keep its own database\nsynchronized with that of the TLD registry.\n\nThe SRS Gateway Test Change Test uses the SRS gateway test suite only.\n\n**Note on test environment:** this is a \"business as usual\" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.\n\n# Pass/fail criteria\n\nAs with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.\n",
         "Name" : "SRS Gateway Test",
         "Order" : "6",
         "Test-Suites" : [
            "StandardSRSGateway",
            "SRSGatewayIntegrationTest"
         ]
      },
      "StandardIDNTest" : {
         "Description" : "A Registry Operator may apply to ICANN to amend its Registry Agreement\nto offer new scripts and/or languages for Internationalized Domain Names.\n\nThe purpose of an IDN RST test is to verify that the Registry Operator’s\nregistry system handles IDN registrations in accordance with the\nsubmitted policy statements and IDN tables.\n\nThe IDN Test uses the IDN test suite only.\n\n**Note on test environment:** this is a \"business as usual\" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.\n\n# Pass/fail criteria\n\nAs with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.\n",
         "Name" : "Standard IDN Test",
         "Order" : "4",
         "Test-Suites" : [
            "StandardIDN"
         ]
      },
      "StandardPreDelegationTest" : {
         "Description" : "The purpose of the Pre-Delegation Test is to verify that the applicant has\nmet its commitment to establish registry operations in accordance with the\ntechnical and operational criteria described in the gTLD Applicant\nGuidebook (AGB). Each applicant will be required to complete PDT as a\nprerequisite to delegation into the root zone.\n\nThe Pre-Delegation Test covers all critical registry services and IDNs,\nand therefore uses all test suites.\n\n**Note on test environment:** this is a \"business as usual\" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.\n\n# Pass/fail criteria\n\nAs with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.\n",
         "Name" : "Pre-Delegation Test",
         "Order" : "1",
         "Test-Suites" : [
            "StandardDNS",
            "StandardDNSSEC",
            "StandardEPP",
            "StandardRDAP",
            "StandardIDN",
            "StandardRDE",
            "StandardIntegrationTest"
         ]
      },
      "StandardRSPChangeTest" : {
         "Description" : "A Registry Operator may apply to ICANN to change a Material Subcontracting\nArrangement (MSA) and appoint a new Registry Services Provider. Before\nthis change can be approved, the new RSP **MUST** complete Registry System\nTesting to ensure their systems comply with the technical and operational\nrequirements of the Registry Agreement.\n\nThe RSP Change Test covers all critical registry services and IDNs, and\ntherefore uses all test suites.\n\n**Note on test environment:** this is a \"business as usual\" test, designed to test a soon-to-be or already delegated TLD. Therefore, all input parameters provided **MUST** relate to the production registry environment.\n\n# Pass/fail criteria\n\nAs with all other [test plans](#test-plans), for this test to pass, **all** the listed test cases **MUST** pass: if **any** fail, then the test as a whole will fail.\n",
         "Name" : "RSP Change Test",
         "Order" : "2",
         "Test-Suites" : [
            "StandardDNS",
            "StandardDNSSEC",
            "StandardEPP",
            "StandardIDN",
            "StandardRDAP",
            "StandardRDE",
            "StandardIntegrationTest"
         ]
      }
   },
   "Test-Suites" : {
      "DNSSECOperations" : {
         "Description" : "This test suite verifies the ability of an RSP to carry out standard\nDNSSEC operational procedures while maintaining a chain of trust to the\nparent zone.\n\n# Pass/fail criteria\n\nAs with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.\n",
         "Name" : "DNSSEC Operations",
         "Order" : "8",
         "Resources" : null,
         "Test-Cases" : "^dnssecOps"
      },
      "MinimumRPMs" : {
         "Description" : "This test suite verifies an RSP's support for the minimum Rights\nProtection Mechanisms (RPMs), and the Launch Extension (RFC 8334).\n\n# Pass/fail criteria\n\nAs with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.\n",
         "Input-Parameters" : [
            "epp.hostName",
            "epp.serverIssuedClientCertificate01",
            "epp.clid01",
            "epp.pwd01",
            "epp.clid02",
            "epp.pwd02",
            "epp.serverIssuedClientCertificate02",
            "minimumRPMS.sunriseModels",
            "minimumRPMS.sunriseTLD",
            "minimumRPMS.claimsTLD"
         ],
         "Name" : "Minimum Rights Protection Mechanisms (RPMs)",
         "Order" : "9",
         "Test-Cases" : "^minimumRPMs-"
      },
      "StandardDNS" : {
         "Description" : "The DNS test suite validates the authoritative DNS services for the TLD\nor RSP.\n\nThe DNS test suite is derived from the test plans in version\n**v2023.1.4\n  ** of [Zonemaster](https://github.com/zonemaster). Test\ncase IDs from this document can be mapped to the Zonemaster test IDs by\nremoving the `dns-` prefix.\n\nSince Zonemaster is designed to perform testing of domain names anywhere in the DNS hierarchy, not all Zonemaster tests are applicable for TLDs and may not be listed in the test suites in this document.\n\n# Testing of Anycast networks using multiple vantage points\n\nIn order to test anycast networks without requiring RSPs to provide the\nunicast adresses of their nodes, tests carried out over the network will\nbe performed from multiple vantage points. All vantage points **MUST**\nreceive the same response in order for the tests to pass.\n\n# Pass/fail criteria\n\nAs with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.\n\nUnless stated otherwise, the pass/fail criteria for the test cases in this suite are the same as those defined in the Zonemaster documentation: that is, if Zonemaster reports that a test case has an `ERROR` or `CRITICAL` result, then the corresponding test case in this suite will fail. `INFO`, `NOTICE` and `WARNING` results will not result in a failed test case. Error codes in this suite are prefixed with `ZM_` which map onto the message tags used by Zonemaster.\n",
         "Input-Parameters" : [
            "dns.nameservers"
         ],
         "Name" : "Authoritative DNS Service",
         "Order" : "1",
         "Resources" : null,
         "Test-Cases" : "^dns-"
      },
      "StandardDNSSEC" : {
         "Description" : "The DNSSEC test suite validates the DNSSEC signing service for the TLD or\nRSP.\n\nThe DNSSEC test suite is derived from the test plans in version\n**v2023.1.4\n  ** of [Zonemaster](https://github.com/zonemaster). Test\ncase IDs from this document can be mapped to the Zonemaster test IDs by\nremoving the hyphen-minus.\n\nSince Zonemaster is designed to perform testing of domain names anywhere in the DNS hierarchy, not all Zonemaster tests are applicable for TLDs and may not be listed in the test suites in this document.\n\n# Pass/fail criteria\n\nAs with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.\n\nUnless stated otherwise, the pass/fail criteria for the test cases in this suite are the same as those defined in the Zonemaster documentation: that is, if Zonemaster reports that a test case has an `ERROR` or `CRITICAL` result, then the corresponding test case in this suite will fail. `INFO`, `NOTICE` and `WARNING` results will not result in a failed test case. Error codes in this suite are prefixed with `ZM_` which map onto the message tags used by Zonemaster.\n",
         "Input-Parameters" : [
            "dns.nameservers",
            "dnssec.dsRecords"
         ],
         "Name" : "DNS Security Extensions (DNSSEC)",
         "Order" : "2",
         "Resources" : null,
         "Test-Cases" : "^dnssec-"
      },
      "StandardEPP" : {
         "Description" : "The EPP test suite validates the EPP service of the TLD or RSP. It\nverifies that the EPP server properly implements the query and transform\ncommands specified for domain names (and optionally host and contact\nobjects) and the mandatory extensions.\n\n# Pass/fail criteria\n\nAs with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.\n",
         "Errors" : [
            "EPP_DNS_RESOLUTION_ERROR",
            "EPP_SERVICE_PORT_UNREACHABLE",
            "EPP_TLS_CONNECTION_ERROR",
            "EPP_LOGIN_ERROR",
            "EPP_XML_PARSE_ERROR",
            "EPP_GENERIC_COMMAND_ERROR",
            "EPP_SCHEMA_VALIDATION_ERROR"
         ],
         "Input-Parameters" : [
            "general.gracePeriodsSupported",
            "general.minimalPublicDataSet",
            "epp.clid01",
            "epp.pwd01",
            "epp.serverIssuedClientCertificate01",
            "epp.clid02",
            "epp.pwd02",
            "epp.serverIssuedClientCertificate02",
            "epp.hostModel",
            "epp.hostName",
            "epp.registeredNames"
         ],
         "Name" : "Extensible Provisioning Protocol (EPP)",
         "Order" : "4",
         "Resources" : [
            "epp.clientACL",
            "epp.clientCSR",
            "epp.clientCertificate"
         ],
         "Test-Cases" : "^epp-"
      },
      "StandardIDN" : {
         "Description" : "The RDE test suite validates the IDN table(s) for a TLD or RSP, including\ncompliance with specifications for variant labels at the top- or second-\nlevel, and conformance with the IDN Guidelines.\n\n# Pass/fail criteria\n\nAs with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.\n",
         "Input-Parameters" : [
            "epp.hostName",
            "epp.clid01",
            "epp.pwd01",
            "epp.serverIssuedClientCertificate01",
            "epp.serverIssuedClientCertificate02",
            "epp.clid02",
            "epp.pwd02"
         ],
         "Name" : "Internationalized Domain Names (IDN)",
         "Order" : "6",
         "Resources" : [
            "epp.clientACL",
            "epp.clientCSR",
            "epp.clientCertificate"
         ],
         "Test-Cases" : "^idn-"
      },
      "StandardIntegrationTest" : {
         "Description" : "This test suite verifies that the critical registry services of the TLD\nare properly integrated and functioning within the requirements of the\nService Level Agreement.\n\n# Pass/fail criteria\n\nAs with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.\n",
         "Name" : "Standard Integration Test",
         "Order" : "10",
         "Resources" : null,
         "Test-Cases" : "^integration-"
      },
      "StandardRDAP" : {
         "Description" : "The RDAP test suite validates the RDAP service of the TLD or RSP.\n\nThe RDAP test suite is derived from the test specification of the [RDAP\nConformance Tool](https://github.com/icann/rdap-conformance-tool/blob/master/doc/RDAPConformanceToolSpecifications.pdf).\nAs with the DNS and DNSSEC tests, the test IDs can be mapped to the test\nIDs in this document by removing the `rdap-NN-` prefix.\n\n# Pass/fail criteria\n\nAs with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.\n",
         "Input-Parameters" : [
            "rdap.baseURLs",
            "rdap.testDomains",
            "rdap.testEntities",
            "rdap.testNameservers"
         ],
         "Name" : "Registration Data Access Protocol (RDAP)",
         "Order" : "3",
         "Resources" : null,
         "Test-Cases" : "^rdap-"
      },
      "StandardRDE" : {
         "Description" : "The RDE test suite validates Registry Data Escrow deposits generated for\nthe TLD or RSP. These deposits **MUST** comply with the specifications in\nthe Registry Agreement and with RFC 8909 and RFC 9022.\n\n# Pass/fail criteria\n\nAs with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.\n",
         "Input-Parameters" : [
            "rde.depositFile"
         ],
         "Name" : "Registry Data Escrow (RDE)",
         "Order" : "5",
         "Test-Cases" : "^rde-"
      },
      "StandardSRSGateway" : {
         "Description" : "The SRS Gateway test suite validates the conformance of the Gateway\nregistry infrastructure of a TLD or RSP, and the synchronisation between\nprimary and gateway systems.\n\n# Pass/fail criteria\n\nAs with all other [test suites](#test-suites), for this test suite to pass **all** the listed test cases **MUST** pass: if **any** fail, then the suite as a whole will fail.\n",
         "Input-Parameters" : [
            "epp.hostName",
            "epp.clid01",
            "epp.pwd01",
            "epp.serverIssuedClientCertificate01",
            "epp.clid02",
            "epp.pwd02",
            "epp.serverIssuedClientCertificate02",
            "srsgw.eppHostName",
            "srsgw.serverIssuedClientCertificate01",
            "srsgw.eppClid01",
            "srsgw.eppPwd01",
            "srsgw.eppClid02",
            "srsgw.eppPwd02",
            "srsgw.serverIssuedClientCertificate02",
            "srsgw.rdapBaseURLs",
            "rdap.baseURLs"
         ],
         "Name" : "SRS Gateway",
         "Order" : "7",
         "Resources" : [
            "epp.clientACL",
            "epp.clientCSR",
            "epp.clientCertificate"
         ],
         "Test-Cases" : "^srsgw-"
      }
   },
   "Version" : "3.0.200"
}
